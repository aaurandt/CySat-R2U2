
OBC_SDK_r2u2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017b38  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ebc  08017ce8  08017ce8  00027ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08018ba4  08018ba4  00028ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08018ba8  08018ba8  00028ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000240  20000000  08018bac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00030240  2**0
                  CONTENTS
  7 .bss          00020684  20000240  20000240  00030240  2**3
                  ALLOC
  8 ._user_heap_stack 00002004  200208c4  200208c4  00030240  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 10 .debug_info   00053970  00000000  00000000  00030270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000088cf  00000000  00000000  00083be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002310  00000000  00000000  0008c4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002060  00000000  00000000  0008e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000e61f  00000000  00000000  00090820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003566b  00000000  00000000  0009ee3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f809e  00000000  00000000  000d44aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001cc548  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a820  00000000  00000000  001cc59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000b4  00000000  00000000  001d6dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b7  00000000  00000000  001d6e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000240 	.word	0x20000240
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017cd0 	.word	0x08017cd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000244 	.word	0x20000244
 80001ec:	08017cd0 	.word	0x08017cd0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff23 	bl	8000afc <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fc99 	bl	8000618 <__aeabi_dmul>
 8000ce6:	f7ff ff6f 	bl	8000bc8 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc1a 	bl	8000524 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fc90 	bl	8000618 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fad2 	bl	80002a8 <__aeabi_dsub>
 8000d04:	f7ff ff60 	bl	8000bc8 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <Disable_ADCS>:
bool MAGNETOMETER_FAULT = 0;

/*
 * @brief Disable ADCS
 */
void Disable_ADCS(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
    osMutexWait(ADCS_Active_Mutex, 500);
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <Disable_ADCS+0x28>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00c f8cd 	bl	800cec0 <osMutexWait>
    ADCS_ACTIVE = 0;
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <Disable_ADCS+0x2c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
    osMutexRelease(ADCS_Active_Mutex);
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <Disable_ADCS+0x28>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f00c f915 	bl	800cf60 <osMutexRelease>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20007c78 	.word	0x20007c78
 8000d40:	20000260 	.word	0x20000260

08000d44 <Main_Task>:
bool LOW_POWER_MODE = 0;

/*
 * @brief Main Task/Thread
 */
void Main_Task(void const * argument){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
    debug_printf("Starting Main function.\r\n");
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <Main_Task+0x20>)
 8000d4e:	f002 fc45 	bl	80035dc <debug_printf>
    HAL_Delay(1800000); // Wait 30 minutes
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <Main_Task+0x24>)
 8000d54:	f002 fdf0 	bl	8003938 <HAL_Delay>
    while(1){
        osDelay(10000);
 8000d58:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d5c:	f00c f88f 	bl	800ce7e <osDelay>
 8000d60:	e7fa      	b.n	8000d58 <Main_Task+0x14>
 8000d62:	bf00      	nop
 8000d64:	08017cec 	.word	0x08017cec
 8000d68:	001b7740 	.word	0x001b7740

08000d6c <UHF_Task>:
}

/*
 * @brief main UHF Task/Thread
 */
void UHF_Task(void const * argument){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    debug_printf("Starting UHF function.\r\n");
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <UHF_Task+0x20>)
 8000d76:	f002 fc31 	bl	80035dc <debug_printf>
    HAL_Delay(1800000); // Wait 30 minutes
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <UHF_Task+0x24>)
 8000d7c:	f002 fddc 	bl	8003938 <HAL_Delay>
    while(1){
        osDelay(10000);
 8000d80:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d84:	f00c f87b 	bl	800ce7e <osDelay>
 8000d88:	e7fa      	b.n	8000d80 <UHF_Task+0x14>
 8000d8a:	bf00      	nop
 8000d8c:	08017d08 	.word	0x08017d08
 8000d90:	001b7740 	.word	0x001b7740

08000d94 <ADCS_Task>:
}

/*
 * @brief main ADCS Task/Thread
 */
void ADCS_Task(void const * argument){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
    debug_printf("Starting ADCS function.\r\n");
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <ADCS_Task+0x20>)
 8000d9e:	f002 fc1d 	bl	80035dc <debug_printf>
    HAL_Delay(1800000); // Wait 30 minutes
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <ADCS_Task+0x24>)
 8000da4:	f002 fdc8 	bl	8003938 <HAL_Delay>
    while(1){
        osDelay(10000);
 8000da8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000dac:	f00c f867 	bl	800ce7e <osDelay>
 8000db0:	e7fa      	b.n	8000da8 <ADCS_Task+0x14>
 8000db2:	bf00      	nop
 8000db4:	08017d24 	.word	0x08017d24
 8000db8:	001b7740 	.word	0x001b7740

08000dbc <R2U2_Task>:
}

/*
 * @brief main R2U2 Task/Thread
 */
void R2U2_Task(void const * argument){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 8000dc2:	af02      	add	r7, sp, #8
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	6018      	str	r0, [r3, #0]

    FATFS FatFs; //Fatfs handle
    FRESULT fres; //Result after operations

    fres = f_mount(&FatFs, SD_Path, 1);
 8000dc8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000dcc:	2201      	movs	r2, #1
 8000dce:	49ba      	ldr	r1, [pc, #744]	; (80010b8 <R2U2_Task+0x2fc>)
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f00b f9e3 	bl	800c19c <f_mount>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f

    TL_config("ftm.bin", "fti.bin", "ftscq.bin", "ptm.bin", "pti.bin");
 8000ddc:	4bb7      	ldr	r3, [pc, #732]	; (80010bc <R2U2_Task+0x300>)
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	4bb7      	ldr	r3, [pc, #732]	; (80010c0 <R2U2_Task+0x304>)
 8000de2:	4ab8      	ldr	r2, [pc, #736]	; (80010c4 <R2U2_Task+0x308>)
 8000de4:	49b8      	ldr	r1, [pc, #736]	; (80010c8 <R2U2_Task+0x30c>)
 8000de6:	48b9      	ldr	r0, [pc, #740]	; (80010cc <R2U2_Task+0x310>)
 8000de8:	f00f fc2b 	bl	8010642 <TL_config>
    TL_init();
 8000dec:	f00f fc44 	bl	8010678 <TL_init>
    AT_config("at.bin");
 8000df0:	48b7      	ldr	r0, [pc, #732]	; (80010d0 <R2U2_Task+0x314>)
 8000df2:	f00e ff6b 	bl	800fccc <AT_config>
    AT_init();
 8000df6:	f00e ff74 	bl	800fce2 <AT_init>

    fres = f_mount(NULL, "", 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	49b5      	ldr	r1, [pc, #724]	; (80010d4 <R2U2_Task+0x318>)
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f00b f9cc 	bl	800c19c <f_mount>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f887 339f 	strb.w	r3, [r7, #927]	; 0x39f
    char Under_Volt_Str[10], Short_Circuit_Str[10], Over_Temp_Str[10];
    char Num_I2C_Errors_Str[10], Battery_Capacity_Str[10];

    HAL_StatusTypeDef status;

    uint32_t PreviousWakeTime = osKernelSysTick();
 8000e0a:	f00c f801 	bl	800ce10 <osKernelSysTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000e14:	601a      	str	r2, [r3, #0]

    int results[22];
    int index = 0;
 8000e16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
    int time = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
    int full_results[22];
    bool first = 1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f887 33b3 	strb.w	r3, [r7, #947]	; 0x3b3
//    uint32_t endTime;
//    float totalTime;

    while(1){
//        startTime = osKernelSysTick();
        status = READ_EPS_5V_CURRENT(&Five_Bus_Current);
 8000e2a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f884 	bl	8001f3c <READ_EPS_5V_CURRENT>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f887 339e 	strb.w	r3, [r7, #926]	; 0x39e
        if(status == HAL_OK){
 8000e3a:	f897 339e 	ldrb.w	r3, [r7, #926]	; 0x39e
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d110      	bne.n	8000e64 <R2U2_Task+0xa8>
            sprintf(Five_Bus_Current_Str, "%2.6f", Five_Bus_Current);
 8000e42:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb8d 	bl	8000568 <__aeabi_f2d>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8000e56:	49a0      	ldr	r1, [pc, #640]	; (80010d8 <R2U2_Task+0x31c>)
 8000e58:	f012 ff0a 	bl	8013c70 <siprintf>
            signals_vector[0] = Five_Bus_Current_Str; // 5V_Bus_Current
 8000e5c:	4a9f      	ldr	r2, [pc, #636]	; (80010dc <R2U2_Task+0x320>)
 8000e5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000e62:	6013      	str	r3, [r2, #0]
        }
        status = READ_EPS_3V_CURRENT(&Three_Bus_Current);
 8000e64:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 f835 	bl	8001ed8 <READ_EPS_3V_CURRENT>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 339e 	strb.w	r3, [r7, #926]	; 0x39e
        if(status == HAL_OK){
 8000e74:	f897 339e 	ldrb.w	r3, [r7, #926]	; 0x39e
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d110      	bne.n	8000e9e <R2U2_Task+0xe2>
            sprintf(Three_Bus_Current_Str, "%2.6f", Three_Bus_Current);
 8000e7c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fb70 	bl	8000568 <__aeabi_f2d>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8000e90:	4991      	ldr	r1, [pc, #580]	; (80010d8 <R2U2_Task+0x31c>)
 8000e92:	f012 feed 	bl	8013c70 <siprintf>
            signals_vector[4] = Three_Bus_Current_Str; // 3.3V_Bus_Current
 8000e96:	4a91      	ldr	r2, [pc, #580]	; (80010dc <R2U2_Task+0x320>)
 8000e98:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000e9c:	6113      	str	r3, [r2, #16]
        }
        status = READ_EPS_INPUT_CONDITION(&input_conditions);
 8000e9e:	f507 73b3 	add.w	r3, r7, #358	; 0x166
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 f982 	bl	80021ac <READ_EPS_INPUT_CONDITION>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f887 339e 	strb.w	r3, [r7, #926]	; 0x39e
        if(status == HAL_OK){
 8000eae:	f897 339e 	ldrb.w	r3, [r7, #926]	; 0x39e
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d12f      	bne.n	8000f16 <R2U2_Task+0x15a>
            signals_vector[3] = ((input_conditions & 0x0001)==0x0001) ? "1" : "0"; // LUP_5V_Bus_Enabled
 8000eb6:	f507 73b3 	add.w	r3, r7, #358	; 0x166
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <R2U2_Task+0x10c>
 8000ec4:	4b86      	ldr	r3, [pc, #536]	; (80010e0 <R2U2_Task+0x324>)
 8000ec6:	e000      	b.n	8000eca <R2U2_Task+0x10e>
 8000ec8:	4b86      	ldr	r3, [pc, #536]	; (80010e4 <R2U2_Task+0x328>)
 8000eca:	4a84      	ldr	r2, [pc, #528]	; (80010dc <R2U2_Task+0x320>)
 8000ecc:	60d3      	str	r3, [r2, #12]
            signals_vector[7] = ((input_conditions & 0x0002)==0x0002) ? "1" : "0"; // LUP_3.3V_Bus_Enabled
 8000ece:	f507 73b3 	add.w	r3, r7, #358	; 0x166
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <R2U2_Task+0x124>
 8000edc:	4b80      	ldr	r3, [pc, #512]	; (80010e0 <R2U2_Task+0x324>)
 8000ede:	e000      	b.n	8000ee2 <R2U2_Task+0x126>
 8000ee0:	4b80      	ldr	r3, [pc, #512]	; (80010e4 <R2U2_Task+0x328>)
 8000ee2:	4a7e      	ldr	r2, [pc, #504]	; (80010dc <R2U2_Task+0x320>)
 8000ee4:	61d3      	str	r3, [r2, #28]
            signals_vector[1] = ((input_conditions & 0x0004)==0x0004) ? "1" : "0"; //5V_Power_Good
 8000ee6:	f507 73b3 	add.w	r3, r7, #358	; 0x166
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <R2U2_Task+0x13c>
 8000ef4:	4b7a      	ldr	r3, [pc, #488]	; (80010e0 <R2U2_Task+0x324>)
 8000ef6:	e000      	b.n	8000efa <R2U2_Task+0x13e>
 8000ef8:	4b7a      	ldr	r3, [pc, #488]	; (80010e4 <R2U2_Task+0x328>)
 8000efa:	4a78      	ldr	r2, [pc, #480]	; (80010dc <R2U2_Task+0x320>)
 8000efc:	6053      	str	r3, [r2, #4]
            signals_vector[5] = ((input_conditions & 0x0008)==0x0008) ? "1" : "0"; //3.3V_Power_Good
 8000efe:	f507 73b3 	add.w	r3, r7, #358	; 0x166
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <R2U2_Task+0x154>
 8000f0c:	4b74      	ldr	r3, [pc, #464]	; (80010e0 <R2U2_Task+0x324>)
 8000f0e:	e000      	b.n	8000f12 <R2U2_Task+0x156>
 8000f10:	4b74      	ldr	r3, [pc, #464]	; (80010e4 <R2U2_Task+0x328>)
 8000f12:	4a72      	ldr	r2, [pc, #456]	; (80010dc <R2U2_Task+0x320>)
 8000f14:	6153      	str	r3, [r2, #20]
        }
        status = READ_EPS_BATT_1_TEMP(&Batt_1_Temp);
 8000f16:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 f87e 	bl	800201c <READ_EPS_BATT_1_TEMP>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f887 339e 	strb.w	r3, [r7, #926]	; 0x39e
        if(status == HAL_OK){
 8000f26:	f897 339e 	ldrb.w	r3, [r7, #926]	; 0x39e
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d110      	bne.n	8000f50 <R2U2_Task+0x194>
            sprintf(Batt_1_Temp_Str, "%3.3f", Batt_1_Temp);
 8000f2e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fb17 	bl	8000568 <__aeabi_f2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8000f42:	4969      	ldr	r1, [pc, #420]	; (80010e8 <R2U2_Task+0x32c>)
 8000f44:	f012 fe94 	bl	8013c70 <siprintf>
            signals_vector[10] = Batt_1_Temp_Str; // Battery_Cell_1_Temp
 8000f48:	4a64      	ldr	r2, [pc, #400]	; (80010dc <R2U2_Task+0x320>)
 8000f4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000f4e:	6293      	str	r3, [r2, #40]	; 0x28
        }
        status = READ_EPS_BATT_2_TEMP(&Batt_2_Temp);
 8000f50:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 f893 	bl	8002080 <READ_EPS_BATT_2_TEMP>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f887 339e 	strb.w	r3, [r7, #926]	; 0x39e
        if(status == HAL_OK){
 8000f60:	f897 339e 	ldrb.w	r3, [r7, #926]	; 0x39e
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d110      	bne.n	8000f8a <R2U2_Task+0x1ce>
            sprintf(Batt_2_Temp_Str, "%3.3f", Batt_2_Temp);
 8000f68:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fafa 	bl	8000568 <__aeabi_f2d>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000f7c:	495a      	ldr	r1, [pc, #360]	; (80010e8 <R2U2_Task+0x32c>)
 8000f7e:	f012 fe77 	bl	8013c70 <siprintf>
            signals_vector[11] = Batt_2_Temp_Str; // Battery_Cell_2_Temp
 8000f82:	4a56      	ldr	r2, [pc, #344]	; (80010dc <R2U2_Task+0x320>)
 8000f84:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000f88:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
        status = READ_EPS_BATT_3_TEMP(&Batt_3_Temp);
 8000f8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 f8a8 	bl	80020e4 <READ_EPS_BATT_3_TEMP>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f887 339e 	strb.w	r3, [r7, #926]	; 0x39e
        if(status == HAL_OK){
 8000f9a:	f897 339e 	ldrb.w	r3, [r7, #926]	; 0x39e
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d110      	bne.n	8000fc4 <R2U2_Task+0x208>
            sprintf(Batt_3_Temp_Str, "%3.3f", Batt_3_Temp);
 8000fa2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fadd 	bl	8000568 <__aeabi_f2d>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8000fb6:	494c      	ldr	r1, [pc, #304]	; (80010e8 <R2U2_Task+0x32c>)
 8000fb8:	f012 fe5a 	bl	8013c70 <siprintf>
            signals_vector[12] = Batt_3_Temp_Str; // Battery_Cell_3_Temp
 8000fbc:	4a47      	ldr	r2, [pc, #284]	; (80010dc <R2U2_Task+0x320>)
 8000fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
        }
        status = READ_EPS_BATT_4_TEMP(&Batt_4_Temp);
 8000fc4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f001 f8bd 	bl	8002148 <READ_EPS_BATT_4_TEMP>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f887 339e 	strb.w	r3, [r7, #926]	; 0x39e
        if(status == HAL_OK){
 8000fd4:	f897 339e 	ldrb.w	r3, [r7, #926]	; 0x39e
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d110      	bne.n	8000ffe <R2U2_Task+0x242>
            sprintf(Batt_4_Temp_Str, "%3.3f", Batt_4_Temp);
 8000fdc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fac0 	bl	8000568 <__aeabi_f2d>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8000ff0:	493d      	ldr	r1, [pc, #244]	; (80010e8 <R2U2_Task+0x32c>)
 8000ff2:	f012 fe3d 	bl	8013c70 <siprintf>
            signals_vector[13] = Batt_4_Temp_Str; // Battery_Cell_4_Temp
 8000ff6:	4a39      	ldr	r2, [pc, #228]	; (80010dc <R2U2_Task+0x320>)
 8000ff8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ffc:	6353      	str	r3, [r2, #52]	; 0x34
        }
        status = READ_EPS_OUTPUT_CONDITION1(&output_conditions1);
 8000ffe:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001002:	4618      	mov	r0, r3
 8001004:	f001 f8f7 	bl	80021f6 <READ_EPS_OUTPUT_CONDITION1>
 8001008:	4603      	mov	r3, r0
 800100a:	f887 339e 	strb.w	r3, [r7, #926]	; 0x39e
        if(status == HAL_OK){
 800100e:	f897 339e 	ldrb.w	r3, [r7, #926]	; 0x39e
 8001012:	2b00      	cmp	r3, #0
 8001014:	f040 8091 	bne.w	800113a <R2U2_Task+0x37e>
            signals_vector[14] = ((output_conditions1 & 0x2000)==0x2000) ? "1" : "0"; // Heater_1_Enabled
 8001018:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <R2U2_Task+0x26e>
 8001026:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <R2U2_Task+0x324>)
 8001028:	e000      	b.n	800102c <R2U2_Task+0x270>
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <R2U2_Task+0x328>)
 800102c:	4a2b      	ldr	r2, [pc, #172]	; (80010dc <R2U2_Task+0x320>)
 800102e:	6393      	str	r3, [r2, #56]	; 0x38
            signals_vector[15] = ((output_conditions1 & 0x4000)==0x4000) ? "1" : "0"; // Heater_2_Enabled
 8001030:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <R2U2_Task+0x286>
 800103e:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <R2U2_Task+0x324>)
 8001040:	e000      	b.n	8001044 <R2U2_Task+0x288>
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <R2U2_Task+0x328>)
 8001044:	4a25      	ldr	r2, [pc, #148]	; (80010dc <R2U2_Task+0x320>)
 8001046:	63d3      	str	r3, [r2, #60]	; 0x3c
            signals_vector[16] = ((output_conditions1 & 0x8000)==0x8000) ? "1" : "0"; // Heater_3_Enabled
 8001048:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	b21b      	sxth	r3, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	da01      	bge.n	8001058 <R2U2_Task+0x29c>
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <R2U2_Task+0x324>)
 8001056:	e000      	b.n	800105a <R2U2_Task+0x29e>
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <R2U2_Task+0x328>)
 800105a:	4a20      	ldr	r2, [pc, #128]	; (80010dc <R2U2_Task+0x320>)
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
            signals_vector[6] = ((output_conditions1 & 0x0008)==0x0008) ? "1" : "0"; // 3.3V_Bus_Enabled
 800105e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <R2U2_Task+0x2b4>
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <R2U2_Task+0x324>)
 800106e:	e000      	b.n	8001072 <R2U2_Task+0x2b6>
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <R2U2_Task+0x328>)
 8001072:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <R2U2_Task+0x320>)
 8001074:	6193      	str	r3, [r2, #24]
            signals_vector[8] = ((output_conditions1 & 0x0004)==0x0004) ? "1" : "0"; // BCR_Bus_Enabled
 8001076:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <R2U2_Task+0x2cc>
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <R2U2_Task+0x324>)
 8001086:	e000      	b.n	800108a <R2U2_Task+0x2ce>
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <R2U2_Task+0x328>)
 800108a:	4a14      	ldr	r2, [pc, #80]	; (80010dc <R2U2_Task+0x320>)
 800108c:	6213      	str	r3, [r2, #32]
            signals_vector[9] = ((output_conditions1 & 0x0002)==0x0002) ? "1" : "0"; // Battery_Bus_Enabled
 800108e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <R2U2_Task+0x2e4>
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <R2U2_Task+0x324>)
 800109e:	e000      	b.n	80010a2 <R2U2_Task+0x2e6>
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <R2U2_Task+0x328>)
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <R2U2_Task+0x320>)
 80010a4:	6253      	str	r3, [r2, #36]	; 0x24
            signals_vector[2] = ((output_conditions1 & 0x0010)==0x0010) ? "1" : "0"; // 5V_Bus_Enabled
 80010a6:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d01b      	beq.n	80010ec <R2U2_Task+0x330>
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <R2U2_Task+0x324>)
 80010b6:	e01a      	b.n	80010ee <R2U2_Task+0x332>
 80010b8:	20008230 	.word	0x20008230
 80010bc:	08017d64 	.word	0x08017d64
 80010c0:	08017d40 	.word	0x08017d40
 80010c4:	08017d48 	.word	0x08017d48
 80010c8:	08017d54 	.word	0x08017d54
 80010cc:	08017d5c 	.word	0x08017d5c
 80010d0:	08017d6c 	.word	0x08017d6c
 80010d4:	08017d74 	.word	0x08017d74
 80010d8:	08017d78 	.word	0x08017d78
 80010dc:	200082b0 	.word	0x200082b0
 80010e0:	08017d80 	.word	0x08017d80
 80010e4:	08017d84 	.word	0x08017d84
 80010e8:	08017d88 	.word	0x08017d88
 80010ec:	4ba5      	ldr	r3, [pc, #660]	; (8001384 <R2U2_Task+0x5c8>)
 80010ee:	4aa6      	ldr	r2, [pc, #664]	; (8001388 <R2U2_Task+0x5cc>)
 80010f0:	6093      	str	r3, [r2, #8]
            signals_vector[21] = ((output_conditions1 & 0x0100)==0x0100) ? "1" : "0"; // Payload_Enabled
 80010f2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <R2U2_Task+0x348>
 8001100:	4ba2      	ldr	r3, [pc, #648]	; (800138c <R2U2_Task+0x5d0>)
 8001102:	e000      	b.n	8001106 <R2U2_Task+0x34a>
 8001104:	4b9f      	ldr	r3, [pc, #636]	; (8001384 <R2U2_Task+0x5c8>)
 8001106:	4aa0      	ldr	r2, [pc, #640]	; (8001388 <R2U2_Task+0x5cc>)
 8001108:	6553      	str	r3, [r2, #84]	; 0x54
            signals_vector[22] = ((output_conditions1 & 0x0800)==0x0800) ? "1" : "0"; // UHF_Enabled
 800110a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800110e:	881b      	ldrh	r3, [r3, #0]
 8001110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <R2U2_Task+0x360>
 8001118:	4b9c      	ldr	r3, [pc, #624]	; (800138c <R2U2_Task+0x5d0>)
 800111a:	e000      	b.n	800111e <R2U2_Task+0x362>
 800111c:	4b99      	ldr	r3, [pc, #612]	; (8001384 <R2U2_Task+0x5c8>)
 800111e:	4a9a      	ldr	r2, [pc, #616]	; (8001388 <R2U2_Task+0x5cc>)
 8001120:	6593      	str	r3, [r2, #88]	; 0x58
            signals_vector[23] = ((output_conditions1 & 0x0080)==0x0080) ? "1" : "0"; // Boost_Board_Enabled
 8001122:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <R2U2_Task+0x378>
 8001130:	4b96      	ldr	r3, [pc, #600]	; (800138c <R2U2_Task+0x5d0>)
 8001132:	e000      	b.n	8001136 <R2U2_Task+0x37a>
 8001134:	4b93      	ldr	r3, [pc, #588]	; (8001384 <R2U2_Task+0x5c8>)
 8001136:	4a94      	ldr	r2, [pc, #592]	; (8001388 <R2U2_Task+0x5cc>)
 8001138:	65d3      	str	r3, [r2, #92]	; 0x5c
        }
        status = READ_EPS_UNDER_VOLT_COUNT(&Under_Volt);
 800113a:	f507 73b1 	add.w	r3, r7, #354	; 0x162
 800113e:	4618      	mov	r0, r3
 8001140:	f001 f8c8 	bl	80022d4 <READ_EPS_UNDER_VOLT_COUNT>
 8001144:	4603      	mov	r3, r0
 8001146:	f887 339e 	strb.w	r3, [r7, #926]	; 0x39e
        if(status == HAL_OK){
 800114a:	f897 339e 	ldrb.w	r3, [r7, #926]	; 0x39e
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10d      	bne.n	800116e <R2U2_Task+0x3b2>
            sprintf(Under_Volt_Str, "%d", Under_Volt);
 8001152:	f507 73b1 	add.w	r3, r7, #354	; 0x162
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800115e:	498c      	ldr	r1, [pc, #560]	; (8001390 <R2U2_Task+0x5d4>)
 8001160:	4618      	mov	r0, r3
 8001162:	f012 fd85 	bl	8013c70 <siprintf>
            signals_vector[17] = Under_Volt_Str; // Num_Under_Volt
 8001166:	4a88      	ldr	r2, [pc, #544]	; (8001388 <R2U2_Task+0x5cc>)
 8001168:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
        }
        status = READ_EPS_SHORT_CIRCUIT_COUNT(&Short_Circuit);
 800116e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001172:	4618      	mov	r0, r3
 8001174:	f001 f8d3 	bl	800231e <READ_EPS_SHORT_CIRCUIT_COUNT>
 8001178:	4603      	mov	r3, r0
 800117a:	f887 339e 	strb.w	r3, [r7, #926]	; 0x39e
        if(status == HAL_OK){
 800117e:	f897 339e 	ldrb.w	r3, [r7, #926]	; 0x39e
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10d      	bne.n	80011a2 <R2U2_Task+0x3e6>
            sprintf(Short_Circuit_Str, "%d", Short_Circuit);
 8001186:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001192:	497f      	ldr	r1, [pc, #508]	; (8001390 <R2U2_Task+0x5d4>)
 8001194:	4618      	mov	r0, r3
 8001196:	f012 fd6b 	bl	8013c70 <siprintf>
            signals_vector[18] = Short_Circuit_Str; // Num_Short_Circuit
 800119a:	4a7b      	ldr	r2, [pc, #492]	; (8001388 <R2U2_Task+0x5cc>)
 800119c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011a0:	6493      	str	r3, [r2, #72]	; 0x48
        }
        status = READ_EPS_OVER_TEMP_COUNT(&Over_Temp);
 80011a2:	f507 73af 	add.w	r3, r7, #350	; 0x15e
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 f8de 	bl	8002368 <READ_EPS_OVER_TEMP_COUNT>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f887 339e 	strb.w	r3, [r7, #926]	; 0x39e
        if(status == HAL_OK){
 80011b2:	f897 339e 	ldrb.w	r3, [r7, #926]	; 0x39e
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10d      	bne.n	80011d6 <R2U2_Task+0x41a>
            sprintf(Over_Temp_Str, "%d", Over_Temp);
 80011ba:	f507 73af 	add.w	r3, r7, #350	; 0x15e
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80011c6:	4972      	ldr	r1, [pc, #456]	; (8001390 <R2U2_Task+0x5d4>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f012 fd51 	bl	8013c70 <siprintf>
            signals_vector[19] = Over_Temp_Str; // Num_Over_Temp
 80011ce:	4a6e      	ldr	r2, [pc, #440]	; (8001388 <R2U2_Task+0x5cc>)
 80011d0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
        }

        osMutexWait(ADCS_Active_Mutex, 500);
 80011d6:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <R2U2_Task+0x5d8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011de:	4618      	mov	r0, r3
 80011e0:	f00b fe6e 	bl	800cec0 <osMutexWait>
        signals_vector[20] = (ADCS_ACTIVE ? "1" : "0"); // ADCS_ACTIVE
 80011e4:	4b6c      	ldr	r3, [pc, #432]	; (8001398 <R2U2_Task+0x5dc>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <R2U2_Task+0x434>
 80011ec:	4b67      	ldr	r3, [pc, #412]	; (800138c <R2U2_Task+0x5d0>)
 80011ee:	e000      	b.n	80011f2 <R2U2_Task+0x436>
 80011f0:	4b64      	ldr	r3, [pc, #400]	; (8001384 <R2U2_Task+0x5c8>)
 80011f2:	4a65      	ldr	r2, [pc, #404]	; (8001388 <R2U2_Task+0x5cc>)
 80011f4:	6513      	str	r3, [r2, #80]	; 0x50
        osMutexRelease(ADCS_Active_Mutex);
 80011f6:	4b67      	ldr	r3, [pc, #412]	; (8001394 <R2U2_Task+0x5d8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00b feb0 	bl	800cf60 <osMutexRelease>
        sprintf(Battery_Capacity_Str, "%2.6f", BATTERY_CAPACITY);
 8001200:	4b66      	ldr	r3, [pc, #408]	; (800139c <R2U2_Task+0x5e0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f9af 	bl	8000568 <__aeabi_f2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8001212:	4963      	ldr	r1, [pc, #396]	; (80013a0 <R2U2_Task+0x5e4>)
 8001214:	f012 fd2c 	bl	8013c70 <siprintf>
        signals_vector[24] = Battery_Capacity_Str; // Battery_Capacity
 8001218:	4a5b      	ldr	r2, [pc, #364]	; (8001388 <R2U2_Task+0x5cc>)
 800121a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800121e:	6613      	str	r3, [r2, #96]	; 0x60
        osMutexWait(Low_Power_Mode_Mutex, 500);
 8001220:	4b60      	ldr	r3, [pc, #384]	; (80013a4 <R2U2_Task+0x5e8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001228:	4618      	mov	r0, r3
 800122a:	f00b fe49 	bl	800cec0 <osMutexWait>
        signals_vector[25] = (LOW_POWER_MODE ? "1" : "0"); // Low_Power_Mode
 800122e:	4b5e      	ldr	r3, [pc, #376]	; (80013a8 <R2U2_Task+0x5ec>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <R2U2_Task+0x47e>
 8001236:	4b55      	ldr	r3, [pc, #340]	; (800138c <R2U2_Task+0x5d0>)
 8001238:	e000      	b.n	800123c <R2U2_Task+0x480>
 800123a:	4b52      	ldr	r3, [pc, #328]	; (8001384 <R2U2_Task+0x5c8>)
 800123c:	4a52      	ldr	r2, [pc, #328]	; (8001388 <R2U2_Task+0x5cc>)
 800123e:	6653      	str	r3, [r2, #100]	; 0x64
        osMutexRelease(Low_Power_Mode_Mutex);
 8001240:	4b58      	ldr	r3, [pc, #352]	; (80013a4 <R2U2_Task+0x5e8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f00b fe8b 	bl	800cf60 <osMutexRelease>
        sprintf(Num_I2C_Errors_Str, "%d", NUM_I2C_ERRORS);
 800124a:	4b58      	ldr	r3, [pc, #352]	; (80013ac <R2U2_Task+0x5f0>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001252:	494f      	ldr	r1, [pc, #316]	; (8001390 <R2U2_Task+0x5d4>)
 8001254:	4618      	mov	r0, r3
 8001256:	f012 fd0b 	bl	8013c70 <siprintf>
        signals_vector[26] = Num_I2C_Errors_Str; // I2C_Errors
 800125a:	4a4b      	ldr	r2, [pc, #300]	; (8001388 <R2U2_Task+0x5cc>)
 800125c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001260:	6693      	str	r3, [r2, #104]	; 0x68

        for(int i = 0; i <= 26; i++){
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8001268:	e00d      	b.n	8001286 <R2U2_Task+0x4ca>
            debug_printf("%s, ", signals_vector[i]);
 800126a:	4a47      	ldr	r2, [pc, #284]	; (8001388 <R2U2_Task+0x5cc>)
 800126c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001274:	4619      	mov	r1, r3
 8001276:	484e      	ldr	r0, [pc, #312]	; (80013b0 <R2U2_Task+0x5f4>)
 8001278:	f002 f9b0 	bl	80035dc <debug_printf>
        for(int i = 0; i <= 26; i++){
 800127c:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 8001280:	3301      	adds	r3, #1
 8001282:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8001286:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800128a:	2b1a      	cmp	r3, #26
 800128c:	dded      	ble.n	800126a <R2U2_Task+0x4ae>
        }

        time++;
 800128e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8001292:	3301      	adds	r3, #1
 8001294:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4

        /* Atomics Update */
        AT_update();
 8001298:	f00e fd2a 	bl	800fcf0 <AT_update>

        /* Temporal Logic Update */
        TL_update(results, &index);
 800129c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00f faca 	bl	8010840 <TL_update>

        if(first){
 80012ac:	f897 33b3 	ldrb.w	r3, [r7, #947]	; 0x3b3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <R2U2_Task+0x506>
            debug_printf("\r\n");
 80012b4:	483f      	ldr	r0, [pc, #252]	; (80013b4 <R2U2_Task+0x5f8>)
 80012b6:	f002 f991 	bl	80035dc <debug_printf>
            first = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f887 33b3 	strb.w	r3, [r7, #947]	; 0x3b3
 80012c0:	e057      	b.n	8001372 <R2U2_Task+0x5b6>
        }
        else{
            for (int j = 0; j < 22; j++){
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80012c8:	e00b      	b.n	80012e2 <R2U2_Task+0x526>
              full_results[j] = 1;
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	f8d7 23a8 	ldr.w	r2, [r7, #936]	; 0x3a8
 80012d2:	2101      	movs	r1, #1
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for (int j = 0; j < 22; j++){
 80012d8:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80012dc:	3301      	adds	r3, #1
 80012de:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 80012e2:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80012e6:	2b15      	cmp	r3, #21
 80012e8:	ddef      	ble.n	80012ca <R2U2_Task+0x50e>
            }
            /* Fault Recovery Based on Results */
            for(int i = 0; i < index; i++){
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80012f0:	e01a      	b.n	8001328 <R2U2_Task+0x56c>
                Fault_Recovery(results[i], time);
 80012f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012f6:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 80012fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fe:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 8001302:	4618      	mov	r0, r3
 8001304:	f000 f94e 	bl	80015a4 <Fault_Recovery>
                full_results[results[i]] = 0;
 8001308:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800130c:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8001310:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	2100      	movs	r1, #0
 800131a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for(int i = 0; i < index; i++){
 800131e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8001322:	3301      	adds	r3, #1
 8001324:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8001328:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8001332:	429a      	cmp	r2, r3
 8001334:	dbdd      	blt.n	80012f2 <R2U2_Task+0x536>
            }

            for(int i = 0; i < 21; i++){
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 800133c:	e00e      	b.n	800135c <R2U2_Task+0x5a0>
                debug_printf("%d, ", full_results[i]);
 800133e:	f107 0308 	add.w	r3, r7, #8
 8001342:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8001346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134a:	4619      	mov	r1, r3
 800134c:	481a      	ldr	r0, [pc, #104]	; (80013b8 <R2U2_Task+0x5fc>)
 800134e:	f002 f945 	bl	80035dc <debug_printf>
            for(int i = 0; i < 21; i++){
 8001352:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001356:	3301      	adds	r3, #1
 8001358:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 800135c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8001360:	2b14      	cmp	r3, #20
 8001362:	ddec      	ble.n	800133e <R2U2_Task+0x582>
            }
            debug_printf("%d\r\n", full_results[21]);
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136a:	4619      	mov	r1, r3
 800136c:	4813      	ldr	r0, [pc, #76]	; (80013bc <R2U2_Task+0x600>)
 800136e:	f002 f935 	bl	80035dc <debug_printf>
        }
//        endTime = osKernelSysTick();
//        totalTime = endTime-startTime;
//        totalTime = totalTime * portTICK_PERIOD_MS;
//        debug_printf("Total execution time(ms): %f\r\n", totalTime);
        osDelayUntil(&PreviousWakeTime, 5000); // Delay for 5 seconds
 8001372:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001376:	f241 3188 	movw	r1, #5000	; 0x1388
 800137a:	4618      	mov	r0, r3
 800137c:	f00b fee8 	bl	800d150 <osDelayUntil>
        status = READ_EPS_5V_CURRENT(&Five_Bus_Current);
 8001380:	e553      	b.n	8000e2a <R2U2_Task+0x6e>
 8001382:	bf00      	nop
 8001384:	08017d84 	.word	0x08017d84
 8001388:	200082b0 	.word	0x200082b0
 800138c:	08017d80 	.word	0x08017d80
 8001390:	08017d90 	.word	0x08017d90
 8001394:	20007c78 	.word	0x20007c78
 8001398:	20000260 	.word	0x20000260
 800139c:	20000000 	.word	0x20000000
 80013a0:	08017d78 	.word	0x08017d78
 80013a4:	20007c8c 	.word	0x20007c8c
 80013a8:	20000261 	.word	0x20000261
 80013ac:	2000025c 	.word	0x2000025c
 80013b0:	08017d94 	.word	0x08017d94
 80013b4:	08017d9c 	.word	0x08017d9c
 80013b8:	08017da0 	.word	0x08017da0
 80013bc:	08017da8 	.word	0x08017da8

080013c0 <BatteryCapacity_Task>:
}

/*
 * @brief Task/Thread responsible for calculating battery capacity
 */
void BatteryCapacity_Task(void const * argument){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b092      	sub	sp, #72	; 0x48
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    debug_printf("Starting battery capacity function.\r\n");
 80013c8:	4870      	ldr	r0, [pc, #448]	; (800158c <BatteryCapacity_Task+0x1cc>)
 80013ca:	f002 f907 	bl	80035dc <debug_printf>
    float y_voltage, y_neg_current, y_pos_current;
    float z_voltage, z_neg_current, z_pos_current;
    float total_input_power;
    float total_output_power;

    uint32_t PreviousWakeTime = osKernelSysTick();
 80013ce:	f00b fd1f 	bl	800ce10 <osKernelSysTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	60fb      	str	r3, [r7, #12]

    while(1){
        READ_EPS_INPUT_CONDITION(&input_conditions);
 80013d6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fee6 	bl	80021ac <READ_EPS_INPUT_CONDITION>
        if((input_conditions & 0x20)==0x20){ // Charge Complete
 80013e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <BatteryCapacity_Task+0x32>
            BATTERY_CAPACITY = original_battery_capacity;
 80013ea:	4a69      	ldr	r2, [pc, #420]	; (8001590 <BatteryCapacity_Task+0x1d0>)
 80013ec:	4b69      	ldr	r3, [pc, #420]	; (8001594 <BatteryCapacity_Task+0x1d4>)
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	e027      	b.n	8001442 <BatteryCapacity_Task+0x82>
        }
        else{ // Not Fully Charged
            READ_EPS_5V_CURRENT(&Five_Bus_Current);
 80013f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fda0 	bl	8001f3c <READ_EPS_5V_CURRENT>
            READ_EPS_3V_CURRENT(&Three_Bus_Current);
 80013fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fd69 	bl	8001ed8 <READ_EPS_3V_CURRENT>

            total_output_power = (5*Five_Bus_Current)+(3*Three_Bus_Current);
 8001406:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800140a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800140e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001412:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001416:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800141a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800141e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001422:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            BATTERY_CAPACITY -= total_output_power/3600;
 8001426:	4b5b      	ldr	r3, [pc, #364]	; (8001594 <BatteryCapacity_Task+0x1d4>)
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001430:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8001598 <BatteryCapacity_Task+0x1d8>
 8001434:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	4b55      	ldr	r3, [pc, #340]	; (8001594 <BatteryCapacity_Task+0x1d4>)
 800143e:	edc3 7a00 	vstr	s15, [r3]
        }

        if((input_conditions & 0x40)==0x40){ // Charge in Progress
 8001442:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d066      	beq.n	800151a <BatteryCapacity_Task+0x15a>
            READ_EPS_SOLAR_X_VOLTAGE(&x_voltage);
 800144c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fb7f 	bl	8001b54 <READ_EPS_SOLAR_X_VOLTAGE>
            READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current);
 8001456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fbac 	bl	8001bb8 <READ_EPS_SOLAR_X_NEG_CURRENT>
            READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current);
 8001460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001464:	4618      	mov	r0, r3
 8001466:	f000 fbd9 	bl	8001c1c <READ_EPS_SOLAR_X_POS_CURRENT>

            READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fc06 	bl	8001c80 <READ_EPS_SOLAR_Y_VOLTAGE>
            READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current);
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fc33 	bl	8001ce4 <READ_EPS_SOLAR_Y_NEG_CURRENT>
            READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current);
 800147e:	f107 031c 	add.w	r3, r7, #28
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fc60 	bl	8001d48 <READ_EPS_SOLAR_Y_POS_CURRENT>

            READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage);
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fc8d 	bl	8001dac <READ_EPS_SOLAR_Z_VOLTAGE>
            READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fcba 	bl	8001e10 <READ_EPS_SOLAR_Z_NEG_CURRENT>
            READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current);
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fce7 	bl	8001e74 <READ_EPS_SOLAR_Z_POS_CURRENT>

            total_input_power = (x_voltage*(x_neg_current+x_pos_current));
 80014a6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80014aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80014b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ba:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            total_input_power += (y_voltage*(y_neg_current+y_pos_current));
 80014be:	ed97 7a08 	vldr	s14, [r7, #32]
 80014c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80014d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014da:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            total_input_power += (z_voltage*(z_neg_current+z_pos_current));
 80014de:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80014f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

            BATTERY_CAPACITY += total_input_power/3600;
 80014fe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001502:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001598 <BatteryCapacity_Task+0x1d8>
 8001506:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <BatteryCapacity_Task+0x1d4>)
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001514:	4b1f      	ldr	r3, [pc, #124]	; (8001594 <BatteryCapacity_Task+0x1d4>)
 8001516:	edc3 7a00 	vstr	s15, [r3]
        }
        osMutexWait(Low_Power_Mode_Mutex, 500);
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <BatteryCapacity_Task+0x1dc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001522:	4618      	mov	r0, r3
 8001524:	f00b fccc 	bl	800cec0 <osMutexWait>
        if(BATTERY_CAPACITY < 3){
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <BatteryCapacity_Task+0x1d4>)
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	d503      	bpl.n	8001544 <BatteryCapacity_Task+0x184>
            LOW_POWER_MODE = 1;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <BatteryCapacity_Task+0x1e0>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	e015      	b.n	8001570 <BatteryCapacity_Task+0x1b0>
        }
        else if((LOW_POWER_MODE==1)&(BATTERY_CAPACITY>8)){
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <BatteryCapacity_Task+0x1e0>)
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <BatteryCapacity_Task+0x1d4>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	bfcc      	ite	gt
 800155c:	2301      	movgt	r3, #1
 800155e:	2300      	movle	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	4013      	ands	r3, r2
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <BatteryCapacity_Task+0x1b0>
            LOW_POWER_MODE = 0;
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <BatteryCapacity_Task+0x1e0>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
        }
        osMutexRelease(Low_Power_Mode_Mutex);
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <BatteryCapacity_Task+0x1dc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f00b fcf3 	bl	800cf60 <osMutexRelease>

        osDelayUntil(&PreviousWakeTime, 1000); // Delay for 1 second
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001582:	4618      	mov	r0, r3
 8001584:	f00b fde4 	bl	800d150 <osDelayUntil>
        READ_EPS_INPUT_CONDITION(&input_conditions);
 8001588:	e725      	b.n	80013d6 <BatteryCapacity_Task+0x16>
 800158a:	bf00      	nop
 800158c:	08017db0 	.word	0x08017db0
 8001590:	418f102e 	.word	0x418f102e
 8001594:	20000000 	.word	0x20000000
 8001598:	45610000 	.word	0x45610000
 800159c:	20007c8c 	.word	0x20007c8c
 80015a0:	20000261 	.word	0x20000261

080015a4 <Fault_Recovery>:
}

/*
 * @brief Helper function for the R2U2 task to perform fault recovery
 */
void Fault_Recovery(int fault, int time){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
    int interval = 5;
 80015ae:	2305      	movs	r3, #5
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b15      	cmp	r3, #21
 80015b6:	f200 813f 	bhi.w	8001838 <Fault_Recovery+0x294>
 80015ba:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <Fault_Recovery+0x1c>)
 80015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c0:	08001839 	.word	0x08001839
 80015c4:	08001839 	.word	0x08001839
 80015c8:	08001619 	.word	0x08001619
 80015cc:	08001669 	.word	0x08001669
 80015d0:	08001673 	.word	0x08001673
 80015d4:	08001679 	.word	0x08001679
 80015d8:	0800167f 	.word	0x0800167f
 80015dc:	08001685 	.word	0x08001685
 80015e0:	0800168b 	.word	0x0800168b
 80015e4:	08001691 	.word	0x08001691
 80015e8:	08001839 	.word	0x08001839
 80015ec:	08001839 	.word	0x08001839
 80015f0:	08001839 	.word	0x08001839
 80015f4:	08001839 	.word	0x08001839
 80015f8:	08001697 	.word	0x08001697
 80015fc:	080016d7 	.word	0x080016d7
 8001600:	0800170f 	.word	0x0800170f
 8001604:	08001747 	.word	0x08001747
 8001608:	0800177f 	.word	0x0800177f
 800160c:	0800179f 	.word	0x0800179f
 8001610:	080017bf 	.word	0x080017bf
 8001614:	080017ff 	.word	0x080017ff
            case 0:
                break;
            case 1:
                break;
            case 2:
                if((time*interval)/60.0 <= 30.0){
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff8f 	bl	8000544 <__aeabi_i2d>
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b85      	ldr	r3, [pc, #532]	; (8001840 <Fault_Recovery+0x29c>)
 800162c:	f7ff f91e 	bl	800086c <__aeabi_ddiv>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	4b81      	ldr	r3, [pc, #516]	; (8001844 <Fault_Recovery+0x2a0>)
 800163e:	f7ff fa67 	bl	8000b10 <__aeabi_dcmple>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d100      	bne.n	800164a <Fault_Recovery+0xa6>
                    disable_Payload();
                    disable_UHF();
                    disable_Boost_Board();
                    Disable_ADCS();
                }
                break;
 8001648:	e0f7      	b.n	800183a <Fault_Recovery+0x296>
                    disable_EPS_5v_Bus();
 800164a:	f000 ff45 	bl	80024d8 <disable_EPS_5v_Bus>
                    disable_EPS_LUP_5v();
 800164e:	f000 ff67 	bl	8002520 <disable_EPS_LUP_5v>
                    disable_EPS_LUP_3v();
 8001652:	f000 ff53 	bl	80024fc <disable_EPS_LUP_3v>
                    disable_Payload();
 8001656:	f000 ffab 	bl	80025b0 <disable_Payload>
                    disable_UHF();
 800165a:	f000 ffcd 	bl	80025f8 <disable_UHF>
                    disable_Boost_Board();
 800165e:	f000 ff95 	bl	800258c <disable_Boost_Board>
                    Disable_ADCS();
 8001662:	f7ff fb57 	bl	8000d14 <Disable_ADCS>
                break;
 8001666:	e0e8      	b.n	800183a <Fault_Recovery+0x296>
            case 3:
                disable_EPS_Vbatt_Bus();
 8001668:	f000 ff1b 	bl	80024a2 <disable_EPS_Vbatt_Bus>
                disable_EPS_BCR_Bus();
 800166c:	f000 ff22 	bl	80024b4 <disable_EPS_BCR_Bus>
                break;
 8001670:	e0e3      	b.n	800183a <Fault_Recovery+0x296>
            case 4:
                enable_EPS_Batt_Heater_1();
 8001672:	f000 ffdc 	bl	800262e <enable_EPS_Batt_Heater_1>
                break;
 8001676:	e0e0      	b.n	800183a <Fault_Recovery+0x296>
            case 5:
                enable_EPS_Batt_Heater_2();
 8001678:	f000 ffeb 	bl	8002652 <enable_EPS_Batt_Heater_2>
                break;
 800167c:	e0dd      	b.n	800183a <Fault_Recovery+0x296>
            case 6:
                enable_EPS_Batt_Heater_3();
 800167e:	f000 fffa 	bl	8002676 <enable_EPS_Batt_Heater_3>
                break;
 8001682:	e0da      	b.n	800183a <Fault_Recovery+0x296>
            case 7:
                disable_EPS_Batt_Heater_1();
 8001684:	f000 ffdc 	bl	8002640 <disable_EPS_Batt_Heater_1>
                break;
 8001688:	e0d7      	b.n	800183a <Fault_Recovery+0x296>
            case 8:
                disable_EPS_Batt_Heater_2();
 800168a:	f000 ffeb 	bl	8002664 <disable_EPS_Batt_Heater_2>
                break;
 800168e:	e0d4      	b.n	800183a <Fault_Recovery+0x296>
            case 9:
                disable_EPS_Batt_Heater_3();
 8001690:	f000 fffa 	bl	8002688 <disable_EPS_Batt_Heater_3>
                break;
 8001694:	e0d1      	b.n	800183a <Fault_Recovery+0x296>
            case 12:
                break;
            case 13:
                break;
            case 14:
                if((time*interval)/60.0 > 30.0){
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff50 	bl	8000544 <__aeabi_i2d>
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	4b65      	ldr	r3, [pc, #404]	; (8001840 <Fault_Recovery+0x29c>)
 80016aa:	f7ff f8df 	bl	800086c <__aeabi_ddiv>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b62      	ldr	r3, [pc, #392]	; (8001844 <Fault_Recovery+0x2a0>)
 80016bc:	f7ff fa3c 	bl	8000b38 <__aeabi_dcmpgt>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d100      	bne.n	80016c8 <Fault_Recovery+0x124>
                    enable_Boost_Board();
                    enable_EPS_LUP_3v();
                    enable_EPS_LUP_5v();
                }
                break;
 80016c6:	e0b8      	b.n	800183a <Fault_Recovery+0x296>
                    enable_Boost_Board();
 80016c8:	f000 ff57 	bl	800257a <enable_Boost_Board>
                    enable_EPS_LUP_3v();
 80016cc:	f000 ff0d 	bl	80024ea <enable_EPS_LUP_3v>
                    enable_EPS_LUP_5v();
 80016d0:	f000 ff1d 	bl	800250e <enable_EPS_LUP_5v>
                break;
 80016d4:	e0b1      	b.n	800183a <Fault_Recovery+0x296>
            case 15:
                if((time*interval)/60.0 > 30.0){
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff30 	bl	8000544 <__aeabi_i2d>
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	4b55      	ldr	r3, [pc, #340]	; (8001840 <Fault_Recovery+0x29c>)
 80016ea:	f7ff f8bf 	bl	800086c <__aeabi_ddiv>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	4b52      	ldr	r3, [pc, #328]	; (8001844 <Fault_Recovery+0x2a0>)
 80016fc:	f7ff fa1c 	bl	8000b38 <__aeabi_dcmpgt>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d100      	bne.n	8001708 <Fault_Recovery+0x164>
                    enable_EPS_LUP_3v();
                }
                break;
 8001706:	e098      	b.n	800183a <Fault_Recovery+0x296>
                    enable_EPS_LUP_3v();
 8001708:	f000 feef 	bl	80024ea <enable_EPS_LUP_3v>
                break;
 800170c:	e095      	b.n	800183a <Fault_Recovery+0x296>
            case 16:
                if((time*interval)/60.0 > 30.0){
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff14 	bl	8000544 <__aeabi_i2d>
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b47      	ldr	r3, [pc, #284]	; (8001840 <Fault_Recovery+0x29c>)
 8001722:	f7ff f8a3 	bl	800086c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b44      	ldr	r3, [pc, #272]	; (8001844 <Fault_Recovery+0x2a0>)
 8001734:	f7ff fa00 	bl	8000b38 <__aeabi_dcmpgt>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <Fault_Recovery+0x19c>
                    enable_EPS_5v_Bus();
                }
                break;
 800173e:	e07c      	b.n	800183a <Fault_Recovery+0x296>
                    enable_EPS_5v_Bus();
 8001740:	f000 fec1 	bl	80024c6 <enable_EPS_5v_Bus>
                break;
 8001744:	e079      	b.n	800183a <Fault_Recovery+0x296>
            case 17:
                if((time*interval)/60.0 > 30.0){
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fef8 	bl	8000544 <__aeabi_i2d>
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <Fault_Recovery+0x29c>)
 800175a:	f7ff f887 	bl	800086c <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4b36      	ldr	r3, [pc, #216]	; (8001844 <Fault_Recovery+0x2a0>)
 800176c:	f7ff f9e4 	bl	8000b38 <__aeabi_dcmpgt>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d100      	bne.n	8001778 <Fault_Recovery+0x1d4>
                    enable_EPS_5v_Bus();
                }
                break;
 8001776:	e060      	b.n	800183a <Fault_Recovery+0x296>
                    enable_EPS_5v_Bus();
 8001778:	f000 fea5 	bl	80024c6 <enable_EPS_5v_Bus>
                break;
 800177c:	e05d      	b.n	800183a <Fault_Recovery+0x296>
            case 18:
                osMutexWait(Low_Power_Mode_Mutex, 500);
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <Fault_Recovery+0x2a4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001786:	4618      	mov	r0, r3
 8001788:	f00b fb9a 	bl	800cec0 <osMutexWait>
                LOW_POWER_MODE = 1;
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <Fault_Recovery+0x2a8>)
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
                osMutexRelease(Low_Power_Mode_Mutex);
 8001792:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <Fault_Recovery+0x2a4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f00b fbe2 	bl	800cf60 <osMutexRelease>
                break;
 800179c:	e04d      	b.n	800183a <Fault_Recovery+0x296>
            case 19:
                osMutexWait(Low_Power_Mode_Mutex, 500);
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <Fault_Recovery+0x2a4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00b fb8a 	bl	800cec0 <osMutexWait>
                LOW_POWER_MODE = 0;
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <Fault_Recovery+0x2a8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
                osMutexRelease(Low_Power_Mode_Mutex);
 80017b2:	4b25      	ldr	r3, [pc, #148]	; (8001848 <Fault_Recovery+0x2a4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f00b fbd2 	bl	800cf60 <osMutexRelease>
                break;
 80017bc:	e03d      	b.n	800183a <Fault_Recovery+0x296>
            case 20:
                if((time*interval)/60.0 > 30.0){
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	fb02 f303 	mul.w	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe febc 	bl	8000544 <__aeabi_i2d>
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <Fault_Recovery+0x29c>)
 80017d2:	f7ff f84b 	bl	800086c <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <Fault_Recovery+0x2a0>)
 80017e4:	f7ff f9a8 	bl	8000b38 <__aeabi_dcmpgt>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d100      	bne.n	80017f0 <Fault_Recovery+0x24c>
                    disable_Payload();
                    disable_Boost_Board();
                    Disable_ADCS();
                }
                break;
 80017ee:	e024      	b.n	800183a <Fault_Recovery+0x296>
                    disable_Payload();
 80017f0:	f000 fede 	bl	80025b0 <disable_Payload>
                    disable_Boost_Board();
 80017f4:	f000 feca 	bl	800258c <disable_Boost_Board>
                    Disable_ADCS();
 80017f8:	f7ff fa8c 	bl	8000d14 <Disable_ADCS>
                break;
 80017fc:	e01d      	b.n	800183a <Fault_Recovery+0x296>
            case 21:
                hi2c1.Instance->CR1 |= I2C_CR1_SWRST;
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <Fault_Recovery+0x2ac>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <Fault_Recovery+0x2ac>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800180c:	601a      	str	r2, [r3, #0]
                osDelay(100);
 800180e:	2064      	movs	r0, #100	; 0x64
 8001810:	f00b fb35 	bl	800ce7e <osDelay>
                hi2c1.Instance->CR1 &= ~I2C_CR1_SWRST;
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <Fault_Recovery+0x2ac>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <Fault_Recovery+0x2ac>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001822:	601a      	str	r2, [r3, #0]
                HAL_I2C_DeInit(&hi2c1);
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <Fault_Recovery+0x2ac>)
 8001826:	f002 ff35 	bl	8004694 <HAL_I2C_DeInit>
                hi2c1.State = HAL_I2C_STATE_RESET;
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <Fault_Recovery+0x2ac>)
 800182c:	2200      	movs	r2, #0
 800182e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
                MX_I2C1_Init();
 8001832:	f007 ffef 	bl	8009814 <MX_I2C1_Init>
                break;
 8001836:	e000      	b.n	800183a <Fault_Recovery+0x296>
            default:
                return;
 8001838:	bf00      	nop
            }
}
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	404e0000 	.word	0x404e0000
 8001844:	403e0000 	.word	0x403e0000
 8001848:	20007c8c 	.word	0x20007c8c
 800184c:	20000261 	.word	0x20000261
 8001850:	20007e10 	.word	0x20007e10

08001854 <parseCySatPacket>:
/**
 * @brief Takes in an array containing the cysat packet in byte form and builds a struct from it
 * @param packet: the byte array containing the packet within, with the first byte being the start character
 * @retval The struct representing this CySat packet
 */
CySat_Packet_t parseCySatPacket(uint8_t* packet){
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = packet[1];
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	733b      	strb	r3, [r7, #12]
    cySatPacket.Command = packet[2];
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	789b      	ldrb	r3, [r3, #2]
 8001868:	737b      	strb	r3, [r7, #13]
    cySatPacket.Data_Length = packet[3];
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	78db      	ldrb	r3, [r3, #3]
 800186e:	73bb      	strb	r3, [r7, #14]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * cySatPacket.Data_Length);
 8001870:	7bbb      	ldrb	r3, [r7, #14]
 8001872:	4618      	mov	r0, r3
 8001874:	f011 f802 	bl	801287c <malloc>
 8001878:	4603      	mov	r3, r0
 800187a:	613b      	str	r3, [r7, #16]
    memcpy(cySatPacket.Data, packet+4, cySatPacket.Data_Length);
 800187c:	6938      	ldr	r0, [r7, #16]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	3304      	adds	r3, #4
 8001882:	7bba      	ldrb	r2, [r7, #14]
 8001884:	4619      	mov	r1, r3
 8001886:	f011 f809 	bl	801289c <memcpy>
    cySatPacket.Checksum = packet[cySatPacket.Data_Length+4];
 800188a:	7bbb      	ldrb	r3, [r7, #14]
 800188c:	3304      	adds	r3, #4
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	4413      	add	r3, r2
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	753b      	strb	r3, [r7, #20]
    return cySatPacket;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	461c      	mov	r4, r3
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd90      	pop	{r4, r7, pc}
	...

080018b0 <sendCySatPacket>:
 * @brief Takes in a packet and sends it to the Ground Station via UART serial connection
 * @param packet: A struct representing the CySat packet you wish to send
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
HAL_StatusTypeDef sendCySatPacket(CySat_Packet_t packet){
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018bc:	466b      	mov	r3, sp
 80018be:	461d      	mov	r5, r3
    uint8_t message[packet.Data_Length + 5];
 80018c0:	79bb      	ldrb	r3, [r7, #6]
 80018c2:	1d5c      	adds	r4, r3, #5
 80018c4:	1e63      	subs	r3, r4, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	4623      	mov	r3, r4
 80018ca:	4618      	mov	r0, r3
 80018cc:	f04f 0100 	mov.w	r1, #0
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	00cb      	lsls	r3, r1, #3
 80018da:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80018de:	00c2      	lsls	r2, r0, #3
 80018e0:	4623      	mov	r3, r4
 80018e2:	4618      	mov	r0, r3
 80018e4:	f04f 0100 	mov.w	r1, #0
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	00cb      	lsls	r3, r1, #3
 80018f2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80018f6:	00c2      	lsls	r2, r0, #3
 80018f8:	4623      	mov	r3, r4
 80018fa:	3307      	adds	r3, #7
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	ebad 0d03 	sub.w	sp, sp, r3
 8001904:	466b      	mov	r3, sp
 8001906:	3300      	adds	r3, #0
 8001908:	613b      	str	r3, [r7, #16]

    //build byte array
    message[0] = 0xFF; //start byte
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	22ff      	movs	r2, #255	; 0xff
 800190e:	701a      	strb	r2, [r3, #0]
    message[1] = packet.Subsystem_Type;
 8001910:	793a      	ldrb	r2, [r7, #4]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	705a      	strb	r2, [r3, #1]
    message[2] = packet.Command;
 8001916:	797a      	ldrb	r2, [r7, #5]
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	709a      	strb	r2, [r3, #2]
    message[3] = packet.Data_Length;
 800191c:	79ba      	ldrb	r2, [r7, #6]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	70da      	strb	r2, [r3, #3]
    int i;
    for(i = 0; i < packet.Data_Length; i++){
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	e00a      	b.n	800193e <sendCySatPacket+0x8e>
        message[i + 4] = packet.Data[i];
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	441a      	add	r2, r3
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	3304      	adds	r3, #4
 8001932:	7811      	ldrb	r1, [r2, #0]
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < packet.Data_Length; i++){
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	3301      	adds	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	79bb      	ldrb	r3, [r7, #6]
 8001940:	461a      	mov	r2, r3
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4293      	cmp	r3, r2
 8001946:	dbef      	blt.n	8001928 <sendCySatPacket+0x78>
    }
    message[4 + packet.Data_Length] = packet.Checksum;
 8001948:	79bb      	ldrb	r3, [r7, #6]
 800194a:	3304      	adds	r3, #4
 800194c:	7b39      	ldrb	r1, [r7, #12]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	54d1      	strb	r1, [r2, r3]

    HAL_StatusTypeDef status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	77fb      	strb	r3, [r7, #31]
    if(packet.Subsystem_Type == OBC_SUBSYSTEM_TYPE){
 8001956:	793b      	ldrb	r3, [r7, #4]
 8001958:	2b0a      	cmp	r3, #10
 800195a:	d10c      	bne.n	8001976 <sendCySatPacket+0xc6>
        status = HAL_UART_Transmit(&huart1, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 800195c:	6939      	ldr	r1, [r7, #16]
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	b29b      	uxth	r3, r3
 8001962:	3305      	adds	r3, #5
 8001964:	b29a      	uxth	r2, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196a:	480d      	ldr	r0, [pc, #52]	; (80019a0 <sendCySatPacket+0xf0>)
 800196c:	f006 f9f1 	bl	8007d52 <HAL_UART_Transmit>
 8001970:	4603      	mov	r3, r0
 8001972:	77fb      	strb	r3, [r7, #31]
 8001974:	e00e      	b.n	8001994 <sendCySatPacket+0xe4>
    }
    else if(packet.Subsystem_Type == PAYLOAD_SUBSYSTEM_TYPE){
 8001976:	793b      	ldrb	r3, [r7, #4]
 8001978:	2b28      	cmp	r3, #40	; 0x28
 800197a:	d10b      	bne.n	8001994 <sendCySatPacket+0xe4>
        status = HAL_UART_Transmit(&huart6, message, packet.Data_Length + 5, 1000); //send the message over uart, but timeout after 1s
 800197c:	6939      	ldr	r1, [r7, #16]
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	b29b      	uxth	r3, r3
 8001982:	3305      	adds	r3, #5
 8001984:	b29a      	uxth	r2, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <sendCySatPacket+0xf4>)
 800198c:	f006 f9e1 	bl	8007d52 <HAL_UART_Transmit>
 8001990:	4603      	mov	r3, r0
 8001992:	77fb      	strb	r3, [r7, #31]
    }
    return status;
 8001994:	7ffb      	ldrb	r3, [r7, #31]
 8001996:	46ad      	mov	sp, r5
}
 8001998:	4618      	mov	r0, r3
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bdb0      	pop	{r4, r5, r7, pc}
 80019a0:	20007ff8 	.word	0x20007ff8
 80019a4:	20008154 	.word	0x20008154

080019a8 <generateCySatChecksum>:
/**
  * @brief Gives you the checksum byte value for a submitted packet
  * @param packet: The packet for which you want to generate a packet
  * @retval The 1 byte packet checksum that has been generated
  */
uint8_t generateCySatChecksum(CySat_Packet_t packet){
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]

    //add components of the packet together (NOT including the checksum)
    sum += packet.Subsystem_Type;
 80019b8:	793b      	ldrb	r3, [r7, #4]
 80019ba:	461a      	mov	r2, r3
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	4413      	add	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
    sum += packet.Command;
 80019c2:	797b      	ldrb	r3, [r7, #5]
 80019c4:	461a      	mov	r2, r3
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4413      	add	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
    sum += packet.Data_Length;
 80019cc:	79bb      	ldrb	r3, [r7, #6]
 80019ce:	461a      	mov	r2, r3
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4413      	add	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e00a      	b.n	80019f2 <generateCySatChecksum+0x4a>
        sum += packet.Data[i];
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4413      	add	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
    for(i = 0; i < packet.Data_Length; i++){
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	3301      	adds	r3, #1
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	461a      	mov	r2, r3
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	4293      	cmp	r3, r2
 80019fa:	dbef      	blt.n	80019dc <generateCySatChecksum+0x34>
    }

    //take the lowest 8 bits
    uint8_t byte = (uint8_t) sum & 0xFF;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	75fb      	strb	r3, [r7, #23]

    //subtract from 0xFF
    return 0xFF - byte;
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <validateCySatChecksum>:
/**
  * @brief Returns if the checksum of a given packet is correct or not
  * @param packet: The packet you have just received and want to check
  * @retval 1 if the checksum is correct for the data in the packet, otherwise it returns a 0
  */
uint8_t validateCySatChecksum(CySat_Packet_t packet){
 8001a12:	b480      	push	{r7}
 8001a14:	b087      	sub	sp, #28
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int i;
    uint32_t sum = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]

    //add components of the packet together (INCLUDING the checksum)
    sum += packet.Subsystem_Type;
 8001a22:	793b      	ldrb	r3, [r7, #4]
 8001a24:	461a      	mov	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4413      	add	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
    sum += packet.Command;
 8001a2c:	797b      	ldrb	r3, [r7, #5]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4413      	add	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
    sum += packet.Data_Length;
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e00a      	b.n	8001a5c <validateCySatChecksum+0x4a>
        sum += packet.Data[i];
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	4413      	add	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
    for(i = 0; i < packet.Data_Length; i++){
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	79bb      	ldrb	r3, [r7, #6]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	4293      	cmp	r3, r2
 8001a64:	dbef      	blt.n	8001a46 <validateCySatChecksum+0x34>
    }
    sum += packet.Checksum;
 8001a66:	7b3b      	ldrb	r3, [r7, #12]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]

    //if the last 8 bits equal 0xFF, it is correct
    if((sum & 0xFF) == 0xFF){
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2bff      	cmp	r3, #255	; 0xff
 8001a76:	d101      	bne.n	8001a7c <validateCySatChecksum+0x6a>
        return 1;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <validateCySatChecksum+0x6c>
    }
    else{
        return 0;
 8001a7c:	2300      	movs	r3, #0
    }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <READ_EPS_BATTERY_VOLTAGE>:
/**
  * @brief Reads the voltage level of the EPS battery voltage bus and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_VOLTAGE(float* volt_ptr){
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 1; //battery voltage command
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001a9c:	f107 0208 	add.w	r2, r7, #8
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fdf9 	bl	800269c <EPS_READ>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <READ_EPS_BATTERY_VOLTAGE+0x2c>
        return status;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	e014      	b.n	8001ae2 <READ_EPS_BATTERY_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001ab8:	7a3b      	ldrb	r3, [r7, #8]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	7a7b      	ldrb	r3, [r7, #9]
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0023394775f * (float) raw_voltage; //multiply by the conversion coeff
 8001ac8:	89bb      	ldrh	r3, [r7, #12]
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001aec <READ_EPS_BATTERY_VOLTAGE+0x60>
 8001ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0023394775 * 4095 = 9.58 V
    return status;
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	3b1951eb 	.word	0x3b1951eb

08001af0 <READ_EPS_BATTERY_CURRENT>:
/**
  * @brief Reads the current level of the EPS battery bus and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATTERY_CURRENT(float* curr_ptr){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001af8:	2301      	movs	r3, #1
 8001afa:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 2; //battery current command
 8001afc:	2302      	movs	r3, #2
 8001afe:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001b00:	f107 0208 	add.w	r2, r7, #8
 8001b04:	7bbb      	ldrb	r3, [r7, #14]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fdc7 	bl	800269c <EPS_READ>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <READ_EPS_BATTERY_CURRENT+0x2c>
        return status;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	e014      	b.n	8001b46 <READ_EPS_BATTERY_CURRENT+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001b1c:	7a3b      	ldrb	r3, [r7, #8]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	7a7b      	ldrb	r3, [r7, #9]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0030517578f * (float) raw_value; //multiply by the conversion coeff
 8001b2c:	89bb      	ldrh	r3, [r7, #12]
 8001b2e:	ee07 3a90 	vmov	s15, r3
 8001b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b36:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001b50 <READ_EPS_BATTERY_CURRENT+0x60>
 8001b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	edc3 7a00 	vstr	s15, [r3]
    //should not be greater than 0.0030517578f * 4095 = 12.497 A
    return status;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	3b480000 	.word	0x3b480000

08001b54 <READ_EPS_SOLAR_X_VOLTAGE>:
/**
  * @brief Reads the voltage of the X-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_VOLTAGE(float* volt_ptr){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 5; //solar panel x-axis voltage command
 8001b60:	2305      	movs	r3, #5
 8001b62:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001b64:	f107 0208 	add.w	r2, r7, #8
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fd95 	bl	800269c <EPS_READ>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <READ_EPS_SOLAR_X_VOLTAGE+0x2c>
        return status;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	e014      	b.n	8001baa <READ_EPS_SOLAR_X_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001b80:	7a3b      	ldrb	r3, [r7, #8]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	7a7b      	ldrb	r3, [r7, #9]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8001b90:	89bb      	ldrh	r3, [r7, #12]
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001bb4 <READ_EPS_SOLAR_X_VOLTAGE+0x60>
 8001b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	3b200000 	.word	0x3b200000

08001bb8 <READ_EPS_SOLAR_X_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the X- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_NEG_CURRENT(float* curr_ptr){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 6; //solar panel x- current command
 8001bc4:	2306      	movs	r3, #6
 8001bc6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001bc8:	f107 0208 	add.w	r2, r7, #8
 8001bcc:	7bbb      	ldrb	r3, [r7, #14]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fd63 	bl	800269c <EPS_READ>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <READ_EPS_SOLAR_X_NEG_CURRENT+0x2c>
        return status;
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	e014      	b.n	8001c0e <READ_EPS_SOLAR_X_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001be4:	7a3b      	ldrb	r3, [r7, #8]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	7a7b      	ldrb	r3, [r7, #9]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001bf4:	89bb      	ldrh	r3, [r7, #12]
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bfe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001c18 <READ_EPS_SOLAR_X_NEG_CURRENT+0x60>
 8001c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	3a200001 	.word	0x3a200001

08001c1c <READ_EPS_SOLAR_X_POS_CURRENT>:
/**
  * @brief Reads the voltage of the X+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_X_POS_CURRENT(float* curr_ptr){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 7; //solar panel x+ current command
 8001c28:	2307      	movs	r3, #7
 8001c2a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001c2c:	f107 0208 	add.w	r2, r7, #8
 8001c30:	7bbb      	ldrb	r3, [r7, #14]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fd31 	bl	800269c <EPS_READ>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <READ_EPS_SOLAR_X_POS_CURRENT+0x2c>
        return status;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	e014      	b.n	8001c72 <READ_EPS_SOLAR_X_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001c48:	7a3b      	ldrb	r3, [r7, #8]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	7a7b      	ldrb	r3, [r7, #9]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001c58:	89bb      	ldrh	r3, [r7, #12]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c62:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001c7c <READ_EPS_SOLAR_X_POS_CURRENT+0x60>
 8001c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	3a200001 	.word	0x3a200001

08001c80 <READ_EPS_SOLAR_Y_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_VOLTAGE(float* volt_ptr){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 8; //solar panel y-axis voltage command
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001c90:	f107 0208 	add.w	r2, r7, #8
 8001c94:	7bbb      	ldrb	r3, [r7, #14]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fcff 	bl	800269c <EPS_READ>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <READ_EPS_SOLAR_Y_VOLTAGE+0x2c>
        return status;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	e014      	b.n	8001cd6 <READ_EPS_SOLAR_Y_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001cac:	7a3b      	ldrb	r3, [r7, #8]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	7a7b      	ldrb	r3, [r7, #9]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8001cbc:	89bb      	ldrh	r3, [r7, #12]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ce0 <READ_EPS_SOLAR_Y_VOLTAGE+0x60>
 8001cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	3b200000 	.word	0x3b200000

08001ce4 <READ_EPS_SOLAR_Y_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Y- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_NEG_CURRENT(float* curr_ptr){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 9; //solar panel y- current command
 8001cf0:	2309      	movs	r3, #9
 8001cf2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001cf4:	f107 0208 	add.w	r2, r7, #8
 8001cf8:	7bbb      	ldrb	r3, [r7, #14]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fccd 	bl	800269c <EPS_READ>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x2c>
        return status;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	e014      	b.n	8001d3a <READ_EPS_SOLAR_Y_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001d10:	7a3b      	ldrb	r3, [r7, #8]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	021b      	lsls	r3, r3, #8
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	7a7b      	ldrb	r3, [r7, #9]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001d20:	89bb      	ldrh	r3, [r7, #12]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001d44 <READ_EPS_SOLAR_Y_NEG_CURRENT+0x60>
 8001d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	3a200001 	.word	0x3a200001

08001d48 <READ_EPS_SOLAR_Y_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Y+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Y_POS_CURRENT(float* curr_ptr){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001d50:	2301      	movs	r3, #1
 8001d52:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 10; //solar panel y+ current command
 8001d54:	230a      	movs	r3, #10
 8001d56:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001d58:	f107 0208 	add.w	r2, r7, #8
 8001d5c:	7bbb      	ldrb	r3, [r7, #14]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fc9b 	bl	800269c <EPS_READ>
 8001d66:	4603      	mov	r3, r0
 8001d68:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <READ_EPS_SOLAR_Y_POS_CURRENT+0x2c>
        return status;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	e014      	b.n	8001d9e <READ_EPS_SOLAR_Y_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001d74:	7a3b      	ldrb	r3, [r7, #8]
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	7a7b      	ldrb	r3, [r7, #9]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001d84:	89bb      	ldrh	r3, [r7, #12]
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d8e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001da8 <READ_EPS_SOLAR_Y_POS_CURRENT+0x60>
 8001d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	3a200001 	.word	0x3a200001

08001dac <READ_EPS_SOLAR_Z_VOLTAGE>:
/**
  * @brief Reads the voltage of the Y-axis in volts and stores the value in the pointed to address
  * @param volt_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_VOLTAGE(float* volt_ptr){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 11; //solar panel z-axis voltage command
 8001db8:	230b      	movs	r3, #11
 8001dba:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001dbc:	f107 0208 	add.w	r2, r7, #8
 8001dc0:	7bbb      	ldrb	r3, [r7, #14]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fc69 	bl	800269c <EPS_READ>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <READ_EPS_SOLAR_Z_VOLTAGE+0x2c>
        return status;
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	e014      	b.n	8001e02 <READ_EPS_SOLAR_Z_VOLTAGE+0x56>
    }
    uint16_t raw_voltage = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001dd8:	7a3b      	ldrb	r3, [r7, #8]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	7a7b      	ldrb	r3, [r7, #9]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	81bb      	strh	r3, [r7, #12]
    (*volt_ptr) = 0.0024414063f * (float) raw_voltage; //multiply by the conversion coeff
 8001de8:	89bb      	ldrh	r3, [r7, #12]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001e0c <READ_EPS_SOLAR_Z_VOLTAGE+0x60>
 8001df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	3b200000 	.word	0x3b200000

08001e10 <READ_EPS_SOLAR_Z_NEG_CURRENT>:
/**
  * @brief Reads the voltage of the Z- facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_NEG_CURRENT(float* curr_ptr){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 12; //solar panel z- current command
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001e20:	f107 0208 	add.w	r2, r7, #8
 8001e24:	7bbb      	ldrb	r3, [r7, #14]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fc37 	bl	800269c <EPS_READ>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <READ_EPS_SOLAR_Z_NEG_CURRENT+0x2c>
        return status;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	e014      	b.n	8001e66 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001e3c:	7a3b      	ldrb	r3, [r7, #8]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	7a7b      	ldrb	r3, [r7, #9]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001e4c:	89bb      	ldrh	r3, [r7, #12]
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e56:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001e70 <READ_EPS_SOLAR_Z_NEG_CURRENT+0x60>
 8001e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	3a200001 	.word	0x3a200001

08001e74 <READ_EPS_SOLAR_Z_POS_CURRENT>:
/**
  * @brief Reads the voltage of the Z+ facing solar panels in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SOLAR_Z_POS_CURRENT(float* curr_ptr){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 13; //solar panel z+ current command
 8001e80:	230d      	movs	r3, #13
 8001e82:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001e84:	f107 0208 	add.w	r2, r7, #8
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fc05 	bl	800269c <EPS_READ>
 8001e92:	4603      	mov	r3, r0
 8001e94:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <READ_EPS_SOLAR_Z_POS_CURRENT+0x2c>
        return status;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	e014      	b.n	8001eca <READ_EPS_SOLAR_Z_POS_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001ea0:	7a3b      	ldrb	r3, [r7, #8]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	021b      	lsls	r3, r3, #8
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	7a7b      	ldrb	r3, [r7, #9]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0006103516f * (float) raw_current; //multiply by the conversion coeff
 8001eb0:	89bb      	ldrh	r3, [r7, #12]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eba:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ed4 <READ_EPS_SOLAR_Z_POS_CURRENT+0x60>
 8001ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	3a200001 	.word	0x3a200001

08001ed8 <READ_EPS_3V_CURRENT>:
/**
  * @brief Reads the current of the EPS 3.3v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_3V_CURRENT(float* curr_ptr){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 14; //3.3v bus current command
 8001ee4:	230e      	movs	r3, #14
 8001ee6:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001ee8:	f107 0208 	add.w	r2, r7, #8
 8001eec:	7bbb      	ldrb	r3, [r7, #14]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fbd3 	bl	800269c <EPS_READ>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <READ_EPS_3V_CURRENT+0x2c>
        return status;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	e014      	b.n	8001f2e <READ_EPS_3V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001f04:	7a3b      	ldrb	r3, [r7, #8]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	7a7b      	ldrb	r3, [r7, #9]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 8001f14:	89bb      	ldrh	r3, [r7, #12]
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f1e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f38 <READ_EPS_3V_CURRENT+0x60>
 8001f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	3b055555 	.word	0x3b055555

08001f3c <READ_EPS_5V_CURRENT>:
/**
  * @brief Reads the current of the EPS 5v bus in amps and stores the value in the pointed to address
  * @param curr_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_5V_CURRENT(float* curr_ptr){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 15; //5v bus current command
 8001f48:	230f      	movs	r3, #15
 8001f4a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001f4c:	f107 0208 	add.w	r2, r7, #8
 8001f50:	7bbb      	ldrb	r3, [r7, #14]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 fba1 	bl	800269c <EPS_READ>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <READ_EPS_5V_CURRENT+0x2c>
        return status;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	e014      	b.n	8001f92 <READ_EPS_5V_CURRENT+0x56>
    }
    uint16_t raw_current = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001f68:	7a3b      	ldrb	r3, [r7, #8]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	7a7b      	ldrb	r3, [r7, #9]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	81bb      	strh	r3, [r7, #12]
    (*curr_ptr) = 0.0020345052f * (float) raw_current; //multiply by the conversion coeff
 8001f78:	89bb      	ldrh	r3, [r7, #12]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f82:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f9c <READ_EPS_5V_CURRENT+0x60>
 8001f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	3b055555 	.word	0x3b055555

08001fa0 <READ_EPS_MCU_TEMP>:
/**
  * @brief Reads the temperature of the EPS microcontroller in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_MCU_TEMP(float* temp_ptr){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 18; //MCU temperature command
 8001fac:	2312      	movs	r3, #18
 8001fae:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8001fb0:	f107 0208 	add.w	r2, r7, #8
 8001fb4:	7bbb      	ldrb	r3, [r7, #14]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fb6f 	bl	800269c <EPS_READ>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <READ_EPS_MCU_TEMP+0x2c>
        return status;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	e01c      	b.n	8002006 <READ_EPS_MCU_TEMP+0x66>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8001fcc:	7a3b      	ldrb	r3, [r7, #8]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	7a7b      	ldrb	r3, [r7, #9]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = (((float) raw_value * 0.0006103516f) - 0.986f) / 0.00355f;
 8001fdc:	89bb      	ldrh	r3, [r7, #12]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002010 <READ_EPS_MCU_TEMP+0x70>
 8001fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fee:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002014 <READ_EPS_MCU_TEMP+0x74>
 8001ff2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ff6:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002018 <READ_EPS_MCU_TEMP+0x78>
 8001ffa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	3a200001 	.word	0x3a200001
 8002014:	3f7c6a7f 	.word	0x3f7c6a7f
 8002018:	3b68a71e 	.word	0x3b68a71e

0800201c <READ_EPS_BATT_1_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 1 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_1_TEMP(float* temp_ptr){
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 19; //battery cell 1 temperature command
 8002028:	2313      	movs	r3, #19
 800202a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800202c:	f107 0208 	add.w	r2, r7, #8
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fb31 	bl	800269c <EPS_READ>
 800203a:	4603      	mov	r3, r0
 800203c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <READ_EPS_BATT_1_TEMP+0x2c>
        return status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	e014      	b.n	8002072 <READ_EPS_BATT_1_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8002048:	7a3b      	ldrb	r3, [r7, #8]
 800204a:	b29b      	uxth	r3, r3
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b29a      	uxth	r2, r3
 8002050:	7a7b      	ldrb	r3, [r7, #9]
 8002052:	b29b      	uxth	r3, r3
 8002054:	4413      	add	r3, r2
 8002056:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8002058:	89bb      	ldrh	r3, [r7, #12]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002062:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800207c <READ_EPS_BATT_1_TEMP+0x60>
 8002066:	ee67 7a87 	vmul.f32	s15, s15, s14
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	3b800000 	.word	0x3b800000

08002080 <READ_EPS_BATT_2_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 2 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_2_TEMP(float* temp_ptr){
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 20; //battery cell 2 temperature command
 800208c:	2314      	movs	r3, #20
 800208e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8002090:	f107 0208 	add.w	r2, r7, #8
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f000 faff 	bl	800269c <EPS_READ>
 800209e:	4603      	mov	r3, r0
 80020a0:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <READ_EPS_BATT_2_TEMP+0x2c>
        return status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	e014      	b.n	80020d6 <READ_EPS_BATT_2_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80020ac:	7a3b      	ldrb	r3, [r7, #8]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	7a7b      	ldrb	r3, [r7, #9]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 80020bc:	89bb      	ldrh	r3, [r7, #12]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80020e0 <READ_EPS_BATT_2_TEMP+0x60>
 80020ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	edc3 7a00 	vstr	s15, [r3]
    return status;
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	3b800000 	.word	0x3b800000

080020e4 <READ_EPS_BATT_3_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 3 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_3_TEMP(float* temp_ptr){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 21; //battery cell 3 temperature command
 80020f0:	2315      	movs	r3, #21
 80020f2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80020f4:	f107 0208 	add.w	r2, r7, #8
 80020f8:	7bbb      	ldrb	r3, [r7, #14]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 facd 	bl	800269c <EPS_READ>
 8002102:	4603      	mov	r3, r0
 8002104:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <READ_EPS_BATT_3_TEMP+0x2c>
        return status;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	e014      	b.n	800213a <READ_EPS_BATT_3_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8002110:	7a3b      	ldrb	r3, [r7, #8]
 8002112:	b29b      	uxth	r3, r3
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	b29a      	uxth	r2, r3
 8002118:	7a7b      	ldrb	r3, [r7, #9]
 800211a:	b29b      	uxth	r3, r3
 800211c:	4413      	add	r3, r2
 800211e:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8002120:	89bb      	ldrh	r3, [r7, #12]
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002144 <READ_EPS_BATT_3_TEMP+0x60>
 800212e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	edc3 7a00 	vstr	s15, [r3]
    return status;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	3b800000 	.word	0x3b800000

08002148 <READ_EPS_BATT_4_TEMP>:
/**
  * @brief Reads the temperature of the EPS battery cell 4 in degrees Celsius and stores the value in the pointed to address
  * @param temp_ptr: The address to store the returned float value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_BATT_4_TEMP(float* temp_ptr){
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 22; //battery cell 4 temperature command
 8002154:	2316      	movs	r3, #22
 8002156:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8002158:	f107 0208 	add.w	r2, r7, #8
 800215c:	7bbb      	ldrb	r3, [r7, #14]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fa9b 	bl	800269c <EPS_READ>
 8002166:	4603      	mov	r3, r0
 8002168:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <READ_EPS_BATT_4_TEMP+0x2c>
        return status;
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	e014      	b.n	800219e <READ_EPS_BATT_4_TEMP+0x56>
    }
    uint16_t raw_value = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8002174:	7a3b      	ldrb	r3, [r7, #8]
 8002176:	b29b      	uxth	r3, r3
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	b29a      	uxth	r2, r3
 800217c:	7a7b      	ldrb	r3, [r7, #9]
 800217e:	b29b      	uxth	r3, r3
 8002180:	4413      	add	r3, r2
 8002182:	81bb      	strh	r3, [r7, #12]
    (*temp_ptr) = 0.00390625f * (float) raw_value;
 8002184:	89bb      	ldrh	r3, [r7, #12]
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800218e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021a8 <READ_EPS_BATT_4_TEMP+0x60>
 8002192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	edc3 7a00 	vstr	s15, [r3]
    return status;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	3b800000 	.word	0x3b800000

080021ac <READ_EPS_INPUT_CONDITION>:
/**
  * @brief Reads raw return value of the Input Condition command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_INPUT_CONDITION(uint16_t *cond_ptr){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 23; //input conditions command
 80021b8:	2317      	movs	r3, #23
 80021ba:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80021bc:	f107 020c 	add.w	r2, r7, #12
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fa69 	bl	800269c <EPS_READ>
 80021ca:	4603      	mov	r3, r0
 80021cc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <READ_EPS_INPUT_CONDITION+0x2c>
        return status;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	e00a      	b.n	80021ee <READ_EPS_INPUT_CONDITION+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80021d8:	7b3b      	ldrb	r3, [r7, #12]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	b29a      	uxth	r2, r3
 80021e0:	7b7b      	ldrb	r3, [r7, #13]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	801a      	strh	r2, [r3, #0]
    return status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <READ_EPS_OUTPUT_CONDITION1>:
/**
  * @brief Reads raw return value of the Output Condition 1 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION1(uint16_t *cond_ptr){
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 8002202:	2318      	movs	r3, #24
 8002204:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8002206:	f107 020c 	add.w	r2, r7, #12
 800220a:	7bbb      	ldrb	r3, [r7, #14]
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fa44 	bl	800269c <EPS_READ>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8002218:	7bfb      	ldrb	r3, [r7, #15]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <READ_EPS_OUTPUT_CONDITION1+0x2c>
        return status;
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	e00a      	b.n	8002238 <READ_EPS_OUTPUT_CONDITION1+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8002222:	7b3b      	ldrb	r3, [r7, #12]
 8002224:	b29b      	uxth	r3, r3
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	b29a      	uxth	r2, r3
 800222a:	7b7b      	ldrb	r3, [r7, #13]
 800222c:	b29b      	uxth	r3, r3
 800222e:	4413      	add	r3, r2
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	801a      	strh	r2, [r3, #0]
    return status;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <READ_EPS_OUTPUT_CONDITION2>:
/**
  * @brief Reads raw return value of the Output Condition 2 command and stores the value in the pointed to address
  * @param cond_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OUTPUT_CONDITION2(uint16_t *cond_ptr){
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 24; //output conditions command
 800224c:	2318      	movs	r3, #24
 800224e:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8002250:	f107 020c 	add.w	r2, r7, #12
 8002254:	7bbb      	ldrb	r3, [r7, #14]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fa1f 	bl	800269c <EPS_READ>
 800225e:	4603      	mov	r3, r0
 8002260:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <READ_EPS_OUTPUT_CONDITION2+0x2c>
        return status;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	e00a      	b.n	8002282 <READ_EPS_OUTPUT_CONDITION2+0x42>
    }
    (*cond_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800226c:	7b3b      	ldrb	r3, [r7, #12]
 800226e:	b29b      	uxth	r3, r3
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	b29a      	uxth	r2, r3
 8002274:	7b7b      	ldrb	r3, [r7, #13]
 8002276:	b29b      	uxth	r3, r3
 8002278:	4413      	add	r3, r2
 800227a:	b29a      	uxth	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	801a      	strh	r2, [r3, #0]
    return status;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <READ_EPS_POWER_ON_CYCLES>:
/**
  * @brief Reads the current count of EPS power cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_POWER_ON_CYCLES(uint16_t *count_ptr){
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 26; //power on cycles count command
 8002296:	231a      	movs	r3, #26
 8002298:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800229a:	f107 020c 	add.w	r2, r7, #12
 800229e:	7bbb      	ldrb	r3, [r7, #14]
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f9fa 	bl	800269c <EPS_READ>
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <READ_EPS_POWER_ON_CYCLES+0x2c>
        return status;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	e00a      	b.n	80022cc <READ_EPS_POWER_ON_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80022b6:	7b3b      	ldrb	r3, [r7, #12]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	b29a      	uxth	r2, r3
 80022be:	7b7b      	ldrb	r3, [r7, #13]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	801a      	strh	r2, [r3, #0]
    return status;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <READ_EPS_UNDER_VOLT_COUNT>:
/**
  * @brief Reads the current count of EPS under-voltage occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_UNDER_VOLT_COUNT(uint16_t *count_ptr){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 27; //under voltage count command
 80022e0:	231b      	movs	r3, #27
 80022e2:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80022e4:	f107 020c 	add.w	r2, r7, #12
 80022e8:	7bbb      	ldrb	r3, [r7, #14]
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f9d5 	bl	800269c <EPS_READ>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <READ_EPS_UNDER_VOLT_COUNT+0x2c>
        return status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	e00a      	b.n	8002316 <READ_EPS_UNDER_VOLT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8002300:	7b3b      	ldrb	r3, [r7, #12]
 8002302:	b29b      	uxth	r3, r3
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	b29a      	uxth	r2, r3
 8002308:	7b7b      	ldrb	r3, [r7, #13]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4413      	add	r3, r2
 800230e:	b29a      	uxth	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	801a      	strh	r2, [r3, #0]
    return status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <READ_EPS_SHORT_CIRCUIT_COUNT>:
/**
  * @brief Reads the current count of EPS short-circuit occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_SHORT_CIRCUIT_COUNT(uint16_t *count_ptr){
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8002326:	2301      	movs	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 28; //short circuit count command
 800232a:	231c      	movs	r3, #28
 800232c:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800232e:	f107 020c 	add.w	r2, r7, #12
 8002332:	7bbb      	ldrb	r3, [r7, #14]
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f9b0 	bl	800269c <EPS_READ>
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <READ_EPS_SHORT_CIRCUIT_COUNT+0x2c>
        return status;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	e00a      	b.n	8002360 <READ_EPS_SHORT_CIRCUIT_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 800234a:	7b3b      	ldrb	r3, [r7, #12]
 800234c:	b29b      	uxth	r3, r3
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	b29a      	uxth	r2, r3
 8002352:	7b7b      	ldrb	r3, [r7, #13]
 8002354:	b29b      	uxth	r3, r3
 8002356:	4413      	add	r3, r2
 8002358:	b29a      	uxth	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	801a      	strh	r2, [r3, #0]
    return status;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <READ_EPS_OVER_TEMP_COUNT>:
/**
  * @brief Reads the current count of EPS over-temp occurrences and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_OVER_TEMP_COUNT(uint16_t *count_ptr){
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 29; //over temperature count command
 8002374:	231d      	movs	r3, #29
 8002376:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	7bbb      	ldrb	r3, [r7, #14]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f000 f98b 	bl	800269c <EPS_READ>
 8002386:	4603      	mov	r3, r0
 8002388:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <READ_EPS_OVER_TEMP_COUNT+0x2c>
        return status;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	e00a      	b.n	80023aa <READ_EPS_OVER_TEMP_COUNT+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8002394:	7b3b      	ldrb	r3, [r7, #12]
 8002396:	b29b      	uxth	r3, r3
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	b29a      	uxth	r2, r3
 800239c:	7b7b      	ldrb	r3, [r7, #13]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	801a      	strh	r2, [r3, #0]
    return status;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <READ_EPS_CHARGE_CYCLES>:
/**
  * @brief Reads the current count of EPS battery charge cycles and stores the value in the pointed to address
  * @param count_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_CHARGE_CYCLES(uint16_t *count_ptr){
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 48; //charging cycles count command
 80023be:	2330      	movs	r3, #48	; 0x30
 80023c0:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 80023c2:	f107 020c 	add.w	r2, r7, #12
 80023c6:	7bbb      	ldrb	r3, [r7, #14]
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f966 	bl	800269c <EPS_READ>
 80023d0:	4603      	mov	r3, r0
 80023d2:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <READ_EPS_CHARGE_CYCLES+0x2c>
        return status;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	e00a      	b.n	80023f4 <READ_EPS_CHARGE_CYCLES+0x42>
    }
    (*count_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 80023de:	7b3b      	ldrb	r3, [r7, #12]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	7b7b      	ldrb	r3, [r7, #13]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	801a      	strh	r2, [r3, #0]
    return status;
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <READ_EPS_DEFAULTS1>:
/**
  * @brief Reads the default values of LUPs and fast charge modes and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS1(uint16_t *default_ptr){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 43; //output 1 default value command
 8002408:	232b      	movs	r3, #43	; 0x2b
 800240a:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 800240c:	f107 020c 	add.w	r2, r7, #12
 8002410:	7bbb      	ldrb	r3, [r7, #14]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 f941 	bl	800269c <EPS_READ>
 800241a:	4603      	mov	r3, r0
 800241c:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <READ_EPS_DEFAULTS1+0x2c>
        return status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	e00a      	b.n	800243e <READ_EPS_DEFAULTS1+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8002428:	7b3b      	ldrb	r3, [r7, #12]
 800242a:	b29b      	uxth	r3, r3
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	b29a      	uxth	r2, r3
 8002430:	7b7b      	ldrb	r3, [r7, #13]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4413      	add	r3, r2
 8002436:	b29a      	uxth	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	801a      	strh	r2, [r3, #0]
    return status;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <READ_EPS_DEFAULTS2>:
/**
  * @brief Reads the default values of OUT1-OUT6 and stores the value in the pointed to address
  * @param default_ptr: The address to store the returned uint16_t value at
  * @retval Returns if all of the hal function calls succeeded, or if any of them failed
  */
HAL_StatusTypeDef READ_EPS_DEFAULTS2(uint16_t *default_ptr){
 8002446:	b580      	push	{r7, lr}
 8002448:	b084      	sub	sp, #16
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_ERROR; //status initial state is error
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
    uint8_t command = 44; //output 3 default value command
 8002452:	232c      	movs	r3, #44	; 0x2c
 8002454:	73bb      	strb	r3, [r7, #14]
    uint8_t data[2];
    status = EPS_READ(command, data);
 8002456:	f107 020c 	add.w	r2, r7, #12
 800245a:	7bbb      	ldrb	r3, [r7, #14]
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f91c 	bl	800269c <EPS_READ>
 8002464:	4603      	mov	r3, r0
 8002466:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <READ_EPS_DEFAULTS2+0x2c>
        return status;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	e00a      	b.n	8002488 <READ_EPS_DEFAULTS2+0x42>
    }
    (*default_ptr) = ((uint16_t) data[0] << 8) + (uint16_t) data[1]; //convert 2 separate bytes to unsigned 16 bits
 8002472:	7b3b      	ldrb	r3, [r7, #12]
 8002474:	b29b      	uxth	r3, r3
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	b29a      	uxth	r2, r3
 800247a:	7b7b      	ldrb	r3, [r7, #13]
 800247c:	b29b      	uxth	r3, r3
 800247e:	4413      	add	r3, r2
 8002480:	b29a      	uxth	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	801a      	strh	r2, [r3, #0]
    return status;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <enable_EPS_Vbatt_Bus>:


/********************************************** WRITE FUNCTIONS **********************************************************************************/
HAL_StatusTypeDef enable_EPS_Vbatt_Bus(){
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 1); //turn command 1 to the ON state
 8002494:	2101      	movs	r1, #1
 8002496:	2001      	movs	r0, #1
 8002498:	f000 f94a 	bl	8002730 <EPS_WRITE>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <disable_EPS_Vbatt_Bus>:

HAL_StatusTypeDef disable_EPS_Vbatt_Bus(){
 80024a2:	b580      	push	{r7, lr}
 80024a4:	af00      	add	r7, sp, #0
    return EPS_WRITE(1, 2); //turn command 1 to the FORCE OFF state
 80024a6:	2102      	movs	r1, #2
 80024a8:	2001      	movs	r0, #1
 80024aa:	f000 f941 	bl	8002730 <EPS_WRITE>
 80024ae:	4603      	mov	r3, r0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <disable_EPS_BCR_Bus>:

HAL_StatusTypeDef enable_EPS_BCR_Bus(){
    return EPS_WRITE(2, 1); //turn command 2 to the ON state
}

HAL_StatusTypeDef disable_EPS_BCR_Bus(){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
    return EPS_WRITE(2, 0); //turn command 2 to the OFF state
 80024b8:	2100      	movs	r1, #0
 80024ba:	2002      	movs	r0, #2
 80024bc:	f000 f938 	bl	8002730 <EPS_WRITE>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <enable_EPS_5v_Bus>:

HAL_StatusTypeDef enable_EPS_5v_Bus(){
 80024c6:	b580      	push	{r7, lr}
 80024c8:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 1); //turn command 4 to the ON state
 80024ca:	2101      	movs	r1, #1
 80024cc:	2004      	movs	r0, #4
 80024ce:	f000 f92f 	bl	8002730 <EPS_WRITE>
 80024d2:	4603      	mov	r3, r0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <disable_EPS_5v_Bus>:

HAL_StatusTypeDef disable_EPS_5v_Bus(){
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
    return EPS_WRITE(4, 2); //turn command 4 to the FORCE OFF state
 80024dc:	2102      	movs	r1, #2
 80024de:	2004      	movs	r0, #4
 80024e0:	f000 f926 	bl	8002730 <EPS_WRITE>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	bd80      	pop	{r7, pc}

080024ea <enable_EPS_LUP_3v>:

HAL_StatusTypeDef enable_EPS_LUP_3v(){
 80024ea:	b580      	push	{r7, lr}
 80024ec:	af00      	add	r7, sp, #0
    return EPS_WRITE(5, 0); //turn command 5 to the ON state
 80024ee:	2100      	movs	r1, #0
 80024f0:	2005      	movs	r0, #5
 80024f2:	f000 f91d 	bl	8002730 <EPS_WRITE>
 80024f6:	4603      	mov	r3, r0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}

080024fc <disable_EPS_LUP_3v>:

HAL_StatusTypeDef disable_EPS_LUP_3v(){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
    return EPS_WRITE(5, 1); //turn command 5 to the OFF state
 8002500:	2101      	movs	r1, #1
 8002502:	2005      	movs	r0, #5
 8002504:	f000 f914 	bl	8002730 <EPS_WRITE>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}

0800250e <enable_EPS_LUP_5v>:

HAL_StatusTypeDef enable_EPS_LUP_5v(){
 800250e:	b580      	push	{r7, lr}
 8002510:	af00      	add	r7, sp, #0
    return EPS_WRITE(6, 0); //turn command 6 to the ON state
 8002512:	2100      	movs	r1, #0
 8002514:	2006      	movs	r0, #6
 8002516:	f000 f90b 	bl	8002730 <EPS_WRITE>
 800251a:	4603      	mov	r3, r0
}
 800251c:	4618      	mov	r0, r3
 800251e:	bd80      	pop	{r7, pc}

08002520 <disable_EPS_LUP_5v>:

HAL_StatusTypeDef disable_EPS_LUP_5v(){
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
    return EPS_WRITE(6, 1); //turn command 6 to the OFF state
 8002524:	2101      	movs	r1, #1
 8002526:	2006      	movs	r0, #6
 8002528:	f000 f902 	bl	8002730 <EPS_WRITE>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	bd80      	pop	{r7, pc}

08002532 <enable_EPS_Fast_Charge1>:

HAL_StatusTypeDef enable_EPS_Fast_Charge1(){
 8002532:	b580      	push	{r7, lr}
 8002534:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 1); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8002536:	2101      	movs	r1, #1
 8002538:	2008      	movs	r0, #8
 800253a:	f000 f8f9 	bl	8002730 <EPS_WRITE>
 800253e:	4603      	mov	r3, r0
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}

08002544 <disable_EPS_Fast_Charge1>:

HAL_StatusTypeDef disable_EPS_Fast_Charge1(){
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
    return EPS_WRITE(8, 0); //turn command 8 to the ON state (HIGH = Fast?, LOW = Slow?)
 8002548:	2100      	movs	r1, #0
 800254a:	2008      	movs	r0, #8
 800254c:	f000 f8f0 	bl	8002730 <EPS_WRITE>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}

08002556 <enable_EPS_Fast_Charge2>:

HAL_StatusTypeDef enable_EPS_Fast_Charge2(){
 8002556:	b580      	push	{r7, lr}
 8002558:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 1); //turn command 9 to the ON state (HIGH = Fast?, LOW = Slow?)
 800255a:	2101      	movs	r1, #1
 800255c:	2009      	movs	r0, #9
 800255e:	f000 f8e7 	bl	8002730 <EPS_WRITE>
 8002562:	4603      	mov	r3, r0
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}

08002568 <disable_EPS_Fast_Charge2>:

HAL_StatusTypeDef disable_EPS_Fast_Charge2(){
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
    return EPS_WRITE(9, 0); //turn command 9 to the OFF state (HIGH = Fast?, LOW = Slow?)
 800256c:	2100      	movs	r1, #0
 800256e:	2009      	movs	r0, #9
 8002570:	f000 f8de 	bl	8002730 <EPS_WRITE>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	bd80      	pop	{r7, pc}

0800257a <enable_Boost_Board>:

HAL_StatusTypeDef enable_Boost_Board(){
 800257a:	b580      	push	{r7, lr}
 800257c:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 1); //turn command 10 to the ON state
 800257e:	2101      	movs	r1, #1
 8002580:	200a      	movs	r0, #10
 8002582:	f000 f8d5 	bl	8002730 <EPS_WRITE>
 8002586:	4603      	mov	r3, r0
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}

0800258c <disable_Boost_Board>:

HAL_StatusTypeDef disable_Boost_Board(){
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
    return EPS_WRITE(10, 0); //turn command 10 to the OFF state
 8002590:	2100      	movs	r1, #0
 8002592:	200a      	movs	r0, #10
 8002594:	f000 f8cc 	bl	8002730 <EPS_WRITE>
 8002598:	4603      	mov	r3, r0
}
 800259a:	4618      	mov	r0, r3
 800259c:	bd80      	pop	{r7, pc}

0800259e <enable_Payload>:

HAL_StatusTypeDef enable_Payload(){
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 1); //turn command 11 to the ON state
 80025a2:	2101      	movs	r1, #1
 80025a4:	200b      	movs	r0, #11
 80025a6:	f000 f8c3 	bl	8002730 <EPS_WRITE>
 80025aa:	4603      	mov	r3, r0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <disable_Payload>:

HAL_StatusTypeDef disable_Payload(){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
    return EPS_WRITE(11, 0); //turn command 11 to the OFF state
 80025b4:	2100      	movs	r1, #0
 80025b6:	200b      	movs	r0, #11
 80025b8:	f000 f8ba 	bl	8002730 <EPS_WRITE>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <enable_EPS_Output_3>:

HAL_StatusTypeDef enable_EPS_Output_3(){
 80025c2:	b580      	push	{r7, lr}
 80025c4:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 1); //turn command 12 to the ON state
 80025c6:	2101      	movs	r1, #1
 80025c8:	200c      	movs	r0, #12
 80025ca:	f000 f8b1 	bl	8002730 <EPS_WRITE>
 80025ce:	4603      	mov	r3, r0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <disable_EPS_Output_3>:

HAL_StatusTypeDef disable_EPS_Output_3(){
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
    return EPS_WRITE(12, 0); //turn command 12 to the OFF state
 80025d8:	2100      	movs	r1, #0
 80025da:	200c      	movs	r0, #12
 80025dc:	f000 f8a8 	bl	8002730 <EPS_WRITE>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <enable_UHF>:

HAL_StatusTypeDef enable_UHF(){
 80025e6:	b580      	push	{r7, lr}
 80025e8:	af00      	add	r7, sp, #0
    return EPS_WRITE(14, 1); //turn command 14 to the ON state
 80025ea:	2101      	movs	r1, #1
 80025ec:	200e      	movs	r0, #14
 80025ee:	f000 f89f 	bl	8002730 <EPS_WRITE>
 80025f2:	4603      	mov	r3, r0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <disable_UHF>:

HAL_StatusTypeDef disable_UHF(){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
//    osThreadTerminate(myUHFTask);
//    osThreadDef(myUHFTask, UHF_Task, osPriorityNormal, 0, 512);
//    osThreadCreate(osThread(myUHFTask), NULL);
    return EPS_WRITE(14, 0); //turn command 14 to the OFF state
 80025fc:	2100      	movs	r1, #0
 80025fe:	200e      	movs	r0, #14
 8002600:	f000 f896 	bl	8002730 <EPS_WRITE>
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	bd80      	pop	{r7, pc}

0800260a <enable_EPS_Output_6>:

HAL_StatusTypeDef enable_EPS_Output_6(){
 800260a:	b580      	push	{r7, lr}
 800260c:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 1); //turn command 15 to the ON state
 800260e:	2101      	movs	r1, #1
 8002610:	200f      	movs	r0, #15
 8002612:	f000 f88d 	bl	8002730 <EPS_WRITE>
 8002616:	4603      	mov	r3, r0
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}

0800261c <disable_EPS_Output_6>:

HAL_StatusTypeDef disable_EPS_Output_6(){
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
    return EPS_WRITE(15, 0); //turn command 15 to the OFF state
 8002620:	2100      	movs	r1, #0
 8002622:	200f      	movs	r0, #15
 8002624:	f000 f884 	bl	8002730 <EPS_WRITE>
 8002628:	4603      	mov	r3, r0
}
 800262a:	4618      	mov	r0, r3
 800262c:	bd80      	pop	{r7, pc}

0800262e <enable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_1(){
 800262e:	b580      	push	{r7, lr}
 8002630:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 1); //turn command 16 to the ON state
 8002632:	2101      	movs	r1, #1
 8002634:	2010      	movs	r0, #16
 8002636:	f000 f87b 	bl	8002730 <EPS_WRITE>
 800263a:	4603      	mov	r3, r0
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}

08002640 <disable_EPS_Batt_Heater_1>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_1(){
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
    return EPS_WRITE(16, 0); //turn command 16 to the OFF state
 8002644:	2100      	movs	r1, #0
 8002646:	2010      	movs	r0, #16
 8002648:	f000 f872 	bl	8002730 <EPS_WRITE>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	bd80      	pop	{r7, pc}

08002652 <enable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_2(){
 8002652:	b580      	push	{r7, lr}
 8002654:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 1); //turn command 17 to the ON state
 8002656:	2101      	movs	r1, #1
 8002658:	2011      	movs	r0, #17
 800265a:	f000 f869 	bl	8002730 <EPS_WRITE>
 800265e:	4603      	mov	r3, r0
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}

08002664 <disable_EPS_Batt_Heater_2>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_2(){
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
    return EPS_WRITE(17, 0); //turn command 17 to the OFF state
 8002668:	2100      	movs	r1, #0
 800266a:	2011      	movs	r0, #17
 800266c:	f000 f860 	bl	8002730 <EPS_WRITE>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	bd80      	pop	{r7, pc}

08002676 <enable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef enable_EPS_Batt_Heater_3(){
 8002676:	b580      	push	{r7, lr}
 8002678:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 1); //turn command 18 to the ON state
 800267a:	2101      	movs	r1, #1
 800267c:	2012      	movs	r0, #18
 800267e:	f000 f857 	bl	8002730 <EPS_WRITE>
 8002682:	4603      	mov	r3, r0
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}

08002688 <disable_EPS_Batt_Heater_3>:

HAL_StatusTypeDef disable_EPS_Batt_Heater_3(){
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
    return EPS_WRITE(18, 0); //turn command 18 to the OFF state
 800268c:	2100      	movs	r1, #0
 800268e:	2012      	movs	r0, #18
 8002690:	f000 f84e 	bl	8002730 <EPS_WRITE>
 8002694:	4603      	mov	r3, r0
}
 8002696:	4618      	mov	r0, r3
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <EPS_READ>:
  * @brief Sends a write command to the EPS module over a given I2C instance and reads back a response
  * @param command : the command to be used on the transceiver
  * @param data_ptr : A pointer to allow information from the health check to be viewed.
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_READ(uint8_t command, uint8_t* data_ptr){
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
    osMutexWait(EPS_I2C_Mutex, 2500);
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <EPS_READ+0x88>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80026b0:	4618      	mov	r0, r3
 80026b2:	f00a fc05 	bl	800cec0 <osMutexWait>

    HAL_StatusTypeDef status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
    status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), &command, 1, EPS_I2C_TIMEOUT);
 80026ba:	1dfa      	adds	r2, r7, #7
 80026bc:	2364      	movs	r3, #100	; 0x64
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2301      	movs	r3, #1
 80026c2:	2130      	movs	r1, #48	; 0x30
 80026c4:	4818      	ldr	r0, [pc, #96]	; (8002728 <EPS_READ+0x8c>)
 80026c6:	f002 f815 	bl	80046f4 <HAL_I2C_Master_Transmit>
 80026ca:	4603      	mov	r3, r0
 80026cc:	73fb      	strb	r3, [r7, #15]
    if(status != HAL_OK){
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <EPS_READ+0x50>
        NUM_I2C_ERRORS++;
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <EPS_READ+0x90>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	4a14      	ldr	r2, [pc, #80]	; (800272c <EPS_READ+0x90>)
 80026dc:	6013      	str	r3, [r2, #0]
        osMutexRelease(EPS_I2C_Mutex);
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <EPS_READ+0x88>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f00a fc3c 	bl	800cf60 <osMutexRelease>
        return status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	e017      	b.n	800271c <EPS_READ+0x80>
    }
    status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data_ptr, 2, EPS_I2C_TIMEOUT);
 80026ec:	2364      	movs	r3, #100	; 0x64
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2302      	movs	r3, #2
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	2130      	movs	r1, #48	; 0x30
 80026f6:	480c      	ldr	r0, [pc, #48]	; (8002728 <EPS_READ+0x8c>)
 80026f8:	f002 f90a 	bl	8004910 <HAL_I2C_Master_Receive>
 80026fc:	4603      	mov	r3, r0
 80026fe:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK){
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <EPS_READ+0x74>
        NUM_I2C_ERRORS++;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <EPS_READ+0x90>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <EPS_READ+0x90>)
 800270e:	6013      	str	r3, [r2, #0]
    }

    osMutexRelease(EPS_I2C_Mutex);
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <EPS_READ+0x88>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f00a fc23 	bl	800cf60 <osMutexRelease>
    return status;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20007c74 	.word	0x20007c74
 8002728:	20007e10 	.word	0x20007e10
 800272c:	2000025c 	.word	0x2000025c

08002730 <EPS_WRITE>:
/**
  * @brief Sends a write command to the EPS module over a given I2C instance
  * @param state: the state to set the output specified by the command to (0 or 1)
  * @retval Returns if the hal function call succeeded, or if it failed
  */
HAL_StatusTypeDef EPS_WRITE(uint8_t command, uint8_t state){
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af02      	add	r7, sp, #8
 8002736:	4603      	mov	r3, r0
 8002738:	460a      	mov	r2, r1
 800273a:	71fb      	strb	r3, [r7, #7]
 800273c:	4613      	mov	r3, r2
 800273e:	71bb      	strb	r3, [r7, #6]
    osMutexWait(EPS_I2C_Mutex, 1500);
 8002740:	4b14      	ldr	r3, [pc, #80]	; (8002794 <EPS_WRITE+0x64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002748:	4618      	mov	r0, r3
 800274a:	f00a fbb9 	bl	800cec0 <osMutexWait>

    HAL_StatusTypeDef status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];
    data[0] = command;
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	733b      	strb	r3, [r7, #12]
    data[1] = state;
 8002756:	79bb      	ldrb	r3, [r7, #6]
 8002758:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) (EPS_I2C_ADDRESS << 0x1), data, 2, EPS_I2C_TIMEOUT);
 800275a:	f107 020c 	add.w	r2, r7, #12
 800275e:	2364      	movs	r3, #100	; 0x64
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	2302      	movs	r3, #2
 8002764:	2130      	movs	r1, #48	; 0x30
 8002766:	480c      	ldr	r0, [pc, #48]	; (8002798 <EPS_WRITE+0x68>)
 8002768:	f001 ffc4 	bl	80046f4 <HAL_I2C_Master_Transmit>
 800276c:	4603      	mov	r3, r0
 800276e:	73fb      	strb	r3, [r7, #15]

    if(status != HAL_OK){
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <EPS_WRITE+0x50>
        NUM_I2C_ERRORS++;
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <EPS_WRITE+0x6c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3301      	adds	r3, #1
 800277c:	4a07      	ldr	r2, [pc, #28]	; (800279c <EPS_WRITE+0x6c>)
 800277e:	6013      	str	r3, [r2, #0]
    }

    osMutexRelease(EPS_I2C_Mutex);
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <EPS_WRITE+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f00a fbeb 	bl	800cf60 <osMutexRelease>
    return status;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20007c74 	.word	0x20007c74
 8002798:	20007e10 	.word	0x20007e10
 800279c:	2000025c 	.word	0x2000025c

080027a0 <sendErrorPacket>:
/**
 * @brief This function sends an error packet to the Ground Station
 * @retval Whether or not the transmission successfully left the satellite (does not know if it reached the ground station)
 * This function will return a 0 if there was no issue, otherwise, there was an error.
 */
int sendErrorPacket(){
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
    CySat_Packet_t cySatPacket;
    cySatPacket.Subsystem_Type = OBC_SUBSYSTEM_TYPE;
 80027a6:	230a      	movs	r3, #10
 80027a8:	713b      	strb	r3, [r7, #4]
    cySatPacket.Command = 0xFF;
 80027aa:	23ff      	movs	r3, #255	; 0xff
 80027ac:	717b      	strb	r3, [r7, #5]
    cySatPacket.Data_Length = 0x02;
 80027ae:	2302      	movs	r3, #2
 80027b0:	71bb      	strb	r3, [r7, #6]
    cySatPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 2);
 80027b2:	2002      	movs	r0, #2
 80027b4:	f010 f862 	bl	801287c <malloc>
 80027b8:	4603      	mov	r3, r0
 80027ba:	60bb      	str	r3, [r7, #8]
    cySatPacket.Data[0] = 0xFF;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	701a      	strb	r2, [r3, #0]
    cySatPacket.Data[1] = 0xFF;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	3301      	adds	r3, #1
 80027c6:	22ff      	movs	r2, #255	; 0xff
 80027c8:	701a      	strb	r2, [r3, #0]
    cySatPacket.Checksum = generateCySatChecksum(cySatPacket);
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027d0:	f7ff f8ea 	bl	80019a8 <generateCySatChecksum>
 80027d4:	4603      	mov	r3, r0
 80027d6:	733b      	strb	r3, [r7, #12]
    return sendCySatPacket(cySatPacket);
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027de:	f7ff f867 	bl	80018b0 <sendCySatPacket>
 80027e2:	4603      	mov	r3, r0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <handleCySatPacket>:
/**
 * @brief This function takes in a newly received CySat Packet and acts upon the command within
 * @param packet: the packet to handle
 * @retval A zero indicates success, -1 means the command or subtype is unrecognized, else means failure
 */
int handleCySatPacket(CySat_Packet_t packet){
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b0a9      	sub	sp, #164	; 0xa4
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    HAL_StatusTypeDef status;
    CySat_Packet_t outgoingPacket;
    switch(packet.Subsystem_Type){
 80027f8:	793b      	ldrb	r3, [r7, #4]
 80027fa:	2b28      	cmp	r3, #40	; 0x28
 80027fc:	dc48      	bgt.n	8002890 <handleCySatPacket+0xa4>
 80027fe:	2b0a      	cmp	r3, #10
 8002800:	f2c0 86df 	blt.w	80035c2 <handleCySatPacket+0xdd6>
 8002804:	3b0a      	subs	r3, #10
 8002806:	2b1e      	cmp	r3, #30
 8002808:	f200 86db 	bhi.w	80035c2 <handleCySatPacket+0xdd6>
 800280c:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <handleCySatPacket+0x28>)
 800280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	080035c9 	.word	0x080035c9
 8002818:	080035c3 	.word	0x080035c3
 800281c:	080035c3 	.word	0x080035c3
 8002820:	080035c3 	.word	0x080035c3
 8002824:	080035c3 	.word	0x080035c3
 8002828:	080035c3 	.word	0x080035c3
 800282c:	080035c3 	.word	0x080035c3
 8002830:	080035c3 	.word	0x080035c3
 8002834:	080035c3 	.word	0x080035c3
 8002838:	080035c3 	.word	0x080035c3
 800283c:	080035c9 	.word	0x080035c9
 8002840:	080035c3 	.word	0x080035c3
 8002844:	080035c3 	.word	0x080035c3
 8002848:	080035c3 	.word	0x080035c3
 800284c:	080035c3 	.word	0x080035c3
 8002850:	080035c3 	.word	0x080035c3
 8002854:	080035c3 	.word	0x080035c3
 8002858:	080035c3 	.word	0x080035c3
 800285c:	080035c3 	.word	0x080035c3
 8002860:	080035c3 	.word	0x080035c3
 8002864:	0800289b 	.word	0x0800289b
 8002868:	080035c3 	.word	0x080035c3
 800286c:	080035c3 	.word	0x080035c3
 8002870:	080035c3 	.word	0x080035c3
 8002874:	080035c3 	.word	0x080035c3
 8002878:	080035c3 	.word	0x080035c3
 800287c:	080035c3 	.word	0x080035c3
 8002880:	080035c3 	.word	0x080035c3
 8002884:	080035c3 	.word	0x080035c3
 8002888:	080035c3 	.word	0x080035c3
 800288c:	080035c9 	.word	0x080035c9
 8002890:	2b5a      	cmp	r3, #90	; 0x5a
 8002892:	f000 869b 	beq.w	80035cc <handleCySatPacket+0xde0>
 8002896:	f000 be94 	b.w	80035c2 <handleCySatPacket+0xdd6>
        case ADCS_SUBSYSTEM_TYPE: //ADCS

            break;

        case EPS_SUBSYSTEM_TYPE: //EPS
            switch(packet.Command){
 800289a:	797b      	ldrb	r3, [r7, #5]
 800289c:	3b01      	subs	r3, #1
 800289e:	2b10      	cmp	r3, #16
 80028a0:	f200 8696 	bhi.w	80035d0 <handleCySatPacket+0xde4>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <handleCySatPacket+0xc0>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028f1 	.word	0x080028f1
 80028b0:	080035d1 	.word	0x080035d1
 80028b4:	080029cb 	.word	0x080029cb
 80028b8:	080035d1 	.word	0x080035d1
 80028bc:	08002b03 	.word	0x08002b03
 80028c0:	080035d1 	.word	0x080035d1
 80028c4:	08002c3b 	.word	0x08002c3b
 80028c8:	080035d1 	.word	0x080035d1
 80028cc:	08002d73 	.word	0x08002d73
 80028d0:	080035d1 	.word	0x080035d1
 80028d4:	08002e5b 	.word	0x08002e5b
 80028d8:	080035d1 	.word	0x080035d1
 80028dc:	08003023 	.word	0x08003023
 80028e0:	080035d1 	.word	0x080035d1
 80028e4:	08003145 	.word	0x08003145
 80028e8:	080035d1 	.word	0x080035d1
 80028ec:	0800329f 	.word	0x0800329f
                case 0x01: { //Battery Pack Voltage/Current Request
                    float voltage, current;
                    status = READ_EPS_BATTERY_VOLTAGE(&voltage); //read the voltage from the EPS Battery Pack
 80028f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff f8c9 	bl	8001a8c <READ_EPS_BATTERY_VOLTAGE>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002900:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <handleCySatPacket+0x124>
                        return -1;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800290c:	f000 be62 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATTERY_CURRENT(&current); //read the current from the EPS Battery Pack
 8002910:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff f8eb 	bl	8001af0 <READ_EPS_BATTERY_CURRENT>
 800291a:	4603      	mov	r3, r0
 800291c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002920:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <handleCySatPacket+0x144>
                        return -1;
 8002928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800292c:	f000 be52 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(voltage);
 8002930:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002934:	eeb0 0a67 	vmov.f32	s0, s15
 8002938:	f000 fea2 	bl	8003680 <FloatToUnsigned16bits>
 800293c:	4603      	mov	r3, r0
 800293e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
                    uint16_t data2 = FloatToUnsigned16bits(current);
 8002942:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002946:	eeb0 0a67 	vmov.f32	s0, s15
 800294a:	f000 fe99 	bl	8003680 <FloatToUnsigned16bits>
 800294e:	4603      	mov	r3, r0
 8002950:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002954:	231e      	movs	r3, #30
 8002956:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x00; //Battery Pack Voltage/Current Response
 800295a:	2300      	movs	r3, #0
 800295c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 8002960:	2304      	movs	r3, #4
 8002962:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8002966:	2004      	movs	r0, #4
 8002968:	f00f ff88 	bl	801287c <malloc>
 800296c:	4603      	mov	r3, r0
 800296e:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002970:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	b29a      	uxth	r2, r3
 8002978:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 800297e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002980:	3301      	adds	r3, #1
 8002982:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 800298a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	b29a      	uxth	r2, r3
 8002992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002994:	3302      	adds	r3, #2
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 800299a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800299c:	3303      	adds	r3, #3
 800299e:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 80029a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029ae:	f7fe fffb 	bl	80019a8 <generateCySatChecksum>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    return sendCySatPacket(outgoingPacket); //send the response
 80029b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029c0:	f7fe ff76 	bl	80018b0 <sendCySatPacket>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f000 be05 	b.w	80035d4 <handleCySatPacket+0xde8>
                }
                case 0x03: { //Solar Panel X Status Request
                    float x_voltage, x_neg_current, x_pos_current;
                    status = READ_EPS_SOLAR_X_VOLTAGE(&x_voltage); //read the Solar Panel X axis voltage
 80029ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f8c0 	bl	8001b54 <READ_EPS_SOLAR_X_VOLTAGE>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80029da:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <handleCySatPacket+0x1fe>
                        return -1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029e6:	f000 bdf5 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_X_NEG_CURRENT(&x_neg_current); //read the Solar Panel X- current
 80029ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff f8e2 	bl	8001bb8 <READ_EPS_SOLAR_X_NEG_CURRENT>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80029fa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <handleCySatPacket+0x21e>
                        return -1;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a06:	f000 bde5 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_X_POS_CURRENT(&x_pos_current); //read the Solar Panel X+ current
 8002a0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff f904 	bl	8001c1c <READ_EPS_SOLAR_X_POS_CURRENT>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002a1a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <handleCySatPacket+0x23e>
                        return -1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a26:	f000 bdd5 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(x_voltage);
 8002a2a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a32:	f000 fe25 	bl	8003680 <FloatToUnsigned16bits>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
                    uint16_t data2 = FloatToUnsigned16bits(x_neg_current);
 8002a3c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002a40:	eeb0 0a67 	vmov.f32	s0, s15
 8002a44:	f000 fe1c 	bl	8003680 <FloatToUnsigned16bits>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
                    uint16_t data3 = FloatToUnsigned16bits(x_pos_current);
 8002a4e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a52:	eeb0 0a67 	vmov.f32	s0, s15
 8002a56:	f000 fe13 	bl	8003680 <FloatToUnsigned16bits>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002a60:	231e      	movs	r3, #30
 8002a62:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x02; //Solar Panel X Status Response
 8002a66:	2302      	movs	r3, #2
 8002a68:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8002a6c:	2306      	movs	r3, #6
 8002a6e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8002a72:	2006      	movs	r0, #6
 8002a74:	f00f ff02 	bl	801287c <malloc>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002a7c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002a96:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa8:	3303      	adds	r3, #3
 8002aaa:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8002ab2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002abc:	3304      	adds	r3, #4
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac4:	3305      	adds	r3, #5
 8002ac6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002ace:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ad2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ad6:	f7fe ff67 	bl	80019a8 <generateCySatChecksum>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002ae0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ae4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ae8:	f7fe fee2 	bl	80018b0 <sendCySatPacket>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af4:	4618      	mov	r0, r3
 8002af6:	f00f fec9 	bl	801288c <free>
                    return status; //send the response
 8002afa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002afe:	f000 bd69 	b.w	80035d4 <handleCySatPacket+0xde8>
                }
                case 0x05: { //Solar Panel Y Status Request
                    float y_voltage, y_neg_current, y_pos_current;
                    status = READ_EPS_SOLAR_Y_VOLTAGE(&y_voltage); //read the Solar Panel Y axis voltage
 8002b02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f8ba 	bl	8001c80 <READ_EPS_SOLAR_Y_VOLTAGE>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002b12:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <handleCySatPacket+0x336>
                        return -1;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b1e:	f000 bd59 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Y_NEG_CURRENT(&y_neg_current); //read the Solar Panel Y- current
 8002b22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff f8dc 	bl	8001ce4 <READ_EPS_SOLAR_Y_NEG_CURRENT>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002b32:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <handleCySatPacket+0x356>
                        return -1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b3e:	f000 bd49 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Y_POS_CURRENT(&y_pos_current); //read the Solar Panel Y+ current
 8002b42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f8fe 	bl	8001d48 <READ_EPS_SOLAR_Y_POS_CURRENT>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002b52:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <handleCySatPacket+0x376>
                        return -1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b5e:	f000 bd39 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(y_voltage);
 8002b62:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002b66:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6a:	f000 fd89 	bl	8003680 <FloatToUnsigned16bits>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
                    uint16_t data2 = FloatToUnsigned16bits(y_neg_current);
 8002b74:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002b78:	eeb0 0a67 	vmov.f32	s0, s15
 8002b7c:	f000 fd80 	bl	8003680 <FloatToUnsigned16bits>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
                    uint16_t data3 = FloatToUnsigned16bits(y_pos_current);
 8002b86:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b8e:	f000 fd77 	bl	8003680 <FloatToUnsigned16bits>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002b98:	231e      	movs	r3, #30
 8002b9a:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x04; //Solar Panel Y Status Response
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8002ba4:	2306      	movs	r3, #6
 8002ba6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8002baa:	2006      	movs	r0, #6
 8002bac:	f00f fe66 	bl	801287c <malloc>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002bb4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002bce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd8:	3302      	adds	r3, #2
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002be0:	3303      	adds	r3, #3
 8002be2:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8002bea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bfc:	3305      	adds	r3, #5
 8002bfe:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002c06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c0e:	f7fe fecb 	bl	80019a8 <generateCySatChecksum>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002c18:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c20:	f7fe fe46 	bl	80018b0 <sendCySatPacket>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f00f fe2d 	bl	801288c <free>
                    return status; //send the response
 8002c32:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002c36:	f000 bccd 	b.w	80035d4 <handleCySatPacket+0xde8>
                }
                case 0x07: { //Solar Panel Z Status Request
                    float z_voltage, z_neg_current, z_pos_current;
                    status = READ_EPS_SOLAR_Z_VOLTAGE(&z_voltage); //read the Solar Panel Z axis voltage
 8002c3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff f8b4 	bl	8001dac <READ_EPS_SOLAR_Z_VOLTAGE>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002c4a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <handleCySatPacket+0x46e>
                        return -1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c56:	f000 bcbd 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Z_NEG_CURRENT(&z_neg_current); //read the Solar Panel Z- current
 8002c5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff f8d6 	bl	8001e10 <READ_EPS_SOLAR_Z_NEG_CURRENT>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002c6a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <handleCySatPacket+0x48e>
                        return -1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c76:	f000 bcad 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SOLAR_Z_POS_CURRENT(&z_pos_current); //read the Solar Panel Z+ current
 8002c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff f8f8 	bl	8001e74 <READ_EPS_SOLAR_Z_POS_CURRENT>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002c8a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <handleCySatPacket+0x4ae>
                        return -1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c96:	f000 bc9d 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(z_voltage);
 8002c9a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca2:	f000 fced 	bl	8003680 <FloatToUnsigned16bits>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
                    uint16_t data2 = FloatToUnsigned16bits(z_neg_current);
 8002cac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb4:	f000 fce4 	bl	8003680 <FloatToUnsigned16bits>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
                    uint16_t data3 = FloatToUnsigned16bits(z_pos_current);
 8002cbe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc6:	f000 fcdb 	bl	8003680 <FloatToUnsigned16bits>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002cd0:	231e      	movs	r3, #30
 8002cd2:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x06; //Solar Panel Z Status Response
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 8002cdc:	2306      	movs	r3, #6
 8002cde:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 8002ce2:	2006      	movs	r0, #6
 8002ce4:	f00f fdca 	bl	801287c <malloc>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002cec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002d06:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d10:	3302      	adds	r3, #2
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d18:	3303      	adds	r3, #3
 8002d1a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8002d22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d34:	3305      	adds	r3, #5
 8002d36:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002d3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d46:	f7fe fe2f 	bl	80019a8 <generateCySatChecksum>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002d50:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d58:	f7fe fdaa 	bl	80018b0 <sendCySatPacket>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002d62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d64:	4618      	mov	r0, r3
 8002d66:	f00f fd91 	bl	801288c <free>
                    return status; //send the response
 8002d6a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002d6e:	f000 bc31 	b.w	80035d4 <handleCySatPacket+0xde8>
                }
                case 0x09: { //BUS Current Request
                    float current_3, current_5;
                    status = READ_EPS_3V_CURRENT(&current_3); //read the 3.3v BUS current
 8002d72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f8ae 	bl	8001ed8 <READ_EPS_3V_CURRENT>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002d82:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <handleCySatPacket+0x5a6>
                        return -1;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d8e:	f000 bc21 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_5V_CURRENT(&current_5); //read the 5v BUS current
 8002d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f8d0 	bl	8001f3c <READ_EPS_5V_CURRENT>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002da2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <handleCySatPacket+0x5c6>
                        return -1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dae:	f000 bc11 	b.w	80035d4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(current_3);
 8002db2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002db6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dba:	f000 fc61 	bl	8003680 <FloatToUnsigned16bits>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
                    uint16_t data2 = FloatToUnsigned16bits(current_5);
 8002dc4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dcc:	f000 fc58 	bl	8003680 <FloatToUnsigned16bits>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002dd6:	231e      	movs	r3, #30
 8002dd8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x08; //BUS Current Response
 8002ddc:	2308      	movs	r3, #8
 8002dde:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x04;
 8002de2:	2304      	movs	r3, #4
 8002de4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 4);
 8002de8:	2004      	movs	r0, #4
 8002dea:	f00f fd47 	bl	801287c <malloc>
 8002dee:	4603      	mov	r3, r0
 8002df0:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002df2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e02:	3301      	adds	r3, #1
 8002e04:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002e0c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e16:	3302      	adds	r3, #2
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002e1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e1e:	3303      	adds	r3, #3
 8002e20:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002e28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e30:	f7fe fdba 	bl	80019a8 <generateCySatChecksum>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8002e3a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e42:	f7fe fd35 	bl	80018b0 <sendCySatPacket>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8002e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f00f fd1c 	bl	801288c <free>
                    return status; //send the response
 8002e54:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002e58:	e3bc      	b.n	80035d4 <handleCySatPacket+0xde8>
                }
                case 0x0B: { //Temperature Request
                    float mcu_temp, battery1_temp, battery2_temp, battery3_temp, battery4_temp;
                    status = READ_EPS_MCU_TEMP(&mcu_temp); //read the MCU Temperature
 8002e5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff f89e 	bl	8001fa0 <READ_EPS_MCU_TEMP>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002e6a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <handleCySatPacket+0x68c>
                        return -1;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e76:	e3ad      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_1_TEMP(&battery1_temp); //read the Battery Cell 1 Temperature
 8002e78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff f8cd 	bl	800201c <READ_EPS_BATT_1_TEMP>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002e88:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <handleCySatPacket+0x6aa>
                        return -1;
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e94:	e39e      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_2_TEMP(&battery2_temp); //read the Battery Cell 2 Temperature
 8002e96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff f8f0 	bl	8002080 <READ_EPS_BATT_2_TEMP>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002ea6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <handleCySatPacket+0x6c8>
                        return -1;
 8002eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eb2:	e38f      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_3_TEMP(&battery3_temp); //read the Battery Cell 3 Temperature
 8002eb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff f913 	bl	80020e4 <READ_EPS_BATT_3_TEMP>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002ec4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <handleCySatPacket+0x6e6>
                        return -1;
 8002ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ed0:	e380      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_BATT_4_TEMP(&battery4_temp); //read the Battery Cell 4 Temperature
 8002ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff f936 	bl	8002148 <READ_EPS_BATT_4_TEMP>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8002ee2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <handleCySatPacket+0x704>
                        return -1;
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eee:	e371      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    uint16_t data1 = FloatToUnsigned16bits(mcu_temp);
 8002ef0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef8:	f000 fbc2 	bl	8003680 <FloatToUnsigned16bits>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
                    uint16_t data2 = FloatToUnsigned16bits(battery1_temp);
 8002f02:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002f06:	eeb0 0a67 	vmov.f32	s0, s15
 8002f0a:	f000 fbb9 	bl	8003680 <FloatToUnsigned16bits>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
                    uint16_t data3 = FloatToUnsigned16bits(battery2_temp);
 8002f14:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002f18:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1c:	f000 fbb0 	bl	8003680 <FloatToUnsigned16bits>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
                    uint16_t data4 = FloatToUnsigned16bits(battery3_temp);
 8002f26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f2e:	f000 fba7 	bl	8003680 <FloatToUnsigned16bits>
 8002f32:	4603      	mov	r3, r0
 8002f34:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
                    uint16_t data5 = FloatToUnsigned16bits(battery4_temp);
 8002f38:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f40:	f000 fb9e 	bl	8003680 <FloatToUnsigned16bits>
 8002f44:	4603      	mov	r3, r0
 8002f46:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 8002f4a:	231e      	movs	r3, #30
 8002f4c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0A; //Temperature Response
 8002f50:	230a      	movs	r3, #10
 8002f52:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 8002f56:	230a      	movs	r3, #10
 8002f58:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 8002f5c:	200a      	movs	r0, #10
 8002f5e:	f00f fc8d 	bl	801287c <malloc>
 8002f62:	4603      	mov	r3, r0
 8002f64:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (data1 & 0xFF00) >> 8;
 8002f66:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = data1 & 0xFF;
 8002f74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f76:	3301      	adds	r3, #1
 8002f78:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (data2 & 0xFF00) >> 8;
 8002f80:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002f84:	0a1b      	lsrs	r3, r3, #8
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = data2 & 0xFF;
 8002f90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f92:	3303      	adds	r3, #3
 8002f94:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (data3 & 0xFF00) >> 8;
 8002f9c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002fa0:	0a1b      	lsrs	r3, r3, #8
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = data3 & 0xFF;
 8002fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fae:	3305      	adds	r3, #5
 8002fb0:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (data4 & 0xFF00) >> 8;
 8002fb8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fc2:	3306      	adds	r3, #6
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = data4 & 0xFF;
 8002fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fca:	3307      	adds	r3, #7
 8002fcc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (data5 & 0xFF00) >> 8;
 8002fd4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fde:	3308      	adds	r3, #8
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = data5 & 0xFF;
 8002fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fe6:	3309      	adds	r3, #9
 8002fe8:	f8b7 2094 	ldrh.w	r2, [r7, #148]	; 0x94
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8002ff0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ff4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ff8:	f7fe fcd6 	bl	80019a8 <generateCySatChecksum>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8003002:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800300a:	f7fe fc51 	bl	80018b0 <sendCySatPacket>
 800300e:	4603      	mov	r3, r0
 8003010:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8003014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003016:	4618      	mov	r0, r3
 8003018:	f00f fc38 	bl	801288c <free>
                    return status; //send the response
 800301c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003020:	e2d8      	b.n	80035d4 <handleCySatPacket+0xde8>
                }
                case 0x0D: { //Input, Output, and Default Conditions Request
                    uint16_t input, output1, output2, defaults1, defaults2;
                    status = READ_EPS_INPUT_CONDITION(&input); //read the Input Conditions
 8003022:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f8c0 	bl	80021ac <READ_EPS_INPUT_CONDITION>
 800302c:	4603      	mov	r3, r0
 800302e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8003032:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <handleCySatPacket+0x854>
                        return -1;
 800303a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800303e:	e2c9      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OUTPUT_CONDITION1(&output1); //read the Output 1 Conditions
 8003040:	f107 0320 	add.w	r3, r7, #32
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff f8d6 	bl	80021f6 <READ_EPS_OUTPUT_CONDITION1>
 800304a:	4603      	mov	r3, r0
 800304c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8003050:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <handleCySatPacket+0x872>
                        return -1;
 8003058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800305c:	e2ba      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OUTPUT_CONDITION2(&output2); //read the Output 2 Conditions
 800305e:	f107 031e 	add.w	r3, r7, #30
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f8ec 	bl	8002240 <READ_EPS_OUTPUT_CONDITION2>
 8003068:	4603      	mov	r3, r0
 800306a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800306e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <handleCySatPacket+0x890>
                        return -1;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800307a:	e2ab      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_DEFAULTS1(&defaults1); //read the Defaults 1 Conditions
 800307c:	f107 031c 	add.w	r3, r7, #28
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff f9bb 	bl	80023fc <READ_EPS_DEFAULTS1>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 800308c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <handleCySatPacket+0x8ae>
                        return -1;
 8003094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003098:	e29c      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_DEFAULTS2(&defaults2); //read the Defaults 2 Conditions
 800309a:	f107 031a 	add.w	r3, r7, #26
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff f9d1 	bl	8002446 <READ_EPS_DEFAULTS2>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80030aa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <handleCySatPacket+0x8cc>
                        return -1;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030b6:	e28d      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80030b8:	231e      	movs	r3, #30
 80030ba:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0C; //Input, Output, and Default Conditions Response
 80030be:	230c      	movs	r3, #12
 80030c0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x06;
 80030c4:	2306      	movs	r3, #6
 80030c6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 6);
 80030ca:	2006      	movs	r0, #6
 80030cc:	f00f fbd6 	bl	801287c <malloc>
 80030d0:	4603      	mov	r3, r0
 80030d2:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = input & 0xFF;
 80030d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80030d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = (output1 & 0xFF00) >> 8;
 80030dc:	8c3b      	ldrh	r3, [r7, #32]
 80030de:	0a1b      	lsrs	r3, r3, #8
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030e4:	3301      	adds	r3, #1
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = output1 & 0xFF;
 80030ea:	8c3a      	ldrh	r2, [r7, #32]
 80030ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ee:	3302      	adds	r3, #2
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = output2 & 0xFF;
 80030f4:	8bfa      	ldrh	r2, [r7, #30]
 80030f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030f8:	3303      	adds	r3, #3
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = defaults1 & 0xFF;
 80030fe:	8bba      	ldrh	r2, [r7, #28]
 8003100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003102:	3304      	adds	r3, #4
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = defaults2 & 0xFF;
 8003108:	8b7a      	ldrh	r2, [r7, #26]
 800310a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800310c:	3305      	adds	r3, #5
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8003112:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003116:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800311a:	f7fe fc45 	bl	80019a8 <generateCySatChecksum>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 8003124:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003128:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800312c:	f7fe fbc0 	bl	80018b0 <sendCySatPacket>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8003136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003138:	4618      	mov	r0, r3
 800313a:	f00f fba7 	bl	801288c <free>
                    return status; //send the response
 800313e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003142:	e247      	b.n	80035d4 <handleCySatPacket+0xde8>
                }
                case 0x0F: { //Counter Check Request
                    uint16_t power_on, under_voltage, short_circuited, over_temp, charging_cycles;
                    status = READ_EPS_POWER_ON_CYCLES(&power_on); //read the MCU Temperature
 8003144:	f107 0318 	add.w	r3, r7, #24
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff f89e 	bl	800228a <READ_EPS_POWER_ON_CYCLES>
 800314e:	4603      	mov	r3, r0
 8003150:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8003154:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <handleCySatPacket+0x976>
                        return -1;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003160:	e238      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_UNDER_VOLT_COUNT(&under_voltage); //read the Battery Cell 1 Temperature
 8003162:	f107 0316 	add.w	r3, r7, #22
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff f8b4 	bl	80022d4 <READ_EPS_UNDER_VOLT_COUNT>
 800316c:	4603      	mov	r3, r0
 800316e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8003172:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <handleCySatPacket+0x994>
                        return -1;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800317e:	e229      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_SHORT_CIRCUIT_COUNT(&short_circuited); //read the Battery Cell 2 Temperature
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff f8ca 	bl	800231e <READ_EPS_SHORT_CIRCUIT_COUNT>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 8003190:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <handleCySatPacket+0x9b2>
                        return -1;
 8003198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800319c:	e21a      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_OVER_TEMP_COUNT(&over_temp); //read the Battery Cell 3 Temperature
 800319e:	f107 0312 	add.w	r3, r7, #18
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff f8e0 	bl	8002368 <READ_EPS_OVER_TEMP_COUNT>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80031ae:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <handleCySatPacket+0x9d0>
                        return -1;
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031ba:	e20b      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }
                    status = READ_EPS_CHARGE_CYCLES(&charging_cycles); //read the Battery Cell 4 Temperature
 80031bc:	f107 0310 	add.w	r3, r7, #16
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff f8f6 	bl	80023b2 <READ_EPS_CHARGE_CYCLES>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    if(status != HAL_OK){
 80031cc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <handleCySatPacket+0x9ee>
                        return -1;
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d8:	e1fc      	b.n	80035d4 <handleCySatPacket+0xde8>
                    }

                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 80031da:	231e      	movs	r3, #30
 80031dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x0E; //Temperature Response
 80031e0:	230e      	movs	r3, #14
 80031e2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x0A;
 80031e6:	230a      	movs	r3, #10
 80031e8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t) * 10);
 80031ec:	200a      	movs	r0, #10
 80031ee:	f00f fb45 	bl	801287c <malloc>
 80031f2:	4603      	mov	r3, r0
 80031f4:	673b      	str	r3, [r7, #112]	; 0x70
                    outgoingPacket.Data[0] = (power_on & 0xFF00) >> 8;
 80031f6:	8b3b      	ldrh	r3, [r7, #24]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[1] = power_on & 0xFF;
 8003202:	8b3a      	ldrh	r2, [r7, #24]
 8003204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003206:	3301      	adds	r3, #1
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[2] = (under_voltage & 0xFF00) >> 8;
 800320c:	8afb      	ldrh	r3, [r7, #22]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	b29a      	uxth	r2, r3
 8003212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003214:	3302      	adds	r3, #2
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[3] = under_voltage & 0xFF;
 800321a:	8afa      	ldrh	r2, [r7, #22]
 800321c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800321e:	3303      	adds	r3, #3
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[4] = (short_circuited & 0xFF00) >> 8;
 8003224:	8abb      	ldrh	r3, [r7, #20]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	b29a      	uxth	r2, r3
 800322a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800322c:	3304      	adds	r3, #4
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[5] = short_circuited & 0xFF;
 8003232:	8aba      	ldrh	r2, [r7, #20]
 8003234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003236:	3305      	adds	r3, #5
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[6] = (over_temp & 0xFF00) >> 8;
 800323c:	8a7b      	ldrh	r3, [r7, #18]
 800323e:	0a1b      	lsrs	r3, r3, #8
 8003240:	b29a      	uxth	r2, r3
 8003242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003244:	3306      	adds	r3, #6
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[7] = over_temp & 0xFF;
 800324a:	8a7a      	ldrh	r2, [r7, #18]
 800324c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800324e:	3307      	adds	r3, #7
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[8] = (charging_cycles & 0xFF00) >> 8;
 8003254:	8a3b      	ldrh	r3, [r7, #16]
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	b29a      	uxth	r2, r3
 800325a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800325c:	3308      	adds	r3, #8
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Data[9] = charging_cycles & 0xFF;
 8003262:	8a3a      	ldrh	r2, [r7, #16]
 8003264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003266:	3309      	adds	r3, #9
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 800326c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003270:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003274:	f7fe fb98 	bl	80019a8 <generateCySatChecksum>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 800327e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003282:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003286:	f7fe fb13 	bl	80018b0 <sendCySatPacket>
 800328a:	4603      	mov	r3, r0
 800328c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 8003290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003292:	4618      	mov	r0, r3
 8003294:	f00f fafa 	bl	801288c <free>
                    return status; //send the response
 8003298:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800329c:	e19a      	b.n	80035d4 <handleCySatPacket+0xde8>
                }
                case 0x11: { //Enable/Disable Request
                    outgoingPacket.Subsystem_Type = EPS_SUBSYSTEM_TYPE;
 800329e:	231e      	movs	r3, #30
 80032a0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
                    outgoingPacket.Command = 0x10; //Enable/Disable Response
 80032a4:	2310      	movs	r3, #16
 80032a6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
                    outgoingPacket.Data_Length = 0x01;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
                    outgoingPacket.Data = (uint8_t*) malloc(sizeof(uint8_t));
 80032b0:	2001      	movs	r0, #1
 80032b2:	f00f fae3 	bl	801287c <malloc>
 80032b6:	4603      	mov	r3, r0
 80032b8:	673b      	str	r3, [r7, #112]	; 0x70
                    if(validateCySatChecksum(packet)==0){
 80032ba:	1d3b      	adds	r3, r7, #4
 80032bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80032c0:	f7fe fba7 	bl	8001a12 <validateCySatChecksum>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <handleCySatPacket+0xae6>
                        outgoingPacket.Data[0] = 0;
 80032ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
 80032d0:	e15e      	b.n	8003590 <handleCySatPacket+0xda4>
                    }
                    else{
                        switch(packet.Data[0]){
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	2b0e      	cmp	r3, #14
 80032da:	f200 8159 	bhi.w	8003590 <handleCySatPacket+0xda4>
 80032de:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <handleCySatPacket+0xaf8>)
 80032e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e4:	08003321 	.word	0x08003321
 80032e8:	08003591 	.word	0x08003591
 80032ec:	08003591 	.word	0x08003591
 80032f0:	08003355 	.word	0x08003355
 80032f4:	08003591 	.word	0x08003591
 80032f8:	08003389 	.word	0x08003389
 80032fc:	080033bd 	.word	0x080033bd
 8003300:	080033f1 	.word	0x080033f1
 8003304:	08003425 	.word	0x08003425
 8003308:	08003459 	.word	0x08003459
 800330c:	0800348d 	.word	0x0800348d
 8003310:	080034c1 	.word	0x080034c1
 8003314:	080034f5 	.word	0x080034f5
 8003318:	08003529 	.word	0x08003529
 800331c:	0800355d 	.word	0x0800355d
                            case 0x01:{ //Enable/Disable Battery BUS
                                if(packet.Data[1] == 0){
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	3301      	adds	r3, #1
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d105      	bne.n	8003336 <handleCySatPacket+0xb4a>
                                    outgoingPacket.Data[0] = disable_EPS_Vbatt_Bus();
 800332a:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800332c:	f7ff f8b9 	bl	80024a2 <disable_EPS_Vbatt_Bus>
 8003330:	4603      	mov	r3, r0
 8003332:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003334:	e12c      	b.n	8003590 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	3301      	adds	r3, #1
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d105      	bne.n	800334c <handleCySatPacket+0xb60>
                                    outgoingPacket.Data[0] = enable_EPS_Vbatt_Bus();
 8003340:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003342:	f7ff f8a5 	bl	8002490 <enable_EPS_Vbatt_Bus>
 8003346:	4603      	mov	r3, r0
 8003348:	7023      	strb	r3, [r4, #0]
                                break;
 800334a:	e121      	b.n	8003590 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 800334c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
                                break;
 8003352:	e11d      	b.n	8003590 <handleCySatPacket+0xda4>
                            }
                            case 0x04:{ //Enable/Disable 5v BUS
                                if(packet.Data[1] == 0){
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	3301      	adds	r3, #1
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <handleCySatPacket+0xb7e>
                                    outgoingPacket.Data[0] = disable_EPS_5v_Bus();
 800335e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003360:	f7ff f8ba 	bl	80024d8 <disable_EPS_5v_Bus>
 8003364:	4603      	mov	r3, r0
 8003366:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003368:	e112      	b.n	8003590 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3301      	adds	r3, #1
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <handleCySatPacket+0xb94>
                                    outgoingPacket.Data[0] = enable_EPS_5v_Bus();
 8003374:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003376:	f7ff f8a6 	bl	80024c6 <enable_EPS_5v_Bus>
 800337a:	4603      	mov	r3, r0
 800337c:	7023      	strb	r3, [r4, #0]
                                break;
 800337e:	e107      	b.n	8003590 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8003380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
                                break;
 8003386:	e103      	b.n	8003590 <handleCySatPacket+0xda4>
                            }
                            case 0x06:{ //Enable/Disable Fast/Slow Battery Charge 1
                                if(packet.Data[1] == 0){
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	3301      	adds	r3, #1
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <handleCySatPacket+0xbb2>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge1();
 8003392:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003394:	f7ff f8d6 	bl	8002544 <disable_EPS_Fast_Charge1>
 8003398:	4603      	mov	r3, r0
 800339a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800339c:	e0f8      	b.n	8003590 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	3301      	adds	r3, #1
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <handleCySatPacket+0xbc8>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge1();
 80033a8:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80033aa:	f7ff f8c2 	bl	8002532 <enable_EPS_Fast_Charge1>
 80033ae:	4603      	mov	r3, r0
 80033b0:	7023      	strb	r3, [r4, #0]
                                break;
 80033b2:	e0ed      	b.n	8003590 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80033b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
                                break;
 80033ba:	e0e9      	b.n	8003590 <handleCySatPacket+0xda4>
                            }
                            case 0x07:{ //Enable/Disable Fast/Slow Battery Charge 2
                                if(packet.Data[1] == 0){
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	3301      	adds	r3, #1
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <handleCySatPacket+0xbe6>
                                    outgoingPacket.Data[0] = disable_EPS_Fast_Charge2();
 80033c6:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80033c8:	f7ff f8ce 	bl	8002568 <disable_EPS_Fast_Charge2>
 80033cc:	4603      	mov	r3, r0
 80033ce:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80033d0:	e0de      	b.n	8003590 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	3301      	adds	r3, #1
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <handleCySatPacket+0xbfc>
                                    outgoingPacket.Data[0] = enable_EPS_Fast_Charge2();
 80033dc:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80033de:	f7ff f8ba 	bl	8002556 <enable_EPS_Fast_Charge2>
 80033e2:	4603      	mov	r3, r0
 80033e4:	7023      	strb	r3, [r4, #0]
                                break;
 80033e6:	e0d3      	b.n	8003590 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80033e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
                                break;
 80033ee:	e0cf      	b.n	8003590 <handleCySatPacket+0xda4>
                            }
                            case 0x08:{ //Enable/Disable Out1/Boost Board
                                if(packet.Data[1] == 0){
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3301      	adds	r3, #1
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d105      	bne.n	8003406 <handleCySatPacket+0xc1a>
                                    outgoingPacket.Data[0] = disable_Boost_Board();
 80033fa:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80033fc:	f7ff f8c6 	bl	800258c <disable_Boost_Board>
 8003400:	4603      	mov	r3, r0
 8003402:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_Boost_Board();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003404:	e0c4      	b.n	8003590 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3301      	adds	r3, #1
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <handleCySatPacket+0xc30>
                                    outgoingPacket.Data[0] = enable_Boost_Board();
 8003410:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003412:	f7ff f8b2 	bl	800257a <enable_Boost_Board>
 8003416:	4603      	mov	r3, r0
 8003418:	7023      	strb	r3, [r4, #0]
                                break;
 800341a:	e0b9      	b.n	8003590 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 800341c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
                                break;
 8003422:	e0b5      	b.n	8003590 <handleCySatPacket+0xda4>
                            }
                            case 0x09:{ //Enable/Disable Out2
                                if(packet.Data[1] == 0){
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	3301      	adds	r3, #1
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d105      	bne.n	800343a <handleCySatPacket+0xc4e>
                                    outgoingPacket.Data[0] = disable_Payload();
 800342e:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003430:	f7ff f8be 	bl	80025b0 <disable_Payload>
 8003434:	4603      	mov	r3, r0
 8003436:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_Payload();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003438:	e0aa      	b.n	8003590 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	3301      	adds	r3, #1
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d105      	bne.n	8003450 <handleCySatPacket+0xc64>
                                    outgoingPacket.Data[0] = enable_Payload();
 8003444:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003446:	f7ff f8aa 	bl	800259e <enable_Payload>
 800344a:	4603      	mov	r3, r0
 800344c:	7023      	strb	r3, [r4, #0]
                                break;
 800344e:	e09f      	b.n	8003590 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8003450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
                                break;
 8003456:	e09b      	b.n	8003590 <handleCySatPacket+0xda4>
                            }
                            case 0x0A:{ //Enable/Disable Out3
                                if(packet.Data[1] == 0){
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3301      	adds	r3, #1
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <handleCySatPacket+0xc82>
                                    outgoingPacket.Data[0] = disable_EPS_Output_3();
 8003462:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003464:	f7ff f8b6 	bl	80025d4 <disable_EPS_Output_3>
 8003468:	4603      	mov	r3, r0
 800346a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800346c:	e090      	b.n	8003590 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	3301      	adds	r3, #1
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <handleCySatPacket+0xc98>
                                    outgoingPacket.Data[0] = enable_EPS_Output_3();
 8003478:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800347a:	f7ff f8a2 	bl	80025c2 <enable_EPS_Output_3>
 800347e:	4603      	mov	r3, r0
 8003480:	7023      	strb	r3, [r4, #0]
                                break;
 8003482:	e085      	b.n	8003590 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8003484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003486:	2200      	movs	r2, #0
 8003488:	701a      	strb	r2, [r3, #0]
                                break;
 800348a:	e081      	b.n	8003590 <handleCySatPacket+0xda4>
                            }
                            case 0x0B:{ //Enable/Disable Out5/UHF
                                if(packet.Data[1] == 0){
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	3301      	adds	r3, #1
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d105      	bne.n	80034a2 <handleCySatPacket+0xcb6>
                                    outgoingPacket.Data[0] = disable_UHF();
 8003496:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003498:	f7ff f8ae 	bl	80025f8 <disable_UHF>
 800349c:	4603      	mov	r3, r0
 800349e:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_UHF();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80034a0:	e076      	b.n	8003590 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	3301      	adds	r3, #1
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d105      	bne.n	80034b8 <handleCySatPacket+0xccc>
                                    outgoingPacket.Data[0] = enable_UHF();
 80034ac:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80034ae:	f7ff f89a 	bl	80025e6 <enable_UHF>
 80034b2:	4603      	mov	r3, r0
 80034b4:	7023      	strb	r3, [r4, #0]
                                break;
 80034b6:	e06b      	b.n	8003590 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80034b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
                                break;
 80034be:	e067      	b.n	8003590 <handleCySatPacket+0xda4>
                            }
                            case 0x0C:{ //Enable/Disable Out6
                                if(packet.Data[1] == 0){
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	3301      	adds	r3, #1
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d105      	bne.n	80034d6 <handleCySatPacket+0xcea>
                                    outgoingPacket.Data[0] = disable_EPS_Output_6();
 80034ca:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80034cc:	f7ff f8a6 	bl	800261c <disable_EPS_Output_6>
 80034d0:	4603      	mov	r3, r0
 80034d2:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 80034d4:	e05c      	b.n	8003590 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3301      	adds	r3, #1
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d105      	bne.n	80034ec <handleCySatPacket+0xd00>
                                    outgoingPacket.Data[0] = enable_EPS_Output_6();
 80034e0:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 80034e2:	f7ff f892 	bl	800260a <enable_EPS_Output_6>
 80034e6:	4603      	mov	r3, r0
 80034e8:	7023      	strb	r3, [r4, #0]
                                break;
 80034ea:	e051      	b.n	8003590 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 80034ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
                                break;
 80034f2:	e04d      	b.n	8003590 <handleCySatPacket+0xda4>
                            }
                            case 0x0D:{ //Enable/Disable Heater 1
                                if(packet.Data[1] == 0){
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	3301      	adds	r3, #1
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <handleCySatPacket+0xd1e>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_1();
 80034fe:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003500:	f7ff f89e 	bl	8002640 <disable_EPS_Batt_Heater_1>
 8003504:	4603      	mov	r3, r0
 8003506:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003508:	e042      	b.n	8003590 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3301      	adds	r3, #1
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <handleCySatPacket+0xd34>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_1();
 8003514:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003516:	f7ff f88a 	bl	800262e <enable_EPS_Batt_Heater_1>
 800351a:	4603      	mov	r3, r0
 800351c:	7023      	strb	r3, [r4, #0]
                                break;
 800351e:	e037      	b.n	8003590 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8003520:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
                                break;
 8003526:	e033      	b.n	8003590 <handleCySatPacket+0xda4>
                            }
                            case 0x0E:{ //Enable/Disable Heater 2
                                if(packet.Data[1] == 0){
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3301      	adds	r3, #1
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d105      	bne.n	800353e <handleCySatPacket+0xd52>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_2();
 8003532:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003534:	f7ff f896 	bl	8002664 <disable_EPS_Batt_Heater_2>
 8003538:	4603      	mov	r3, r0
 800353a:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 800353c:	e028      	b.n	8003590 <handleCySatPacket+0xda4>
                                else if(packet.Data[1] == 1){
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	3301      	adds	r3, #1
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <handleCySatPacket+0xd68>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_2();
 8003548:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800354a:	f7ff f882 	bl	8002652 <enable_EPS_Batt_Heater_2>
 800354e:	4603      	mov	r3, r0
 8003550:	7023      	strb	r3, [r4, #0]
                                break;
 8003552:	e01d      	b.n	8003590 <handleCySatPacket+0xda4>
                                    outgoingPacket.Data[0] = 0x00;
 8003554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
                                break;
 800355a:	e019      	b.n	8003590 <handleCySatPacket+0xda4>
                            }
                            case 0x0F:{ //Enable/Disable Heater 3
                                if(packet.Data[1] == 0){
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	3301      	adds	r3, #1
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d105      	bne.n	8003572 <handleCySatPacket+0xd86>
                                    outgoingPacket.Data[0] = disable_EPS_Batt_Heater_3();
 8003566:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8003568:	f7ff f88e 	bl	8002688 <disable_EPS_Batt_Heater_3>
 800356c:	4603      	mov	r3, r0
 800356e:	7023      	strb	r3, [r4, #0]
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
                                }
                                else{
                                    outgoingPacket.Data[0] = 0x00;
                                }
                                break;
 8003570:	e00d      	b.n	800358e <handleCySatPacket+0xda2>
                                else if(packet.Data[1] == 1){
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3301      	adds	r3, #1
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d105      	bne.n	8003588 <handleCySatPacket+0xd9c>
                                    outgoingPacket.Data[0] = enable_EPS_Batt_Heater_3();
 800357c:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 800357e:	f7ff f87a 	bl	8002676 <enable_EPS_Batt_Heater_3>
 8003582:	4603      	mov	r3, r0
 8003584:	7023      	strb	r3, [r4, #0]
                                break;
 8003586:	e002      	b.n	800358e <handleCySatPacket+0xda2>
                                    outgoingPacket.Data[0] = 0x00;
 8003588:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
                                break;
 800358e:	bf00      	nop
                            }
                        }
                    }
                    outgoingPacket.Checksum = generateCySatChecksum(outgoingPacket);
 8003590:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003594:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003598:	f7fe fa06 	bl	80019a8 <generateCySatChecksum>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    status = sendCySatPacket(outgoingPacket);
 80035a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80035a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035aa:	f7fe f981 	bl	80018b0 <sendCySatPacket>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
                    free(outgoingPacket.Data);
 80035b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00f f968 	bl	801288c <free>
                    return status; //send the response
 80035bc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80035c0:	e008      	b.n	80035d4 <handleCySatPacket+0xde8>
        case EOL_SUBSYSTEM_TYPE: //End of Life

            break;

        default:
            return -1;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035c6:	e005      	b.n	80035d4 <handleCySatPacket+0xde8>
            break;
 80035c8:	bf00      	nop
 80035ca:	e002      	b.n	80035d2 <handleCySatPacket+0xde6>
            break;
 80035cc:	bf00      	nop
 80035ce:	e000      	b.n	80035d2 <handleCySatPacket+0xde6>
            break;
 80035d0:	bf00      	nop
    }

    return 0;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	37a4      	adds	r7, #164	; 0xa4
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd90      	pop	{r4, r7, pc}

080035dc <debug_printf>:

/**
  * @brief Formats and prints data out on to the debug UART line. Formatting works in standard printf fashion
  * @retval Returns the status of the HAL UART transmission
  */
HAL_StatusTypeDef debug_printf(char* format, ...){
 80035dc:	b40f      	push	{r0, r1, r2, r3}
 80035de:	b5b0      	push	{r4, r5, r7, lr}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	466b      	mov	r3, sp
 80035e6:	461d      	mov	r5, r3

    uint32_t bufferSize = 512;
 80035e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ec:	613b      	str	r3, [r7, #16]
    uint8_t formatBuffer[bufferSize];
 80035ee:	693c      	ldr	r4, [r7, #16]
 80035f0:	4623      	mov	r3, r4
 80035f2:	3b01      	subs	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	4620      	mov	r0, r4
 80035f8:	f04f 0100 	mov.w	r1, #0
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	00cb      	lsls	r3, r1, #3
 8003606:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800360a:	00c2      	lsls	r2, r0, #3
 800360c:	4620      	mov	r0, r4
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	00cb      	lsls	r3, r1, #3
 800361c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003620:	00c2      	lsls	r2, r0, #3
 8003622:	1de3      	adds	r3, r4, #7
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	ebad 0d03 	sub.w	sp, sp, r3
 800362c:	466b      	mov	r3, sp
 800362e:	3300      	adds	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]

    va_list args;
    va_start(args, format);
 8003632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003636:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(formatBuffer, bufferSize, format, args); //warning due to use of uint8_t instead of int8_t
 8003638:	68b8      	ldr	r0, [r7, #8]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800363e:	6939      	ldr	r1, [r7, #16]
 8003640:	f011 fc7e 	bl	8014f40 <vsniprintf>
 8003644:	6078      	str	r0, [r7, #4]
    va_end(args);

    HAL_StatusTypeDef status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
    if (len > 0) {
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	dd0a      	ble.n	8003666 <debug_printf+0x8a>
        status = HAL_UART_Transmit(&huart6, formatBuffer, len, 1000);
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	b29a      	uxth	r2, r3
 8003656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800365a:	4808      	ldr	r0, [pc, #32]	; (800367c <debug_printf+0xa0>)
 800365c:	f004 fb79 	bl	8007d52 <HAL_UART_Transmit>
 8003660:	4603      	mov	r3, r0
 8003662:	75fb      	strb	r3, [r7, #23]
 8003664:	e001      	b.n	800366a <debug_printf+0x8e>
        //uint8_t crlf[] = "\r\n";
        //status = HAL_UART_Transmit(&huart6, crlf, 2, 1000); //sends a carrige return and a line feed to UART (meant for putty/windows)
    }
    else{
        status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	46ad      	mov	sp, r5
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003678:	b004      	add	sp, #16
 800367a:	4770      	bx	lr
 800367c:	20008154 	.word	0x20008154

08003680 <FloatToUnsigned16bits>:
  * @brief Converts a float into a uint16_t
  * @param bytes: an array of bytes the same size as a float in bytes
  * @param float_value: the float value to convert into a uint16_t
  * @retval The 16 bit unsigned integer
  */
uint16_t FloatToUnsigned16bits(float float_value){
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t x = *((uint32_t*)&float_value);
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]
    return ((x>>16)&0x8000)|((((x&0x7f800000)-0x38000000)>>13)&0x7c00)|((x>>13)&0x03ff);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	0c1b      	lsrs	r3, r3, #16
 8003694:	b29b      	uxth	r3, r3
 8003696:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800369a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 80036a6:	f103 4348 	add.w	r3, r3, #3355443200	; 0xc8000000
 80036aa:	0b5b      	lsrs	r3, r3, #13
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	4313      	orrs	r3, r2
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	0b5b      	lsrs	r3, r3, #13
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	4313      	orrs	r3, r2
 80036c6:	b29b      	uxth	r3, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <main>:
    disable_EPS_Batt_Heater_3();
}


int main(void)
{
 80036d4:	b5b0      	push	{r4, r5, r7, lr}
 80036d6:	b09e      	sub	sp, #120	; 0x78
 80036d8:	af00      	add	r7, sp, #0
      //SCB->VTOR = APPL_ADDRESS;

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80036da:	f000 f8f1 	bl	80038c0 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 80036de:	f005 fe7b 	bl	80093d8 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80036e2:	f005 fefb 	bl	80094dc <MX_GPIO_Init>
    MX_I2C1_Init();
 80036e6:	f006 f895 	bl	8009814 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 80036ea:	f006 f90b 	bl	8009904 <MX_USART1_UART_Init>
    MX_UART4_Init();
 80036ee:	f006 f8df 	bl	80098b0 <MX_UART4_Init>
    MX_USART6_UART_Init();
 80036f2:	f006 f931 	bl	8009958 <MX_USART6_UART_Init>
    MX_SDIO_SD_Init();
 80036f6:	f006 f8bb 	bl	8009870 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 80036fa:	f006 fa33 	bl	8009b64 <MX_FATFS_Init>


    osMutexDef(EPS_I2C_Mutex);
 80036fe:	2300      	movs	r3, #0
 8003700:	677b      	str	r3, [r7, #116]	; 0x74
    EPS_I2C_Mutex = osMutexCreate(osMutex(EPS_I2C_Mutex));
 8003702:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003706:	4618      	mov	r0, r3
 8003708:	f009 fbcd 	bl	800cea6 <osMutexCreate>
 800370c:	4603      	mov	r3, r0
 800370e:	4a33      	ldr	r2, [pc, #204]	; (80037dc <main+0x108>)
 8003710:	6013      	str	r3, [r2, #0]
    osMutexDef(UART_Mutex);
 8003712:	2300      	movs	r3, #0
 8003714:	673b      	str	r3, [r7, #112]	; 0x70
    UART_Mutex = osMutexCreate(osMutex(UART_Mutex));
 8003716:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800371a:	4618      	mov	r0, r3
 800371c:	f009 fbc3 	bl	800cea6 <osMutexCreate>
 8003720:	4603      	mov	r3, r0
 8003722:	4a2f      	ldr	r2, [pc, #188]	; (80037e0 <main+0x10c>)
 8003724:	6013      	str	r3, [r2, #0]
    osMutexDef(ADCS_Active_Mutex);
 8003726:	2300      	movs	r3, #0
 8003728:	66fb      	str	r3, [r7, #108]	; 0x6c
    ADCS_Active_Mutex = osMutexCreate(osMutex(ADCS_Active_Mutex));
 800372a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800372e:	4618      	mov	r0, r3
 8003730:	f009 fbb9 	bl	800cea6 <osMutexCreate>
 8003734:	4603      	mov	r3, r0
 8003736:	4a2b      	ldr	r2, [pc, #172]	; (80037e4 <main+0x110>)
 8003738:	6013      	str	r3, [r2, #0]
    osMutexDef(Low_Power_Mode_Mutex);
 800373a:	2300      	movs	r3, #0
 800373c:	66bb      	str	r3, [r7, #104]	; 0x68
    Low_Power_Mode_Mutex = osMutexCreate(osMutex(Low_Power_Mode_Mutex));
 800373e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003742:	4618      	mov	r0, r3
 8003744:	f009 fbaf 	bl	800cea6 <osMutexCreate>
 8003748:	4603      	mov	r3, r0
 800374a:	4a27      	ldr	r2, [pc, #156]	; (80037e8 <main+0x114>)
 800374c:	6013      	str	r3, [r2, #0]

//   HAL_Delay(15000); // Delay for 15 seconds to allow ADCS to boot-up in application mode

    osThreadDef(myMainTask, Main_Task, osPriorityAboveNormal, 0, 512);
 800374e:	4b27      	ldr	r3, [pc, #156]	; (80037ec <main+0x118>)
 8003750:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003754:	461d      	mov	r5, r3
 8003756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800375a:	682b      	ldr	r3, [r5, #0]
 800375c:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myMainTask), NULL);
 800375e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f009 fb63 	bl	800ce30 <osThreadCreate>

    osThreadDef(myUHFTask, UHF_Task, osPriorityNormal, 0, 512);
 800376a:	4b21      	ldr	r3, [pc, #132]	; (80037f0 <main+0x11c>)
 800376c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003770:	461d      	mov	r5, r3
 8003772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003776:	682b      	ldr	r3, [r5, #0]
 8003778:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myUHFTask), NULL);
 800377a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800377e:	2100      	movs	r1, #0
 8003780:	4618      	mov	r0, r3
 8003782:	f009 fb55 	bl	800ce30 <osThreadCreate>

    osThreadDef(myR2U2Task, R2U2_Task, osPriorityLow, 0, 1024);
 8003786:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <main+0x120>)
 8003788:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800378c:	461d      	mov	r5, r3
 800378e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003792:	682b      	ldr	r3, [r5, #0]
 8003794:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myR2U2Task), NULL);
 8003796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f009 fb47 	bl	800ce30 <osThreadCreate>

    osThreadDef(myADCSTask, ADCS_Task, osPriorityHigh, 0, 1024);
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <main+0x124>)
 80037a4:	f107 0418 	add.w	r4, r7, #24
 80037a8:	461d      	mov	r5, r3
 80037aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037ae:	682b      	ldr	r3, [r5, #0]
 80037b0:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myADCSTask), NULL);
 80037b2:	f107 0318 	add.w	r3, r7, #24
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f009 fb39 	bl	800ce30 <osThreadCreate>

    osThreadDef(myBatteryCapacityTask, BatteryCapacity_Task, osPriorityRealtime, 0, 512);
 80037be:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <main+0x128>)
 80037c0:	1d3c      	adds	r4, r7, #4
 80037c2:	461d      	mov	r5, r3
 80037c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	6023      	str	r3, [r4, #0]
    osThreadCreate(osThread(myBatteryCapacityTask), NULL);
 80037cc:	1d3b      	adds	r3, r7, #4
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f009 fb2d 	bl	800ce30 <osThreadCreate>

    /* Start scheduler */
    osKernelStart();
 80037d6:	f009 fb14 	bl	800ce02 <osKernelStart>

    //GroundStationRxDataLength = 4;
    //HAL_UART_Receive_IT(&huart6, (uint8_t*) &GroundStationRxBuffer, 4);

    while(1){
 80037da:	e7fe      	b.n	80037da <main+0x106>
 80037dc:	20007c74 	.word	0x20007c74
 80037e0:	20007c90 	.word	0x20007c90
 80037e4:	20007c78 	.word	0x20007c78
 80037e8:	20007c8c 	.word	0x20007c8c
 80037ec:	08017e20 	.word	0x08017e20
 80037f0:	08017e34 	.word	0x08017e34
 80037f4:	08017e48 	.word	0x08017e48
 80037f8:	08017e5c 	.word	0x08017e5c
 80037fc:	08017e70 	.word	0x08017e70

08003800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d101      	bne.n	8003816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003812:	f000 f877 	bl	8003904 <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000

08003824 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
#ifdef DEBUG_ENABLE
  while(1)
  {
      GREEN_LED_ON();
 8003828:	4b10      	ldr	r3, [pc, #64]	; (800386c <Error_Handler+0x48>)
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	4a0f      	ldr	r2, [pc, #60]	; (800386c <Error_Handler+0x48>)
 800382e:	f043 0310 	orr.w	r3, r3, #16
 8003832:	6153      	str	r3, [r2, #20]
      AMBER_LED_ON();
 8003834:	4b0d      	ldr	r3, [pc, #52]	; (800386c <Error_Handler+0x48>)
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	4a0c      	ldr	r2, [pc, #48]	; (800386c <Error_Handler+0x48>)
 800383a:	f043 0320 	orr.w	r3, r3, #32
 800383e:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8003840:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003844:	f000 f878 	bl	8003938 <HAL_Delay>
      GREEN_LED_OFF();
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <Error_Handler+0x48>)
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	4a07      	ldr	r2, [pc, #28]	; (800386c <Error_Handler+0x48>)
 800384e:	f023 0310 	bic.w	r3, r3, #16
 8003852:	6153      	str	r3, [r2, #20]
      AMBER_LED_OFF();
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <Error_Handler+0x48>)
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <Error_Handler+0x48>)
 800385a:	f023 0320 	bic.w	r3, r3, #32
 800385e:	6153      	str	r3, [r2, #20]
      HAL_Delay(2000);
 8003860:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003864:	f000 f868 	bl	8003938 <HAL_Delay>
      GREEN_LED_ON();
 8003868:	e7de      	b.n	8003828 <Error_Handler+0x4>
 800386a:	bf00      	nop
 800386c:	40020800 	.word	0x40020800

08003870 <HAL_UART_RxCpltCallback>:
{
    Error_Handler();
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
    if(huart == &huart6){ //OBC connected to Payload/USB
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <HAL_UART_RxCpltCallback+0x48>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d116      	bne.n	80038ae <HAL_UART_RxCpltCallback+0x3e>
        if(handleCySatPacket(parseCySatPacket(GroundStationRxBuffer)) == -1){ //error occurred
 8003880:	f107 030c 	add.w	r3, r7, #12
 8003884:	490d      	ldr	r1, [pc, #52]	; (80038bc <HAL_UART_RxCpltCallback+0x4c>)
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd ffe4 	bl	8001854 <parseCySatPacket>
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003894:	f7fe ffaa 	bl	80027ec <handleCySatPacket>
 8003898:	4603      	mov	r3, r0
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800389e:	d101      	bne.n	80038a4 <HAL_UART_RxCpltCallback+0x34>
            sendErrorPacket();
 80038a0:	f7fe ff7e 	bl	80027a0 <sendErrorPacket>
        }
        HAL_UART_Receive_IT(&huart6,GroundStationRxBuffer, 4);
 80038a4:	2204      	movs	r2, #4
 80038a6:	4905      	ldr	r1, [pc, #20]	; (80038bc <HAL_UART_RxCpltCallback+0x4c>)
 80038a8:	4803      	ldr	r0, [pc, #12]	; (80038b8 <HAL_UART_RxCpltCallback+0x48>)
 80038aa:	f004 faeb 	bl	8007e84 <HAL_UART_Receive_IT>
    }
}
 80038ae:	bf00      	nop
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20008154 	.word	0x20008154
 80038bc:	20007c80 	.word	0x20007c80

080038c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038c4:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_Init+0x40>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <HAL_Init+0x40>)
 80038ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_Init+0x40>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <HAL_Init+0x40>)
 80038d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038dc:	4b08      	ldr	r3, [pc, #32]	; (8003900 <HAL_Init+0x40>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a07      	ldr	r2, [pc, #28]	; (8003900 <HAL_Init+0x40>)
 80038e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038e8:	2003      	movs	r0, #3
 80038ea:	f000 f90f 	bl	8003b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038ee:	200f      	movs	r0, #15
 80038f0:	f006 fc7a 	bl	800a1e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80038f4:	f006 fa56 	bl	8009da4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023c00 	.word	0x40023c00

08003904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  uwTick++;
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <HAL_IncTick+0x18>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	4a03      	ldr	r2, [pc, #12]	; (800391c <HAL_IncTick+0x18>)
 8003910:	6013      	str	r3, [r2, #0]
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	20007ca8 	.word	0x20007ca8

08003920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return uwTick;
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_GetTick+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20007ca8 	.word	0x20007ca8

08003938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003940:	f7ff ffee 	bl	8003920 <HAL_GetTick>
 8003944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003950:	d002      	beq.n	8003958 <HAL_Delay+0x20>
  {
     wait++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3301      	adds	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003958:	bf00      	nop
 800395a:	f7ff ffe1 	bl	8003920 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	429a      	cmp	r2, r3
 8003968:	d8f7      	bhi.n	800395a <HAL_Delay+0x22>
  {
  }
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <NVIC_SetPriorityGrouping+0x44>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003990:	4013      	ands	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800399c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a6:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <NVIC_SetPriorityGrouping+0x44>)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	60d3      	str	r3, [r2, #12]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <NVIC_GetPriorityGrouping+0x18>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	f003 0307 	and.w	r3, r3, #7
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	f003 021f 	and.w	r2, r3, #31
 80039e8:	4907      	ldr	r1, [pc, #28]	; (8003a08 <NVIC_EnableIRQ+0x30>)
 80039ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2001      	movs	r0, #1
 80039f2:	fa00 f202 	lsl.w	r2, r0, r2
 80039f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000e100 	.word	0xe000e100

08003a0c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	6039      	str	r1, [r7, #0]
 8003a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	da0b      	bge.n	8003a38 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	490c      	ldr	r1, [pc, #48]	; (8003a58 <NVIC_SetPriority+0x4c>)
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	3b04      	subs	r3, #4
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	440b      	add	r3, r1
 8003a34:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a36:	e009      	b.n	8003a4c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	4907      	ldr	r1, [pc, #28]	; (8003a5c <NVIC_SetPriority+0x50>)
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	0112      	lsls	r2, r2, #4
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	440b      	add	r3, r1
 8003a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00
 8003a5c:	e000e100 	.word	0xe000e100

08003a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b089      	sub	sp, #36	; 0x24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f1c3 0307 	rsb	r3, r3, #7
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	bf28      	it	cs
 8003a7e:	2304      	movcs	r3, #4
 8003a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d902      	bls.n	8003a90 <NVIC_EncodePriority+0x30>
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3b03      	subs	r3, #3
 8003a8e:	e000      	b.n	8003a92 <NVIC_EncodePriority+0x32>
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43da      	mvns	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab2:	43d9      	mvns	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab8:	4313      	orrs	r3, r2
         );
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3724      	adds	r7, #36	; 0x24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ad8:	d301      	bcc.n	8003ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ada:	2301      	movs	r3, #1
 8003adc:	e00f      	b.n	8003afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ade:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <SysTick_Config+0x40>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ae6:	210f      	movs	r1, #15
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aec:	f7ff ff8e 	bl	8003a0c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <SysTick_Config+0x40>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003af6:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <SysTick_Config+0x40>)
 8003af8:	2207      	movs	r2, #7
 8003afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	e000e010 	.word	0xe000e010

08003b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff2d 	bl	8003974 <NVIC_SetPriorityGrouping>
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b086      	sub	sp, #24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	4603      	mov	r3, r0
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b34:	f7ff ff42 	bl	80039bc <NVIC_GetPriorityGrouping>
 8003b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	6978      	ldr	r0, [r7, #20]
 8003b40:	f7ff ff8e 	bl	8003a60 <NVIC_EncodePriority>
 8003b44:	4602      	mov	r2, r0
 8003b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff5d 	bl	8003a0c <NVIC_SetPriority>
}
 8003b52:	bf00      	nop
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	4603      	mov	r3, r0
 8003b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff ff35 	bl	80039d8 <NVIC_EnableIRQ>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff ffa2 	bl	8003ac8 <SysTick_Config>
 8003b84:	4603      	mov	r3, r0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d106      	bne.n	8003bac <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ba4:	f043 0304 	orr.w	r3, r3, #4
 8003ba8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003baa:	e005      	b.n	8003bb8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003bb2:	f023 0304 	bic.w	r3, r3, #4
 8003bb6:	6013      	str	r3, [r2, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000e010 	.word	0xe000e010

08003bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d004      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e00c      	b.n	8003c00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2205      	movs	r2, #5
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0201 	bic.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c18:	4b93      	ldr	r3, [pc, #588]	; (8003e68 <HAL_DMA_IRQHandler+0x25c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a93      	ldr	r2, [pc, #588]	; (8003e6c <HAL_DMA_IRQHandler+0x260>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	0a9b      	lsrs	r3, r3, #10
 8003c24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	2208      	movs	r2, #8
 8003c38:	409a      	lsls	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d01a      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0204 	bic.w	r2, r2, #4
 8003c5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c64:	2208      	movs	r2, #8
 8003c66:	409a      	lsls	r2, r3
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	f043 0201 	orr.w	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c7c:	4a7c      	ldr	r2, [pc, #496]	; (8003e70 <HAL_DMA_IRQHandler+0x264>)
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d012      	beq.n	8003cae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9a:	4a75      	ldr	r2, [pc, #468]	; (8003e70 <HAL_DMA_IRQHandler+0x264>)
 8003c9c:	409a      	lsls	r2, r3
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	f043 0202 	orr.w	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb2:	4a70      	ldr	r2, [pc, #448]	; (8003e74 <HAL_DMA_IRQHandler+0x268>)
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d012      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00b      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd0:	4a68      	ldr	r2, [pc, #416]	; (8003e74 <HAL_DMA_IRQHandler+0x268>)
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	f043 0204 	orr.w	r2, r3, #4
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	2210      	movs	r2, #16
 8003cea:	409a      	lsls	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d043      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d03c      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d06:	2210      	movs	r2, #16
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d018      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d108      	bne.n	8003d3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d024      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
 8003d3a:	e01f      	b.n	8003d7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d01b      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
 8003d4c:	e016      	b.n	8003d7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d107      	bne.n	8003d6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0208 	bic.w	r2, r2, #8
 8003d6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	2220      	movs	r2, #32
 8003d82:	409a      	lsls	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8094 	beq.w	8003eb6 <HAL_DMA_IRQHandler+0x2aa>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 808c 	beq.w	8003eb6 <HAL_DMA_IRQHandler+0x2aa>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da2:	2220      	movs	r2, #32
 8003da4:	409a      	lsls	r2, r3
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d137      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x21a>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0216 	bic.w	r2, r2, #22
 8003dc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d103      	bne.n	8003de6 <HAL_DMA_IRQHandler+0x1da>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0208 	bic.w	r2, r2, #8
 8003df4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	223f      	movs	r2, #63	; 0x3f
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8083 	beq.w	8003f22 <HAL_DMA_IRQHandler+0x316>
        {
          hdma->XferAbortCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
        }
        return;
 8003e24:	e07d      	b.n	8003f22 <HAL_DMA_IRQHandler+0x316>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d021      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x26c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d108      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x248>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d035      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	4798      	blx	r3
 8003e52:	e030      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x2aa>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d02c      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2aa>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
 8003e64:	e027      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x2aa>
 8003e66:	bf00      	nop
 8003e68:	20000014 	.word	0x20000014
 8003e6c:	1b4e81b5 	.word	0x1b4e81b5
 8003e70:	00800001 	.word	0x00800001
 8003e74:	00800004 	.word	0x00800004
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10f      	bne.n	8003ea6 <HAL_DMA_IRQHandler+0x29a>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0210 	bic.w	r2, r2, #16
 8003e94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x2aa>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d032      	beq.n	8003f24 <HAL_DMA_IRQHandler+0x318>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d022      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x304>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2205      	movs	r2, #5
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0201 	bic.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d307      	bcc.n	8003efe <HAL_DMA_IRQHandler+0x2f2>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f2      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0x2d6>
 8003efc:	e000      	b.n	8003f00 <HAL_DMA_IRQHandler+0x2f4>
          break;
 8003efe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_DMA_IRQHandler+0x318>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
 8003f20:	e000      	b.n	8003f24 <HAL_DMA_IRQHandler+0x318>
        return;
 8003f22:	bf00      	nop
    }
  }
}
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop

08003f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	; 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e177      	b.n	8004238 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f48:	2201      	movs	r2, #1
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	f040 8166 	bne.w	8004232 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_Init+0x4a>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b12      	cmp	r3, #18
 8003f74:	d123      	bne.n	8003fbe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	08da      	lsrs	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3208      	adds	r2, #8
 8003f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	220f      	movs	r2, #15
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	08da      	lsrs	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3208      	adds	r2, #8
 8003fb8:	69b9      	ldr	r1, [r7, #24]
 8003fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	2203      	movs	r2, #3
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0203 	and.w	r2, r3, #3
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d00b      	beq.n	8004012 <HAL_GPIO_Init+0xe6>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d007      	beq.n	8004012 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004006:	2b11      	cmp	r3, #17
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b12      	cmp	r3, #18
 8004010:	d130      	bne.n	8004074 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	2203      	movs	r2, #3
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43db      	mvns	r3, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004048:	2201      	movs	r2, #1
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4013      	ands	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 0201 	and.w	r2, r3, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	2203      	movs	r2, #3
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80c0 	beq.w	8004232 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	4b66      	ldr	r3, [pc, #408]	; (8004250 <HAL_GPIO_Init+0x324>)
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	4a65      	ldr	r2, [pc, #404]	; (8004250 <HAL_GPIO_Init+0x324>)
 80040bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040c0:	6453      	str	r3, [r2, #68]	; 0x44
 80040c2:	4b63      	ldr	r3, [pc, #396]	; (8004250 <HAL_GPIO_Init+0x324>)
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ce:	4a61      	ldr	r2, [pc, #388]	; (8004254 <HAL_GPIO_Init+0x328>)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	089b      	lsrs	r3, r3, #2
 80040d4:	3302      	adds	r3, #2
 80040d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	220f      	movs	r2, #15
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a58      	ldr	r2, [pc, #352]	; (8004258 <HAL_GPIO_Init+0x32c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d037      	beq.n	800416a <HAL_GPIO_Init+0x23e>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a57      	ldr	r2, [pc, #348]	; (800425c <HAL_GPIO_Init+0x330>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d031      	beq.n	8004166 <HAL_GPIO_Init+0x23a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a56      	ldr	r2, [pc, #344]	; (8004260 <HAL_GPIO_Init+0x334>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d02b      	beq.n	8004162 <HAL_GPIO_Init+0x236>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a55      	ldr	r2, [pc, #340]	; (8004264 <HAL_GPIO_Init+0x338>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d025      	beq.n	800415e <HAL_GPIO_Init+0x232>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a54      	ldr	r2, [pc, #336]	; (8004268 <HAL_GPIO_Init+0x33c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01f      	beq.n	800415a <HAL_GPIO_Init+0x22e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a53      	ldr	r2, [pc, #332]	; (800426c <HAL_GPIO_Init+0x340>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d019      	beq.n	8004156 <HAL_GPIO_Init+0x22a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a52      	ldr	r2, [pc, #328]	; (8004270 <HAL_GPIO_Init+0x344>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <HAL_GPIO_Init+0x226>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a51      	ldr	r2, [pc, #324]	; (8004274 <HAL_GPIO_Init+0x348>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00d      	beq.n	800414e <HAL_GPIO_Init+0x222>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a50      	ldr	r2, [pc, #320]	; (8004278 <HAL_GPIO_Init+0x34c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <HAL_GPIO_Init+0x21e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4f      	ldr	r2, [pc, #316]	; (800427c <HAL_GPIO_Init+0x350>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d101      	bne.n	8004146 <HAL_GPIO_Init+0x21a>
 8004142:	2309      	movs	r3, #9
 8004144:	e012      	b.n	800416c <HAL_GPIO_Init+0x240>
 8004146:	230a      	movs	r3, #10
 8004148:	e010      	b.n	800416c <HAL_GPIO_Init+0x240>
 800414a:	2308      	movs	r3, #8
 800414c:	e00e      	b.n	800416c <HAL_GPIO_Init+0x240>
 800414e:	2307      	movs	r3, #7
 8004150:	e00c      	b.n	800416c <HAL_GPIO_Init+0x240>
 8004152:	2306      	movs	r3, #6
 8004154:	e00a      	b.n	800416c <HAL_GPIO_Init+0x240>
 8004156:	2305      	movs	r3, #5
 8004158:	e008      	b.n	800416c <HAL_GPIO_Init+0x240>
 800415a:	2304      	movs	r3, #4
 800415c:	e006      	b.n	800416c <HAL_GPIO_Init+0x240>
 800415e:	2303      	movs	r3, #3
 8004160:	e004      	b.n	800416c <HAL_GPIO_Init+0x240>
 8004162:	2302      	movs	r3, #2
 8004164:	e002      	b.n	800416c <HAL_GPIO_Init+0x240>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <HAL_GPIO_Init+0x240>
 800416a:	2300      	movs	r3, #0
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	f002 0203 	and.w	r2, r2, #3
 8004172:	0092      	lsls	r2, r2, #2
 8004174:	4093      	lsls	r3, r2
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800417c:	4935      	ldr	r1, [pc, #212]	; (8004254 <HAL_GPIO_Init+0x328>)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	3302      	adds	r3, #2
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800418a:	4b3d      	ldr	r3, [pc, #244]	; (8004280 <HAL_GPIO_Init+0x354>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	43db      	mvns	r3, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041ae:	4a34      	ldr	r2, [pc, #208]	; (8004280 <HAL_GPIO_Init+0x354>)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041b4:	4b32      	ldr	r3, [pc, #200]	; (8004280 <HAL_GPIO_Init+0x354>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041d8:	4a29      	ldr	r2, [pc, #164]	; (8004280 <HAL_GPIO_Init+0x354>)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041de:	4b28      	ldr	r3, [pc, #160]	; (8004280 <HAL_GPIO_Init+0x354>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004202:	4a1f      	ldr	r2, [pc, #124]	; (8004280 <HAL_GPIO_Init+0x354>)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004208:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <HAL_GPIO_Init+0x354>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800422c:	4a14      	ldr	r2, [pc, #80]	; (8004280 <HAL_GPIO_Init+0x354>)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3301      	adds	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	2b0f      	cmp	r3, #15
 800423c:	f67f ae84 	bls.w	8003f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	3724      	adds	r7, #36	; 0x24
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800
 8004254:	40013800 	.word	0x40013800
 8004258:	40020000 	.word	0x40020000
 800425c:	40020400 	.word	0x40020400
 8004260:	40020800 	.word	0x40020800
 8004264:	40020c00 	.word	0x40020c00
 8004268:	40021000 	.word	0x40021000
 800426c:	40021400 	.word	0x40021400
 8004270:	40021800 	.word	0x40021800
 8004274:	40021c00 	.word	0x40021c00
 8004278:	40022000 	.word	0x40022000
 800427c:	40022400 	.word	0x40022400
 8004280:	40013c00 	.word	0x40013c00

08004284 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800428e:	2300      	movs	r3, #0
 8004290:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	e0d9      	b.n	8004454 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042a0:	2201      	movs	r2, #1
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	f040 80c9 	bne.w	800444e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	2103      	movs	r1, #3
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	43db      	mvns	r3, r3
 80042cc:	401a      	ands	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	08da      	lsrs	r2, r3, #3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3208      	adds	r2, #8
 80042da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	220f      	movs	r2, #15
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	08d2      	lsrs	r2, r2, #3
 80042f2:	4019      	ands	r1, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3208      	adds	r2, #8
 80042f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	2103      	movs	r1, #3
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	43db      	mvns	r3, r3
 800430c:	401a      	ands	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	2101      	movs	r1, #1
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	fa01 f303 	lsl.w	r3, r1, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	401a      	ands	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	2103      	movs	r1, #3
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	401a      	ands	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800433c:	4a4b      	ldr	r2, [pc, #300]	; (800446c <HAL_GPIO_DeInit+0x1e8>)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	089b      	lsrs	r3, r3, #2
 8004342:	3302      	adds	r3, #2
 8004344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004348:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	220f      	movs	r2, #15
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	4013      	ands	r3, r2
 800435c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a43      	ldr	r2, [pc, #268]	; (8004470 <HAL_GPIO_DeInit+0x1ec>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d037      	beq.n	80043d6 <HAL_GPIO_DeInit+0x152>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a42      	ldr	r2, [pc, #264]	; (8004474 <HAL_GPIO_DeInit+0x1f0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d031      	beq.n	80043d2 <HAL_GPIO_DeInit+0x14e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a41      	ldr	r2, [pc, #260]	; (8004478 <HAL_GPIO_DeInit+0x1f4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d02b      	beq.n	80043ce <HAL_GPIO_DeInit+0x14a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a40      	ldr	r2, [pc, #256]	; (800447c <HAL_GPIO_DeInit+0x1f8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d025      	beq.n	80043ca <HAL_GPIO_DeInit+0x146>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a3f      	ldr	r2, [pc, #252]	; (8004480 <HAL_GPIO_DeInit+0x1fc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d01f      	beq.n	80043c6 <HAL_GPIO_DeInit+0x142>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a3e      	ldr	r2, [pc, #248]	; (8004484 <HAL_GPIO_DeInit+0x200>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d019      	beq.n	80043c2 <HAL_GPIO_DeInit+0x13e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a3d      	ldr	r2, [pc, #244]	; (8004488 <HAL_GPIO_DeInit+0x204>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <HAL_GPIO_DeInit+0x13a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a3c      	ldr	r2, [pc, #240]	; (800448c <HAL_GPIO_DeInit+0x208>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00d      	beq.n	80043ba <HAL_GPIO_DeInit+0x136>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a3b      	ldr	r2, [pc, #236]	; (8004490 <HAL_GPIO_DeInit+0x20c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <HAL_GPIO_DeInit+0x132>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a3a      	ldr	r2, [pc, #232]	; (8004494 <HAL_GPIO_DeInit+0x210>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d101      	bne.n	80043b2 <HAL_GPIO_DeInit+0x12e>
 80043ae:	2309      	movs	r3, #9
 80043b0:	e012      	b.n	80043d8 <HAL_GPIO_DeInit+0x154>
 80043b2:	230a      	movs	r3, #10
 80043b4:	e010      	b.n	80043d8 <HAL_GPIO_DeInit+0x154>
 80043b6:	2308      	movs	r3, #8
 80043b8:	e00e      	b.n	80043d8 <HAL_GPIO_DeInit+0x154>
 80043ba:	2307      	movs	r3, #7
 80043bc:	e00c      	b.n	80043d8 <HAL_GPIO_DeInit+0x154>
 80043be:	2306      	movs	r3, #6
 80043c0:	e00a      	b.n	80043d8 <HAL_GPIO_DeInit+0x154>
 80043c2:	2305      	movs	r3, #5
 80043c4:	e008      	b.n	80043d8 <HAL_GPIO_DeInit+0x154>
 80043c6:	2304      	movs	r3, #4
 80043c8:	e006      	b.n	80043d8 <HAL_GPIO_DeInit+0x154>
 80043ca:	2303      	movs	r3, #3
 80043cc:	e004      	b.n	80043d8 <HAL_GPIO_DeInit+0x154>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e002      	b.n	80043d8 <HAL_GPIO_DeInit+0x154>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e000      	b.n	80043d8 <HAL_GPIO_DeInit+0x154>
 80043d6:	2300      	movs	r3, #0
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	f002 0203 	and.w	r2, r2, #3
 80043de:	0092      	lsls	r2, r2, #2
 80043e0:	4093      	lsls	r3, r2
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d132      	bne.n	800444e <HAL_GPIO_DeInit+0x1ca>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	220f      	movs	r2, #15
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80043f8:	4a1c      	ldr	r2, [pc, #112]	; (800446c <HAL_GPIO_DeInit+0x1e8>)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	3302      	adds	r3, #2
 8004400:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	43da      	mvns	r2, r3
 8004408:	4818      	ldr	r0, [pc, #96]	; (800446c <HAL_GPIO_DeInit+0x1e8>)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	400a      	ands	r2, r1
 8004410:	3302      	adds	r3, #2
 8004412:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <HAL_GPIO_DeInit+0x214>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	43db      	mvns	r3, r3
 800441e:	491e      	ldr	r1, [pc, #120]	; (8004498 <HAL_GPIO_DeInit+0x214>)
 8004420:	4013      	ands	r3, r2
 8004422:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004424:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <HAL_GPIO_DeInit+0x214>)
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	43db      	mvns	r3, r3
 800442c:	491a      	ldr	r1, [pc, #104]	; (8004498 <HAL_GPIO_DeInit+0x214>)
 800442e:	4013      	ands	r3, r2
 8004430:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004432:	4b19      	ldr	r3, [pc, #100]	; (8004498 <HAL_GPIO_DeInit+0x214>)
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	43db      	mvns	r3, r3
 800443a:	4917      	ldr	r1, [pc, #92]	; (8004498 <HAL_GPIO_DeInit+0x214>)
 800443c:	4013      	ands	r3, r2
 800443e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004440:	4b15      	ldr	r3, [pc, #84]	; (8004498 <HAL_GPIO_DeInit+0x214>)
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	43db      	mvns	r3, r3
 8004448:	4913      	ldr	r1, [pc, #76]	; (8004498 <HAL_GPIO_DeInit+0x214>)
 800444a:	4013      	ands	r3, r2
 800444c:	60cb      	str	r3, [r1, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	3301      	adds	r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b0f      	cmp	r3, #15
 8004458:	f67f af22 	bls.w	80042a0 <HAL_GPIO_DeInit+0x1c>
      }
    }
  }
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40013800 	.word	0x40013800
 8004470:	40020000 	.word	0x40020000
 8004474:	40020400 	.word	0x40020400
 8004478:	40020800 	.word	0x40020800
 800447c:	40020c00 	.word	0x40020c00
 8004480:	40021000 	.word	0x40021000
 8004484:	40021400 	.word	0x40021400
 8004488:	40021800 	.word	0x40021800
 800448c:	40021c00 	.word	0x40021c00
 8004490:	40022000 	.word	0x40022000
 8004494:	40022400 	.word	0x40022400
 8004498:	40013c00 	.word	0x40013c00

0800449c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	807b      	strh	r3, [r7, #2]
 80044a8:	4613      	mov	r3, r2
 80044aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044ac:	787b      	ldrb	r3, [r7, #1]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044b8:	e003      	b.n	80044c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044ba:	887b      	ldrh	r3, [r7, #2]
 80044bc:	041a      	lsls	r2, r3, #16
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	619a      	str	r2, [r3, #24]
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e0c9      	b.n	800467e <HAL_I2C_Init+0x1ae>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f005 fc82 	bl	8009e08 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	; 0x24
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800451c:	f001 fb18 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8004520:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4a58      	ldr	r2, [pc, #352]	; (8004688 <HAL_I2C_Init+0x1b8>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	0c9b      	lsrs	r3, r3, #18
 800452c:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4a54      	ldr	r2, [pc, #336]	; (800468c <HAL_I2C_Init+0x1bc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d802      	bhi.n	8004546 <HAL_I2C_Init+0x76>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3301      	adds	r3, #1
 8004544:	e009      	b.n	800455a <HAL_I2C_Init+0x8a>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800454c:	fb02 f303 	mul.w	r3, r2, r3
 8004550:	4a4f      	ldr	r2, [pc, #316]	; (8004690 <HAL_I2C_Init+0x1c0>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	3301      	adds	r3, #1
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4a49      	ldr	r2, [pc, #292]	; (800468c <HAL_I2C_Init+0x1bc>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d813      	bhi.n	8004592 <HAL_I2C_Init+0xc2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	fbb2 f2f3 	udiv	r2, r2, r3
 8004576:	f640 73fc 	movw	r3, #4092	; 0xffc
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d006      	beq.n	800458e <HAL_I2C_Init+0xbe>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	e045      	b.n	800461a <HAL_I2C_Init+0x14a>
 800458e:	2304      	movs	r3, #4
 8004590:	e043      	b.n	800461a <HAL_I2C_Init+0x14a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <HAL_I2C_Init+0xea>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	4413      	add	r3, r2
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bf0c      	ite	eq
 80045b2:	2301      	moveq	r3, #1
 80045b4:	2300      	movne	r3, #0
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	e010      	b.n	80045dc <HAL_I2C_Init+0x10c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	009a      	lsls	r2, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bf0c      	ite	eq
 80045d6:	2301      	moveq	r3, #1
 80045d8:	2300      	movne	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_I2C_Init+0x114>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e01a      	b.n	800461a <HAL_I2C_Init+0x14a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10a      	bne.n	8004602 <HAL_I2C_Init+0x132>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004600:	e00b      	b.n	800461a <HAL_I2C_Init+0x14a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009a      	lsls	r2, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69d9      	ldr	r1, [r3, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6919      	ldr	r1, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6959      	ldr	r1, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699a      	ldr	r2, [r3, #24]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	431bde83 	.word	0x431bde83
 800468c:	000186a0 	.word	0x000186a0
 8004690:	10624dd3 	.word	0x10624dd3

08004694 <HAL_I2C_DeInit>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e021      	b.n	80046ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2224      	movs	r2, #36	; 0x24
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f005 fc24 	bl	8009f0c <HAL_I2C_MspDeInit>

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	607a      	str	r2, [r7, #4]
 80046fe:	461a      	mov	r2, r3
 8004700:	460b      	mov	r3, r1
 8004702:	817b      	strh	r3, [r7, #10]
 8004704:	4613      	mov	r3, r2
 8004706:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800470c:	f7ff f908 	bl	8003920 <HAL_GetTick>
 8004710:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b20      	cmp	r3, #32
 800471c:	f040 80ee 	bne.w	80048fc <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	2319      	movs	r3, #25
 8004726:	2201      	movs	r2, #1
 8004728:	4977      	ldr	r1, [pc, #476]	; (8004908 <HAL_I2C_Master_Transmit+0x214>)
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fc6c 	bl	8005008 <I2C_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8004736:	2302      	movs	r3, #2
 8004738:	e0e1      	b.n	80048fe <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_I2C_Master_Transmit+0x54>
 8004744:	2302      	movs	r3, #2
 8004746:	e0da      	b.n	80048fe <HAL_I2C_Master_Transmit+0x20a>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d007      	beq.n	800476e <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2221      	movs	r2, #33	; 0x21
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2210      	movs	r2, #16
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	893a      	ldrh	r2, [r7, #8]
 800479e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4a5a      	ldr	r2, [pc, #360]	; (800490c <HAL_I2C_Master_Transmit+0x218>)
 80047a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047b0:	8979      	ldrh	r1, [r7, #10]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	6a3a      	ldr	r2, [r7, #32]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fadc 	bl	8004d74 <I2C_MasterRequestWrite>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00f      	beq.n	80047e2 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d105      	bne.n	80047d6 <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e093      	b.n	80048fe <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e08d      	b.n	80048fe <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e2:	2300      	movs	r3, #0
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 80047f8:	e066      	b.n	80048c8 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	6a39      	ldr	r1, [r7, #32]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fcc1 	bl	8005186 <I2C_WaitOnTXEFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00f      	beq.n	800482a <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2b04      	cmp	r3, #4
 8004810:	d109      	bne.n	8004826 <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004820:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e06b      	b.n	80048fe <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e069      	b.n	80048fe <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	1c59      	adds	r1, r3, #1
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	6251      	str	r1, [r2, #36]	; 0x24
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b04      	cmp	r3, #4
 8004862:	d119      	bne.n	8004898 <HAL_I2C_Master_Transmit+0x1a4>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004868:	2b00      	cmp	r3, #0
 800486a:	d015      	beq.n	8004898 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	1c59      	adds	r1, r3, #1
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	6251      	str	r1, [r2, #36]	; 0x24
 8004876:	781a      	ldrb	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	6a39      	ldr	r1, [r7, #32]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fcaf 	bl	8005200 <I2C_WaitOnBTFFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00f      	beq.n	80048c8 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d109      	bne.n	80048c4 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048be:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e01c      	b.n	80048fe <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e01a      	b.n	80048fe <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d194      	bne.n	80047fa <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	e000      	b.n	80048fe <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	00100002 	.word	0x00100002
 800490c:	ffff0000 	.word	0xffff0000

08004910 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08c      	sub	sp, #48	; 0x30
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	461a      	mov	r2, r3
 800491c:	460b      	mov	r3, r1
 800491e:	817b      	strh	r3, [r7, #10]
 8004920:	4613      	mov	r3, r2
 8004922:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8004924:	2300      	movs	r3, #0
 8004926:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004928:	f7fe fffa 	bl	8003920 <HAL_GetTick>
 800492c:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b20      	cmp	r3, #32
 8004938:	f040 8215 	bne.w	8004d66 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2319      	movs	r3, #25
 8004942:	2201      	movs	r2, #1
 8004944:	4985      	ldr	r1, [pc, #532]	; (8004b5c <HAL_I2C_Master_Receive+0x24c>)
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fb5e 	bl	8005008 <I2C_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8004952:	2302      	movs	r3, #2
 8004954:	e208      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_I2C_Master_Receive+0x54>
 8004960:	2302      	movs	r3, #2
 8004962:	e201      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b01      	cmp	r3, #1
 8004978:	d007      	beq.n	800498a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004998:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2222      	movs	r2, #34	; 0x22
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2210      	movs	r2, #16
 80049a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	893a      	ldrh	r2, [r7, #8]
 80049ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a68      	ldr	r2, [pc, #416]	; (8004b60 <HAL_I2C_Master_Receive+0x250>)
 80049c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049cc:	8979      	ldrh	r1, [r7, #10]
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fa50 	bl	8004e78 <I2C_MasterRequestRead>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00f      	beq.n	80049fe <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d105      	bne.n	80049f2 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e1ba      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e1b4      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d113      	bne.n	8004a2e <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	623b      	str	r3, [r7, #32]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	623b      	str	r3, [r7, #32]
 8004a1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e188      	b.n	8004d40 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d11b      	bne.n	8004a6e <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e168      	b.n	8004d40 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d11b      	bne.n	8004aae <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	e148      	b.n	8004d40 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004abc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8004ad4:	e134      	b.n	8004d40 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	f200 80eb 	bhi.w	8004cb6 <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d127      	bne.n	8004b38 <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fbc4 	bl	800527a <I2C_WaitOnRXNEFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d101      	bne.n	8004b04 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e131      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e12f      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6918      	ldr	r0, [r3, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	1c59      	adds	r1, r3, #1
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	6251      	str	r1, [r2, #36]	; 0x24
 8004b18:	b2c2      	uxtb	r2, r0
 8004b1a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b36:	e103      	b.n	8004d40 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d14a      	bne.n	8004bd6 <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	2200      	movs	r2, #0
 8004b48:	4906      	ldr	r1, [pc, #24]	; (8004b64 <HAL_I2C_Master_Receive+0x254>)
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fa5c 	bl	8005008 <I2C_WaitOnFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d008      	beq.n	8004b68 <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e106      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
 8004b5a:	bf00      	nop
 8004b5c:	00100002 	.word	0x00100002
 8004b60:	ffff0000 	.word	0xffff0000
 8004b64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6918      	ldr	r0, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	1c59      	adds	r1, r3, #1
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	6251      	str	r1, [r2, #36]	; 0x24
 8004b88:	b2c2      	uxtb	r2, r0
 8004b8a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6918      	ldr	r0, [r3, #16]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	1c59      	adds	r1, r3, #1
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	6251      	str	r1, [r2, #36]	; 0x24
 8004bb6:	b2c2      	uxtb	r2, r0
 8004bb8:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bd4:	e0b4      	b.n	8004d40 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4964      	ldr	r1, [pc, #400]	; (8004d70 <HAL_I2C_Master_Receive+0x460>)
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fa11 	bl	8005008 <I2C_WaitOnFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e0bb      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6918      	ldr	r0, [r3, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	1c59      	adds	r1, r3, #1
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	6251      	str	r1, [r2, #36]	; 0x24
 8004c10:	b2c2      	uxtb	r2, r0
 8004c12:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	2200      	movs	r2, #0
 8004c36:	494e      	ldr	r1, [pc, #312]	; (8004d70 <HAL_I2C_Master_Receive+0x460>)
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f9e5 	bl	8005008 <I2C_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e08f      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6918      	ldr	r0, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	1c59      	adds	r1, r3, #1
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	6251      	str	r1, [r2, #36]	; 0x24
 8004c68:	b2c2      	uxtb	r2, r0
 8004c6a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6918      	ldr	r0, [r3, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	1c59      	adds	r1, r3, #1
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	6251      	str	r1, [r2, #36]	; 0x24
 8004c96:	b2c2      	uxtb	r2, r0
 8004c98:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cb4:	e044      	b.n	8004d40 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8004cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fadd 	bl	800527a <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d101      	bne.n	8004cd2 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e04a      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e048      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6918      	ldr	r0, [r3, #16]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	1c59      	adds	r1, r3, #1
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	6251      	str	r1, [r2, #36]	; 0x24
 8004ce6:	b2c2      	uxtb	r2, r0
 8004ce8:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d116      	bne.n	8004d40 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6918      	ldr	r0, [r3, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	1c59      	adds	r1, r3, #1
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	6251      	str	r1, [r2, #36]	; 0x24
 8004d22:	b2c2      	uxtb	r2, r0
 8004d24:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f47f aec6 	bne.w	8004ad6 <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e000      	b.n	8004d68 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004d66:	2302      	movs	r3, #2
  }
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3728      	adds	r7, #40	; 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	00010004 	.word	0x00010004

08004d74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	603b      	str	r3, [r7, #0]
 8004d80:	460b      	mov	r3, r1
 8004d82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d006      	beq.n	8004d9e <I2C_MasterRequestWrite+0x2a>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d003      	beq.n	8004d9e <I2C_MasterRequestWrite+0x2a>
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d9c:	d108      	bne.n	8004db0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e00b      	b.n	8004dc8 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	2b12      	cmp	r3, #18
 8004db6:	d107      	bne.n	8004dc8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dc6:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f917 	bl	8005008 <I2C_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e041      	b.n	8004e68 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dec:	d108      	bne.n	8004e00 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dee:	897b      	ldrh	r3, [r7, #10]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dfc:	611a      	str	r2, [r3, #16]
 8004dfe:	e021      	b.n	8004e44 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004e00:	897b      	ldrh	r3, [r7, #10]
 8004e02:	11db      	asrs	r3, r3, #7
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f003 0306 	and.w	r3, r3, #6
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f063 030f 	orn	r3, r3, #15
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4914      	ldr	r1, [pc, #80]	; (8004e70 <I2C_MasterRequestWrite+0xfc>)
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f943 	bl	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d007      	beq.n	8004e3a <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d101      	bne.n	8004e36 <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e018      	b.n	8004e68 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e016      	b.n	8004e68 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004e3a:	897b      	ldrh	r3, [r7, #10]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	490a      	ldr	r1, [pc, #40]	; (8004e74 <I2C_MasterRequestWrite+0x100>)
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f92d 	bl	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d101      	bne.n	8004e62 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e002      	b.n	8004e68 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e000      	b.n	8004e68 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	00010008 	.word	0x00010008
 8004e74:	00010002 	.word	0x00010002

08004e78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	460b      	mov	r3, r1
 8004e86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d006      	beq.n	8004eb2 <I2C_MasterRequestRead+0x3a>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d003      	beq.n	8004eb2 <I2C_MasterRequestRead+0x3a>
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eb0:	d108      	bne.n	8004ec4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e00b      	b.n	8004edc <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	2b11      	cmp	r3, #17
 8004eca:	d107      	bne.n	8004edc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eda:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f88d 	bl	8005008 <I2C_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e07f      	b.n	8004ff8 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f00:	d108      	bne.n	8004f14 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f02:	897b      	ldrh	r3, [r7, #10]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	611a      	str	r2, [r3, #16]
 8004f12:	e05f      	b.n	8004fd4 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f14:	897b      	ldrh	r3, [r7, #10]
 8004f16:	11db      	asrs	r3, r3, #7
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 0306 	and.w	r3, r3, #6
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f063 030f 	orn	r3, r3, #15
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	4933      	ldr	r1, [pc, #204]	; (8005000 <I2C_MasterRequestRead+0x188>)
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f8b9 	bl	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d101      	bne.n	8004f4a <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e056      	b.n	8004ff8 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e054      	b.n	8004ff8 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f4e:	897b      	ldrh	r3, [r7, #10]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4929      	ldr	r1, [pc, #164]	; (8005004 <I2C_MasterRequestRead+0x18c>)
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f8a3 	bl	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d101      	bne.n	8004f76 <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e040      	b.n	8004ff8 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e03e      	b.n	8004ff8 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 f82b 	bl	8005008 <I2C_WaitOnFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e01d      	b.n	8004ff8 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004fbc:	897b      	ldrh	r3, [r7, #10]
 8004fbe:	11db      	asrs	r3, r3, #7
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	f003 0306 	and.w	r3, r3, #6
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f063 030e 	orn	r3, r3, #14
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	490a      	ldr	r1, [pc, #40]	; (8005004 <I2C_MasterRequestRead+0x18c>)
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f865 	bl	80050aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d101      	bne.n	8004ff2 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e002      	b.n	8004ff8 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e000      	b.n	8004ff8 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	00010008 	.word	0x00010008
 8005004:	00010002 	.word	0x00010002

08005008 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8005018:	e01f      	b.n	800505a <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005020:	d01b      	beq.n	800505a <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d007      	beq.n	8005038 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005028:	f7fe fc7a 	bl	8003920 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d210      	bcs.n	800505a <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e023      	b.n	80050a2 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d10d      	bne.n	8005080 <I2C_WaitOnFlagUntilTimeout+0x78>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	43da      	mvns	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	e00c      	b.n	800509a <I2C_WaitOnFlagUntilTimeout+0x92>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	43da      	mvns	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4013      	ands	r3, r2
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	bf0c      	ite	eq
 8005092:	2301      	moveq	r3, #1
 8005094:	2300      	movne	r3, #0
 8005096:	b2db      	uxtb	r3, r3
 8005098:	461a      	mov	r2, r3
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	429a      	cmp	r2, r3
 800509e:	d0bc      	beq.n	800501a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	607a      	str	r2, [r7, #4]
 80050b6:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050b8:	e040      	b.n	800513c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c8:	d11c      	bne.n	8005104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050e2:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2204      	movs	r2, #4
 80050e8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e03c      	b.n	800517e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800510a:	d017      	beq.n	800513c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8005112:	f7fe fc05 	bl	8003920 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d20c      	bcs.n	800513c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e020      	b.n	800517e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d10c      	bne.n	8005160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	43da      	mvns	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4013      	ands	r3, r2
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e00b      	b.n	8005178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	43da      	mvns	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4013      	ands	r3, r2
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	bf14      	ite	ne
 8005172:	2301      	movne	r3, #1
 8005174:	2300      	moveq	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d19e      	bne.n	80050ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	60f8      	str	r0, [r7, #12]
 800518e:	60b9      	str	r1, [r7, #8]
 8005190:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005192:	e029      	b.n	80051e8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f8ba 	bl	800530e <I2C_IsAcknowledgeFailed>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e029      	b.n	80051f8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051aa:	d01d      	beq.n	80051e8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d007      	beq.n	80051c2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051b2:	f7fe fbb5 	bl	8003920 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d212      	bcs.n	80051e8 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e007      	b.n	80051f8 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f2:	2b80      	cmp	r3, #128	; 0x80
 80051f4:	d1ce      	bne.n	8005194 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800520c:	e029      	b.n	8005262 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 f87d 	bl	800530e <I2C_IsAcknowledgeFailed>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e029      	b.n	8005272 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005224:	d01d      	beq.n	8005262 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800522c:	f7fe fb78 	bl	8003920 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	429a      	cmp	r2, r3
 800523a:	d212      	bcs.n	8005262 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	f043 0220 	orr.w	r2, r3, #32
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e007      	b.n	8005272 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d1ce      	bne.n	800520e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005286:	e036      	b.n	80052f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b10      	cmp	r3, #16
 8005294:	d114      	bne.n	80052c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f06f 0210 	mvn.w	r2, #16
 800529e:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e022      	b.n	8005306 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d007      	beq.n	80052d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80052c6:	f7fe fb2b 	bl	8003920 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d20f      	bcs.n	80052f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e007      	b.n	8005306 <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005300:	2b40      	cmp	r3, #64	; 0x40
 8005302:	d1c1      	bne.n	8005288 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005324:	d114      	bne.n	8005350 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800532e:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2204      	movs	r2, #4
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08e      	sub	sp, #56	; 0x38
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8005368:	2300      	movs	r3, #0
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d075      	beq.n	8005464 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005378:	4ba4      	ldr	r3, [pc, #656]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 030c 	and.w	r3, r3, #12
 8005380:	2b04      	cmp	r3, #4
 8005382:	d00c      	beq.n	800539e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005384:	4ba1      	ldr	r3, [pc, #644]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800538c:	2b08      	cmp	r3, #8
 800538e:	d112      	bne.n	80053b6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005390:	4b9e      	ldr	r3, [pc, #632]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800539c:	d10b      	bne.n	80053b6 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539e:	4b9b      	ldr	r3, [pc, #620]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d05b      	beq.n	8005462 <HAL_RCC_OscConfig+0x102>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d157      	bne.n	8005462 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e224      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053be:	d106      	bne.n	80053ce <HAL_RCC_OscConfig+0x6e>
 80053c0:	4b92      	ldr	r3, [pc, #584]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a91      	ldr	r2, [pc, #580]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	e01d      	b.n	800540a <HAL_RCC_OscConfig+0xaa>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d6:	d10c      	bne.n	80053f2 <HAL_RCC_OscConfig+0x92>
 80053d8:	4b8c      	ldr	r3, [pc, #560]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a8b      	ldr	r2, [pc, #556]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	4b89      	ldr	r3, [pc, #548]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a88      	ldr	r2, [pc, #544]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	e00b      	b.n	800540a <HAL_RCC_OscConfig+0xaa>
 80053f2:	4b86      	ldr	r3, [pc, #536]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a85      	ldr	r2, [pc, #532]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80053f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	4b83      	ldr	r3, [pc, #524]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a82      	ldr	r2, [pc, #520]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005408:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d013      	beq.n	800543a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005412:	f7fe fa85 	bl	8003920 <HAL_GetTick>
 8005416:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800541a:	f7fe fa81 	bl	8003920 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b64      	cmp	r3, #100	; 0x64
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e1e9      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542c:	4b77      	ldr	r3, [pc, #476]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0f0      	beq.n	800541a <HAL_RCC_OscConfig+0xba>
 8005438:	e014      	b.n	8005464 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543a:	f7fe fa71 	bl	8003920 <HAL_GetTick>
 800543e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005442:	f7fe fa6d 	bl	8003920 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b64      	cmp	r3, #100	; 0x64
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e1d5      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005454:	4b6d      	ldr	r3, [pc, #436]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f0      	bne.n	8005442 <HAL_RCC_OscConfig+0xe2>
 8005460:	e000      	b.n	8005464 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005462:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d077      	beq.n	8005560 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005470:	4b66      	ldr	r3, [pc, #408]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00b      	beq.n	8005494 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800547c:	4b63      	ldr	r3, [pc, #396]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005484:	2b08      	cmp	r3, #8
 8005486:	d126      	bne.n	80054d6 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005488:	4b60      	ldr	r3, [pc, #384]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d120      	bne.n	80054d6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005494:	4b5d      	ldr	r3, [pc, #372]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCC_OscConfig+0x14c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e1a9      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ac:	4b57      	ldr	r3, [pc, #348]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6919      	ldr	r1, [r3, #16]
 80054b8:	23f8      	movs	r3, #248	; 0xf8
 80054ba:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	fa93 f3a3 	rbit	r3, r3
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	fab3 f383 	clz	r3, r3
 80054ca:	fa01 f303 	lsl.w	r3, r1, r3
 80054ce:	494f      	ldr	r1, [pc, #316]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d4:	e044      	b.n	8005560 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d02a      	beq.n	8005534 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054de:	4b4c      	ldr	r3, [pc, #304]	; (8005610 <HAL_RCC_OscConfig+0x2b0>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e4:	f7fe fa1c 	bl	8003920 <HAL_GetTick>
 80054e8:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ec:	f7fe fa18 	bl	8003920 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e180      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fe:	4b43      	ldr	r3, [pc, #268]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550a:	4b40      	ldr	r3, [pc, #256]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6919      	ldr	r1, [r3, #16]
 8005516:	23f8      	movs	r3, #248	; 0xf8
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	fa93 f3a3 	rbit	r3, r3
 8005520:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	fab3 f383 	clz	r3, r3
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	4937      	ldr	r1, [pc, #220]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 800552e:	4313      	orrs	r3, r2
 8005530:	600b      	str	r3, [r1, #0]
 8005532:	e015      	b.n	8005560 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005534:	4b36      	ldr	r3, [pc, #216]	; (8005610 <HAL_RCC_OscConfig+0x2b0>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553a:	f7fe f9f1 	bl	8003920 <HAL_GetTick>
 800553e:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005542:	f7fe f9ed 	bl	8003920 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e155      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005554:	4b2d      	ldr	r3, [pc, #180]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f0      	bne.n	8005542 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b00      	cmp	r3, #0
 800556a:	d030      	beq.n	80055ce <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d016      	beq.n	80055a2 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005574:	4b27      	ldr	r3, [pc, #156]	; (8005614 <HAL_RCC_OscConfig+0x2b4>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557a:	f7fe f9d1 	bl	8003920 <HAL_GetTick>
 800557e:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005582:	f7fe f9cd 	bl	8003920 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e135      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005594:	4b1d      	ldr	r3, [pc, #116]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 8005596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x222>
 80055a0:	e015      	b.n	80055ce <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a2:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <HAL_RCC_OscConfig+0x2b4>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a8:	f7fe f9ba 	bl	8003920 <HAL_GetTick>
 80055ac:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055b0:	f7fe f9b6 	bl	8003920 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e11e      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80055c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 8086 	beq.w	80056e8 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	4a09      	ldr	r2, [pc, #36]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80055e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ea:	6413      	str	r3, [r2, #64]	; 0x40
 80055ec:	4b07      	ldr	r3, [pc, #28]	; (800560c <HAL_RCC_OscConfig+0x2ac>)
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055f8:	4b07      	ldr	r3, [pc, #28]	; (8005618 <HAL_RCC_OscConfig+0x2b8>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a06      	ldr	r2, [pc, #24]	; (8005618 <HAL_RCC_OscConfig+0x2b8>)
 80055fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005602:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8005604:	f7fe f98c 	bl	8003920 <HAL_GetTick>
 8005608:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800560a:	e010      	b.n	800562e <HAL_RCC_OscConfig+0x2ce>
 800560c:	40023800 	.word	0x40023800
 8005610:	42470000 	.word	0x42470000
 8005614:	42470e80 	.word	0x42470e80
 8005618:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800561c:	f7fe f980 	bl	8003920 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e0e8      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800562e:	4b76      	ldr	r3, [pc, #472]	; (8005808 <HAL_RCC_OscConfig+0x4a8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d106      	bne.n	8005650 <HAL_RCC_OscConfig+0x2f0>
 8005642:	4b72      	ldr	r3, [pc, #456]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	4a71      	ldr	r2, [pc, #452]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	6713      	str	r3, [r2, #112]	; 0x70
 800564e:	e01c      	b.n	800568a <HAL_RCC_OscConfig+0x32a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b05      	cmp	r3, #5
 8005656:	d10c      	bne.n	8005672 <HAL_RCC_OscConfig+0x312>
 8005658:	4b6c      	ldr	r3, [pc, #432]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	4a6b      	ldr	r2, [pc, #428]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 800565e:	f043 0304 	orr.w	r3, r3, #4
 8005662:	6713      	str	r3, [r2, #112]	; 0x70
 8005664:	4b69      	ldr	r3, [pc, #420]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 8005666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005668:	4a68      	ldr	r2, [pc, #416]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	6713      	str	r3, [r2, #112]	; 0x70
 8005670:	e00b      	b.n	800568a <HAL_RCC_OscConfig+0x32a>
 8005672:	4b66      	ldr	r3, [pc, #408]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	4a65      	ldr	r2, [pc, #404]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	6713      	str	r3, [r2, #112]	; 0x70
 800567e:	4b63      	ldr	r3, [pc, #396]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	4a62      	ldr	r2, [pc, #392]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 8005684:	f023 0304 	bic.w	r3, r3, #4
 8005688:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d015      	beq.n	80056be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005692:	f7fe f945 	bl	8003920 <HAL_GetTick>
 8005696:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005698:	e00a      	b.n	80056b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800569a:	f7fe f941 	bl	8003920 <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e0a7      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b0:	4b56      	ldr	r3, [pc, #344]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0ee      	beq.n	800569a <HAL_RCC_OscConfig+0x33a>
 80056bc:	e014      	b.n	80056e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056be:	f7fe f92f 	bl	8003920 <HAL_GetTick>
 80056c2:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c4:	e00a      	b.n	80056dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c6:	f7fe f92b 	bl	8003920 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e091      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056dc:	4b4b      	ldr	r3, [pc, #300]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1ee      	bne.n	80056c6 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8086 	beq.w	80057fe <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056f2:	4b46      	ldr	r3, [pc, #280]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 030c 	and.w	r3, r3, #12
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d07d      	beq.n	80057fa <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	2b02      	cmp	r3, #2
 8005704:	d162      	bne.n	80057cc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005706:	4b42      	ldr	r3, [pc, #264]	; (8005810 <HAL_RCC_OscConfig+0x4b0>)
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570c:	f7fe f908 	bl	8003920 <HAL_GetTick>
 8005710:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005714:	f7fe f904 	bl	8003920 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e06c      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005726:	4b39      	ldr	r3, [pc, #228]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1f0      	bne.n	8005714 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69da      	ldr	r2, [r3, #28]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005744:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	fa93 f3a3 	rbit	r3, r3
 800574c:	60fb      	str	r3, [r7, #12]
  return(result);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	fab3 f383 	clz	r3, r3
 8005754:	fa01 f303 	lsl.w	r3, r1, r3
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	1e59      	subs	r1, r3, #1
 8005762:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	fa93 f3a3 	rbit	r3, r3
 800576e:	617b      	str	r3, [r7, #20]
  return(result);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	fab3 f383 	clz	r3, r3
 8005776:	fa01 f303 	lsl.w	r3, r1, r3
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005780:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	fa93 f3a3 	rbit	r3, r3
 800578c:	61fb      	str	r3, [r7, #28]
  return(result);
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	fa01 f303 	lsl.w	r3, r1, r3
 8005798:	491c      	ldr	r1, [pc, #112]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 800579a:	4313      	orrs	r3, r2
 800579c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579e:	4b1c      	ldr	r3, [pc, #112]	; (8005810 <HAL_RCC_OscConfig+0x4b0>)
 80057a0:	2201      	movs	r2, #1
 80057a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fe f8bc 	bl	8003920 <HAL_GetTick>
 80057a8:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ac:	f7fe f8b8 	bl	8003920 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e020      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCC_OscConfig+0x44c>
 80057ca:	e018      	b.n	80057fe <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057cc:	4b10      	ldr	r3, [pc, #64]	; (8005810 <HAL_RCC_OscConfig+0x4b0>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d2:	f7fe f8a5 	bl	8003920 <HAL_GetTick>
 80057d6:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057da:	f7fe f8a1 	bl	8003920 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e009      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ec:	4b07      	ldr	r3, [pc, #28]	; (800580c <HAL_RCC_OscConfig+0x4ac>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1f0      	bne.n	80057da <HAL_RCC_OscConfig+0x47a>
 80057f8:	e001      	b.n	80057fe <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3738      	adds	r7, #56	; 0x38
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40007000 	.word	0x40007000
 800580c:	40023800 	.word	0x40023800
 8005810:	42470060 	.word	0x42470060

08005814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005822:	4b81      	ldr	r3, [pc, #516]	; (8005a28 <HAL_RCC_ClockConfig+0x214>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d90c      	bls.n	800584a <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005830:	4b7d      	ldr	r3, [pc, #500]	; (8005a28 <HAL_RCC_ClockConfig+0x214>)
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005838:	4b7b      	ldr	r3, [pc, #492]	; (8005a28 <HAL_RCC_ClockConfig+0x214>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 030f 	and.w	r3, r3, #15
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d001      	beq.n	800584a <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e0ea      	b.n	8005a20 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005856:	4b75      	ldr	r3, [pc, #468]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	4972      	ldr	r1, [pc, #456]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 8005864:	4313      	orrs	r3, r2
 8005866:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8086 	beq.w	8005982 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d107      	bne.n	800588e <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587e:	4b6b      	ldr	r3, [pc, #428]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d119      	bne.n	80058be <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0c8      	b.n	8005a20 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d003      	beq.n	800589e <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800589a:	2b03      	cmp	r3, #3
 800589c:	d107      	bne.n	80058ae <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800589e:	4b63      	ldr	r3, [pc, #396]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d109      	bne.n	80058be <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e0b8      	b.n	8005a20 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ae:	4b5f      	ldr	r3, [pc, #380]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e0b0      	b.n	8005a20 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058be:	4b5b      	ldr	r3, [pc, #364]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f023 0203 	bic.w	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4958      	ldr	r1, [pc, #352]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d0:	f7fe f826 	bl	8003920 <HAL_GetTick>
 80058d4:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d112      	bne.n	8005904 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058de:	e00a      	b.n	80058f6 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e0:	f7fe f81e 	bl	8003920 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e094      	b.n	8005a20 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80058f6:	4b4d      	ldr	r3, [pc, #308]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 030c 	and.w	r3, r3, #12
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d1ee      	bne.n	80058e0 <HAL_RCC_ClockConfig+0xcc>
 8005902:	e03e      	b.n	8005982 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b02      	cmp	r3, #2
 800590a:	d112      	bne.n	8005932 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800590c:	e00a      	b.n	8005924 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800590e:	f7fe f807 	bl	8003920 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	f241 3288 	movw	r2, #5000	; 0x1388
 800591c:	4293      	cmp	r3, r2
 800591e:	d901      	bls.n	8005924 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e07d      	b.n	8005a20 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005924:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d1ee      	bne.n	800590e <HAL_RCC_ClockConfig+0xfa>
 8005930:	e027      	b.n	8005982 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b03      	cmp	r3, #3
 8005938:	d11d      	bne.n	8005976 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800593a:	e00a      	b.n	8005952 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593c:	f7fd fff0 	bl	8003920 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	f241 3288 	movw	r2, #5000	; 0x1388
 800594a:	4293      	cmp	r3, r2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e066      	b.n	8005a20 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8005952:	4b36      	ldr	r3, [pc, #216]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	2b0c      	cmp	r3, #12
 800595c:	d1ee      	bne.n	800593c <HAL_RCC_ClockConfig+0x128>
 800595e:	e010      	b.n	8005982 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005960:	f7fd ffde 	bl	8003920 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f241 3288 	movw	r2, #5000	; 0x1388
 800596e:	4293      	cmp	r3, r2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e054      	b.n	8005a20 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005976:	4b2d      	ldr	r3, [pc, #180]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 030c 	and.w	r3, r3, #12
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1ee      	bne.n	8005960 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005982:	4b29      	ldr	r3, [pc, #164]	; (8005a28 <HAL_RCC_ClockConfig+0x214>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d20c      	bcs.n	80059aa <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005990:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <HAL_RCC_ClockConfig+0x214>)
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005998:	4b23      	ldr	r3, [pc, #140]	; (8005a28 <HAL_RCC_ClockConfig+0x214>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 030f 	and.w	r3, r3, #15
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d001      	beq.n	80059aa <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e03a      	b.n	8005a20 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d008      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b6:	4b1d      	ldr	r3, [pc, #116]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	491a      	ldr	r1, [pc, #104]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d009      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059d4:	4b15      	ldr	r3, [pc, #84]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	4912      	ldr	r1, [pc, #72]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80059e8:	f000 f826 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 80059ec:	4601      	mov	r1, r0
 80059ee:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <HAL_RCC_ClockConfig+0x218>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059f6:	23f0      	movs	r3, #240	; 0xf0
 80059f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	fa93 f3a3 	rbit	r3, r3
 8005a00:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	fab3 f383 	clz	r3, r3
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0c:	4a08      	ldr	r2, [pc, #32]	; (8005a30 <HAL_RCC_ClockConfig+0x21c>)
 8005a0e:	5cd3      	ldrb	r3, [r2, r3]
 8005a10:	fa21 f303 	lsr.w	r3, r1, r3
 8005a14:	4a07      	ldr	r2, [pc, #28]	; (8005a34 <HAL_RCC_ClockConfig+0x220>)
 8005a16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005a18:	200f      	movs	r0, #15
 8005a1a:	f004 fbe5 	bl	800a1e8 <HAL_InitTick>
  
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40023c00 	.word	0x40023c00
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	08017eac 	.word	0x08017eac
 8005a34:	20000014 	.word	0x20000014

08005a38 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b08b      	sub	sp, #44	; 0x2c
 8005a3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	2300      	movs	r3, #0
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
 8005a46:	2300      	movs	r3, #0
 8005a48:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a4e:	4b38      	ldr	r3, [pc, #224]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 030c 	and.w	r3, r3, #12
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d00c      	beq.n	8005a74 <HAL_RCC_GetSysClockFreq+0x3c>
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d85d      	bhi.n	8005b1a <HAL_RCC_GetSysClockFreq+0xe2>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0x30>
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d003      	beq.n	8005a6e <HAL_RCC_GetSysClockFreq+0x36>
 8005a66:	e058      	b.n	8005b1a <HAL_RCC_GetSysClockFreq+0xe2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a68:	4b32      	ldr	r3, [pc, #200]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005a6a:	623b      	str	r3, [r7, #32]
       break;
 8005a6c:	e058      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a6e:	4b31      	ldr	r3, [pc, #196]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005a70:	623b      	str	r3, [r7, #32]
      break;
 8005a72:	e055      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a74:	4b2e      	ldr	r3, [pc, #184]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a7c:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a7e:	4b2c      	ldr	r3, [pc, #176]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d017      	beq.n	8005aba <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8005a8a:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a92:	4b27      	ldr	r3, [pc, #156]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a94:	6859      	ldr	r1, [r3, #4]
 8005a96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a9a:	400b      	ands	r3, r1
 8005a9c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005aa0:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa2:	6979      	ldr	r1, [r7, #20]
 8005aa4:	fa91 f1a1 	rbit	r1, r1
 8005aa8:	6139      	str	r1, [r7, #16]
  return(result);
 8005aaa:	6939      	ldr	r1, [r7, #16]
 8005aac:	fab1 f181 	clz	r1, r1
 8005ab0:	40cb      	lsrs	r3, r1
 8005ab2:	fb03 f302 	mul.w	r3, r3, r2
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab8:	e016      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0xb0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8005aba:	4a1e      	ldr	r2, [pc, #120]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ac2:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005aca:	400b      	ands	r3, r1
 8005acc:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005ad0:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	fa91 f1a1 	rbit	r1, r1
 8005ad8:	60b9      	str	r1, [r7, #8]
  return(result);
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	fab1 f181 	clz	r1, r1
 8005ae0:	40cb      	lsrs	r3, r1
 8005ae2:	fb03 f302 	mul.w	r3, r3, r2
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8005ae8:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005af0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005af4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	fa93 f3a3 	rbit	r3, r3
 8005afc:	603b      	str	r3, [r7, #0]
  return(result);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	fab3 f383 	clz	r3, r3
 8005b04:	fa22 f303 	lsr.w	r3, r2, r3
 8005b08:	3301      	adds	r3, #1
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	623b      	str	r3, [r7, #32]
      break;
 8005b18:	e002      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0xe8>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b1a:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b1c:	623b      	str	r3, [r7, #32]
      break;
 8005b1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b20:	6a3b      	ldr	r3, [r7, #32]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	372c      	adds	r7, #44	; 0x2c
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40023800 	.word	0x40023800
 8005b34:	00f42400 	.word	0x00f42400

08005b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b3c:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	20000014 	.word	0x20000014

08005b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005b56:	f7ff ffef 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b5a:	4601      	mov	r1, r0
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b64:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005b68:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	fa93 f3a3 	rbit	r3, r3
 8005b70:	603b      	str	r3, [r7, #0]
  return(result);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	fab3 f383 	clz	r3, r3
 8005b78:	fa22 f303 	lsr.w	r3, r2, r3
 8005b7c:	4a04      	ldr	r2, [pc, #16]	; (8005b90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005b7e:	5cd3      	ldrb	r3, [r2, r3]
 8005b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	08017ebc 	.word	0x08017ebc

08005b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005b9a:	f7ff ffcd 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b9e:	4601      	mov	r1, r0
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8005ba8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005bac:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	fa93 f3a3 	rbit	r3, r3
 8005bb4:	603b      	str	r3, [r7, #0]
  return(result);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	fab3 f383 	clz	r3, r3
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc0:	4a04      	ldr	r2, [pc, #16]	; (8005bd4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005bc2:	5cd3      	ldrb	r3, [r2, r3]
 8005bc4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40023800 	.word	0x40023800
 8005bd4:	08017ebc 	.word	0x08017ebc

08005bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	220f      	movs	r2, #15
 8005be6:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005be8:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <HAL_RCC_GetClockConfig+0x5c>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 0203 	and.w	r2, r3, #3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005bf4:	4b0f      	ldr	r3, [pc, #60]	; (8005c34 <HAL_RCC_GetClockConfig+0x5c>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8005c00:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <HAL_RCC_GetClockConfig+0x5c>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c0c:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <HAL_RCC_GetClockConfig+0x5c>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	08db      	lsrs	r3, r3, #3
 8005c12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005c1a:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <HAL_RCC_GetClockConfig+0x60>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 020f 	and.w	r2, r3, #15
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	601a      	str	r2, [r3, #0]
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	40023800 	.word	0x40023800
 8005c38:	40023c00 	.word	0x40023c00

08005c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b09c      	sub	sp, #112	; 0x70
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t tmpreg1 = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	66bb      	str	r3, [r7, #104]	; 0x68
  
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division   
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x2a>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) || 
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8082 	beq.w	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
        
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();    
 8005c66:	4bac      	ldr	r3, [pc, #688]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c6c:	f7fd fe58 	bl	8003920 <HAL_GetTick>
 8005c70:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c74:	f7fd fe54 	bl	8003920 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e1eb      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c86:	4ba5      	ldr	r3, [pc, #660]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }
    
    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added   
      only for I2S configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d01e      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005caa:	fa93 f3a3 	rbit	r3, r3
 8005cae:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8005cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cb2:	fab3 f383 	clz	r3, r3
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6899      	ldr	r1, [r3, #8]
 8005cbc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005cc0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cc4:	fa93 f3a3 	rbit	r3, r3
 8005cc8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ccc:	fab3 f383 	clz	r3, r3
 8005cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd4:	4991      	ldr	r1, [pc, #580]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
  
    /*---------------------------- SAI configuration -------------------------*/ 
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d02a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
      
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005ce8:	4b8c      	ldr	r3, [pc, #560]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005cf2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005cf6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cfa:	fa93 f3a3 	rbit	r3, r3
 8005cfe:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 8005d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d02:	fab3 f383 	clz	r3, r3
 8005d06:	fa22 f303 	lsr.w	r3, r2, r3
 8005d0a:	66bb      	str	r3, [r7, #104]	; 0x68
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	019a      	lsls	r2, r3, #6
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	061b      	lsls	r3, r3, #24
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d1c:	071b      	lsls	r3, r3, #28
 8005d1e:	497f      	ldr	r1, [pc, #508]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d26:	4b7d      	ldr	r3, [pc, #500]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d2c:	f023 021f 	bic.w	r2, r3, #31
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	4979      	ldr	r1, [pc, #484]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d3e:	4b76      	ldr	r3, [pc, #472]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d44:	f7fd fdec 	bl	8003920 <HAL_GetTick>
 8005d48:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d4c:	f7fd fde8 	bl	8003920 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e17f      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d5e:	4b6f      	ldr	r3, [pc, #444]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0f0      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
    
  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */ 
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x148>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) || 
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80d7 	beq.w	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005d84:	4b66      	ldr	r3, [pc, #408]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d8a:	f7fd fdc9 	bl	8003920 <HAL_GetTick>
 8005d8e:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d90:	e008      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d92:	f7fd fdc5 	bl	8003920 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d901      	bls.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e15c      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005da4:	4b5d      	ldr	r3, [pc, #372]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db0:	d0ef      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
    
    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must  
       be added only for SAI configuration */     
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d04b      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005dbe:	4b57      	ldr	r3, [pc, #348]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005dc8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	fa93 f3a3 	rbit	r3, r3
 8005dd4:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	fab3 f383 	clz	r3, r3
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8005de0:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dee:	fa93 f3a3 	rbit	r3, r3
 8005df2:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df6:	fab3 f383 	clz	r3, r3
 8005dfa:	409a      	lsls	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6959      	ldr	r1, [r3, #20]
 8005e00:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005e04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e08:	fa93 f3a3 	rbit	r3, r3
 8005e0c:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8005e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e10:	fab3 f383 	clz	r3, r3
 8005e14:	fa01 f303 	lsl.w	r3, r1, r3
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e22:	fa93 f3a3 	rbit	r3, r3
 8005e26:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e2a:	fab3 f383 	clz	r3, r3
 8005e2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e30:	fa01 f303 	lsl.w	r3, r1, r3
 8005e34:	4939      	ldr	r1, [pc, #228]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e3c:	4b37      	ldr	r3, [pc, #220]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e42:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	4933      	ldr	r1, [pc, #204]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    
    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d049      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005e62:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e6c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	fa93 f3a3 	rbit	r3, r3
 8005e78:	613b      	str	r3, [r7, #16]
  return(result);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	fab3 f383 	clz	r3, r3
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
 8005e84:	66bb      	str	r3, [r7, #104]	; 0x68
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	fa93 f3a3 	rbit	r3, r3
 8005e96:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	fab3 f383 	clz	r3, r3
 8005e9e:	409a      	lsls	r2, r3
 8005ea0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	fa93 f3a3 	rbit	r3, r3
 8005eac:	623b      	str	r3, [r7, #32]
  return(result);
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	fab3 f383 	clz	r3, r3
 8005eb4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6999      	ldr	r1, [r3, #24]
 8005ec0:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	fa93 f3a3 	rbit	r3, r3
 8005ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	fab3 f383 	clz	r3, r3
 8005ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed8:	4910      	ldr	r1, [pc, #64]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ee0:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	490b      	ldr	r1, [pc, #44]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ef6:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005efc:	f7fd fd10 	bl	8003920 <HAL_GetTick>
 8005f00:	66f8      	str	r0, [r7, #108]	; 0x6c
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f02:	e00f      	b.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f04:	f7fd fd0c 	bl	8003920 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d908      	bls.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      { 
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e0a3      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x422>
 8005f16:	bf00      	nop
 8005f18:	42470068 	.word	0x42470068
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f24:	4b50      	ldr	r3, [pc, #320]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f30:	d1e8      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }  
  }
  /*--------------------------------------------------------------------------*/
    
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8083 	beq.w	8006046 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	4b48      	ldr	r3, [pc, #288]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	4a47      	ldr	r2, [pc, #284]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8005f50:	4b45      	ldr	r3, [pc, #276]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
      
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005f5c:	4b43      	ldr	r3, [pc, #268]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a42      	ldr	r2, [pc, #264]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f66:	6013      	str	r3, [r2, #0]
      
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f68:	f7fd fcda 	bl	8003920 <HAL_GetTick>
 8005f6c:	66f8      	str	r0, [r7, #108]	; 0x6c
      
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x346>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005f70:	f7fd fcd6 	bl	8003920 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x346>
      {
        return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e06d      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x422>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005f82:	4b3a      	ldr	r3, [pc, #232]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x334>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f8e:	4b36      	ldr	r3, [pc, #216]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	66bb      	str	r3, [r7, #104]	; 0x68
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d02f      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d028      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fac:	4b2e      	ldr	r3, [pc, #184]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb4:	66bb      	str	r3, [r7, #104]	; 0x68
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fb6:	4b2e      	ldr	r3, [pc, #184]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fbc:	4b2c      	ldr	r3, [pc, #176]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005fc2:	4a29      	ldr	r2, [pc, #164]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005fc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fc8:	4b27      	ldr	r3, [pc, #156]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d014      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005fd4:	f7fd fca4 	bl	8003920 <HAL_GetTick>
 8005fd8:	66f8      	str	r0, [r7, #108]	; 0x6c
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fda:	e00a      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fdc:	f7fd fca0 	bl	8003920 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e035      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff2:	4b1d      	ldr	r3, [pc, #116]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0ee      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x3a0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800600a:	d10d      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800600c:	4b16      	ldr	r3, [pc, #88]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800601c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006020:	4911      	ldr	r1, [pc, #68]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006022:	4313      	orrs	r3, r2
 8006024:	608b      	str	r3, [r1, #8]
 8006026:	e005      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006028:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4a0e      	ldr	r2, [pc, #56]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800602e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006032:	6093      	str	r3, [r2, #8]
 8006034:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006036:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006040:	4909      	ldr	r1, [pc, #36]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8006042:	4313      	orrs	r3, r2
 8006044:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0310 	and.w	r3, r3, #16
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800605a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3770      	adds	r7, #112	; 0x70
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	40023800 	.word	0x40023800
 800606c:	40007000 	.word	0x40007000
 8006070:	42470e40 	.word	0x42470e40
 8006074:	424711e0 	.word	0x424711e0

08006078 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e01d      	b.n	80060c6 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d105      	bne.n	80060a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f003 ff7b 	bl	8009f98 <HAL_SD_MspInit>
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2203      	movs	r2, #3
 80060a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f810 	bl	80060d0 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060d0:	b5b0      	push	{r4, r5, r7, lr}
 80060d2:	b08e      	sub	sp, #56	; 0x38
 80060d4:	af04      	add	r7, sp, #16
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80060d8:	2300      	movs	r3, #0
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80060f0:	2376      	movs	r3, #118	; 0x76
 80060f2:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681d      	ldr	r5, [r3, #0]
 80060f8:	466c      	mov	r4, sp
 80060fa:	f107 0318 	add.w	r3, r7, #24
 80060fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006106:	f107 030c 	add.w	r3, r7, #12
 800610a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800610c:	4628      	mov	r0, r5
 800610e:	f002 fbd7 	bl	80088c0 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8006112:	4b1c      	ldr	r3, [pc, #112]	; (8006184 <HAL_SD_InitCard+0xb4>)
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f002 fc18 	bl	8008952 <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006122:	4b18      	ldr	r3, [pc, #96]	; (8006184 <HAL_SD_InitCard+0xb4>)
 8006124:	2201      	movs	r2, #1
 8006126:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8006128:	2002      	movs	r0, #2
 800612a:	f7fd fc05 	bl	8003938 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f001 f90a 	bl	8007348 <SD_PowerON>
 8006134:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e013      	b.n	800617c <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 f82f 	bl	80071b8 <SD_InitCard>
 800615a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3728      	adds	r7, #40	; 0x28
 8006180:	46bd      	mov	sp, r7
 8006182:	bdb0      	pop	{r4, r5, r7, pc}
 8006184:	422580a0 	.word	0x422580a0

08006188 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006188:	b590      	push	{r4, r7, lr}
 800618a:	b08f      	sub	sp, #60	; 0x3c
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006196:	2300      	movs	r3, #0
 8006198:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800619a:	f7fd fbc1 	bl	8003920 <HAL_GetTick>
 800619e:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 80061a0:	2300      	movs	r3, #0
 80061a2:	633b      	str	r3, [r7, #48]	; 0x30
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d107      	bne.n	80061be <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e177      	b.n	80064ae <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	f040 816a 	bne.w	80064a0 <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	441a      	add	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061dc:	429a      	cmp	r2, r3
 80061de:	d907      	bls.n	80061f0 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e15e      	b.n	80064ae <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2203      	movs	r2, #3
 80061f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2200      	movs	r2, #0
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006204:	2b01      	cmp	r3, #1
 8006206:	d002      	beq.n	800620e <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	025b      	lsls	r3, r3, #9
 800620c:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006216:	4618      	mov	r0, r3
 8006218:	f002 fc2f 	bl	8008a7a <SDMMC_CmdBlockLength>
 800621c:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800621e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006220:	2b00      	cmp	r3, #0
 8006222:	d010      	beq.n	8006246 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800622c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	431a      	orrs	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e133      	b.n	80064ae <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800624a:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	025b      	lsls	r3, r3, #9
 8006250:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006252:	2390      	movs	r3, #144	; 0x90
 8006254:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006256:	2302      	movs	r3, #2
 8006258:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800625a:	2300      	movs	r3, #0
 800625c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800625e:	2301      	movs	r3, #1
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f107 0210 	add.w	r2, r7, #16
 800626a:	4611      	mov	r1, r2
 800626c:	4618      	mov	r0, r3
 800626e:	f002 fbd8 	bl	8008a22 <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d90a      	bls.n	800628e <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2202      	movs	r2, #2
 800627c:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4618      	mov	r0, r3
 8006286:	f002 fc40 	bl	8008b0a <SDMMC_CmdReadMultiBlock>
 800628a:	6378      	str	r0, [r7, #52]	; 0x34
 800628c:	e009      	b.n	80062a2 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	4618      	mov	r0, r3
 800629c:	f002 fc11 	bl	8008ac2 <SDMMC_CmdReadSingleBlock>
 80062a0:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80062a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d04a      	beq.n	800633e <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b8:	431a      	orrs	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e0f1      	b.n	80064ae <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d016      	beq.n	8006306 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80062d8:	2300      	movs	r3, #0
 80062da:	633b      	str	r3, [r7, #48]	; 0x30
 80062dc:	e00d      	b.n	80062fa <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6819      	ldr	r1, [r3, #0]
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e8:	18d4      	adds	r4, r2, r3
 80062ea:	4608      	mov	r0, r1
 80062ec:	f002 fb13 	bl	8008916 <SDIO_ReadFIFO>
 80062f0:	4603      	mov	r3, r0
 80062f2:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80062f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f6:	3301      	adds	r3, #1
 80062f8:	633b      	str	r3, [r7, #48]	; 0x30
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	2b07      	cmp	r3, #7
 80062fe:	d9ee      	bls.n	80062de <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	3320      	adds	r3, #32
 8006304:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8006306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006308:	2b00      	cmp	r3, #0
 800630a:	d007      	beq.n	800631c <HAL_SD_ReadBlocks+0x194>
 800630c:	f7fd fb08 	bl	8003920 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006318:	429a      	cmp	r2, r3
 800631a:	d810      	bhi.n	800633e <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006324:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e0b7      	b.n	80064ae <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006344:	f240 332a 	movw	r3, #810	; 0x32a
 8006348:	4013      	ands	r3, r2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d0bd      	beq.n	80062ca <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006358:	2b00      	cmp	r3, #0
 800635a:	d020      	beq.n	800639e <HAL_SD_ReadBlocks+0x216>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d91d      	bls.n	800639e <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006366:	2b03      	cmp	r3, #3
 8006368:	d019      	beq.n	800639e <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f002 fc38 	bl	8008be4 <SDMMC_CmdStopTransfer>
 8006374:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8006376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006378:	2b00      	cmp	r3, #0
 800637a:	d010      	beq.n	800639e <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006384:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800638a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638c:	431a      	orrs	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e087      	b.n	80064ae <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a4:	f003 0308 	and.w	r3, r3, #8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d010      	beq.n	80063ce <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	f043 0208 	orr.w	r2, r3, #8
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e06f      	b.n	80064ae <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d010      	beq.n	80063fe <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	f043 0202 	orr.w	r2, r3, #2
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e057      	b.n	80064ae <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	2b00      	cmp	r3, #0
 800640a:	d037      	beq.n	800647c <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006414:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	f043 0220 	orr.w	r2, r3, #32
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e03f      	b.n	80064ae <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4618      	mov	r0, r3
 8006434:	f002 fa6f 	bl	8008916 <SDIO_ReadFIFO>
 8006438:	4602      	mov	r2, r0
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	601a      	str	r2, [r3, #0]
      tempbuff++;
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	3304      	adds	r3, #4
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8006444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006446:	2b00      	cmp	r3, #0
 8006448:	d007      	beq.n	800645a <HAL_SD_ReadBlocks+0x2d2>
 800644a:	f7fd fa69 	bl	8003920 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006456:	429a      	cmp	r2, r3
 8006458:	d810      	bhi.n	800647c <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e018      	b.n	80064ae <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1d1      	bne.n	800642e <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006492:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e006      	b.n	80064ae <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
  }
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	373c      	adds	r7, #60	; 0x3c
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd90      	pop	{r4, r7, pc}

080064b6 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b08e      	sub	sp, #56	; 0x38
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80064c8:	f7fd fa2a 	bl	8003920 <HAL_GetTick>
 80064cc:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d107      	bne.n	80064ec <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e160      	b.n	80067ae <HAL_SD_WriteBlocks+0x2f8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	f040 8153 	bne.w	80067a0 <HAL_SD_WriteBlocks+0x2ea>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	441a      	add	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800650a:	429a      	cmp	r2, r3
 800650c:	d907      	bls.n	800651e <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e147      	b.n	80067ae <HAL_SD_WriteBlocks+0x2f8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2203      	movs	r2, #3
 8006522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2200      	movs	r2, #0
 800652c:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	2b01      	cmp	r3, #1
 8006534:	d002      	beq.n	800653c <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	025b      	lsls	r3, r3, #9
 800653a:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006544:	4618      	mov	r0, r3
 8006546:	f002 fa98 	bl	8008a7a <SDMMC_CmdBlockLength>
 800654a:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654e:	2b00      	cmp	r3, #0
 8006550:	d010      	beq.n	8006574 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006562:	431a      	orrs	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e11c      	b.n	80067ae <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d90a      	bls.n	8006590 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	4618      	mov	r0, r3
 8006588:	f002 fb07 	bl	8008b9a <SDMMC_CmdWriteMultiBlock>
 800658c:	6378      	str	r0, [r7, #52]	; 0x34
 800658e:	e009      	b.n	80065a4 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2210      	movs	r2, #16
 8006594:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	4618      	mov	r0, r3
 800659e:	f002 fad8 	bl	8008b52 <SDMMC_CmdWriteSingleBlock>
 80065a2:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d010      	beq.n	80065cc <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ba:	431a      	orrs	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0f0      	b.n	80067ae <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065d0:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	025b      	lsls	r3, r3, #9
 80065d6:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80065d8:	2390      	movs	r3, #144	; 0x90
 80065da:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80065dc:	2300      	movs	r3, #0
 80065de:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f107 0210 	add.w	r2, r7, #16
 80065f0:	4611      	mov	r1, r2
 80065f2:	4618      	mov	r0, r3
 80065f4:	f002 fa15 	bl	8008a22 <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80065f8:	e037      	b.n	800666a <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, /*SDIO_FLAG_TXUNDERR |*/ SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d014      	beq.n	8006632 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006608:	2300      	movs	r3, #0
 800660a:	633b      	str	r3, [r7, #48]	; 0x30
 800660c:	e00b      	b.n	8006626 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006618:	4413      	add	r3, r2
 800661a:	4619      	mov	r1, r3
 800661c:	f002 f988 	bl	8008930 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	3301      	adds	r3, #1
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	2b07      	cmp	r3, #7
 800662a:	d9f0      	bls.n	800660e <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	3320      	adds	r3, #32
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8006632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <HAL_SD_WriteBlocks+0x192>
 8006638:	f7fd f972 	bl	8003920 <HAL_GetTick>
 800663c:	4602      	mov	r2, r0
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006644:	429a      	cmp	r2, r3
 8006646:	d810      	bhi.n	800666a <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006650:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006658:	431a      	orrs	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e0a1      	b.n	80067ae <HAL_SD_WriteBlocks+0x2f8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006670:	f240 331a 	movw	r3, #794	; 0x31a
 8006674:	4013      	ands	r3, r2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0bf      	beq.n	80065fa <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006684:	2b00      	cmp	r3, #0
 8006686:	d020      	beq.n	80066ca <HAL_SD_WriteBlocks+0x214>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d91d      	bls.n	80066ca <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	2b03      	cmp	r3, #3
 8006694:	d019      	beq.n	80066ca <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f002 faa2 	bl	8008be4 <SDMMC_CmdStopTransfer>
 80066a0:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d010      	beq.n	80066ca <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80066b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	431a      	orrs	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e071      	b.n	80067ae <HAL_SD_WriteBlocks+0x2f8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d010      	beq.n	80066fa <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80066e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	f043 0208 	orr.w	r2, r3, #8
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e059      	b.n	80067ae <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d010      	beq.n	800672a <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	f043 0202 	orr.w	r2, r3, #2
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e041      	b.n	80067ae <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b00      	cmp	r3, #0
 8006736:	d010      	beq.n	800675a <HAL_SD_WriteBlocks+0x2a4>
    {
      // Clear all the static flags
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	f043 0210 	orr.w	r2, r3, #16
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e029      	b.n	80067ae <HAL_SD_WriteBlocks+0x2f8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_STA_STBITERR))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006764:	2b00      	cmp	r3, #0
 8006766:	d010      	beq.n	800678a <HAL_SD_WriteBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006770:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_GENERAL_UNKNOWN_ERR;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e011      	b.n	80067ae <HAL_SD_WriteBlocks+0x2f8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006792:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	e006      	b.n	80067ae <HAL_SD_WriteBlocks+0x2f8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
  }
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3738      	adds	r7, #56	; 0x38
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 808d 	beq.w	80068ee <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80067ec:	f023 0302 	bic.w	r3, r3, #2
 80067f0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d03a      	beq.n	8006874 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d105      	bne.n	8006816 <HAL_SD_IRQHandler+0x5e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d011      	beq.n	800683a <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f002 f9e2 	bl	8008be4 <SDMMC_CmdStopTransfer>
 8006820:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f939 	bl	8006aac <HAL_SD_ErrorCallback>
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006842:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d105      	bne.n	8006864 <HAL_SD_IRQHandler+0xac>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <HAL_SD_IRQHandler+0xb4>
      {
        HAL_SD_RxCpltCallback(hsd);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f917 	bl	8006a98 <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 800686a:	e103      	b.n	8006a74 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f909 	bl	8006a84 <HAL_SD_TxCpltCallback>
}
 8006872:	e0ff      	b.n	8006a74 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 80f9 	beq.w	8006a74 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d011      	beq.n	80068b2 <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f002 f9a6 	bl	8008be4 <SDMMC_CmdStopTransfer>
 8006898:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d008      	beq.n	80068b2 <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f8fd 	bl	8006aac <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f040 80da 	bne.w	8006a74 <HAL_SD_IRQHandler+0x2bc>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f040 80d3 	bne.w	8006a74 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0208 	bic.w	r2, r2, #8
 80068dc:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f8cc 	bl	8006a84 <HAL_SD_TxCpltCallback>
}
 80068ec:	e0c2      	b.n	8006a74 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006904:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 ff7b 	bl	8007802 <SD_Write_IT>
}
 800690c:	e0b2      	b.n	8006a74 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006924:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 ff43 	bl	80077b2 <SD_Read_IT>
}
 800692c:	e0a2      	b.n	8006a74 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006934:	f240 233a 	movw	r3, #570	; 0x23a
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 809a 	beq.w	8006a74 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006952:	f043 0202 	orr.w	r2, r3, #2
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d005      	beq.n	8006974 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	f043 0208 	orr.w	r2, r3, #8
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006986:	f043 0220 	orr.w	r2, r3, #32
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b00      	cmp	r3, #0
 800699a:	d005      	beq.n	80069a8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	f043 0210 	orr.w	r2, r3, #16
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d005      	beq.n	80069c2 <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	f043 0208 	orr.w	r2, r3, #8
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80069ca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80069da:	f023 0302 	bic.w	r3, r3, #2
 80069de:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d036      	beq.n	8006a5a <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d011      	beq.n	8006a18 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	4a20      	ldr	r2, [pc, #128]	; (8006a7c <HAL_SD_IRQHandler+0x2c4>)
 80069fa:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fd f8e1 	bl	8003bc8 <HAL_DMA_Abort_IT>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d033      	beq.n	8006a74 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fb55 	bl	80070c0 <SD_DMATxAbort>
}
 8006a16:	e02d      	b.n	8006a74 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d011      	beq.n	8006a44 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a24:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <HAL_SD_IRQHandler+0x2c8>)
 8006a26:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fd f8cb 	bl	8003bc8 <HAL_DMA_Abort_IT>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d01d      	beq.n	8006a74 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fb7d 	bl	800713c <SD_DMARxAbort>
}
 8006a42:	e017      	b.n	8006a74 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f834 	bl	8006ac0 <HAL_SD_AbortCallback>
}
 8006a58:	e00c      	b.n	8006a74 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d006      	beq.n	8006a74 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f81c 	bl	8006aac <HAL_SD_ErrorCallback>
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	080070c1 	.word	0x080070c1
 8006a80:	0800713d 	.word	0x0800713d

08006a84 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
 __weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae6:	0e1b      	lsrs	r3, r3, #24
 8006ae8:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	099b      	lsrs	r3, r3, #6
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	089b      	lsrs	r3, r3, #2
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b1c:	0c1b      	lsrs	r3, r3, #16
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b2e:	0a1b      	lsrs	r3, r3, #8
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b50:	0e1b      	lsrs	r3, r3, #24
 8006b52:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b64:	0c1b      	lsrs	r3, r3, #16
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	88db      	ldrh	r3, [r3, #6]
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	091b      	lsrs	r3, r3, #4
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	f003 030f 	and.w	r3, r3, #15
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b96:	0a1b      	lsrs	r3, r3, #8
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	09db      	lsrs	r3, r3, #7
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	099b      	lsrs	r3, r3, #6
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	095b      	lsrs	r3, r3, #5
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	091b      	lsrs	r3, r3, #4
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2200      	movs	r2, #0
 8006be0:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f040 8087 	bne.w	8006cfa <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	029b      	lsls	r3, r3, #10
 8006bf0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	691a      	ldr	r2, [r3, #16]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c12:	0e1b      	lsrs	r3, r3, #24
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	099b      	lsrs	r3, r3, #6
 8006c20:	f003 0303 	and.w	r3, r3, #3
 8006c24:	431a      	orrs	r2, r3
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	08db      	lsrs	r3, r3, #3
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4c:	0c1b      	lsrs	r3, r3, #16
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	089b      	lsrs	r3, r3, #2
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	f003 0306 	and.w	r3, r3, #6
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c88:	0a1b      	lsrs	r3, r3, #8
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	7e1b      	ldrb	r3, [r3, #24]
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	09db      	lsrs	r3, r3, #7
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	7e1b      	ldrb	r3, [r3, #24]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	3302      	adds	r3, #2
 8006cba:	2201      	movs	r2, #1
 8006cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006cc4:	fb02 f203 	mul.w	r2, r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	7a1b      	ldrb	r3, [r3, #8]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	fa03 f202 	lsl.w	r2, r3, r2
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006ce6:	0a52      	lsrs	r2, r2, #9
 8006ce8:	fb02 f203 	mul.w	r2, r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf6:	661a      	str	r2, [r3, #96]	; 0x60
 8006cf8:	e04d      	b.n	8006d96 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d138      	bne.n	8006d74 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	041b      	lsls	r3, r3, #16
 8006d0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d1a:	0e1b      	lsrs	r3, r3, #24
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	021b      	lsls	r3, r3, #8
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d32:	0c1b      	lsrs	r3, r3, #16
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d48:	0a1b      	lsrs	r3, r3, #8
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	3301      	adds	r3, #1
 8006d54:	029a      	lsls	r2, r3, #10
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	655a      	str	r2, [r3, #84]	; 0x54
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d68:	659a      	str	r2, [r3, #88]	; 0x58
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	661a      	str	r2, [r3, #96]	; 0x60
 8006d72:	e010      	b.n	8006d96 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e0c1      	b.n	8006f1a <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	099b      	lsrs	r3, r3, #6
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	7e9b      	ldrb	r3, [r3, #26]
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	09db      	lsrs	r3, r3, #7
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dec:	0e1b      	lsrs	r3, r3, #24
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	09db      	lsrs	r3, r3, #7
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	095b      	lsrs	r3, r3, #5
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	f003 0303 	and.w	r3, r3, #3
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	089b      	lsrs	r3, r3, #2
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	f003 030c 	and.w	r3, r3, #12
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e38:	0c1b      	lsrs	r3, r3, #16
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	7fdb      	ldrb	r3, [r3, #31]
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	099b      	lsrs	r3, r3, #6
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	f003 0303 	and.w	r3, r3, #3
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	4313      	orrs	r3, r2
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	0a1b      	lsrs	r3, r3, #8
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	09db      	lsrs	r3, r3, #7
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	099b      	lsrs	r3, r3, #6
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	091b      	lsrs	r3, r3, #4
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	089b      	lsrs	r3, r3, #2
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	085b      	lsrs	r3, r3, #1
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006f7e:	b5b0      	push	{r4, r5, r7, lr}
 8006f80:	b08e      	sub	sp, #56	; 0x38
 8006f82:	af04      	add	r7, sp, #16
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2203      	movs	r2, #3
 8006f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d02e      	beq.n	8006ffa <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa2:	d106      	bne.n	8006fb2 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	639a      	str	r2, [r3, #56]	; 0x38
 8006fb0:	e029      	b.n	8007006 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb8:	d10a      	bne.n	8006fd0 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa96 	bl	80074ec <SD_WideBus_Enable>
 8006fc0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	639a      	str	r2, [r3, #56]	; 0x38
 8006fce:	e01a      	b.n	8007006 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10a      	bne.n	8006fec <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fad5 	bl	8007586 <SD_WideBus_Disable>
 8006fdc:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	639a      	str	r2, [r3, #56]	; 0x38
 8006fea:	e00c      	b.n	8007006 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8006ff8:	e005      	b.n	8007006 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007016:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e024      	b.n	800706e <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681d      	ldr	r5, [r3, #0]
 800704a:	466c      	mov	r4, sp
 800704c:	f107 0318 	add.w	r3, r7, #24
 8007050:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007054:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007058:	f107 030c 	add.w	r3, r7, #12
 800705c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800705e:	4628      	mov	r0, r5
 8007060:	f001 fc2e 	bl	80088c0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3728      	adds	r7, #40	; 0x28
 8007072:	46bd      	mov	sp, r7
 8007074:	bdb0      	pop	{r4, r5, r7, pc}

08007076 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b086      	sub	sp, #24
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800707e:	2304      	movs	r3, #4
 8007080:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007082:	2300      	movs	r3, #0
 8007084:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800708a:	f107 030c 	add.w	r3, r7, #12
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fa01 	bl	8007498 <SD_SendStatus>
 8007096:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	0a5b      	lsrs	r3, r3, #9
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	f003 030f 	and.w	r3, r3, #15
 80070b4:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3718      	adds	r7, #24
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d127      	bne.n	8007134 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff ffc6 	bl	8007076 <HAL_SD_GetCardState>
 80070ea:	4603      	mov	r3, r0
 80070ec:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	2b06      	cmp	r3, #6
 8007100:	d002      	beq.n	8007108 <SD_DMATxAbort+0x48>
 8007102:	7afb      	ldrb	r3, [r7, #11]
 8007104:	2b05      	cmp	r3, #5
 8007106:	d115      	bne.n	8007134 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f001 fd69 	bl	8008be4 <SDMMC_CmdStopTransfer>
 8007112:	4602      	mov	r2, r0
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	431a      	orrs	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <SD_DMATxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7ff fcca 	bl	8006ac0 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 800712c:	e002      	b.n	8007134 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f7ff fcbc 	bl	8006aac <HAL_SD_ErrorCallback>
}
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	2b00      	cmp	r3, #0
 800715e:	d127      	bne.n	80071b0 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7ff ff88 	bl	8007076 <HAL_SD_GetCardState>
 8007166:	4603      	mov	r3, r0
 8007168:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	2b06      	cmp	r3, #6
 800717c:	d002      	beq.n	8007184 <SD_DMARxAbort+0x48>
 800717e:	7afb      	ldrb	r3, [r7, #11]
 8007180:	2b05      	cmp	r3, #5
 8007182:	d115      	bne.n	80071b0 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f001 fd2b 	bl	8008be4 <SDMMC_CmdStopTransfer>
 800718e:	4602      	mov	r2, r0
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	431a      	orrs	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <SD_DMARxAbort+0x6e>
      {
        HAL_SD_AbortCallback(hsd);
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f7ff fc8c 	bl	8006ac0 <HAL_SD_AbortCallback>
      {
        HAL_SD_ErrorCallback(hsd);
      }
    }
  }
}
 80071a8:	e002      	b.n	80071b0 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f7ff fc7e 	bl	8006aac <HAL_SD_ErrorCallback>
}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80071b8:	b5b0      	push	{r4, r5, r7, lr}
 80071ba:	b094      	sub	sp, #80	; 0x50
 80071bc:	af04      	add	r7, sp, #16
 80071be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80071c0:	2300      	movs	r3, #0
 80071c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 80071c4:	2301      	movs	r3, #1
 80071c6:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 fbce 	bl	800896e <SDIO_GetPowerState>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d102      	bne.n	80071de <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80071d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80071dc:	e0b0      	b.n	8007340 <SD_InitCard+0x188>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d02f      	beq.n	8007246 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f001 fe14 	bl	8008e18 <SDMMC_CmdSendCID>
 80071f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80071f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <SD_InitCard+0x44>
    {
      return errorstate;
 80071f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fa:	e0a1      	b.n	8007340 <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2100      	movs	r1, #0
 8007202:	4618      	mov	r0, r3
 8007204:	f001 fbf8 	bl	80089f8 <SDIO_GetResponse>
 8007208:	4602      	mov	r2, r0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2104      	movs	r1, #4
 8007214:	4618      	mov	r0, r3
 8007216:	f001 fbef 	bl	80089f8 <SDIO_GetResponse>
 800721a:	4602      	mov	r2, r0
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2108      	movs	r1, #8
 8007226:	4618      	mov	r0, r3
 8007228:	f001 fbe6 	bl	80089f8 <SDIO_GetResponse>
 800722c:	4602      	mov	r2, r0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	210c      	movs	r1, #12
 8007238:	4618      	mov	r0, r3
 800723a:	f001 fbdd 	bl	80089f8 <SDIO_GetResponse>
 800723e:	4602      	mov	r2, r0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	2b03      	cmp	r3, #3
 800724c:	d00d      	beq.n	800726a <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f107 020e 	add.w	r2, r7, #14
 8007256:	4611      	mov	r1, r2
 8007258:	4618      	mov	r0, r3
 800725a:	f001 fe1e 	bl	8008e9a <SDMMC_CmdSetRelAdd>
 800725e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <SD_InitCard+0xb2>
    {
      return errorstate;
 8007266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007268:	e06a      	b.n	8007340 <SD_InitCard+0x188>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	2b03      	cmp	r3, #3
 8007270:	d036      	beq.n	80072e0 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007272:	89fb      	ldrh	r3, [r7, #14]
 8007274:	461a      	mov	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007282:	041b      	lsls	r3, r3, #16
 8007284:	4619      	mov	r1, r3
 8007286:	4610      	mov	r0, r2
 8007288:	f001 fde6 	bl	8008e58 <SDMMC_CmdSendCSD>
 800728c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800728e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <SD_InitCard+0xe0>
    {
      return errorstate;
 8007294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007296:	e053      	b.n	8007340 <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2100      	movs	r1, #0
 800729e:	4618      	mov	r0, r3
 80072a0:	f001 fbaa 	bl	80089f8 <SDIO_GetResponse>
 80072a4:	4602      	mov	r2, r0
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2104      	movs	r1, #4
 80072b0:	4618      	mov	r0, r3
 80072b2:	f001 fba1 	bl	80089f8 <SDIO_GetResponse>
 80072b6:	4602      	mov	r2, r0
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2108      	movs	r1, #8
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 fb98 	bl	80089f8 <SDIO_GetResponse>
 80072c8:	4602      	mov	r2, r0
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	210c      	movs	r1, #12
 80072d4:	4618      	mov	r0, r3
 80072d6:	f001 fb8f 	bl	80089f8 <SDIO_GetResponse>
 80072da:	4602      	mov	r2, r0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2104      	movs	r1, #4
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 fb86 	bl	80089f8 <SDIO_GetResponse>
 80072ec:	4603      	mov	r3, r0
 80072ee:	0d1a      	lsrs	r2, r3, #20
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80072f4:	f107 0310 	add.w	r3, r7, #16
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff fbea 	bl	8006ad4 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6819      	ldr	r1, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007308:	041b      	lsls	r3, r3, #16
 800730a:	461a      	mov	r2, r3
 800730c:	f04f 0300 	mov.w	r3, #0
 8007310:	4608      	mov	r0, r1
 8007312:	f001 fc8b 	bl	8008c2c <SDMMC_CmdSelDesel>
 8007316:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <SD_InitCard+0x16a>
  {
    return errorstate;
 800731e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007320:	e00e      	b.n	8007340 <SD_InitCard+0x188>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681d      	ldr	r5, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	466c      	mov	r4, sp
 800732a:	f103 0210 	add.w	r2, r3, #16
 800732e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007330:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007334:	3304      	adds	r3, #4
 8007336:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007338:	4628      	mov	r0, r5
 800733a:	f001 fac1 	bl	80088c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3740      	adds	r7, #64	; 0x40
 8007344:	46bd      	mov	sp, r7
 8007346:	bdb0      	pop	{r4, r5, r7, pc}

08007348 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	2300      	movs	r3, #0
 800735a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4618      	mov	r0, r3
 8007366:	f001 fc86 	bl	8008c76 <SDMMC_CmdGoIdleState>
 800736a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <SD_PowerON+0x2e>
  {
    return errorstate;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	e08c      	b.n	8007490 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4618      	mov	r0, r3
 800737c:	f001 fc9b 	bl	8008cb6 <SDMMC_CmdOperCond>
 8007380:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d03d      	beq.n	8007404 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800738e:	e032      	b.n	80073f6 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	60ba      	str	r2, [r7, #8]
 8007396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800739a:	4293      	cmp	r3, r2
 800739c:	d102      	bne.n	80073a4 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800739e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073a2:	e075      	b.n	8007490 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f001 fca4 	bl	8008cf8 <SDMMC_CmdAppCommand>
 80073b0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80073bc:	e068      	b.n	8007490 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 fcbb 	bl	8008d40 <SDMMC_CmdAppOperCommand>
 80073ca:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80073d6:	e05b      	b.n	8007490 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2100      	movs	r1, #0
 80073de:	4618      	mov	r0, r3
 80073e0:	f001 fb0a 	bl	80089f8 <SDIO_GetResponse>
 80073e4:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	0fdb      	lsrs	r3, r3, #31
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d101      	bne.n	80073f2 <SD_PowerON+0xaa>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <SD_PowerON+0xac>
 80073f2:	2300      	movs	r3, #0
 80073f4:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0c9      	beq.n	8007390 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	645a      	str	r2, [r3, #68]	; 0x44
 8007402:	e044      	b.n	800748e <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800740a:	e031      	b.n	8007470 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	60ba      	str	r2, [r7, #8]
 8007412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007416:	4293      	cmp	r3, r2
 8007418:	d102      	bne.n	8007420 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800741a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800741e:	e037      	b.n	8007490 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2100      	movs	r1, #0
 8007426:	4618      	mov	r0, r3
 8007428:	f001 fc66 	bl	8008cf8 <SDMMC_CmdAppCommand>
 800742c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <SD_PowerON+0xf0>
      {
        return errorstate;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	e02b      	b.n	8007490 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007440:	4618      	mov	r0, r3
 8007442:	f001 fc7d 	bl	8008d40 <SDMMC_CmdAppOperCommand>
 8007446:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <SD_PowerON+0x10a>
      {
        return errorstate;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	e01e      	b.n	8007490 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2100      	movs	r1, #0
 8007458:	4618      	mov	r0, r3
 800745a:	f001 facd 	bl	80089f8 <SDIO_GetResponse>
 800745e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	0fdb      	lsrs	r3, r3, #31
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <SD_PowerON+0x124>
 8007468:	2301      	movs	r3, #1
 800746a:	e000      	b.n	800746e <SD_PowerON+0x126>
 800746c:	2300      	movs	r3, #0
 800746e:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0ca      	beq.n	800740c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	645a      	str	r2, [r3, #68]	; 0x44
 8007486:	e002      	b.n	800748e <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d102      	bne.n	80074b2 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80074ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074b0:	e018      	b.n	80074e4 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ba:	041b      	lsls	r3, r3, #16
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f001 fd0e 	bl	8008ee0 <SDMMC_CmdSendStatus>
 80074c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <SD_SendStatus+0x38>
  {
    return errorstate;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	e009      	b.n	80074e4 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 fa8e 	bl	80089f8 <SDIO_GetResponse>
 80074dc:	4602      	mov	r2, r0
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2100      	movs	r1, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f001 fa76 	bl	80089f8 <SDIO_GetResponse>
 800750c:	4603      	mov	r3, r0
 800750e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007512:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007516:	d102      	bne.n	800751e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800751c:	e02f      	b.n	800757e <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800751e:	f107 030c 	add.w	r3, r7, #12
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f87b 	bl	8007620 <SD_FindSCR>
 800752a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	e023      	b.n	800757e <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d01c      	beq.n	800757a <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007548:	041b      	lsls	r3, r3, #16
 800754a:	4619      	mov	r1, r3
 800754c:	4610      	mov	r0, r2
 800754e:	f001 fbd3 	bl	8008cf8 <SDMMC_CmdAppCommand>
 8007552:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	e00f      	b.n	800757e <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2102      	movs	r1, #2
 8007564:	4618      	mov	r0, r3
 8007566:	f001 fc10 	bl	8008d8a <SDMMC_CmdBusWidth>
 800756a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	e003      	b.n	800757e <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8007576:	2300      	movs	r3, #0
 8007578:	e001      	b.n	800757e <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800757a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b086      	sub	sp, #24
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	2300      	movs	r3, #0
 8007594:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2100      	movs	r1, #0
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 fa29 	bl	80089f8 <SDIO_GetResponse>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075b0:	d102      	bne.n	80075b8 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80075b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075b6:	e02f      	b.n	8007618 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80075b8:	f107 030c 	add.w	r3, r7, #12
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f82e 	bl	8007620 <SD_FindSCR>
 80075c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	e023      	b.n	8007618 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d01c      	beq.n	8007614 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e2:	041b      	lsls	r3, r3, #16
 80075e4:	4619      	mov	r1, r3
 80075e6:	4610      	mov	r0, r2
 80075e8:	f001 fb86 	bl	8008cf8 <SDMMC_CmdAppCommand>
 80075ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	e00f      	b.n	8007618 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2100      	movs	r1, #0
 80075fe:	4618      	mov	r0, r3
 8007600:	f001 fbc3 	bl	8008d8a <SDMMC_CmdBusWidth>
 8007604:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	e003      	b.n	8007618 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8007610:	2300      	movs	r3, #0
 8007612:	e001      	b.n	8007618 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007614:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007620:	b590      	push	{r4, r7, lr}
 8007622:	b08f      	sub	sp, #60	; 0x3c
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800762a:	2300      	movs	r3, #0
 800762c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800762e:	f7fc f977 	bl	8003920 <HAL_GetTick>
 8007632:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	2300      	movs	r3, #0
 800763e:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2108      	movs	r1, #8
 8007646:	4618      	mov	r0, r3
 8007648:	f001 fa17 	bl	8008a7a <SDMMC_CmdBlockLength>
 800764c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	e0a8      	b.n	80077aa <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007660:	041b      	lsls	r3, r3, #16
 8007662:	4619      	mov	r1, r3
 8007664:	4610      	mov	r0, r2
 8007666:	f001 fb47 	bl	8008cf8 <SDMMC_CmdAppCommand>
 800766a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	e099      	b.n	80077aa <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800767a:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 800767c:	2308      	movs	r3, #8
 800767e:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007680:	2330      	movs	r3, #48	; 0x30
 8007682:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007684:	2302      	movs	r3, #2
 8007686:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007688:	2300      	movs	r3, #0
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800768c:	2301      	movs	r3, #1
 800768e:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f107 0214 	add.w	r2, r7, #20
 8007698:	4611      	mov	r1, r2
 800769a:	4618      	mov	r0, r3
 800769c:	f001 f9c1 	bl	8008a22 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 fb94 	bl	8008dd2 <SDMMC_CmdSendSCR>
 80076aa:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d022      	beq.n	80076f8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	e079      	b.n	80077aa <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00e      	beq.n	80076e2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6819      	ldr	r1, [r3, #0]
 80076c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	f107 020c 	add.w	r2, r7, #12
 80076d0:	18d4      	adds	r4, r2, r3
 80076d2:	4608      	mov	r0, r1
 80076d4:	f001 f91f 	bl	8008916 <SDIO_ReadFIFO>
 80076d8:	4603      	mov	r3, r0
 80076da:	6023      	str	r3, [r4, #0]
      index++;
 80076dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076de:	3301      	adds	r3, #1
 80076e0:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80076e2:	f7fc f91d 	bl	8003920 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f0:	d102      	bne.n	80076f8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80076f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076f6:	e058      	b.n	80077aa <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076fe:	f240 432a 	movw	r3, #1066	; 0x42a
 8007702:	4013      	ands	r3, r2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0d6      	beq.n	80076b6 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2208      	movs	r2, #8
 800771c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800771e:	2308      	movs	r3, #8
 8007720:	e043      	b.n	80077aa <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007728:	f003 0302 	and.w	r3, r3, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d005      	beq.n	800773c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2202      	movs	r2, #2
 8007736:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007738:	2302      	movs	r3, #2
 800773a:	e036      	b.n	80077aa <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b00      	cmp	r3, #0
 8007748:	d005      	beq.n	8007756 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2220      	movs	r2, #32
 8007750:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8007752:	2320      	movs	r3, #32
 8007754:	e029      	b.n	80077aa <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800775e:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	061a      	lsls	r2, r3, #24
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	021b      	lsls	r3, r3, #8
 8007768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800776c:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	0a1b      	lsrs	r3, r3, #8
 8007772:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8007776:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8007782:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8007784:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	061a      	lsls	r2, r3, #24
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007792:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	0a1b      	lsrs	r3, r3, #8
 8007798:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800779c:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	0e1b      	lsrs	r3, r3, #24
 80077a2:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	373c      	adds	r7, #60	; 0x3c
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd90      	pop	{r4, r7, pc}

080077b2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80077b2:	b590      	push	{r4, r7, lr}
 80077b4:	b085      	sub	sp, #20
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	e00d      	b.n	80077e6 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6819      	ldr	r1, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	18d4      	adds	r4, r2, r3
 80077d6:	4608      	mov	r0, r1
 80077d8:	f001 f89d 	bl	8008916 <SDIO_ReadFIFO>
 80077dc:	4603      	mov	r3, r0
 80077de:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3301      	adds	r3, #1
 80077e4:	60fb      	str	r3, [r7, #12]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b07      	cmp	r3, #7
 80077ea:	d9ee      	bls.n	80077ca <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f0:	f103 0220 	add.w	r2, r3, #32
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd90      	pop	{r4, r7, pc}

08007802 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8007814:	2300      	movs	r3, #0
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	e00b      	b.n	8007832 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	4413      	add	r3, r2
 8007826:	4619      	mov	r1, r3
 8007828:	f001 f882 	bl	8008930 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2b07      	cmp	r3, #7
 8007836:	d9f0      	bls.n	800781a <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	f103 0220 	add.w	r2, r3, #32
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e01d      	b.n	800789c <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d106      	bne.n	800787a <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f002 fbdb 	bl	800a030 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	3304      	adds	r3, #4
 800788a:	4619      	mov	r1, r3
 800788c:	4610      	mov	r0, r2
 800788e:	f000 f955 	bl	8007b3c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f042 0201 	orr.w	r2, r2, #1
 80078ca:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <HAL_TIM_IRQHandler>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d122      	bne.n	8007936 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d11b      	bne.n	8007936 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f06f 0202 	mvn.w	r2, #2
 8007906:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f003 0303 	and.w	r3, r3, #3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f8ee 	bl	8007afe <HAL_TIM_IC_CaptureCallback>
 8007922:	e005      	b.n	8007930 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f8e0 	bl	8007aea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f8f1 	bl	8007b12 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b04      	cmp	r3, #4
 8007942:	d122      	bne.n	800798a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	2b04      	cmp	r3, #4
 8007950:	d11b      	bne.n	800798a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f06f 0204 	mvn.w	r2, #4
 800795a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f8c4 	bl	8007afe <HAL_TIM_IC_CaptureCallback>
 8007976:	e005      	b.n	8007984 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f8b6 	bl	8007aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f8c7 	bl	8007b12 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b08      	cmp	r3, #8
 8007996:	d122      	bne.n	80079de <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f003 0308 	and.w	r3, r3, #8
 80079a2:	2b08      	cmp	r3, #8
 80079a4:	d11b      	bne.n	80079de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f06f 0208 	mvn.w	r2, #8
 80079ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2204      	movs	r2, #4
 80079b4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	f003 0303 	and.w	r3, r3, #3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f89a 	bl	8007afe <HAL_TIM_IC_CaptureCallback>
 80079ca:	e005      	b.n	80079d8 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f88c 	bl	8007aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f89d 	bl	8007b12 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b10      	cmp	r3, #16
 80079ea:	d122      	bne.n	8007a32 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	f003 0310 	and.w	r3, r3, #16
 80079f6:	2b10      	cmp	r3, #16
 80079f8:	d11b      	bne.n	8007a32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f06f 0210 	mvn.w	r2, #16
 8007a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2208      	movs	r2, #8
 8007a08:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f870 	bl	8007afe <HAL_TIM_IC_CaptureCallback>
 8007a1e:	e005      	b.n	8007a2c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f862 	bl	8007aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f873 	bl	8007b12 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d10e      	bne.n	8007a5e <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d107      	bne.n	8007a5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f06f 0201 	mvn.w	r2, #1
 8007a56:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7fb fed1 	bl	8003800 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a68:	2b80      	cmp	r3, #128	; 0x80
 8007a6a:	d10e      	bne.n	8007a8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a76:	2b80      	cmp	r3, #128	; 0x80
 8007a78:	d107      	bne.n	8007a8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a82:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f90d 	bl	8007ca4 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	d10e      	bne.n	8007ab6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	d107      	bne.n	8007ab6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007aae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f838 	bl	8007b26 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	f003 0320 	and.w	r3, r3, #32
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	d10e      	bne.n	8007ae2 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d107      	bne.n	8007ae2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f06f 0220 	mvn.w	r2, #32
 8007ada:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f8d7 	bl	8007c90 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b083      	sub	sp, #12
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b083      	sub	sp, #12
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
	...

08007b3c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a44      	ldr	r2, [pc, #272]	; (8007c64 <TIM_Base_SetConfig+0x128>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d013      	beq.n	8007b80 <TIM_Base_SetConfig+0x44>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5e:	d00f      	beq.n	8007b80 <TIM_Base_SetConfig+0x44>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a41      	ldr	r2, [pc, #260]	; (8007c68 <TIM_Base_SetConfig+0x12c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d00b      	beq.n	8007b80 <TIM_Base_SetConfig+0x44>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a40      	ldr	r2, [pc, #256]	; (8007c6c <TIM_Base_SetConfig+0x130>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d007      	beq.n	8007b80 <TIM_Base_SetConfig+0x44>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a3f      	ldr	r2, [pc, #252]	; (8007c70 <TIM_Base_SetConfig+0x134>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_Base_SetConfig+0x44>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a3e      	ldr	r2, [pc, #248]	; (8007c74 <TIM_Base_SetConfig+0x138>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d101      	bne.n	8007b84 <TIM_Base_SetConfig+0x48>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e000      	b.n	8007b86 <TIM_Base_SetConfig+0x4a>
 8007b84:	2300      	movs	r3, #0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d008      	beq.n	8007b9c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a31      	ldr	r2, [pc, #196]	; (8007c64 <TIM_Base_SetConfig+0x128>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d02b      	beq.n	8007bfc <TIM_Base_SetConfig+0xc0>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007baa:	d027      	beq.n	8007bfc <TIM_Base_SetConfig+0xc0>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a2e      	ldr	r2, [pc, #184]	; (8007c68 <TIM_Base_SetConfig+0x12c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d023      	beq.n	8007bfc <TIM_Base_SetConfig+0xc0>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a2d      	ldr	r2, [pc, #180]	; (8007c6c <TIM_Base_SetConfig+0x130>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d01f      	beq.n	8007bfc <TIM_Base_SetConfig+0xc0>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a2c      	ldr	r2, [pc, #176]	; (8007c70 <TIM_Base_SetConfig+0x134>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d01b      	beq.n	8007bfc <TIM_Base_SetConfig+0xc0>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a2b      	ldr	r2, [pc, #172]	; (8007c74 <TIM_Base_SetConfig+0x138>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d017      	beq.n	8007bfc <TIM_Base_SetConfig+0xc0>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a2a      	ldr	r2, [pc, #168]	; (8007c78 <TIM_Base_SetConfig+0x13c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <TIM_Base_SetConfig+0xc0>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a29      	ldr	r2, [pc, #164]	; (8007c7c <TIM_Base_SetConfig+0x140>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d00f      	beq.n	8007bfc <TIM_Base_SetConfig+0xc0>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a28      	ldr	r2, [pc, #160]	; (8007c80 <TIM_Base_SetConfig+0x144>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d00b      	beq.n	8007bfc <TIM_Base_SetConfig+0xc0>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a27      	ldr	r2, [pc, #156]	; (8007c84 <TIM_Base_SetConfig+0x148>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d007      	beq.n	8007bfc <TIM_Base_SetConfig+0xc0>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a26      	ldr	r2, [pc, #152]	; (8007c88 <TIM_Base_SetConfig+0x14c>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d003      	beq.n	8007bfc <TIM_Base_SetConfig+0xc0>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a25      	ldr	r2, [pc, #148]	; (8007c8c <TIM_Base_SetConfig+0x150>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d101      	bne.n	8007c00 <TIM_Base_SetConfig+0xc4>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <TIM_Base_SetConfig+0xc6>
 8007c00:	2300      	movs	r3, #0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d008      	beq.n	8007c18 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a0c      	ldr	r2, [pc, #48]	; (8007c64 <TIM_Base_SetConfig+0x128>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d003      	beq.n	8007c3e <TIM_Base_SetConfig+0x102>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a0e      	ldr	r2, [pc, #56]	; (8007c74 <TIM_Base_SetConfig+0x138>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d101      	bne.n	8007c42 <TIM_Base_SetConfig+0x106>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e000      	b.n	8007c44 <TIM_Base_SetConfig+0x108>
 8007c42:	2300      	movs	r3, #0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	691a      	ldr	r2, [r3, #16]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	615a      	str	r2, [r3, #20]
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	40010000 	.word	0x40010000
 8007c68:	40000400 	.word	0x40000400
 8007c6c:	40000800 	.word	0x40000800
 8007c70:	40000c00 	.word	0x40000c00
 8007c74:	40010400 	.word	0x40010400
 8007c78:	40014000 	.word	0x40014000
 8007c7c:	40014400 	.word	0x40014400
 8007c80:	40014800 	.word	0x40014800
 8007c84:	40001800 	.word	0x40001800
 8007c88:	40001c00 	.word	0x40001c00
 8007c8c:	40002000 	.word	0x40002000

08007c90 <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e03f      	b.n	8007d4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d106      	bne.n	8007ce4 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f002 f9c8 	bl	800a074 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2224      	movs	r2, #36	; 0x24
 8007ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cfa:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fb9f 	bl	8008440 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	691a      	ldr	r2, [r3, #16]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695a      	ldr	r2, [r3, #20]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d20:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d30:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b088      	sub	sp, #32
 8007d56:	af02      	add	r7, sp, #8
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	603b      	str	r3, [r7, #0]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	f040 8083 	bne.w	8007e7a <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <HAL_UART_Transmit+0x2e>
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e07b      	b.n	8007e7c <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_UART_Transmit+0x40>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e074      	b.n	8007e7c <HAL_UART_Transmit+0x12a>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2221      	movs	r2, #33	; 0x21
 8007da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007da8:	f7fb fdba 	bl	8003920 <HAL_GetTick>
 8007dac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	88fa      	ldrh	r2, [r7, #6]
 8007db2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	88fa      	ldrh	r2, [r7, #6]
 8007db8:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8007dba:	e042      	b.n	8007e42 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd2:	d122      	bne.n	8007e1a <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2180      	movs	r1, #128	; 0x80
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 f9ac 	bl	800813c <UART_WaitOnFlagUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e046      	b.n	8007e7c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e00:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d103      	bne.n	8007e12 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	3302      	adds	r3, #2
 8007e0e:	60bb      	str	r3, [r7, #8]
 8007e10:	e017      	b.n	8007e42 <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	3301      	adds	r3, #1
 8007e16:	60bb      	str	r3, [r7, #8]
 8007e18:	e013      	b.n	8007e42 <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2200      	movs	r2, #0
 8007e22:	2180      	movs	r1, #128	; 0x80
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f989 	bl	800813c <UART_WaitOnFlagUntilTimeout>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e023      	b.n	8007e7c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	60ba      	str	r2, [r7, #8]
 8007e3a:	781a      	ldrb	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1b7      	bne.n	8007dbc <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2200      	movs	r2, #0
 8007e54:	2140      	movs	r1, #64	; 0x40
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 f970 	bl	800813c <UART_WaitOnFlagUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e00a      	b.n	8007e7c <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	e000      	b.n	8007e7c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007e7a:	2302      	movs	r3, #2
  }
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d138      	bne.n	8007f10 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0)) 
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <HAL_UART_Receive_IT+0x26>
 8007ea4:	88fb      	ldrh	r3, [r7, #6]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e031      	b.n	8007f12 <HAL_UART_Receive_IT+0x8e>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d101      	bne.n	8007ebc <HAL_UART_Receive_IT+0x38>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e02a      	b.n	8007f12 <HAL_UART_Receive_IT+0x8e>
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	88fa      	ldrh	r2, [r7, #6]
 8007ece:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	88fa      	ldrh	r2, [r7, #6]
 8007ed4:	85da      	strh	r2, [r3, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2222      	movs	r2, #34	; 0x22
 8007ee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695a      	ldr	r2, [r3, #20]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0201 	orr.w	r2, r2, #1
 8007efa:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007f0a:	60da      	str	r2, [r3, #12]
    
    return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e000      	b.n	8007f12 <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY; 
 8007f10:	2302      	movs	r3, #2
  }
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
	...

08007f20 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b088      	sub	sp, #32
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	f003 030f 	and.w	r3, r3, #15
 8007f4e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10d      	bne.n	8007f72 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d008      	beq.n	8007f72 <HAL_UART_IRQHandler+0x52>
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	f003 0320 	and.w	r3, r3, #32
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f9d0 	bl	8008310 <UART_Receive_IT>
      return;
 8007f70:	e0cb      	b.n	800810a <HAL_UART_IRQHandler+0x1ea>
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 80ab 	beq.w	80080d0 <HAL_UART_IRQHandler+0x1b0>
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d105      	bne.n	8007f90 <HAL_UART_IRQHandler+0x70>
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 80a0 	beq.w	80080d0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <HAL_UART_IRQHandler+0x90>
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d005      	beq.n	8007fb0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa8:	f043 0201 	orr.w	r2, r3, #1
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	f003 0304 	and.w	r3, r3, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <HAL_UART_IRQHandler+0xb0>
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc8:	f043 0202 	orr.w	r2, r3, #2
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00a      	beq.n	8007ff0 <HAL_UART_IRQHandler+0xd0>
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe8:	f043 0204 	orr.w	r2, r3, #4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	63da      	str	r2, [r3, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f003 0308 	and.w	r3, r3, #8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <HAL_UART_IRQHandler+0xf0>
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008008:	f043 0208 	orr.w	r2, r3, #8
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d077      	beq.n	8008108 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <HAL_UART_IRQHandler+0x112>
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f96f 	bl	8008310 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803c:	2b00      	cmp	r3, #0
 800803e:	bf14      	ite	ne
 8008040:	2301      	movne	r3, #1
 8008042:	2300      	moveq	r3, #0
 8008044:	b2db      	uxtb	r3, r3
 8008046:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804c:	f003 0308 	and.w	r3, r3, #8
 8008050:	2b00      	cmp	r3, #0
 8008052:	d102      	bne.n	800805a <HAL_UART_IRQHandler+0x13a>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d031      	beq.n	80080be <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f8b8 	bl	80081d0 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806a:	2b00      	cmp	r3, #0
 800806c:	d023      	beq.n	80080b6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695a      	ldr	r2, [r3, #20]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800807c:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008082:	2b00      	cmp	r3, #0
 8008084:	d013      	beq.n	80080ae <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808a:	4a21      	ldr	r2, [pc, #132]	; (8008110 <HAL_UART_IRQHandler+0x1f0>)
 800808c:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008092:	4618      	mov	r0, r3
 8008094:	f7fb fd98 	bl	8003bc8 <HAL_DMA_Abort_IT>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d016      	beq.n	80080cc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ac:	e00e      	b.n	80080cc <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f83a 	bl	8008128 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b4:	e00a      	b.n	80080cc <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f836 	bl	8008128 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080bc:	e006      	b.n	80080cc <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f832 	bl	8008128 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80080ca:	e01d      	b.n	8008108 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080cc:	bf00      	nop
    return;
 80080ce:	e01b      	b.n	8008108 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d008      	beq.n	80080ec <HAL_UART_IRQHandler+0x1cc>
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d003      	beq.n	80080ec <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f8a5 	bl	8008234 <UART_Transmit_IT>
    return;
 80080ea:	e00e      	b.n	800810a <HAL_UART_IRQHandler+0x1ea>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d009      	beq.n	800810a <HAL_UART_IRQHandler+0x1ea>
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d004      	beq.n	800810a <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f8ed 	bl	80082e0 <UART_EndTransmit_IT>
    return;
 8008106:	e000      	b.n	800810a <HAL_UART_IRQHandler+0x1ea>
    return;
 8008108:	bf00      	nop
  }
}
 800810a:	3720      	adds	r7, #32
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	0800820d 	.word	0x0800820d

08008114 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	4613      	mov	r3, r2
 800814a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800814c:	e02c      	b.n	80081a8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008154:	d028      	beq.n	80081a8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <UART_WaitOnFlagUntilTimeout+0x30>
 800815c:	f7fb fbe0 	bl	8003920 <HAL_GetTick>
 8008160:	4602      	mov	r2, r0
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	429a      	cmp	r2, r3
 800816a:	d21d      	bcs.n	80081a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800817a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0201 	bic.w	r2, r2, #1
 800818a:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2220      	movs	r2, #32
 8008190:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2220      	movs	r2, #32
 8008198:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e00f      	b.n	80081c8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	4013      	ands	r3, r2
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	bf0c      	ite	eq
 80081b8:	2301      	moveq	r3, #1
 80081ba:	2300      	movne	r3, #0
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	461a      	mov	r2, r3
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d0c3      	beq.n	800814e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695a      	ldr	r2, [r3, #20]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0201 	bic.w	r2, r2, #1
 80081f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff ff7e 	bl	8008128 <HAL_UART_ErrorCallback>
}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b21      	cmp	r3, #33	; 0x21
 8008246:	d144      	bne.n	80082d2 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008250:	d11a      	bne.n	8008288 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008266:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d105      	bne.n	800827c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	1c9a      	adds	r2, r3, #2
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	621a      	str	r2, [r3, #32]
 800827a:	e00e      	b.n	800829a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	621a      	str	r2, [r3, #32]
 8008286:	e008      	b.n	800829a <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	1c59      	adds	r1, r3, #1
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6211      	str	r1, [r2, #32]
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	4619      	mov	r1, r3
 80082a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10f      	bne.n	80082ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e000      	b.n	80082d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80082d2:	2302      	movs	r3, #2
  }
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082f6:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2220      	movs	r2, #32
 80082fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff ff07 	bl	8008114 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]


  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b22      	cmp	r3, #34	; 0x22
 8008322:	f040 8088 	bne.w	8008436 <UART_Receive_IT+0x126>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832e:	d123      	bne.n	8008378 <UART_Receive_IT+0x68>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10e      	bne.n	800835c <UART_Receive_IT+0x4c>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	b29b      	uxth	r3, r3
 8008346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834a:	b29a      	uxth	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008354:	1c9a      	adds	r2, r3, #2
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	629a      	str	r2, [r3, #40]	; 0x28
 800835a:	e029      	b.n	80083b0 <UART_Receive_IT+0xa0>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	b29b      	uxth	r3, r3
 8008364:	b2db      	uxtb	r3, r3
 8008366:	b29a      	uxth	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	1c5a      	adds	r2, r3, #1
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	629a      	str	r2, [r3, #40]	; 0x28
 8008376:	e01b      	b.n	80083b0 <UART_Receive_IT+0xa0>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10a      	bne.n	8008396 <UART_Receive_IT+0x86>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6858      	ldr	r0, [r3, #4]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	1c59      	adds	r1, r3, #1
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	6291      	str	r1, [r2, #40]	; 0x28
 8008390:	b2c2      	uxtb	r2, r0
 8008392:	701a      	strb	r2, [r3, #0]
 8008394:	e00c      	b.n	80083b0 <UART_Receive_IT+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	b2da      	uxtb	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a2:	1c58      	adds	r0, r3, #1
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	6288      	str	r0, [r1, #40]	; 0x28
 80083a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80083ac:	b2d2      	uxtb	r2, r2
 80083ae:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	3b01      	subs	r3, #1
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	4619      	mov	r1, r3
 80083be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d136      	bne.n	8008432 <UART_Receive_IT+0x122>
    {
        //This allows the buffer to resize based on length of the Ground Station commands over UART
        if((*(huart->pRxBuffPtr-1)!= 0) && (huart->RxXferSize == 4)){
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c8:	3b01      	subs	r3, #1
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d017      	beq.n	8008400 <UART_Receive_IT+0xf0>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	d113      	bne.n	8008400 <UART_Receive_IT+0xf0>
            huart->RxXferCount = *(huart->pRxBuffPtr-1) + 1;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	3b01      	subs	r3, #1
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	3301      	adds	r3, #1
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	85da      	strh	r2, [r3, #46]	; 0x2e
            huart->RxXferSize = *(huart->pRxBuffPtr-1) + 5;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ee:	3b01      	subs	r3, #1
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3305      	adds	r3, #5
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	859a      	strh	r2, [r3, #44]	; 0x2c
            return HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	e01b      	b.n	8008438 <UART_Receive_IT+0x128>
        }
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800840e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	695a      	ldr	r2, [r3, #20]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f022 0201 	bic.w	r2, r2, #1
 800841e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2220      	movs	r2, #32
 8008424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7fb fa21 	bl	8003870 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800842e:	2300      	movs	r3, #0
 8008430:	e002      	b.n	8008438 <UART_Receive_IT+0x128>
    }
    return HAL_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	e000      	b.n	8008438 <UART_Receive_IT+0x128>
  }
  else
  {
    return HAL_BUSY;
 8008436:	2302      	movs	r3, #2
  }

#endif
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008440:	b5b0      	push	{r4, r5, r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800845a:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	4313      	orrs	r3, r2
 8008464:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800847c:	f023 030c 	bic.w	r3, r3, #12
 8008480:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	431a      	orrs	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	4313      	orrs	r3, r2
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b4:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d0:	f040 80e4 	bne.w	800869c <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4aab      	ldr	r2, [pc, #684]	; (8008788 <UART_SetConfig+0x348>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d004      	beq.n	80084e8 <UART_SetConfig+0xa8>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4aaa      	ldr	r2, [pc, #680]	; (800878c <UART_SetConfig+0x34c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d16c      	bne.n	80085c2 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80084e8:	f7fd fb54 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 80084ec:	4602      	mov	r2, r0
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009a      	lsls	r2, r3, #2
 80084f6:	441a      	add	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008502:	4aa3      	ldr	r2, [pc, #652]	; (8008790 <UART_SetConfig+0x350>)
 8008504:	fba2 2303 	umull	r2, r3, r2, r3
 8008508:	095b      	lsrs	r3, r3, #5
 800850a:	011c      	lsls	r4, r3, #4
 800850c:	f7fd fb42 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 8008510:	4602      	mov	r2, r0
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009a      	lsls	r2, r3, #2
 800851a:	441a      	add	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	fbb2 f5f3 	udiv	r5, r2, r3
 8008526:	f7fd fb35 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 800852a:	4602      	mov	r2, r0
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	009a      	lsls	r2, r3, #2
 8008534:	441a      	add	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	005b      	lsls	r3, r3, #1
 800853c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008540:	4a93      	ldr	r2, [pc, #588]	; (8008790 <UART_SetConfig+0x350>)
 8008542:	fba2 2303 	umull	r2, r3, r2, r3
 8008546:	095b      	lsrs	r3, r3, #5
 8008548:	2264      	movs	r2, #100	; 0x64
 800854a:	fb02 f303 	mul.w	r3, r2, r3
 800854e:	1aeb      	subs	r3, r5, r3
 8008550:	00db      	lsls	r3, r3, #3
 8008552:	3332      	adds	r3, #50	; 0x32
 8008554:	4a8e      	ldr	r2, [pc, #568]	; (8008790 <UART_SetConfig+0x350>)
 8008556:	fba2 2303 	umull	r2, r3, r2, r3
 800855a:	095b      	lsrs	r3, r3, #5
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008562:	441c      	add	r4, r3
 8008564:	f7fd fb16 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 8008568:	4602      	mov	r2, r0
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009a      	lsls	r2, r3, #2
 8008572:	441a      	add	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	fbb2 f5f3 	udiv	r5, r2, r3
 800857e:	f7fd fb09 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 8008582:	4602      	mov	r2, r0
 8008584:	4613      	mov	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	009a      	lsls	r2, r3, #2
 800858c:	441a      	add	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	fbb2 f3f3 	udiv	r3, r2, r3
 8008598:	4a7d      	ldr	r2, [pc, #500]	; (8008790 <UART_SetConfig+0x350>)
 800859a:	fba2 2303 	umull	r2, r3, r2, r3
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	2264      	movs	r2, #100	; 0x64
 80085a2:	fb02 f303 	mul.w	r3, r2, r3
 80085a6:	1aeb      	subs	r3, r5, r3
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	3332      	adds	r3, #50	; 0x32
 80085ac:	4a78      	ldr	r2, [pc, #480]	; (8008790 <UART_SetConfig+0x350>)
 80085ae:	fba2 2303 	umull	r2, r3, r2, r3
 80085b2:	095b      	lsrs	r3, r3, #5
 80085b4:	f003 0207 	and.w	r2, r3, #7
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4422      	add	r2, r4
 80085be:	609a      	str	r2, [r3, #8]
 80085c0:	e154      	b.n	800886c <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80085c2:	f7fd fac5 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 80085c6:	4602      	mov	r2, r0
 80085c8:	4613      	mov	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4413      	add	r3, r2
 80085ce:	009a      	lsls	r2, r3, #2
 80085d0:	441a      	add	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085dc:	4a6c      	ldr	r2, [pc, #432]	; (8008790 <UART_SetConfig+0x350>)
 80085de:	fba2 2303 	umull	r2, r3, r2, r3
 80085e2:	095b      	lsrs	r3, r3, #5
 80085e4:	011c      	lsls	r4, r3, #4
 80085e6:	f7fd fab3 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 80085ea:	4602      	mov	r2, r0
 80085ec:	4613      	mov	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	009a      	lsls	r2, r3, #2
 80085f4:	441a      	add	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	fbb2 f5f3 	udiv	r5, r2, r3
 8008600:	f7fd faa6 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8008604:	4602      	mov	r2, r0
 8008606:	4613      	mov	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	009a      	lsls	r2, r3, #2
 800860e:	441a      	add	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	fbb2 f3f3 	udiv	r3, r2, r3
 800861a:	4a5d      	ldr	r2, [pc, #372]	; (8008790 <UART_SetConfig+0x350>)
 800861c:	fba2 2303 	umull	r2, r3, r2, r3
 8008620:	095b      	lsrs	r3, r3, #5
 8008622:	2264      	movs	r2, #100	; 0x64
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	1aeb      	subs	r3, r5, r3
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	3332      	adds	r3, #50	; 0x32
 800862e:	4a58      	ldr	r2, [pc, #352]	; (8008790 <UART_SetConfig+0x350>)
 8008630:	fba2 2303 	umull	r2, r3, r2, r3
 8008634:	095b      	lsrs	r3, r3, #5
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800863c:	441c      	add	r4, r3
 800863e:	f7fd fa87 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8008642:	4602      	mov	r2, r0
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009a      	lsls	r2, r3, #2
 800864c:	441a      	add	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	fbb2 f5f3 	udiv	r5, r2, r3
 8008658:	f7fd fa7a 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 800865c:	4602      	mov	r2, r0
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	009a      	lsls	r2, r3, #2
 8008666:	441a      	add	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008672:	4a47      	ldr	r2, [pc, #284]	; (8008790 <UART_SetConfig+0x350>)
 8008674:	fba2 2303 	umull	r2, r3, r2, r3
 8008678:	095b      	lsrs	r3, r3, #5
 800867a:	2264      	movs	r2, #100	; 0x64
 800867c:	fb02 f303 	mul.w	r3, r2, r3
 8008680:	1aeb      	subs	r3, r5, r3
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	3332      	adds	r3, #50	; 0x32
 8008686:	4a42      	ldr	r2, [pc, #264]	; (8008790 <UART_SetConfig+0x350>)
 8008688:	fba2 2303 	umull	r2, r3, r2, r3
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	f003 0207 	and.w	r2, r3, #7
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4422      	add	r2, r4
 8008698:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800869a:	e0e7      	b.n	800886c <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a39      	ldr	r2, [pc, #228]	; (8008788 <UART_SetConfig+0x348>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d004      	beq.n	80086b0 <UART_SetConfig+0x270>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a38      	ldr	r2, [pc, #224]	; (800878c <UART_SetConfig+0x34c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d171      	bne.n	8008794 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80086b0:	f7fd fa70 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 80086b4:	4602      	mov	r2, r0
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009a      	lsls	r2, r3, #2
 80086be:	441a      	add	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ca:	4a31      	ldr	r2, [pc, #196]	; (8008790 <UART_SetConfig+0x350>)
 80086cc:	fba2 2303 	umull	r2, r3, r2, r3
 80086d0:	095b      	lsrs	r3, r3, #5
 80086d2:	011c      	lsls	r4, r3, #4
 80086d4:	f7fd fa5e 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 80086d8:	4602      	mov	r2, r0
 80086da:	4613      	mov	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	009a      	lsls	r2, r3, #2
 80086e2:	441a      	add	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80086ee:	f7fd fa51 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 80086f2:	4602      	mov	r2, r0
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009a      	lsls	r2, r3, #2
 80086fc:	441a      	add	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	fbb2 f3f3 	udiv	r3, r2, r3
 8008708:	4a21      	ldr	r2, [pc, #132]	; (8008790 <UART_SetConfig+0x350>)
 800870a:	fba2 2303 	umull	r2, r3, r2, r3
 800870e:	095b      	lsrs	r3, r3, #5
 8008710:	2264      	movs	r2, #100	; 0x64
 8008712:	fb02 f303 	mul.w	r3, r2, r3
 8008716:	1aeb      	subs	r3, r5, r3
 8008718:	011b      	lsls	r3, r3, #4
 800871a:	3332      	adds	r3, #50	; 0x32
 800871c:	4a1c      	ldr	r2, [pc, #112]	; (8008790 <UART_SetConfig+0x350>)
 800871e:	fba2 2303 	umull	r2, r3, r2, r3
 8008722:	095b      	lsrs	r3, r3, #5
 8008724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008728:	441c      	add	r4, r3
 800872a:	f7fd fa33 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 800872e:	4602      	mov	r2, r0
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009a      	lsls	r2, r3, #2
 8008738:	441a      	add	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	fbb2 f5f3 	udiv	r5, r2, r3
 8008744:	f7fd fa26 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 8008748:	4602      	mov	r2, r0
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009a      	lsls	r2, r3, #2
 8008752:	441a      	add	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	fbb2 f3f3 	udiv	r3, r2, r3
 800875e:	4a0c      	ldr	r2, [pc, #48]	; (8008790 <UART_SetConfig+0x350>)
 8008760:	fba2 2303 	umull	r2, r3, r2, r3
 8008764:	095b      	lsrs	r3, r3, #5
 8008766:	2264      	movs	r2, #100	; 0x64
 8008768:	fb02 f303 	mul.w	r3, r2, r3
 800876c:	1aeb      	subs	r3, r5, r3
 800876e:	011b      	lsls	r3, r3, #4
 8008770:	3332      	adds	r3, #50	; 0x32
 8008772:	4a07      	ldr	r2, [pc, #28]	; (8008790 <UART_SetConfig+0x350>)
 8008774:	fba2 2303 	umull	r2, r3, r2, r3
 8008778:	095b      	lsrs	r3, r3, #5
 800877a:	f003 020f 	and.w	r2, r3, #15
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4422      	add	r2, r4
 8008784:	609a      	str	r2, [r3, #8]
 8008786:	e071      	b.n	800886c <UART_SetConfig+0x42c>
 8008788:	40011000 	.word	0x40011000
 800878c:	40011400 	.word	0x40011400
 8008790:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008794:	f7fd f9dc 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8008798:	4602      	mov	r2, r0
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009a      	lsls	r2, r3, #2
 80087a2:	441a      	add	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ae:	4a31      	ldr	r2, [pc, #196]	; (8008874 <UART_SetConfig+0x434>)
 80087b0:	fba2 2303 	umull	r2, r3, r2, r3
 80087b4:	095b      	lsrs	r3, r3, #5
 80087b6:	011c      	lsls	r4, r3, #4
 80087b8:	f7fd f9ca 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 80087bc:	4602      	mov	r2, r0
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009a      	lsls	r2, r3, #2
 80087c6:	441a      	add	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80087d2:	f7fd f9bd 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 80087d6:	4602      	mov	r2, r0
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009a      	lsls	r2, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ec:	4a21      	ldr	r2, [pc, #132]	; (8008874 <UART_SetConfig+0x434>)
 80087ee:	fba2 2303 	umull	r2, r3, r2, r3
 80087f2:	095b      	lsrs	r3, r3, #5
 80087f4:	2264      	movs	r2, #100	; 0x64
 80087f6:	fb02 f303 	mul.w	r3, r2, r3
 80087fa:	1aeb      	subs	r3, r5, r3
 80087fc:	011b      	lsls	r3, r3, #4
 80087fe:	3332      	adds	r3, #50	; 0x32
 8008800:	4a1c      	ldr	r2, [pc, #112]	; (8008874 <UART_SetConfig+0x434>)
 8008802:	fba2 2303 	umull	r2, r3, r2, r3
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800880c:	441c      	add	r4, r3
 800880e:	f7fd f99f 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8008812:	4602      	mov	r2, r0
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	009a      	lsls	r2, r3, #2
 800881c:	441a      	add	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	fbb2 f5f3 	udiv	r5, r2, r3
 8008828:	f7fd f992 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 800882c:	4602      	mov	r2, r0
 800882e:	4613      	mov	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	009a      	lsls	r2, r3, #2
 8008836:	441a      	add	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008842:	4a0c      	ldr	r2, [pc, #48]	; (8008874 <UART_SetConfig+0x434>)
 8008844:	fba2 2303 	umull	r2, r3, r2, r3
 8008848:	095b      	lsrs	r3, r3, #5
 800884a:	2264      	movs	r2, #100	; 0x64
 800884c:	fb02 f303 	mul.w	r3, r2, r3
 8008850:	1aeb      	subs	r3, r5, r3
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	3332      	adds	r3, #50	; 0x32
 8008856:	4a07      	ldr	r2, [pc, #28]	; (8008874 <UART_SetConfig+0x434>)
 8008858:	fba2 2303 	umull	r2, r3, r2, r3
 800885c:	095b      	lsrs	r3, r3, #5
 800885e:	f003 020f 	and.w	r2, r3, #15
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4422      	add	r2, r4
 8008868:	609a      	str	r2, [r3, #8]
}
 800886a:	e7ff      	b.n	800886c <UART_SetConfig+0x42c>
 800886c:	bf00      	nop
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bdb0      	pop	{r4, r5, r7, pc}
 8008874:	51eb851f 	.word	0x51eb851f

08008878 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if(hwwdg == NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e016      	b.n	80088b8 <HAL_WWDG_Init+0x40>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));

  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 fc8a 	bl	800a1a4 <HAL_WWDG_MspInit>

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68da      	ldr	r2, [r3, #12]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800889c:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691a      	ldr	r2, [r3, #16]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	ea42 0103 	orr.w	r1, r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80088c0:	b084      	sub	sp, #16
 80088c2:	b480      	push	{r7}
 80088c4:	b085      	sub	sp, #20
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	f107 001c 	add.w	r0, r7, #28
 80088ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80088d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80088d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80088da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80088de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80088e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80088e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80088e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80088ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80088fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	431a      	orrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	b004      	add	sp, #16
 8008914:	4770      	bx	lr

08008916 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008924:	4618      	mov	r0, r3
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008952:	b480      	push	{r7}
 8008954:	b083      	sub	sp, #12
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2203      	movs	r2, #3
 800895e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800896e:	b480      	push	{r7}
 8008970:	b083      	sub	sp, #12
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0303 	and.w	r3, r3, #3
}
 800897e:	4618      	mov	r0, r3
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800898a:	b480      	push	{r7}
 800898c:	b085      	sub	sp, #20
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089a8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80089ae:	431a      	orrs	r2, r3
                       Command->CPSM);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80089b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80089c4:	f023 030f 	bic.w	r3, r3, #15
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr

080089de <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	b2db      	uxtb	r3, r3
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3314      	adds	r3, #20
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	4413      	add	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
}  
 8008a16:	4618      	mov	r0, r3
 8008a18:	3714      	adds	r7, #20
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b085      	sub	sp, #20
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a48:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008a4e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008a54:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0

}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b088      	sub	sp, #32
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008a84:	2300      	movs	r3, #0
 8008a86:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a8c:	2310      	movs	r3, #16
 8008a8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a90:	2340      	movs	r3, #64	; 0x40
 8008a92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a9c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a9e:	f107 0308 	add.w	r3, r7, #8
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f7ff ff70 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008aaa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008aae:	2110      	movs	r1, #16
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fa63 	bl	8008f7c <SDMMC_GetCmdResp1>
 8008ab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ab8:	69fb      	ldr	r3, [r7, #28]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b088      	sub	sp, #32
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008ad4:	2311      	movs	r3, #17
 8008ad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ad8:	2340      	movs	r3, #64	; 0x40
 8008ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008adc:	2300      	movs	r3, #0
 8008ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ae4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ae6:	f107 0308 	add.w	r3, r7, #8
 8008aea:	4619      	mov	r1, r3
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff ff4c 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008af2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008af6:	2111      	movs	r1, #17
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fa3f 	bl	8008f7c <SDMMC_GetCmdResp1>
 8008afe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b00:	69fb      	ldr	r3, [r7, #28]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3720      	adds	r7, #32
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b088      	sub	sp, #32
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008b14:	2300      	movs	r3, #0
 8008b16:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008b1c:	2312      	movs	r3, #18
 8008b1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b20:	2340      	movs	r3, #64	; 0x40
 8008b22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b24:	2300      	movs	r3, #0
 8008b26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b2c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b2e:	f107 0308 	add.w	r3, r7, #8
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7ff ff28 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008b3a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008b3e:	2112      	movs	r1, #18
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fa1b 	bl	8008f7c <SDMMC_GetCmdResp1>
 8008b46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b48:	69fb      	ldr	r3, [r7, #28]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3720      	adds	r7, #32
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b088      	sub	sp, #32
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008b64:	2318      	movs	r3, #24
 8008b66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b68:	2340      	movs	r3, #64	; 0x40
 8008b6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b74:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b76:	f107 0308 	add.w	r3, r7, #8
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff ff04 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008b82:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008b86:	2118      	movs	r1, #24
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f9f7 	bl	8008f7c <SDMMC_GetCmdResp1>
 8008b8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b90:	69fb      	ldr	r3, [r7, #28]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3720      	adds	r7, #32
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b088      	sub	sp, #32
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008bac:	2319      	movs	r3, #25
 8008bae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008bb0:	2340      	movs	r3, #64	; 0x40
 8008bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bbc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bbe:	f107 0308 	add.w	r3, r7, #8
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f7ff fee0 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008bca:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008bce:	2119      	movs	r1, #25
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f9d3 	bl	8008f7c <SDMMC_GetCmdResp1>
 8008bd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bd8:	69fb      	ldr	r3, [r7, #28]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3720      	adds	r7, #32
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008bec:	2300      	movs	r3, #0
 8008bee:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008bf4:	230c      	movs	r3, #12
 8008bf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008bf8:	2340      	movs	r3, #64	; 0x40
 8008bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c04:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c06:	f107 0308 	add.w	r3, r7, #8
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff febc 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 8008c12:	4a05      	ldr	r2, [pc, #20]	; (8008c28 <SDMMC_CmdStopTransfer+0x44>)
 8008c14:	210c      	movs	r1, #12
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f9b0 	bl	8008f7c <SDMMC_GetCmdResp1>
 8008c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3720      	adds	r7, #32
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	05f5e100 	.word	0x05f5e100

08008c2c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b08a      	sub	sp, #40	; 0x28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c40:	2307      	movs	r3, #7
 8008c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c44:	2340      	movs	r3, #64	; 0x40
 8008c46:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c50:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c52:	f107 0310 	add.w	r3, r7, #16
 8008c56:	4619      	mov	r1, r3
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f7ff fe96 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008c5e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008c62:	2107      	movs	r1, #7
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 f989 	bl	8008f7c <SDMMC_GetCmdResp1>
 8008c6a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3728      	adds	r7, #40	; 0x28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b088      	sub	sp, #32
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008c86:	2300      	movs	r3, #0
 8008c88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c96:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c98:	f107 0308 	add.w	r3, r7, #8
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff fe73 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f93f 	bl	8008f28 <SDMMC_GetCmdError>
 8008caa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cac:	69fb      	ldr	r3, [r7, #28]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3720      	adds	r7, #32
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b088      	sub	sp, #32
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008cc2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008cc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008cc8:	2308      	movs	r3, #8
 8008cca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cd8:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f7ff fe52 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fb10 	bl	800930c <SDMMC_GetCmdResp7>
 8008cec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cee:	69fb      	ldr	r3, [r7, #28]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3720      	adds	r7, #32
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008d02:	2300      	movs	r3, #0
 8008d04:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008d0a:	2337      	movs	r3, #55	; 0x37
 8008d0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d0e:	2340      	movs	r3, #64	; 0x40
 8008d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d12:	2300      	movs	r3, #0
 8008d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d1a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d1c:	f107 0308 	add.w	r3, r7, #8
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff fe31 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008d28:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008d2c:	2137      	movs	r1, #55	; 0x37
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f924 	bl	8008f7c <SDMMC_GetCmdResp1>
 8008d34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d36:	69fb      	ldr	r3, [r7, #28]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3720      	adds	r7, #32
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d5a:	2329      	movs	r3, #41	; 0x29
 8008d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d5e:	2340      	movs	r3, #64	; 0x40
 8008d60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d62:	2300      	movs	r3, #0
 8008d64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d6a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d6c:	f107 0308 	add.w	r3, r7, #8
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff fe09 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fa25 	bl	80091c8 <SDMMC_GetCmdResp3>
 8008d7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d80:	69fb      	ldr	r3, [r7, #28]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3720      	adds	r7, #32
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b088      	sub	sp, #32
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008d9c:	2306      	movs	r3, #6
 8008d9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dac:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fde8 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008dba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008dbe:	2106      	movs	r1, #6
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f8db 	bl	8008f7c <SDMMC_GetCmdResp1>
 8008dc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3720      	adds	r7, #32
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b088      	sub	sp, #32
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008de2:	2333      	movs	r3, #51	; 0x33
 8008de4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008de6:	2340      	movs	r3, #64	; 0x40
 8008de8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008df2:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008df4:	f107 0308 	add.w	r3, r7, #8
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7ff fdc5 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008e00:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008e04:	2133      	movs	r1, #51	; 0x33
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 f8b8 	bl	8008f7c <SDMMC_GetCmdResp1>
 8008e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e0e:	69fb      	ldr	r3, [r7, #28]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3720      	adds	r7, #32
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e20:	2300      	movs	r3, #0
 8008e22:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008e2c:	23c0      	movs	r3, #192	; 0xc0
 8008e2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e38:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e3a:	f107 0308 	add.w	r3, r7, #8
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff fda2 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f97e 	bl	8009148 <SDMMC_GetCmdResp2>
 8008e4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3720      	adds	r7, #32
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008e6a:	2309      	movs	r3, #9
 8008e6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008e6e:	23c0      	movs	r3, #192	; 0xc0
 8008e70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e72:	2300      	movs	r3, #0
 8008e74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e7a:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e7c:	f107 0308 	add.w	r3, r7, #8
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff fd81 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f95d 	bl	8009148 <SDMMC_GetCmdResp2>
 8008e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e90:	69fb      	ldr	r3, [r7, #28]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b088      	sub	sp, #32
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008eac:	2303      	movs	r3, #3
 8008eae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eb0:	2340      	movs	r3, #64	; 0x40
 8008eb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ebc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ebe:	f107 0308 	add.w	r3, r7, #8
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f7ff fd60 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	2103      	movs	r1, #3
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f9ae 	bl	8009230 <SDMMC_GetCmdResp6>
 8008ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ed6:	69fb      	ldr	r3, [r7, #28]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3720      	adds	r7, #32
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008ef2:	230d      	movs	r3, #13
 8008ef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ef6:	2340      	movs	r3, #64	; 0x40
 8008ef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008efa:	2300      	movs	r3, #0
 8008efc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f02:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f04:	f107 0308 	add.w	r3, r7, #8
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff fd3d 	bl	800898a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008f10:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008f14:	210d      	movs	r1, #13
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f830 	bl	8008f7c <SDMMC_GetCmdResp1>
 8008f1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f1e:	69fb      	ldr	r3, [r7, #28]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3720      	adds	r7, #32
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008f28:	b490      	push	{r4, r7}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f30:	4b10      	ldr	r3, [pc, #64]	; (8008f74 <SDMMC_GetCmdError+0x4c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a10      	ldr	r2, [pc, #64]	; (8008f78 <SDMMC_GetCmdError+0x50>)
 8008f36:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3a:	0a5b      	lsrs	r3, r3, #9
 8008f3c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008f40:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008f44:	4623      	mov	r3, r4
 8008f46:	1e5c      	subs	r4, r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f50:	e00a      	b.n	8008f68 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d0f2      	beq.n	8008f44 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008f64:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bc90      	pop	{r4, r7}
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	20000014 	.word	0x20000014
 8008f78:	10624dd3 	.word	0x10624dd3

08008f7c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008f7c:	b590      	push	{r4, r7, lr}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	460b      	mov	r3, r1
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008f8a:	4b6c      	ldr	r3, [pc, #432]	; (800913c <SDMMC_GetCmdResp1+0x1c0>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a6c      	ldr	r2, [pc, #432]	; (8009140 <SDMMC_GetCmdResp1+0x1c4>)
 8008f90:	fba2 2303 	umull	r2, r3, r2, r3
 8008f94:	0a5b      	lsrs	r3, r3, #9
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008f9c:	4623      	mov	r3, r4
 8008f9e:	1e5c      	subs	r4, r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d102      	bne.n	8008faa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fa4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fa8:	e0c3      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0f2      	beq.n	8008f9c <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fba:	f003 0304 	and.w	r3, r3, #4
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d004      	beq.n	8008fcc <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2204      	movs	r2, #4
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008fc8:	2304      	movs	r3, #4
 8008fca:	e0b2      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d004      	beq.n	8008fe2 <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e0a7      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f7ff fcfb 	bl	80089de <SDIO_GetCommandResponse>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	461a      	mov	r2, r3
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d001      	beq.n	8008ff6 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e09d      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008ffc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008ffe:	2100      	movs	r1, #0
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7ff fcf9 	bl	80089f8 <SDIO_GetResponse>
 8009006:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	4b4e      	ldr	r3, [pc, #312]	; (8009144 <SDMMC_GetCmdResp1+0x1c8>)
 800900c:	4013      	ands	r3, r2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8009012:	2300      	movs	r3, #0
 8009014:	e08d      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	da02      	bge.n	8009022 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800901c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009020:	e087      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800902c:	2340      	movs	r3, #64	; 0x40
 800902e:	e080      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800903a:	2380      	movs	r3, #128	; 0x80
 800903c:	e079      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800904c:	e071      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800905c:	e069      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d002      	beq.n	800906e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800906c:	e061      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800907c:	e059      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800908c:	e051      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800909c:	e049      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80090a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090ac:	e041      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80090b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090bc:	e039      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80090c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090cc:	e031      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80090d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090dc:	e029      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d002      	beq.n	80090ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80090e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090ec:	e021      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80090f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80090fc:	e019      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009108:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800910c:	e011      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009118:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800911c:	e009      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	f003 0308 	and.w	r3, r3, #8
 8009124:	2b00      	cmp	r3, #0
 8009126:	d002      	beq.n	800912e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009128:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800912c:	e001      	b.n	8009132 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800912e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009132:	4618      	mov	r0, r3
 8009134:	371c      	adds	r7, #28
 8009136:	46bd      	mov	sp, r7
 8009138:	bd90      	pop	{r4, r7, pc}
 800913a:	bf00      	nop
 800913c:	20000014 	.word	0x20000014
 8009140:	10624dd3 	.word	0x10624dd3
 8009144:	fdffe008 	.word	0xfdffe008

08009148 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009148:	b490      	push	{r4, r7}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009150:	4b1b      	ldr	r3, [pc, #108]	; (80091c0 <SDMMC_GetCmdResp2+0x78>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a1b      	ldr	r2, [pc, #108]	; (80091c4 <SDMMC_GetCmdResp2+0x7c>)
 8009156:	fba2 2303 	umull	r2, r3, r2, r3
 800915a:	0a5b      	lsrs	r3, r3, #9
 800915c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009160:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009164:	4623      	mov	r3, r4
 8009166:	1e5c      	subs	r4, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d102      	bne.n	8009172 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800916c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009170:	e020      	b.n	80091b4 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009176:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0f2      	beq.n	8009164 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009182:	f003 0304 	and.w	r3, r3, #4
 8009186:	2b00      	cmp	r3, #0
 8009188:	d004      	beq.n	8009194 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2204      	movs	r2, #4
 800918e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009190:	2304      	movs	r3, #4
 8009192:	e00f      	b.n	80091b4 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d004      	beq.n	80091aa <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e004      	b.n	80091b4 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80091b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bc90      	pop	{r4, r7}
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	20000014 	.word	0x20000014
 80091c4:	10624dd3 	.word	0x10624dd3

080091c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80091c8:	b490      	push	{r4, r7}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091d0:	4b15      	ldr	r3, [pc, #84]	; (8009228 <SDMMC_GetCmdResp3+0x60>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a15      	ldr	r2, [pc, #84]	; (800922c <SDMMC_GetCmdResp3+0x64>)
 80091d6:	fba2 2303 	umull	r2, r3, r2, r3
 80091da:	0a5b      	lsrs	r3, r3, #9
 80091dc:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80091e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80091e4:	4623      	mov	r3, r4
 80091e6:	1e5c      	subs	r4, r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d102      	bne.n	80091f2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091f0:	e015      	b.n	800921e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0f2      	beq.n	80091e4 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009202:	f003 0304 	and.w	r3, r3, #4
 8009206:	2b00      	cmp	r3, #0
 8009208:	d004      	beq.n	8009214 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2204      	movs	r2, #4
 800920e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009210:	2304      	movs	r3, #4
 8009212:	e004      	b.n	800921e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800921a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bc90      	pop	{r4, r7}
 8009226:	4770      	bx	lr
 8009228:	20000014 	.word	0x20000014
 800922c:	10624dd3 	.word	0x10624dd3

08009230 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009230:	b590      	push	{r4, r7, lr}
 8009232:	b087      	sub	sp, #28
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	460b      	mov	r3, r1
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800923e:	4b31      	ldr	r3, [pc, #196]	; (8009304 <SDMMC_GetCmdResp6+0xd4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a31      	ldr	r2, [pc, #196]	; (8009308 <SDMMC_GetCmdResp6+0xd8>)
 8009244:	fba2 2303 	umull	r2, r3, r2, r3
 8009248:	0a5b      	lsrs	r3, r3, #9
 800924a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800924e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009252:	4623      	mov	r3, r4
 8009254:	1e5c      	subs	r4, r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	d102      	bne.n	8009260 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800925a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800925e:	e04c      	b.n	80092fa <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009264:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0f2      	beq.n	8009252 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b00      	cmp	r3, #0
 8009276:	d004      	beq.n	8009282 <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2204      	movs	r2, #4
 800927c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800927e:	2304      	movs	r3, #4
 8009280:	e03b      	b.n	80092fa <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d004      	beq.n	8009298 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2201      	movs	r2, #1
 8009292:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009294:	2301      	movs	r3, #1
 8009296:	e030      	b.n	80092fa <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f7ff fba0 	bl	80089de <SDIO_GetCommandResponse>
 800929e:	4603      	mov	r3, r0
 80092a0:	461a      	mov	r2, r3
 80092a2:	7afb      	ldrb	r3, [r7, #11]
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d001      	beq.n	80092ac <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e026      	b.n	80092fa <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80092b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80092b4:	2100      	movs	r1, #0
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f7ff fb9e 	bl	80089f8 <SDIO_GetResponse>
 80092bc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	0c1b      	lsrs	r3, r3, #16
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80092d2:	2300      	movs	r3, #0
 80092d4:	e011      	b.n	80092fa <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80092e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092e4:	e009      	b.n	80092fa <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80092f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092f4:	e001      	b.n	80092fa <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80092f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd90      	pop	{r4, r7, pc}
 8009302:	bf00      	nop
 8009304:	20000014 	.word	0x20000014
 8009308:	10624dd3 	.word	0x10624dd3

0800930c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800930c:	b490      	push	{r4, r7}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009314:	4b18      	ldr	r3, [pc, #96]	; (8009378 <SDMMC_GetCmdResp7+0x6c>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a18      	ldr	r2, [pc, #96]	; (800937c <SDMMC_GetCmdResp7+0x70>)
 800931a:	fba2 2303 	umull	r2, r3, r2, r3
 800931e:	0a5b      	lsrs	r3, r3, #9
 8009320:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009324:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009328:	4623      	mov	r3, r4
 800932a:	1e5c      	subs	r4, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009334:	e01a      	b.n	800936c <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0f2      	beq.n	8009328 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009346:	f003 0304 	and.w	r3, r3, #4
 800934a:	2b00      	cmp	r3, #0
 800934c:	d004      	beq.n	8009358 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2240      	movs	r2, #64	; 0x40
 8009352:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009354:	2304      	movs	r3, #4
 8009356:	e009      	b.n	800936c <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2240      	movs	r2, #64	; 0x40
 8009368:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800936a:	2300      	movs	r3, #0
  
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bc90      	pop	{r4, r7}
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	20000014 	.word	0x20000014
 800937c:	10624dd3 	.word	0x10624dd3

08009380 <_write>:
//
//	return _n;
//}

int _write(int file, char *data, int len)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
   if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d00a      	beq.n	80093a8 <_write+0x28>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d007      	beq.n	80093a8 <_write+0x28>
   {
      errno = EBADF;
 8009398:	f009 f814 	bl	80123c4 <__errno>
 800939c:	4603      	mov	r3, r0
 800939e:	2209      	movs	r2, #9
 80093a0:	601a      	str	r2, [r3, #0]
      return -1;
 80093a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093a6:	e010      	b.n	80093ca <_write+0x4a>
   }

   // arbitrary timeout 1000
   HAL_StatusTypeDef status =
      HAL_UART_Transmit((UART_HandleTypeDef *)COMM, (uint8_t*)data, len, 1000);
 80093a8:	4b0a      	ldr	r3, [pc, #40]	; (80093d4 <_write+0x54>)
 80093aa:	6818      	ldr	r0, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	b29a      	uxth	r2, r3
 80093b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	f7fe fccc 	bl	8007d52 <HAL_UART_Transmit>
 80093ba:	4603      	mov	r3, r0
 80093bc:	75fb      	strb	r3, [r7, #23]

   // return # of bytes written - as best we can tell
   return (status == HAL_OK ? len : 0);
 80093be:	7dfb      	ldrb	r3, [r7, #23]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <_write+0x48>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	e000      	b.n	80093ca <_write+0x4a>
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3718      	adds	r7, #24
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	20000004 	.word	0x20000004

080093d8 <SystemClock_Config>:
*/

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b0a0      	sub	sp, #128	; 0x80
 80093dc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80093de:	2300      	movs	r3, #0
 80093e0:	60bb      	str	r3, [r7, #8]
 80093e2:	4b3b      	ldr	r3, [pc, #236]	; (80094d0 <SystemClock_Config+0xf8>)
 80093e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e6:	4a3a      	ldr	r2, [pc, #232]	; (80094d0 <SystemClock_Config+0xf8>)
 80093e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093ec:	6413      	str	r3, [r2, #64]	; 0x40
 80093ee:	4b38      	ldr	r3, [pc, #224]	; (80094d0 <SystemClock_Config+0xf8>)
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093f6:	60bb      	str	r3, [r7, #8]
 80093f8:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80093fa:	2300      	movs	r3, #0
 80093fc:	607b      	str	r3, [r7, #4]
 80093fe:	4b35      	ldr	r3, [pc, #212]	; (80094d4 <SystemClock_Config+0xfc>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009406:	4a33      	ldr	r2, [pc, #204]	; (80094d4 <SystemClock_Config+0xfc>)
 8009408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	4b31      	ldr	r3, [pc, #196]	; (80094d4 <SystemClock_Config+0xfc>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009416:	607b      	str	r3, [r7, #4]
 8009418:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800941a:	2305      	movs	r3, #5
 800941c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800941e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009422:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009424:	2301      	movs	r3, #1
 8009426:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009428:	2302      	movs	r3, #2
 800942a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800942c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009430:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8009432:	2310      	movs	r3, #16
 8009434:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 8009436:	23c0      	movs	r3, #192	; 0xc0
 8009438:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800943a:	2302      	movs	r3, #2
 800943c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800943e:	2304      	movs	r3, #4
 8009440:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009442:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009446:	4618      	mov	r0, r3
 8009448:	f7fb ff8a 	bl	8005360 <HAL_RCC_OscConfig>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8009452:	f7fa f9e7 	bl	8003824 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009456:	230f      	movs	r3, #15
 8009458:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800945a:	2302      	movs	r3, #2
 800945c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800945e:	2300      	movs	r3, #0
 8009460:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009462:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009466:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800946c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800946e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009472:	2103      	movs	r1, #3
 8009474:	4618      	mov	r0, r3
 8009476:	f7fc f9cd 	bl	8005814 <HAL_RCC_ClockConfig>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8009480:	f7fa f9d0 	bl	8003824 <Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009484:	2320      	movs	r3, #32
 8009486:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8009488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800948c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800948e:	f107 030c 	add.w	r3, r7, #12
 8009492:	4618      	mov	r0, r3
 8009494:	f7fc fbd2 	bl	8005c3c <HAL_RCCEx_PeriphCLKConfig>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800949e:	f7fa f9c1 	bl	8003824 <Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80094a2:	f7fc fb49 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 80094a6:	4603      	mov	r3, r0
 80094a8:	4a0b      	ldr	r2, [pc, #44]	; (80094d8 <SystemClock_Config+0x100>)
 80094aa:	fba2 2303 	umull	r2, r3, r2, r3
 80094ae:	099b      	lsrs	r3, r3, #6
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fa fb60 	bl	8003b76 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80094b6:	2004      	movs	r0, #4
 80094b8:	f7fa fb6a 	bl	8003b90 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80094bc:	2200      	movs	r2, #0
 80094be:	210f      	movs	r1, #15
 80094c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094c4:	f7fa fb2d 	bl	8003b22 <HAL_NVIC_SetPriority>
}
 80094c8:	bf00      	nop
 80094ca:	3780      	adds	r7, #128	; 0x80
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	40023800 	.word	0x40023800
 80094d4:	40007000 	.word	0x40007000
 80094d8:	10624dd3 	.word	0x10624dd3

080094dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08e      	sub	sp, #56	; 0x38
 80094e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80094e2:	2300      	movs	r3, #0
 80094e4:	623b      	str	r3, [r7, #32]
 80094e6:	4bb2      	ldr	r3, [pc, #712]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 80094e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ea:	4ab1      	ldr	r2, [pc, #708]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 80094ec:	f043 0310 	orr.w	r3, r3, #16
 80094f0:	6313      	str	r3, [r2, #48]	; 0x30
 80094f2:	4baf      	ldr	r3, [pc, #700]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 80094f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f6:	f003 0310 	and.w	r3, r3, #16
 80094fa:	623b      	str	r3, [r7, #32]
 80094fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80094fe:	2300      	movs	r3, #0
 8009500:	61fb      	str	r3, [r7, #28]
 8009502:	4bab      	ldr	r3, [pc, #684]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009506:	4aaa      	ldr	r2, [pc, #680]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800950c:	6313      	str	r3, [r2, #48]	; 0x30
 800950e:	4ba8      	ldr	r3, [pc, #672]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009516:	61fb      	str	r3, [r7, #28]
 8009518:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800951a:	2300      	movs	r3, #0
 800951c:	61bb      	str	r3, [r7, #24]
 800951e:	4ba4      	ldr	r3, [pc, #656]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009522:	4aa3      	ldr	r2, [pc, #652]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009524:	f043 0304 	orr.w	r3, r3, #4
 8009528:	6313      	str	r3, [r2, #48]	; 0x30
 800952a:	4ba1      	ldr	r3, [pc, #644]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	f003 0304 	and.w	r3, r3, #4
 8009532:	61bb      	str	r3, [r7, #24]
 8009534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009536:	2300      	movs	r3, #0
 8009538:	617b      	str	r3, [r7, #20]
 800953a:	4b9d      	ldr	r3, [pc, #628]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	4a9c      	ldr	r2, [pc, #624]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009540:	f043 0320 	orr.w	r3, r3, #32
 8009544:	6313      	str	r3, [r2, #48]	; 0x30
 8009546:	4b9a      	ldr	r3, [pc, #616]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954a:	f003 0320 	and.w	r3, r3, #32
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009552:	2300      	movs	r3, #0
 8009554:	613b      	str	r3, [r7, #16]
 8009556:	4b96      	ldr	r3, [pc, #600]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955a:	4a95      	ldr	r2, [pc, #596]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 800955c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009560:	6313      	str	r3, [r2, #48]	; 0x30
 8009562:	4b93      	ldr	r3, [pc, #588]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956a:	613b      	str	r3, [r7, #16]
 800956c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800956e:	2300      	movs	r3, #0
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	4b8f      	ldr	r3, [pc, #572]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009576:	4a8e      	ldr	r2, [pc, #568]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009578:	f043 0301 	orr.w	r3, r3, #1
 800957c:	6313      	str	r3, [r2, #48]	; 0x30
 800957e:	4b8c      	ldr	r3, [pc, #560]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800958a:	2300      	movs	r3, #0
 800958c:	60bb      	str	r3, [r7, #8]
 800958e:	4b88      	ldr	r3, [pc, #544]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009592:	4a87      	ldr	r2, [pc, #540]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 8009594:	f043 0302 	orr.w	r3, r3, #2
 8009598:	6313      	str	r3, [r2, #48]	; 0x30
 800959a:	4b85      	ldr	r3, [pc, #532]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 800959c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	60bb      	str	r3, [r7, #8]
 80095a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80095a6:	2300      	movs	r3, #0
 80095a8:	607b      	str	r3, [r7, #4]
 80095aa:	4b81      	ldr	r3, [pc, #516]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 80095ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ae:	4a80      	ldr	r2, [pc, #512]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 80095b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095b4:	6313      	str	r3, [r2, #48]	; 0x30
 80095b6:	4b7e      	ldr	r3, [pc, #504]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 80095b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095be:	607b      	str	r3, [r7, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80095c2:	2300      	movs	r3, #0
 80095c4:	603b      	str	r3, [r7, #0]
 80095c6:	4b7a      	ldr	r3, [pc, #488]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 80095c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ca:	4a79      	ldr	r2, [pc, #484]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 80095cc:	f043 0308 	orr.w	r3, r3, #8
 80095d0:	6313      	str	r3, [r2, #48]	; 0x30
 80095d2:	4b77      	ldr	r3, [pc, #476]	; (80097b0 <MX_GPIO_Init+0x2d4>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	f003 0308 	and.w	r3, r3, #8
 80095da:	603b      	str	r3, [r7, #0]
 80095dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PAN4_VGY_GPIO_Port, PAN4_VGY_Pin, GPIO_PIN_RESET);
 80095de:	2200      	movs	r2, #0
 80095e0:	2104      	movs	r1, #4
 80095e2:	4874      	ldr	r0, [pc, #464]	; (80097b4 <MX_GPIO_Init+0x2d8>)
 80095e4:	f7fa ff5a 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin, GPIO_PIN_SET);
 80095e8:	2201      	movs	r2, #1
 80095ea:	f242 0130 	movw	r1, #8240	; 0x2030
 80095ee:	4872      	ldr	r0, [pc, #456]	; (80097b8 <MX_GPIO_Init+0x2dc>)
 80095f0:	f7fa ff54 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 80095f4:	2201      	movs	r2, #1
 80095f6:	f640 61ff 	movw	r1, #3839	; 0xeff
 80095fa:	4870      	ldr	r0, [pc, #448]	; (80097bc <MX_GPIO_Init+0x2e0>)
 80095fc:	f7fa ff4e 	bl	800449c <HAL_GPIO_WritePin>
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SBAND_CS_GPIO_Port, SBAND_CS_Pin, GPIO_PIN_RESET);
 8009600:	2200      	movs	r2, #0
 8009602:	2140      	movs	r1, #64	; 0x40
 8009604:	486e      	ldr	r0, [pc, #440]	; (80097c0 <MX_GPIO_Init+0x2e4>)
 8009606:	f7fa ff49 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 800960a:	2200      	movs	r2, #0
 800960c:	f24e 217c 	movw	r1, #57980	; 0xe27c
 8009610:	486c      	ldr	r0, [pc, #432]	; (80097c4 <MX_GPIO_Init+0x2e8>)
 8009612:	f7fa ff43 	bl	800449c <HAL_GPIO_WritePin>
  // Turn-off the second MAG sensor due lack of I2C arbitration MAG1/MAG2
  HAL_GPIO_WritePin(GPIOH, MAG1_EN_Pin|MAG2_EN_Pin, GPIO_PIN_SET);
#endif

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8009616:	2201      	movs	r2, #1
 8009618:	2110      	movs	r1, #16
 800961a:	486b      	ldr	r0, [pc, #428]	; (80097c8 <MX_GPIO_Init+0x2ec>)
 800961c:	f7fa ff3e 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8009620:	2200      	movs	r2, #0
 8009622:	21e6      	movs	r1, #230	; 0xe6
 8009624:	4869      	ldr	r0, [pc, #420]	; (80097cc <MX_GPIO_Init+0x2f0>)
 8009626:	f7fa ff39 	bl	800449c <HAL_GPIO_WritePin>
                          |PAN3_VGY_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 800962a:	2200      	movs	r2, #0
 800962c:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8009630:	4867      	ldr	r0, [pc, #412]	; (80097d0 <MX_GPIO_Init+0x2f4>)
 8009632:	f7fa ff33 	bl	800449c <HAL_GPIO_WritePin>
                          |OBC_OUT2_Pin|OBC_OUT1_Pin, GPIO_PIN_RESET);

  /* Camera power supply disable by default */
  HAL_GPIO_WritePin(GPIOG, OBC_OUT1_Pin, GPIO_PIN_RESET);
 8009636:	2200      	movs	r2, #0
 8009638:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800963c:	4864      	ldr	r0, [pc, #400]	; (80097d0 <MX_GPIO_Init+0x2f4>)
 800963e:	f7fa ff2d 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SD_EN_Pin|OBC_OUT4_Pin, GPIO_PIN_RESET);
 8009642:	2200      	movs	r2, #0
 8009644:	2148      	movs	r1, #72	; 0x48
 8009646:	4863      	ldr	r0, [pc, #396]	; (80097d4 <MX_GPIO_Init+0x2f8>)
 8009648:	f7fa ff28 	bl	800449c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PAN4_VGY_Pin */
  GPIO_InitStruct.Pin = PAN4_VGY_Pin;
 800964c:	2304      	movs	r3, #4
 800964e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009650:	2311      	movs	r3, #17
 8009652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009654:	2300      	movs	r3, #0
 8009656:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009658:	2300      	movs	r3, #0
 800965a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PAN4_VGY_GPIO_Port, &GPIO_InitStruct);
 800965c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009660:	4619      	mov	r1, r3
 8009662:	4854      	ldr	r0, [pc, #336]	; (80097b4 <MX_GPIO_Init+0x2d8>)
 8009664:	f7fa fc62 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_IRQ_Pin */
  GPIO_InitStruct.Pin = M2_IRQ_Pin;
 8009668:	2340      	movs	r3, #64	; 0x40
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800966c:	4b5a      	ldr	r3, [pc, #360]	; (80097d8 <MX_GPIO_Init+0x2fc>)
 800966e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009670:	2300      	movs	r3, #0
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009678:	4619      	mov	r1, r3
 800967a:	484e      	ldr	r0, [pc, #312]	; (80097b4 <MX_GPIO_Init+0x2d8>)
 800967c:	f7fa fc56 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_IRQ_Pin */
  GPIO_InitStruct.Pin = M1_IRQ_Pin;
 8009680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009686:	4b54      	ldr	r3, [pc, #336]	; (80097d8 <MX_GPIO_Init+0x2fc>)
 8009688:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968a:	2300      	movs	r3, #0
 800968c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_IRQ_GPIO_Port, &GPIO_InitStruct);
 800968e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009692:	4619      	mov	r1, r3
 8009694:	4849      	ldr	r0, [pc, #292]	; (80097bc <MX_GPIO_Init+0x2e0>)
 8009696:	f7fa fc49 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS2_Pin LED_G_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = PAN5_CS2_Pin|LED_G_Pin|LED_Y_Pin;
 800969a:	f242 0330 	movw	r3, #8240	; 0x2030
 800969e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096a0:	2301      	movs	r3, #1
 80096a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096a8:	2300      	movs	r3, #0
 80096aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096b0:	4619      	mov	r1, r3
 80096b2:	4841      	ldr	r0, [pc, #260]	; (80097b8 <MX_GPIO_Init+0x2dc>)
 80096b4:	f7fa fc3a 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_CS1_Pin PAN6_CS2_Pin PAN6_CS1_Pin PAN1_CS2_Pin
                           PAN1_CS1_Pin PAN2_CS2_Pin PAN2_CS1_Pin PAN3_CS2_Pin
                           PAN3_CS1_Pin PAN4_CS2_Pin PAN4_CS1_Pin */
  GPIO_InitStruct.Pin = PAN5_CS1_Pin|PAN6_CS2_Pin|PAN6_CS1_Pin|PAN1_CS2_Pin
 80096b8:	f640 63ff 	movw	r3, #3839	; 0xeff
 80096bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN1_CS1_Pin|PAN2_CS2_Pin|PAN2_CS1_Pin|PAN3_CS2_Pin
                          |PAN3_CS1_Pin|PAN4_CS2_Pin|PAN4_CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096be:	2301      	movs	r3, #1
 80096c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096c2:	2300      	movs	r3, #0
 80096c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096c6:	2300      	movs	r3, #0
 80096c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80096ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096ce:	4619      	mov	r1, r3
 80096d0:	483a      	ldr	r0, [pc, #232]	; (80097bc <MX_GPIO_Init+0x2e0>)
 80096d2:	f7fa fc2b 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_CS_Pin */
  GPIO_InitStruct.Pin = SBAND_CS_Pin;
 80096d6:	2340      	movs	r3, #64	; 0x40
 80096d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096da:	2301      	movs	r3, #1
 80096dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096e2:	2300      	movs	r3, #0
 80096e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SBAND_CS_GPIO_Port, &GPIO_InitStruct);
 80096e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096ea:	4619      	mov	r1, r3
 80096ec:	4834      	ldr	r0, [pc, #208]	; (80097c0 <MX_GPIO_Init+0x2e4>)
 80096ee:	f7fa fc1d 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SBAND_IRQ_Pin */
  GPIO_InitStruct.Pin = SBAND_IRQ_Pin;
 80096f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80096f8:	4b37      	ldr	r3, [pc, #220]	; (80097d8 <MX_GPIO_Init+0x2fc>)
 80096fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096fc:	2300      	movs	r3, #0
 80096fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SBAND_IRQ_GPIO_Port, &GPIO_InitStruct);
 8009700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009704:	4619      	mov	r1, r3
 8009706:	482e      	ldr	r0, [pc, #184]	; (80097c0 <MX_GPIO_Init+0x2e4>)
 8009708:	f7fa fc10 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_DIR1_Pin PAN5_DIR2_Pin PAN6_DIR1_Pin PAN6_DIR2_Pin
                           ACC1_EN_Pin ACC2_EN_Pin MAG1_EN_Pin MAG2_EN_Pin
                           PAN4_DIR2_Pin */
  GPIO_InitStruct.Pin = PAN5_DIR1_Pin|PAN5_DIR2_Pin|PAN6_DIR1_Pin|PAN6_DIR2_Pin
 800970c:	f24e 033c 	movw	r3, #57404	; 0xe03c
 8009710:	627b      	str	r3, [r7, #36]	; 0x24
                          |MAG1_EN_Pin|MAG2_EN_Pin
                          |PAN4_DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009712:	2301      	movs	r3, #1
 8009714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009716:	2300      	movs	r3, #0
 8009718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800971a:	2300      	movs	r3, #0
 800971c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800971e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009722:	4619      	mov	r1, r3
 8009724:	4827      	ldr	r0, [pc, #156]	; (80097c4 <MX_GPIO_Init+0x2e8>)
 8009726:	f7fa fc01 	bl	8003f2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ACC1_EN_Pin|ACC2_EN_Pin;
 800972a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800972e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009730:	2311      	movs	r3, #17
 8009732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009734:	2300      	movs	r3, #0
 8009736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009738:	2300      	movs	r3, #0
 800973a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800973c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009740:	4619      	mov	r1, r3
 8009742:	4820      	ldr	r0, [pc, #128]	; (80097c4 <MX_GPIO_Init+0x2e8>)
 8009744:	f7fa fbf2 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8009748:	2310      	movs	r3, #16
 800974a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800974c:	2301      	movs	r3, #1
 800974e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009750:	2300      	movs	r3, #0
 8009752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009754:	2300      	movs	r3, #0
 8009756:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8009758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800975c:	4619      	mov	r1, r3
 800975e:	481a      	ldr	r0, [pc, #104]	; (80097c8 <MX_GPIO_Init+0x2ec>)
 8009760:	f7fa fbe4 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAN5_VGY_Pin PAN6_VGY_Pin PAN1_VGY_Pin PAN2_VGY_Pin
                           PAN3_VGY_Pin */
  GPIO_InitStruct.Pin = PAN5_VGY_Pin|PAN6_VGY_Pin|PAN1_VGY_Pin|PAN2_VGY_Pin
 8009764:	23e6      	movs	r3, #230	; 0xe6
 8009766:	627b      	str	r3, [r7, #36]	; 0x24
                          |PAN3_VGY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009768:	2311      	movs	r3, #17
 800976a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800976c:	2300      	movs	r3, #0
 800976e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009770:	2300      	movs	r3, #0
 8009772:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009778:	4619      	mov	r1, r3
 800977a:	4814      	ldr	r0, [pc, #80]	; (80097cc <MX_GPIO_Init+0x2f0>)
 800977c:	f7fa fbd6 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : OBC_OUT5_Pin PAN4_DIR1_Pin FLASH_NCS_Pin OBC_OUT3_Pin
                           OBC_OUT2_Pin OBC_OUT1_Pin */
  GPIO_InitStruct.Pin = OBC_OUT5_Pin|PAN4_DIR1_Pin|FLASH_NCS_Pin|OBC_OUT3_Pin
 8009780:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8009784:	627b      	str	r3, [r7, #36]	; 0x24
                          |OBC_OUT2_Pin|OBC_OUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009786:	2301      	movs	r3, #1
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800978a:	2300      	movs	r3, #0
 800978c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800978e:	2300      	movs	r3, #0
 8009790:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009796:	4619      	mov	r1, r3
 8009798:	480d      	ldr	r0, [pc, #52]	; (80097d0 <MX_GPIO_Init+0x2f4>)
 800979a:	f7fa fbc7 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_EN_Pin OBC_OUT4_Pin */
  GPIO_InitStruct.Pin = SD_EN_Pin|OBC_OUT4_Pin;
 800979e:	2348      	movs	r3, #72	; 0x48
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097a2:	2301      	movs	r3, #1
 80097a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097aa:	2300      	movs	r3, #0
 80097ac:	e016      	b.n	80097dc <MX_GPIO_Init+0x300>
 80097ae:	bf00      	nop
 80097b0:	40023800 	.word	0x40023800
 80097b4:	40021000 	.word	0x40021000
 80097b8:	40020800 	.word	0x40020800
 80097bc:	40022000 	.word	0x40022000
 80097c0:	40021400 	.word	0x40021400
 80097c4:	40021c00 	.word	0x40021c00
 80097c8:	40020000 	.word	0x40020000
 80097cc:	40020400 	.word	0x40020400
 80097d0:	40021800 	.word	0x40021800
 80097d4:	40020c00 	.word	0x40020c00
 80097d8:	10110000 	.word	0x10110000
 80097dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80097de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097e2:	4619      	mov	r1, r3
 80097e4:	4809      	ldr	r0, [pc, #36]	; (800980c <MX_GPIO_Init+0x330>)
 80097e6:	f7fa fba1 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 80097ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097f0:	2300      	movs	r3, #0
 80097f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 80097f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097fc:	4619      	mov	r1, r3
 80097fe:	4804      	ldr	r0, [pc, #16]	; (8009810 <MX_GPIO_Init+0x334>)
 8009800:	f7fa fb94 	bl	8003f2c <HAL_GPIO_Init>

}
 8009804:	bf00      	nop
 8009806:	3738      	adds	r7, #56	; 0x38
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	40020c00 	.word	0x40020c00
 8009810:	40021800 	.word	0x40021800

08009814 <MX_I2C1_Init>:

}

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8009818:	4b12      	ldr	r3, [pc, #72]	; (8009864 <MX_I2C1_Init+0x50>)
 800981a:	4a13      	ldr	r2, [pc, #76]	; (8009868 <MX_I2C1_Init+0x54>)
 800981c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800981e:	4b11      	ldr	r3, [pc, #68]	; (8009864 <MX_I2C1_Init+0x50>)
 8009820:	4a12      	ldr	r2, [pc, #72]	; (800986c <MX_I2C1_Init+0x58>)
 8009822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009824:	4b0f      	ldr	r3, [pc, #60]	; (8009864 <MX_I2C1_Init+0x50>)
 8009826:	2200      	movs	r2, #0
 8009828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800982a:	4b0e      	ldr	r3, [pc, #56]	; (8009864 <MX_I2C1_Init+0x50>)
 800982c:	2200      	movs	r2, #0
 800982e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009830:	4b0c      	ldr	r3, [pc, #48]	; (8009864 <MX_I2C1_Init+0x50>)
 8009832:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009836:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009838:	4b0a      	ldr	r3, [pc, #40]	; (8009864 <MX_I2C1_Init+0x50>)
 800983a:	2200      	movs	r2, #0
 800983c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800983e:	4b09      	ldr	r3, [pc, #36]	; (8009864 <MX_I2C1_Init+0x50>)
 8009840:	2200      	movs	r2, #0
 8009842:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009844:	4b07      	ldr	r3, [pc, #28]	; (8009864 <MX_I2C1_Init+0x50>)
 8009846:	2200      	movs	r2, #0
 8009848:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800984a:	4b06      	ldr	r3, [pc, #24]	; (8009864 <MX_I2C1_Init+0x50>)
 800984c:	2200      	movs	r2, #0
 800984e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009850:	4804      	ldr	r0, [pc, #16]	; (8009864 <MX_I2C1_Init+0x50>)
 8009852:	f7fa fe3d 	bl	80044d0 <HAL_I2C_Init>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800985c:	f7f9 ffe2 	bl	8003824 <Error_Handler>
  }

}
 8009860:	bf00      	nop
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20007e10 	.word	0x20007e10
 8009868:	40005400 	.word	0x40005400
 800986c:	00061a80 	.word	0x00061a80

08009870 <MX_SDIO_SD_Init>:

}

/* SDIO init function */
void MX_SDIO_SD_Init(void)
{
 8009870:	b480      	push	{r7}
 8009872:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8009874:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <MX_SDIO_SD_Init+0x38>)
 8009876:	4a0d      	ldr	r2, [pc, #52]	; (80098ac <MX_SDIO_SD_Init+0x3c>)
 8009878:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800987a:	4b0b      	ldr	r3, [pc, #44]	; (80098a8 <MX_SDIO_SD_Init+0x38>)
 800987c:	2200      	movs	r2, #0
 800987e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8009880:	4b09      	ldr	r3, [pc, #36]	; (80098a8 <MX_SDIO_SD_Init+0x38>)
 8009882:	2200      	movs	r2, #0
 8009884:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009886:	4b08      	ldr	r3, [pc, #32]	; (80098a8 <MX_SDIO_SD_Init+0x38>)
 8009888:	2200      	movs	r2, #0
 800988a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800988c:	4b06      	ldr	r3, [pc, #24]	; (80098a8 <MX_SDIO_SD_Init+0x38>)
 800988e:	2200      	movs	r2, #0
 8009890:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009892:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <MX_SDIO_SD_Init+0x38>)
 8009894:	2200      	movs	r2, #0
 8009896:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = SDIO_TRANSFER_CLK_DIV;
 8009898:	4b03      	ldr	r3, [pc, #12]	; (80098a8 <MX_SDIO_SD_Init+0x38>)
 800989a:	2203      	movs	r2, #3
 800989c:	619a      	str	r2, [r3, #24]

}
 800989e:	bf00      	nop
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	200080d0 	.word	0x200080d0
 80098ac:	40012c00 	.word	0x40012c00

080098b0 <MX_UART4_Init>:

}

/* UART4 init function */
void MX_UART4_Init(void)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 80098b4:	4b11      	ldr	r3, [pc, #68]	; (80098fc <MX_UART4_Init+0x4c>)
 80098b6:	4a12      	ldr	r2, [pc, #72]	; (8009900 <MX_UART4_Init+0x50>)
 80098b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80098ba:	4b10      	ldr	r3, [pc, #64]	; (80098fc <MX_UART4_Init+0x4c>)
 80098bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80098c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80098c2:	4b0e      	ldr	r3, [pc, #56]	; (80098fc <MX_UART4_Init+0x4c>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80098c8:	4b0c      	ldr	r3, [pc, #48]	; (80098fc <MX_UART4_Init+0x4c>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80098ce:	4b0b      	ldr	r3, [pc, #44]	; (80098fc <MX_UART4_Init+0x4c>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80098d4:	4b09      	ldr	r3, [pc, #36]	; (80098fc <MX_UART4_Init+0x4c>)
 80098d6:	220c      	movs	r2, #12
 80098d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098da:	4b08      	ldr	r3, [pc, #32]	; (80098fc <MX_UART4_Init+0x4c>)
 80098dc:	2200      	movs	r2, #0
 80098de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80098e0:	4b06      	ldr	r3, [pc, #24]	; (80098fc <MX_UART4_Init+0x4c>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80098e6:	4805      	ldr	r0, [pc, #20]	; (80098fc <MX_UART4_Init+0x4c>)
 80098e8:	f7fe f9e6 	bl	8007cb8 <HAL_UART_Init>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80098f2:	f7f9 ff97 	bl	8003824 <Error_Handler>
  }

}
 80098f6:	bf00      	nop
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20008194 	.word	0x20008194
 8009900:	40004c00 	.word	0x40004c00

08009904 <MX_USART1_UART_Init>:

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8009908:	4b11      	ldr	r3, [pc, #68]	; (8009950 <MX_USART1_UART_Init+0x4c>)
 800990a:	4a12      	ldr	r2, [pc, #72]	; (8009954 <MX_USART1_UART_Init+0x50>)
 800990c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800990e:	4b10      	ldr	r3, [pc, #64]	; (8009950 <MX_USART1_UART_Init+0x4c>)
 8009910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009916:	4b0e      	ldr	r3, [pc, #56]	; (8009950 <MX_USART1_UART_Init+0x4c>)
 8009918:	2200      	movs	r2, #0
 800991a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800991c:	4b0c      	ldr	r3, [pc, #48]	; (8009950 <MX_USART1_UART_Init+0x4c>)
 800991e:	2200      	movs	r2, #0
 8009920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009922:	4b0b      	ldr	r3, [pc, #44]	; (8009950 <MX_USART1_UART_Init+0x4c>)
 8009924:	2200      	movs	r2, #0
 8009926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009928:	4b09      	ldr	r3, [pc, #36]	; (8009950 <MX_USART1_UART_Init+0x4c>)
 800992a:	220c      	movs	r2, #12
 800992c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800992e:	4b08      	ldr	r3, [pc, #32]	; (8009950 <MX_USART1_UART_Init+0x4c>)
 8009930:	2200      	movs	r2, #0
 8009932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009934:	4b06      	ldr	r3, [pc, #24]	; (8009950 <MX_USART1_UART_Init+0x4c>)
 8009936:	2200      	movs	r2, #0
 8009938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800993a:	4805      	ldr	r0, [pc, #20]	; (8009950 <MX_USART1_UART_Init+0x4c>)
 800993c:	f7fe f9bc 	bl	8007cb8 <HAL_UART_Init>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009946:	f7f9 ff6d 	bl	8003824 <Error_Handler>
  }

}
 800994a:	bf00      	nop
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	20007ff8 	.word	0x20007ff8
 8009954:	40011000 	.word	0x40011000

08009958 <MX_USART6_UART_Init>:

/* USART6 init function */
void MX_USART6_UART_Init(void)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800995c:	4b15      	ldr	r3, [pc, #84]	; (80099b4 <MX_USART6_UART_Init+0x5c>)
 800995e:	4a16      	ldr	r2, [pc, #88]	; (80099b8 <MX_USART6_UART_Init+0x60>)
 8009960:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8009962:	4b14      	ldr	r3, [pc, #80]	; (80099b4 <MX_USART6_UART_Init+0x5c>)
 8009964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009968:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800996a:	4b12      	ldr	r3, [pc, #72]	; (80099b4 <MX_USART6_UART_Init+0x5c>)
 800996c:	2200      	movs	r2, #0
 800996e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009970:	4b10      	ldr	r3, [pc, #64]	; (80099b4 <MX_USART6_UART_Init+0x5c>)
 8009972:	2200      	movs	r2, #0
 8009974:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8009976:	4b0f      	ldr	r3, [pc, #60]	; (80099b4 <MX_USART6_UART_Init+0x5c>)
 8009978:	2200      	movs	r2, #0
 800997a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800997c:	4b0d      	ldr	r3, [pc, #52]	; (80099b4 <MX_USART6_UART_Init+0x5c>)
 800997e:	220c      	movs	r2, #12
 8009980:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009982:	4b0c      	ldr	r3, [pc, #48]	; (80099b4 <MX_USART6_UART_Init+0x5c>)
 8009984:	2200      	movs	r2, #0
 8009986:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009988:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <MX_USART6_UART_Init+0x5c>)
 800998a:	2200      	movs	r2, #0
 800998c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800998e:	4809      	ldr	r0, [pc, #36]	; (80099b4 <MX_USART6_UART_Init+0x5c>)
 8009990:	f7fe f992 	bl	8007cb8 <HAL_UART_Init>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800999a:	f7f9 ff43 	bl	8003824 <Error_Handler>
  }
  //Enable interrupts
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800999e:	2200      	movs	r2, #0
 80099a0:	2100      	movs	r1, #0
 80099a2:	2047      	movs	r0, #71	; 0x47
 80099a4:	f7fa f8bd 	bl	8003b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80099a8:	2047      	movs	r0, #71	; 0x47
 80099aa:	f7fa f8d6 	bl	8003b5a <HAL_NVIC_EnableIRQ>
}
 80099ae:	bf00      	nop
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20008154 	.word	0x20008154
 80099b8:	40011400 	.word	0x40011400

080099bc <MX_WWDG_Init>:

}

/* WWDG init function */
void MX_WWDG_Init(void)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	af00      	add	r7, sp, #0

  hwwdg.Instance = WWDG;
 80099c0:	4b0d      	ldr	r3, [pc, #52]	; (80099f8 <MX_WWDG_Init+0x3c>)
 80099c2:	4a0e      	ldr	r2, [pc, #56]	; (80099fc <MX_WWDG_Init+0x40>)
 80099c4:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 80099c6:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <MX_WWDG_Init+0x3c>)
 80099c8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80099cc:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 80099ce:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <MX_WWDG_Init+0x3c>)
 80099d0:	2240      	movs	r2, #64	; 0x40
 80099d2:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 80099d4:	4b08      	ldr	r3, [pc, #32]	; (80099f8 <MX_WWDG_Init+0x3c>)
 80099d6:	2240      	movs	r2, #64	; 0x40
 80099d8:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_ENABLE;
 80099da:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <MX_WWDG_Init+0x3c>)
 80099dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099e0:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 80099e2:	4805      	ldr	r0, [pc, #20]	; (80099f8 <MX_WWDG_Init+0x3c>)
 80099e4:	f7fe ff48 	bl	8008878 <HAL_WWDG_Init>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <MX_WWDG_Init+0x36>
  {
    Error_Handler();
 80099ee:	f7f9 ff19 	bl	8003824 <Error_Handler>
  }

}
 80099f2:	bf00      	nop
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	200080bc 	.word	0x200080bc
 80099fc:	40002c00 	.word	0x40002c00

08009a00 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009a0a:	f000 f89d 	bl	8009b48 <BSP_SD_IsDetected>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d001      	beq.n	8009a18 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e012      	b.n	8009a3e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009a18:	480b      	ldr	r0, [pc, #44]	; (8009a48 <BSP_SD_Init+0x48>)
 8009a1a:	f7fc fb2d 	bl	8006078 <HAL_SD_Init>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	71fb      	strb	r3, [r7, #7]
#ifdef BUS_4BITS
  /* Configure SD Bus width */
  if (sd_state == MSD_OK)
 8009a22:	79fb      	ldrb	r3, [r7, #7]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d109      	bne.n	8009a3c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a2c:	4806      	ldr	r0, [pc, #24]	; (8009a48 <BSP_SD_Init+0x48>)
 8009a2e:	f7fd faa6 	bl	8006f7e <HAL_SD_ConfigWideBusOperation>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif
  return sd_state;
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	200080d0 	.word	0x200080d0

08009a4c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	60b9      	str	r1, [r7, #8]
 8009a56:	607a      	str	r2, [r7, #4]
 8009a58:	603b      	str	r3, [r7, #0]
  uint8_t sd_state;

  __HAL_LOCK(&hsd);
 8009a5a:	4b0d      	ldr	r3, [pc, #52]	; (8009a90 <BSP_SD_ReadBlocks+0x44>)
 8009a5c:	7f1b      	ldrb	r3, [r3, #28]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d101      	bne.n	8009a66 <BSP_SD_ReadBlocks+0x1a>
 8009a62:	2302      	movs	r3, #2
 8009a64:	e010      	b.n	8009a88 <BSP_SD_ReadBlocks+0x3c>
 8009a66:	4b0a      	ldr	r3, [pc, #40]	; (8009a90 <BSP_SD_ReadBlocks+0x44>)
 8009a68:	2201      	movs	r2, #1
 8009a6a:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout);
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	68f9      	ldr	r1, [r7, #12]
 8009a76:	4806      	ldr	r0, [pc, #24]	; (8009a90 <BSP_SD_ReadBlocks+0x44>)
 8009a78:	f7fc fb86 	bl	8006188 <HAL_SD_ReadBlocks>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8009a80:	4b03      	ldr	r3, [pc, #12]	; (8009a90 <BSP_SD_ReadBlocks+0x44>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	771a      	strb	r2, [r3, #28]
  
  return sd_state;  
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	200080d0 	.word	0x200080d0

08009a94 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	75fb      	strb	r3, [r7, #23]

  __HAL_LOCK(&hsd);
 8009aa6:	4b0d      	ldr	r3, [pc, #52]	; (8009adc <BSP_SD_WriteBlocks+0x48>)
 8009aa8:	7f1b      	ldrb	r3, [r3, #28]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d101      	bne.n	8009ab2 <BSP_SD_WriteBlocks+0x1e>
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e010      	b.n	8009ad4 <BSP_SD_WriteBlocks+0x40>
 8009ab2:	4b0a      	ldr	r3, [pc, #40]	; (8009adc <BSP_SD_WriteBlocks+0x48>)
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	771a      	strb	r2, [r3, #28]
  sd_state = HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	68f9      	ldr	r1, [r7, #12]
 8009ac2:	4806      	ldr	r0, [pc, #24]	; (8009adc <BSP_SD_WriteBlocks+0x48>)
 8009ac4:	f7fc fcf7 	bl	80064b6 <HAL_SD_WriteBlocks>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	75fb      	strb	r3, [r7, #23]
  __HAL_UNLOCK(&hsd);
 8009acc:	4b03      	ldr	r3, [pc, #12]	; (8009adc <BSP_SD_WriteBlocks+0x48>)
 8009ace:	2200      	movs	r2, #0
 8009ad0:	771a      	strb	r2, [r3, #28]

  return sd_state;  
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3718      	adds	r7, #24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	200080d0 	.word	0x200080d0

08009ae0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
  uint8_t sd_state;  

  __HAL_LOCK(&hsd);
 8009ae6:	4b0e      	ldr	r3, [pc, #56]	; (8009b20 <BSP_SD_GetCardState+0x40>)
 8009ae8:	7f1b      	ldrb	r3, [r3, #28]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d101      	bne.n	8009af2 <BSP_SD_GetCardState+0x12>
 8009aee:	2302      	movs	r3, #2
 8009af0:	e011      	b.n	8009b16 <BSP_SD_GetCardState+0x36>
 8009af2:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <BSP_SD_GetCardState+0x40>)
 8009af4:	2201      	movs	r2, #1
 8009af6:	771a      	strb	r2, [r3, #28]
  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER)
 8009af8:	4809      	ldr	r0, [pc, #36]	; (8009b20 <BSP_SD_GetCardState+0x40>)
 8009afa:	f7fd fabc 	bl	8007076 <HAL_SD_GetCardState>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d102      	bne.n	8009b0a <BSP_SD_GetCardState+0x2a>
    sd_state = HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	71fb      	strb	r3, [r7, #7]
 8009b08:	e001      	b.n	8009b0e <BSP_SD_GetCardState+0x2e>
  else
    sd_state = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	71fb      	strb	r3, [r7, #7]
  __HAL_UNLOCK(&hsd);
 8009b0e:	4b04      	ldr	r3, [pc, #16]	; (8009b20 <BSP_SD_GetCardState+0x40>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	771a      	strb	r2, [r3, #28]
  
  return sd_state;
 8009b14:	79fb      	ldrb	r3, [r7, #7]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	200080d0 	.word	0x200080d0

08009b24 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b2c:	b672      	cpsid	i
}
 8009b2e:	bf00      	nop
  /* Get SD card Information */
    __disable_irq();
    HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009b30:	6879      	ldr	r1, [r7, #4]
 8009b32:	4804      	ldr	r0, [pc, #16]	; (8009b44 <BSP_SD_GetCardInfo+0x20>)
 8009b34:	f7fd f9f7 	bl	8006f26 <HAL_SD_GetCardInfo>
  __ASM volatile ("cpsie i" : : : "memory");
 8009b38:	b662      	cpsie	i
}
 8009b3a:	bf00      	nop
    __enable_irq();
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	200080d0 	.word	0x200080d0

08009b48 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8009b52:	79fb      	ldrb	r3, [r7, #7]
 8009b54:	b2db      	uxtb	r3, r3
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
	...

08009b64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver((Diskio_drvTypeDef*)&SD_Driver, SD_Path);
 8009b68:	4904      	ldr	r1, [pc, #16]	; (8009b7c <MX_FATFS_Init+0x18>)
 8009b6a:	4805      	ldr	r0, [pc, #20]	; (8009b80 <MX_FATFS_Init+0x1c>)
 8009b6c:	f003 f8c6 	bl	800ccfc <FATFS_LinkDriver>
 8009b70:	4603      	mov	r3, r0
 8009b72:	461a      	mov	r2, r3
 8009b74:	4b03      	ldr	r3, [pc, #12]	; (8009b84 <MX_FATFS_Init+0x20>)
 8009b76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009b78:	bf00      	nop
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20008230 	.word	0x20008230
 8009b80:	08017e98 	.word	0x08017e98
 8009b84:	2000822c 	.word	0x2000822c

08009b88 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009b8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009ba2:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <SD_initialize+0x38>)
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8009ba8:	f7ff ff2a 	bl	8009a00 <BSP_SD_Init>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d107      	bne.n	8009bc2 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009bb2:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <SD_initialize+0x38>)
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	f023 0301 	bic.w	r3, r3, #1
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	4b04      	ldr	r3, [pc, #16]	; (8009bd0 <SD_initialize+0x38>)
 8009bc0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009bc2:	4b03      	ldr	r3, [pc, #12]	; (8009bd0 <SD_initialize+0x38>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	b2db      	uxtb	r3, r3
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	20000010 	.word	0x20000010

08009bd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	71fb      	strb	r3, [r7, #7]
  
  if(BSP_SD_GetCardState() != SD_TRANSFER_BUSY)
 8009bde:	f7ff ff7f 	bl	8009ae0 <BSP_SD_GetCardState>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d008      	beq.n	8009bfa <SD_status+0x26>
    Stat &= ~STA_BUSY;
 8009be8:	4b0b      	ldr	r3, [pc, #44]	; (8009c18 <SD_status+0x44>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	f023 0308 	bic.w	r3, r3, #8
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	4b08      	ldr	r3, [pc, #32]	; (8009c18 <SD_status+0x44>)
 8009bf6:	701a      	strb	r2, [r3, #0]
 8009bf8:	e007      	b.n	8009c0a <SD_status+0x36>
  else
    Stat |= STA_BUSY;
 8009bfa:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <SD_status+0x44>)
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	f043 0308 	orr.w	r3, r3, #8
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	4b04      	ldr	r3, [pc, #16]	; (8009c18 <SD_status+0x44>)
 8009c08:	701a      	strb	r2, [r3, #0]
  
  return Stat;
 8009c0a:	4b03      	ldr	r3, [pc, #12]	; (8009c18 <SD_status+0x44>)
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	b2db      	uxtb	r3, r3
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000010 	.word	0x20000010

08009c1c <SD_read>:
  */
    
#define MMC_RDWR_TRIES       20
#define MMC_STATUS_TRIES     500
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60b9      	str	r1, [r7, #8]
 8009c24:	607a      	str	r2, [r7, #4]
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 8009c2c:	2314      	movs	r3, #20
 8009c2e:	617b      	str	r3, [r7, #20]

  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009c30:	e009      	b.n	8009c46 <SD_read+0x2a>
  {
    if (timeout-- == 0)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	1e5a      	subs	r2, r3, #1
 8009c36:	617a      	str	r2, [r7, #20]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <SD_read+0x24>
    {
      return RES_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e020      	b.n	8009c82 <SD_read+0x66>
    }
    osDelay(1);
 8009c40:	2001      	movs	r0, #1
 8009c42:	f003 f91c 	bl	800ce7e <osDelay>
  while (BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t) (sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009c46:	f241 3388 	movw	r3, #5000	; 0x1388
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	68b8      	ldr	r0, [r7, #8]
 8009c50:	f7ff fefc 	bl	8009a4c <BSP_SD_ReadBlocks>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1eb      	bne.n	8009c32 <SD_read+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 8009c5a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009c5e:	617b      	str	r3, [r7, #20]
  while (BSP_SD_GetCardState() != HAL_OK)
 8009c60:	e009      	b.n	8009c76 <SD_read+0x5a>
  {
    if (timeout-- == 0)
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	1e5a      	subs	r2, r3, #1
 8009c66:	617a      	str	r2, [r7, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <SD_read+0x54>
    {
      return RES_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	e008      	b.n	8009c82 <SD_read+0x66>
    }
    osDelay(1);
 8009c70:	2001      	movs	r0, #1
 8009c72:	f003 f904 	bl	800ce7e <osDelay>
  while (BSP_SD_GetCardState() != HAL_OK)
 8009c76:	f7ff ff33 	bl	8009ae0 <BSP_SD_GetCardState>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1f0      	bne.n	8009c62 <SD_read+0x46>
  }
  return RES_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b086      	sub	sp, #24
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	603b      	str	r3, [r7, #0]
 8009c96:	4603      	mov	r3, r0
 8009c98:	73fb      	strb	r3, [r7, #15]
  uint32_t timeout = MMC_RDWR_TRIES;
 8009c9a:	2314      	movs	r3, #20
 8009c9c:	617b      	str	r3, [r7, #20]

  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009c9e:	e009      	b.n	8009cb4 <SD_write+0x2a>
  {
    if (timeout-- == 0)
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	1e5a      	subs	r2, r3, #1
 8009ca4:	617a      	str	r2, [r7, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <SD_write+0x24>
    {
      return RES_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e020      	b.n	8009cf0 <SD_write+0x66>
    }
    osDelay(1);
 8009cae:	2001      	movs	r0, #1
 8009cb0:	f003 f8e5 	bl	800ce7e <osDelay>
  while (BSP_SD_WriteBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_DATATIMEOUT) != HAL_OK)
 8009cb4:	f241 3388 	movw	r3, #5000	; 0x1388
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	6879      	ldr	r1, [r7, #4]
 8009cbc:	68b8      	ldr	r0, [r7, #8]
 8009cbe:	f7ff fee9 	bl	8009a94 <BSP_SD_WriteBlocks>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1eb      	bne.n	8009ca0 <SD_write+0x16>
  }
  timeout = MMC_STATUS_TRIES;
 8009cc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009ccc:	617b      	str	r3, [r7, #20]
  while(BSP_SD_GetCardState() != HAL_OK)
 8009cce:	e009      	b.n	8009ce4 <SD_write+0x5a>
  {
    if (timeout-- == 0)
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	1e5a      	subs	r2, r3, #1
 8009cd4:	617a      	str	r2, [r7, #20]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <SD_write+0x54>
    {
      return RES_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e008      	b.n	8009cf0 <SD_write+0x66>
    }
    osDelay(1);
 8009cde:	2001      	movs	r0, #1
 8009ce0:	f003 f8cd 	bl	800ce7e <osDelay>
  while(BSP_SD_GetCardState() != HAL_OK)
 8009ce4:	f7ff fefc 	bl	8009ae0 <BSP_SD_GetCardState>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1f0      	bne.n	8009cd0 <SD_write+0x46>
  }    
  return RES_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08c      	sub	sp, #48	; 0x30
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	603a      	str	r2, [r7, #0]
 8009d02:	71fb      	strb	r3, [r7, #7]
 8009d04:	460b      	mov	r3, r1
 8009d06:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) 
 8009d0e:	4b24      	ldr	r3, [pc, #144]	; (8009da0 <SD_ioctl+0xa8>)
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <SD_ioctl+0x28>
    return RES_NOTRDY;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e03b      	b.n	8009d98 <SD_ioctl+0xa0>
  
  switch (cmd)
 8009d20:	79bb      	ldrb	r3, [r7, #6]
 8009d22:	2b03      	cmp	r3, #3
 8009d24:	d833      	bhi.n	8009d8e <SD_ioctl+0x96>
 8009d26:	a201      	add	r2, pc, #4	; (adr r2, 8009d2c <SD_ioctl+0x34>)
 8009d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2c:	08009d3d 	.word	0x08009d3d
 8009d30:	08009d45 	.word	0x08009d45
 8009d34:	08009d5d 	.word	0x08009d5d
 8009d38:	08009d77 	.word	0x08009d77
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d42:	e027      	b.n	8009d94 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d44:	f107 030c 	add.w	r3, r7, #12
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7ff feeb 	bl	8009b24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d5a:	e01b      	b.n	8009d94 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d5c:	f107 030c 	add.w	r3, r7, #12
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff fedf 	bl	8009b24 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d74:	e00e      	b.n	8009d94 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009d76:	f107 030c 	add.w	r3, r7, #12
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7ff fed2 	bl	8009b24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8009d80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009d8c:	e002      	b.n	8009d94 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8009d8e:	2304      	movs	r3, #4
 8009d90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8009d94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3730      	adds	r7, #48	; 0x30
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	20000010 	.word	0x20000010

08009da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009da8:	2003      	movs	r0, #3
 8009daa:	f7f9 feaf 	bl	8003b0c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8009dae:	2200      	movs	r2, #0
 8009db0:	2100      	movs	r1, #0
 8009db2:	f06f 000b 	mvn.w	r0, #11
 8009db6:	f7f9 feb4 	bl	8003b22 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8009dba:	2200      	movs	r2, #0
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	f06f 000a 	mvn.w	r0, #10
 8009dc2:	f7f9 feae 	bl	8003b22 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	2100      	movs	r1, #0
 8009dca:	f06f 0009 	mvn.w	r0, #9
 8009dce:	f7f9 fea8 	bl	8003b22 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	f06f 0004 	mvn.w	r0, #4
 8009dda:	f7f9 fea2 	bl	8003b22 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8009dde:	2200      	movs	r2, #0
 8009de0:	2100      	movs	r1, #0
 8009de2:	f06f 0003 	mvn.w	r0, #3
 8009de6:	f7f9 fe9c 	bl	8003b22 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009dea:	2200      	movs	r2, #0
 8009dec:	210f      	movs	r1, #15
 8009dee:	f06f 0001 	mvn.w	r0, #1
 8009df2:	f7f9 fe96 	bl	8003b22 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8009df6:	2200      	movs	r2, #0
 8009df8:	210f      	movs	r1, #15
 8009dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dfe:	f7f9 fe90 	bl	8003b22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009e02:	bf00      	nop
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <HAL_I2C_MspInit>:
  /* USER CODE END CAN1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08a      	sub	sp, #40	; 0x28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a37      	ldr	r2, [pc, #220]	; (8009ef4 <HAL_I2C_MspInit+0xec>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d11f      	bne.n	8009e5a <HAL_I2C_MspInit+0x52>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SYS_SCL_Pin|SYS_SDA_Pin;
 8009e1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009e20:	2312      	movs	r3, #18
 8009e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009e24:	2301      	movs	r3, #1
 8009e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009e2c:	2304      	movs	r3, #4
 8009e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e30:	f107 0314 	add.w	r3, r7, #20
 8009e34:	4619      	mov	r1, r3
 8009e36:	4830      	ldr	r0, [pc, #192]	; (8009ef8 <HAL_I2C_MspInit+0xf0>)
 8009e38:	f7fa f878 	bl	8003f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	613b      	str	r3, [r7, #16]
 8009e40:	4b2e      	ldr	r3, [pc, #184]	; (8009efc <HAL_I2C_MspInit+0xf4>)
 8009e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e44:	4a2d      	ldr	r2, [pc, #180]	; (8009efc <HAL_I2C_MspInit+0xf4>)
 8009e46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8009e4c:	4b2b      	ldr	r3, [pc, #172]	; (8009efc <HAL_I2C_MspInit+0xf4>)
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e54:	613b      	str	r3, [r7, #16]
 8009e56:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8009e58:	e048      	b.n	8009eec <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C2)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a28      	ldr	r2, [pc, #160]	; (8009f00 <HAL_I2C_MspInit+0xf8>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d11f      	bne.n	8009ea4 <HAL_I2C_MspInit+0x9c>
    GPIO_InitStruct.Pin = SEN_SCL_Pin|SEN_SDA_Pin;
 8009e64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009e6a:	2312      	movs	r3, #18
 8009e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e72:	2303      	movs	r3, #3
 8009e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009e76:	2304      	movs	r3, #4
 8009e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e7a:	f107 0314 	add.w	r3, r7, #20
 8009e7e:	4619      	mov	r1, r3
 8009e80:	481d      	ldr	r0, [pc, #116]	; (8009ef8 <HAL_I2C_MspInit+0xf0>)
 8009e82:	f7fa f853 	bl	8003f2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009e86:	2300      	movs	r3, #0
 8009e88:	60fb      	str	r3, [r7, #12]
 8009e8a:	4b1c      	ldr	r3, [pc, #112]	; (8009efc <HAL_I2C_MspInit+0xf4>)
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	4a1b      	ldr	r2, [pc, #108]	; (8009efc <HAL_I2C_MspInit+0xf4>)
 8009e90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009e94:	6413      	str	r3, [r2, #64]	; 0x40
 8009e96:	4b19      	ldr	r3, [pc, #100]	; (8009efc <HAL_I2C_MspInit+0xf4>)
 8009e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e9e:	60fb      	str	r3, [r7, #12]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
}
 8009ea2:	e023      	b.n	8009eec <HAL_I2C_MspInit+0xe4>
  else if(hi2c->Instance==I2C3)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a16      	ldr	r2, [pc, #88]	; (8009f04 <HAL_I2C_MspInit+0xfc>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d11e      	bne.n	8009eec <HAL_I2C_MspInit+0xe4>
    GPIO_InitStruct.Pin = PAY_SCL_Pin|PAY_SDA_Pin;
 8009eae:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009eb4:	2312      	movs	r3, #18
 8009eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ebc:	2303      	movs	r3, #3
 8009ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009ec0:	2304      	movs	r3, #4
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009ec4:	f107 0314 	add.w	r3, r7, #20
 8009ec8:	4619      	mov	r1, r3
 8009eca:	480f      	ldr	r0, [pc, #60]	; (8009f08 <HAL_I2C_MspInit+0x100>)
 8009ecc:	f7fa f82e 	bl	8003f2c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60bb      	str	r3, [r7, #8]
 8009ed4:	4b09      	ldr	r3, [pc, #36]	; (8009efc <HAL_I2C_MspInit+0xf4>)
 8009ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed8:	4a08      	ldr	r2, [pc, #32]	; (8009efc <HAL_I2C_MspInit+0xf4>)
 8009eda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ede:	6413      	str	r3, [r2, #64]	; 0x40
 8009ee0:	4b06      	ldr	r3, [pc, #24]	; (8009efc <HAL_I2C_MspInit+0xf4>)
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ee8:	60bb      	str	r3, [r7, #8]
 8009eea:	68bb      	ldr	r3, [r7, #8]
}
 8009eec:	bf00      	nop
 8009eee:	3728      	adds	r7, #40	; 0x28
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	40005400 	.word	0x40005400
 8009ef8:	40020400 	.word	0x40020400
 8009efc:	40023800 	.word	0x40023800
 8009f00:	40005800 	.word	0x40005800
 8009f04:	40005c00 	.word	0x40005c00
 8009f08:	40021c00 	.word	0x40021c00

08009f0c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C1)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a19      	ldr	r2, [pc, #100]	; (8009f80 <HAL_I2C_MspDeInit+0x74>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d10b      	bne.n	8009f36 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009f1e:	4b19      	ldr	r3, [pc, #100]	; (8009f84 <HAL_I2C_MspDeInit+0x78>)
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	4a18      	ldr	r2, [pc, #96]	; (8009f84 <HAL_I2C_MspDeInit+0x78>)
 8009f24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f28:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, SYS_SCL_Pin|SYS_SDA_Pin);
 8009f2a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8009f2e:	4816      	ldr	r0, [pc, #88]	; (8009f88 <HAL_I2C_MspDeInit+0x7c>)
 8009f30:	f7fa f9a8 	bl	8004284 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8009f34:	e020      	b.n	8009f78 <HAL_I2C_MspDeInit+0x6c>
  else if(hi2c->Instance==I2C2)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a14      	ldr	r2, [pc, #80]	; (8009f8c <HAL_I2C_MspDeInit+0x80>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d10b      	bne.n	8009f58 <HAL_I2C_MspDeInit+0x4c>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8009f40:	4b10      	ldr	r3, [pc, #64]	; (8009f84 <HAL_I2C_MspDeInit+0x78>)
 8009f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f44:	4a0f      	ldr	r2, [pc, #60]	; (8009f84 <HAL_I2C_MspDeInit+0x78>)
 8009f46:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009f4a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, SEN_SCL_Pin|SEN_SDA_Pin);
 8009f4c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8009f50:	480d      	ldr	r0, [pc, #52]	; (8009f88 <HAL_I2C_MspDeInit+0x7c>)
 8009f52:	f7fa f997 	bl	8004284 <HAL_GPIO_DeInit>
}
 8009f56:	e00f      	b.n	8009f78 <HAL_I2C_MspDeInit+0x6c>
  else if(hi2c->Instance==I2C3)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a0c      	ldr	r2, [pc, #48]	; (8009f90 <HAL_I2C_MspDeInit+0x84>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d10a      	bne.n	8009f78 <HAL_I2C_MspDeInit+0x6c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8009f62:	4b08      	ldr	r3, [pc, #32]	; (8009f84 <HAL_I2C_MspDeInit+0x78>)
 8009f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f66:	4a07      	ldr	r2, [pc, #28]	; (8009f84 <HAL_I2C_MspDeInit+0x78>)
 8009f68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009f6c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, PAY_SCL_Pin|PAY_SDA_Pin);
 8009f6e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009f72:	4808      	ldr	r0, [pc, #32]	; (8009f94 <HAL_I2C_MspDeInit+0x88>)
 8009f74:	f7fa f986 	bl	8004284 <HAL_GPIO_DeInit>
}
 8009f78:	bf00      	nop
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	40005400 	.word	0x40005400
 8009f84:	40023800 	.word	0x40023800
 8009f88:	40020400 	.word	0x40020400
 8009f8c:	40005800 	.word	0x40005800
 8009f90:	40005c00 	.word	0x40005c00
 8009f94:	40021c00 	.word	0x40021c00

08009f98 <HAL_SD_MspInit>:
  /* USER CODE END RTC_MspDeInit 1 */

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b088      	sub	sp, #32
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a1e      	ldr	r2, [pc, #120]	; (800a020 <HAL_SD_MspInit+0x88>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d136      	bne.n	800a018 <HAL_SD_MspInit+0x80>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8009faa:	2300      	movs	r3, #0
 8009fac:	60bb      	str	r3, [r7, #8]
 8009fae:	4b1d      	ldr	r3, [pc, #116]	; (800a024 <HAL_SD_MspInit+0x8c>)
 8009fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb2:	4a1c      	ldr	r2, [pc, #112]	; (800a024 <HAL_SD_MspInit+0x8c>)
 8009fb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8009fba:	4b1a      	ldr	r3, [pc, #104]	; (800a024 <HAL_SD_MspInit+0x8c>)
 8009fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fc2:	60bb      	str	r3, [r7, #8]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8009fc6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8009fca:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009fd8:	230c      	movs	r3, #12
 8009fda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fdc:	f107 030c 	add.w	r3, r7, #12
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	4811      	ldr	r0, [pc, #68]	; (800a028 <HAL_SD_MspInit+0x90>)
 8009fe4:	f7f9 ffa2 	bl	8003f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009fe8:	2304      	movs	r3, #4
 8009fea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fec:	2302      	movs	r3, #2
 8009fee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009ff8:	230c      	movs	r3, #12
 8009ffa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ffc:	f107 030c 	add.w	r3, r7, #12
 800a000:	4619      	mov	r1, r3
 800a002:	480a      	ldr	r0, [pc, #40]	; (800a02c <HAL_SD_MspInit+0x94>)
 800a004:	f7f9 ff92 	bl	8003f2c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SDIO_IRQn, USER_INT_PRIORITY, 0);
 800a008:	2200      	movs	r2, #0
 800a00a:	2106      	movs	r1, #6
 800a00c:	2031      	movs	r0, #49	; 0x31
 800a00e:	f7f9 fd88 	bl	8003b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800a012:	2031      	movs	r0, #49	; 0x31
 800a014:	f7f9 fda1 	bl	8003b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800a018:	bf00      	nop
 800a01a:	3720      	adds	r7, #32
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	40012c00 	.word	0x40012c00
 800a024:	40023800 	.word	0x40023800
 800a028:	40020800 	.word	0x40020800
 800a02c:	40020c00 	.word	0x40020c00

0800a030 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM5)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a0b      	ldr	r2, [pc, #44]	; (800a06c <HAL_TIM_Base_MspInit+0x3c>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d10d      	bne.n	800a05e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a042:	2300      	movs	r3, #0
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	4b0a      	ldr	r3, [pc, #40]	; (800a070 <HAL_TIM_Base_MspInit+0x40>)
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	4a09      	ldr	r2, [pc, #36]	; (800a070 <HAL_TIM_Base_MspInit+0x40>)
 800a04c:	f043 0308 	orr.w	r3, r3, #8
 800a050:	6413      	str	r3, [r2, #64]	; 0x40
 800a052:	4b07      	ldr	r3, [pc, #28]	; (800a070 <HAL_TIM_Base_MspInit+0x40>)
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	f003 0308 	and.w	r3, r3, #8
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800a05e:	bf00      	nop
 800a060:	3714      	adds	r7, #20
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	40000c00 	.word	0x40000c00
 800a070:	40023800 	.word	0x40023800

0800a074 <HAL_UART_MspInit>:
  /* USER CODE END TIM5_MspDeInit 1 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b08a      	sub	sp, #40	; 0x28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a42      	ldr	r2, [pc, #264]	; (800a18c <HAL_UART_MspInit+0x118>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d126      	bne.n	800a0d4 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a086:	2300      	movs	r3, #0
 800a088:	613b      	str	r3, [r7, #16]
 800a08a:	4b41      	ldr	r3, [pc, #260]	; (800a190 <HAL_UART_MspInit+0x11c>)
 800a08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a08e:	4a40      	ldr	r2, [pc, #256]	; (800a190 <HAL_UART_MspInit+0x11c>)
 800a090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a094:	6413      	str	r3, [r2, #64]	; 0x40
 800a096:	4b3e      	ldr	r3, [pc, #248]	; (800a190 <HAL_UART_MspInit+0x11c>)
 800a098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a09e:	613b      	str	r3, [r7, #16]
 800a0a0:	693b      	ldr	r3, [r7, #16]
  
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a0b2:	2308      	movs	r3, #8
 800a0b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0b6:	f107 0314 	add.w	r3, r7, #20
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	4835      	ldr	r0, [pc, #212]	; (800a194 <HAL_UART_MspInit+0x120>)
 800a0be:	f7f9 ff35 	bl	8003f2c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART4_IRQn, USER_INT_PRIORITY, 0);
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2106      	movs	r1, #6
 800a0c6:	2034      	movs	r0, #52	; 0x34
 800a0c8:	f7f9 fd2b 	bl	8003b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a0cc:	2034      	movs	r0, #52	; 0x34
 800a0ce:	f7f9 fd44 	bl	8003b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a0d2:	e057      	b.n	800a184 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART1)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a2f      	ldr	r2, [pc, #188]	; (800a198 <HAL_UART_MspInit+0x124>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d127      	bne.n	800a12e <HAL_UART_MspInit+0xba>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a0de:	2300      	movs	r3, #0
 800a0e0:	60fb      	str	r3, [r7, #12]
 800a0e2:	4b2b      	ldr	r3, [pc, #172]	; (800a190 <HAL_UART_MspInit+0x11c>)
 800a0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e6:	4a2a      	ldr	r2, [pc, #168]	; (800a190 <HAL_UART_MspInit+0x11c>)
 800a0e8:	f043 0310 	orr.w	r3, r3, #16
 800a0ec:	6453      	str	r3, [r2, #68]	; 0x44
 800a0ee:	4b28      	ldr	r3, [pc, #160]	; (800a190 <HAL_UART_MspInit+0x11c>)
 800a0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f2:	f003 0310 	and.w	r3, r3, #16
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a0fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a0fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a100:	2302      	movs	r3, #2
 800a102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a104:	2301      	movs	r3, #1
 800a106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a108:	2303      	movs	r3, #3
 800a10a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a10c:	2307      	movs	r3, #7
 800a10e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a110:	f107 0314 	add.w	r3, r7, #20
 800a114:	4619      	mov	r1, r3
 800a116:	481f      	ldr	r0, [pc, #124]	; (800a194 <HAL_UART_MspInit+0x120>)
 800a118:	f7f9 ff08 	bl	8003f2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, USER_INT_PRIORITY, 0);
 800a11c:	2200      	movs	r2, #0
 800a11e:	2106      	movs	r1, #6
 800a120:	2025      	movs	r0, #37	; 0x25
 800a122:	f7f9 fcfe 	bl	8003b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);    
 800a126:	2025      	movs	r0, #37	; 0x25
 800a128:	f7f9 fd17 	bl	8003b5a <HAL_NVIC_EnableIRQ>
}
 800a12c:	e02a      	b.n	800a184 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART6)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a1a      	ldr	r2, [pc, #104]	; (800a19c <HAL_UART_MspInit+0x128>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d125      	bne.n	800a184 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a138:	2300      	movs	r3, #0
 800a13a:	60bb      	str	r3, [r7, #8]
 800a13c:	4b14      	ldr	r3, [pc, #80]	; (800a190 <HAL_UART_MspInit+0x11c>)
 800a13e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a140:	4a13      	ldr	r2, [pc, #76]	; (800a190 <HAL_UART_MspInit+0x11c>)
 800a142:	f043 0320 	orr.w	r3, r3, #32
 800a146:	6453      	str	r3, [r2, #68]	; 0x44
 800a148:	4b11      	ldr	r3, [pc, #68]	; (800a190 <HAL_UART_MspInit+0x11c>)
 800a14a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PAY_TX_Pin|PAY_RX_Pin;
 800a154:	23c0      	movs	r3, #192	; 0xc0
 800a156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a158:	2302      	movs	r3, #2
 800a15a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a15c:	2301      	movs	r3, #1
 800a15e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a160:	2303      	movs	r3, #3
 800a162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a164:	2308      	movs	r3, #8
 800a166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a168:	f107 0314 	add.w	r3, r7, #20
 800a16c:	4619      	mov	r1, r3
 800a16e:	480c      	ldr	r0, [pc, #48]	; (800a1a0 <HAL_UART_MspInit+0x12c>)
 800a170:	f7f9 fedc 	bl	8003f2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, USER_INT_PRIORITY, 0);
 800a174:	2200      	movs	r2, #0
 800a176:	2106      	movs	r1, #6
 800a178:	2047      	movs	r0, #71	; 0x47
 800a17a:	f7f9 fcd2 	bl	8003b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a17e:	2047      	movs	r0, #71	; 0x47
 800a180:	f7f9 fceb 	bl	8003b5a <HAL_NVIC_EnableIRQ>
}
 800a184:	bf00      	nop
 800a186:	3728      	adds	r7, #40	; 0x28
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	40004c00 	.word	0x40004c00
 800a190:	40023800 	.word	0x40023800
 800a194:	40020000 	.word	0x40020000
 800a198:	40011000 	.word	0x40011000
 800a19c:	40011400 	.word	0x40011400
 800a1a0:	40020800 	.word	0x40020800

0800a1a4 <HAL_WWDG_MspInit>:
  }

}

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]

  if(hwwdg->Instance==WWDG)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a0b      	ldr	r2, [pc, #44]	; (800a1e0 <HAL_WWDG_MspInit+0x3c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d10d      	bne.n	800a1d2 <HAL_WWDG_MspInit+0x2e>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60fb      	str	r3, [r7, #12]
 800a1ba:	4b0a      	ldr	r3, [pc, #40]	; (800a1e4 <HAL_WWDG_MspInit+0x40>)
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1be:	4a09      	ldr	r2, [pc, #36]	; (800a1e4 <HAL_WWDG_MspInit+0x40>)
 800a1c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a1c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a1c6:	4b07      	ldr	r3, [pc, #28]	; (800a1e4 <HAL_WWDG_MspInit+0x40>)
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	40002c00 	.word	0x40002c00
 800a1e4:	40023800 	.word	0x40023800

0800a1e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08c      	sub	sp, #48	; 0x30
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	2019      	movs	r0, #25
 800a1fe:	f7f9 fc90 	bl	8003b22 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800a202:	2019      	movs	r0, #25
 800a204:	f7f9 fca9 	bl	8003b5a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	4b1f      	ldr	r3, [pc, #124]	; (800a28c <HAL_InitTick+0xa4>)
 800a20e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a210:	4a1e      	ldr	r2, [pc, #120]	; (800a28c <HAL_InitTick+0xa4>)
 800a212:	f043 0301 	orr.w	r3, r3, #1
 800a216:	6453      	str	r3, [r2, #68]	; 0x44
 800a218:	4b1c      	ldr	r3, [pc, #112]	; (800a28c <HAL_InitTick+0xa4>)
 800a21a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	60fb      	str	r3, [r7, #12]
 800a222:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a224:	f107 0210 	add.w	r2, r7, #16
 800a228:	f107 0314 	add.w	r3, r7, #20
 800a22c:	4611      	mov	r1, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fb fcd2 	bl	8005bd8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a234:	f7fb fcae 	bl	8005b94 <HAL_RCC_GetPCLK2Freq>
 800a238:	4603      	mov	r3, r0
 800a23a:	005b      	lsls	r3, r3, #1
 800a23c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a240:	4a13      	ldr	r2, [pc, #76]	; (800a290 <HAL_InitTick+0xa8>)
 800a242:	fba2 2303 	umull	r2, r3, r2, r3
 800a246:	0c9b      	lsrs	r3, r3, #18
 800a248:	3b01      	subs	r3, #1
 800a24a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a24c:	4b11      	ldr	r3, [pc, #68]	; (800a294 <HAL_InitTick+0xac>)
 800a24e:	4a12      	ldr	r2, [pc, #72]	; (800a298 <HAL_InitTick+0xb0>)
 800a250:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800a252:	4b10      	ldr	r3, [pc, #64]	; (800a294 <HAL_InitTick+0xac>)
 800a254:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a258:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a25a:	4a0e      	ldr	r2, [pc, #56]	; (800a294 <HAL_InitTick+0xac>)
 800a25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a260:	4b0c      	ldr	r3, [pc, #48]	; (800a294 <HAL_InitTick+0xac>)
 800a262:	2200      	movs	r2, #0
 800a264:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a266:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <HAL_InitTick+0xac>)
 800a268:	2200      	movs	r2, #0
 800a26a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800a26c:	4809      	ldr	r0, [pc, #36]	; (800a294 <HAL_InitTick+0xac>)
 800a26e:	f7fd faee 	bl	800784e <HAL_TIM_Base_Init>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d104      	bne.n	800a282 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800a278:	4806      	ldr	r0, [pc, #24]	; (800a294 <HAL_InitTick+0xac>)
 800a27a:	f7fd fb13 	bl	80078a4 <HAL_TIM_Base_Start_IT>
 800a27e:	4603      	mov	r3, r0
 800a280:	e000      	b.n	800a284 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
}
 800a284:	4618      	mov	r0, r3
 800a286:	3730      	adds	r7, #48	; 0x30
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	40023800 	.word	0x40023800
 800a290:	431bde83 	.word	0x431bde83
 800a294:	20008234 	.word	0x20008234
 800a298:	40010000 	.word	0x40010000

0800a29c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 800a29c:	b480      	push	{r7}
 800a29e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a2a0:	bf00      	nop
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
	...

0800a2ac <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  *((__IO uint32_t*)MAILBOX_ADDRESS) = MAILBOX_VAL_HARD;
 800a2b0:	4b03      	ldr	r3, [pc, #12]	; (800a2c0 <HardFault_Handler+0x14>)
 800a2b2:	4a04      	ldr	r2, [pc, #16]	; (800a2c4 <HardFault_Handler+0x18>)
 800a2b4:	601a      	str	r2, [r3, #0]
  MX_WWDG_Init();
 800a2b6:	f7ff fb81 	bl	80099bc <MX_WWDG_Init>
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	Error_Handler();
 800a2ba:	f7f9 fab3 	bl	8003824 <Error_Handler>
 800a2be:	e7fc      	b.n	800a2ba <HardFault_Handler+0xe>
 800a2c0:	40002854 	.word	0x40002854
 800a2c4:	0bad0bad 	.word	0x0bad0bad

0800a2c8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a2cc:	e7fe      	b.n	800a2cc <MemManage_Handler+0x4>

0800a2ce <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a2d2:	e7fe      	b.n	800a2d2 <BusFault_Handler+0x4>

0800a2d4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a2d8:	e7fe      	b.n	800a2d8 <UsageFault_Handler+0x4>

0800a2da <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a2de:	bf00      	nop
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800a2ec:	f002 ff25 	bl	800d13a <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a2f0:	bf00      	nop
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <SDIO_IRQHandler>:

/**
* @brief This function handles SDIO global interrupt.
*/
void SDIO_IRQHandler(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800a2f8:	4802      	ldr	r0, [pc, #8]	; (800a304 <SDIO_IRQHandler+0x10>)
 800a2fa:	f7fc fa5d 	bl	80067b8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800a2fe:	bf00      	nop
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	200080d0 	.word	0x200080d0

0800a308 <USART1_IRQHandler>:

void  USART1_IRQHandler(void)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 800a30c:	4802      	ldr	r0, [pc, #8]	; (800a318 <USART1_IRQHandler+0x10>)
 800a30e:	f7fd fe07 	bl	8007f20 <HAL_UART_IRQHandler>
}
 800a312:	bf00      	nop
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20007ff8 	.word	0x20007ff8

0800a31c <UART4_IRQHandler>:
void  UART4_IRQHandler(void)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart4);
 800a320:	4802      	ldr	r0, [pc, #8]	; (800a32c <UART4_IRQHandler+0x10>)
 800a322:	f7fd fdfd 	bl	8007f20 <HAL_UART_IRQHandler>
}
 800a326:	bf00      	nop
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	20008194 	.word	0x20008194

0800a330 <USART6_IRQHandler>:
void  USART6_IRQHandler(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart6);
 800a334:	4802      	ldr	r0, [pc, #8]	; (800a340 <USART6_IRQHandler+0x10>)
 800a336:	f7fd fdf3 	bl	8007f20 <HAL_UART_IRQHandler>
}
 800a33a:	bf00      	nop
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20008154 	.word	0x20008154

0800a344 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a348:	4802      	ldr	r0, [pc, #8]	; (800a354 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a34a:	f7fd fac6 	bl	80078da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a34e:	bf00      	nop
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20008234 	.word	0x20008234

0800a358 <DMA2_Stream3_IRQHandler>:

/**
* @brief This function handles DMA2 stream3 global interrupt.
*/
void DMA2_Stream3_IRQHandler(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800a35c:	4802      	ldr	r0, [pc, #8]	; (800a368 <DMA2_Stream3_IRQHandler+0x10>)
 800a35e:	f7f9 fc55 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800a362:	bf00      	nop
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20007cac 	.word	0x20007cac

0800a36c <DMA2_Stream6_IRQHandler>:

/**
* @brief This function handles DMA2 stream6 global interrupt.
*/
void DMA2_Stream6_IRQHandler(void)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800a370:	4802      	ldr	r0, [pc, #8]	; (800a37c <DMA2_Stream6_IRQHandler+0x10>)
 800a372:	f7f9 fc4b 	bl	8003c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800a376:	bf00      	nop
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	2000805c 	.word	0x2000805c

0800a380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a380:	b480      	push	{r7}
 800a382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a384:	4b16      	ldr	r3, [pc, #88]	; (800a3e0 <SystemInit+0x60>)
 800a386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a38a:	4a15      	ldr	r2, [pc, #84]	; (800a3e0 <SystemInit+0x60>)
 800a38c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a394:	4b13      	ldr	r3, [pc, #76]	; (800a3e4 <SystemInit+0x64>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a12      	ldr	r2, [pc, #72]	; (800a3e4 <SystemInit+0x64>)
 800a39a:	f043 0301 	orr.w	r3, r3, #1
 800a39e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a3a0:	4b10      	ldr	r3, [pc, #64]	; (800a3e4 <SystemInit+0x64>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <SystemInit+0x64>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a0e      	ldr	r2, [pc, #56]	; (800a3e4 <SystemInit+0x64>)
 800a3ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a3b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a3b6:	4b0b      	ldr	r3, [pc, #44]	; (800a3e4 <SystemInit+0x64>)
 800a3b8:	4a0b      	ldr	r2, [pc, #44]	; (800a3e8 <SystemInit+0x68>)
 800a3ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a3bc:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <SystemInit+0x64>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a08      	ldr	r2, [pc, #32]	; (800a3e4 <SystemInit+0x64>)
 800a3c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a3c8:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <SystemInit+0x64>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a3ce:	4b04      	ldr	r3, [pc, #16]	; (800a3e0 <SystemInit+0x60>)
 800a3d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a3d4:	609a      	str	r2, [r3, #8]
#endif
}
 800a3d6:	bf00      	nop
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	e000ed00 	.word	0xe000ed00
 800a3e4:	40023800 	.word	0x40023800
 800a3e8:	24003010 	.word	0x24003010

0800a3ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a3f6:	79fb      	ldrb	r3, [r7, #7]
 800a3f8:	4a08      	ldr	r2, [pc, #32]	; (800a41c <disk_status+0x30>)
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4413      	add	r3, r2
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	79fa      	ldrb	r2, [r7, #7]
 800a404:	4905      	ldr	r1, [pc, #20]	; (800a41c <disk_status+0x30>)
 800a406:	440a      	add	r2, r1
 800a408:	7a12      	ldrb	r2, [r2, #8]
 800a40a:	4610      	mov	r0, r2
 800a40c:	4798      	blx	r3
 800a40e:	4603      	mov	r3, r0
 800a410:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a412:	7bfb      	ldrb	r3, [r7, #15]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	200002cc 	.word	0x200002cc

0800a420 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	4a0d      	ldr	r2, [pc, #52]	; (800a468 <disk_initialize+0x48>)
 800a432:	5cd3      	ldrb	r3, [r2, r3]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d111      	bne.n	800a45c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	4a0b      	ldr	r2, [pc, #44]	; (800a468 <disk_initialize+0x48>)
 800a43c:	2101      	movs	r1, #1
 800a43e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <disk_initialize+0x48>)
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	4413      	add	r3, r2
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	79fa      	ldrb	r2, [r7, #7]
 800a44e:	4906      	ldr	r1, [pc, #24]	; (800a468 <disk_initialize+0x48>)
 800a450:	440a      	add	r2, r1
 800a452:	7a12      	ldrb	r2, [r2, #8]
 800a454:	4610      	mov	r0, r2
 800a456:	4798      	blx	r3
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	200002cc 	.word	0x200002cc

0800a46c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a46c:	b590      	push	{r4, r7, lr}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
 800a472:	60b9      	str	r1, [r7, #8]
 800a474:	607a      	str	r2, [r7, #4]
 800a476:	603b      	str	r3, [r7, #0]
 800a478:	4603      	mov	r3, r0
 800a47a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	4a0a      	ldr	r2, [pc, #40]	; (800a4a8 <disk_read+0x3c>)
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	689c      	ldr	r4, [r3, #8]
 800a488:	7bfb      	ldrb	r3, [r7, #15]
 800a48a:	4a07      	ldr	r2, [pc, #28]	; (800a4a8 <disk_read+0x3c>)
 800a48c:	4413      	add	r3, r2
 800a48e:	7a18      	ldrb	r0, [r3, #8]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	68b9      	ldr	r1, [r7, #8]
 800a496:	47a0      	blx	r4
 800a498:	4603      	mov	r3, r0
 800a49a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd90      	pop	{r4, r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200002cc 	.word	0x200002cc

0800a4ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a4ac:	b590      	push	{r4, r7, lr}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	607a      	str	r2, [r7, #4]
 800a4b6:	603b      	str	r3, [r7, #0]
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
 800a4be:	4a0a      	ldr	r2, [pc, #40]	; (800a4e8 <disk_write+0x3c>)
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4413      	add	r3, r2
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	68dc      	ldr	r4, [r3, #12]
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	4a07      	ldr	r2, [pc, #28]	; (800a4e8 <disk_write+0x3c>)
 800a4cc:	4413      	add	r3, r2
 800a4ce:	7a18      	ldrb	r0, [r3, #8]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	68b9      	ldr	r1, [r7, #8]
 800a4d6:	47a0      	blx	r4
 800a4d8:	4603      	mov	r3, r0
 800a4da:	75fb      	strb	r3, [r7, #23]
  return res;
 800a4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	371c      	adds	r7, #28
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd90      	pop	{r4, r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	200002cc 	.word	0x200002cc

0800a4ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	603a      	str	r2, [r7, #0]
 800a4f6:	71fb      	strb	r3, [r7, #7]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	4a09      	ldr	r2, [pc, #36]	; (800a524 <disk_ioctl+0x38>)
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	79fa      	ldrb	r2, [r7, #7]
 800a50a:	4906      	ldr	r1, [pc, #24]	; (800a524 <disk_ioctl+0x38>)
 800a50c:	440a      	add	r2, r1
 800a50e:	7a10      	ldrb	r0, [r2, #8]
 800a510:	79b9      	ldrb	r1, [r7, #6]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	4798      	blx	r3
 800a516:	4603      	mov	r3, r0
 800a518:	73fb      	strb	r3, [r7, #15]
  return res;
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	200002cc 	.word	0x200002cc

0800a528 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a528:	b480      	push	{r7}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800a53c:	e007      	b.n	800a54e <mem_cpy+0x26>
		*d++ = *s++;
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	1c53      	adds	r3, r2, #1
 800a542:	613b      	str	r3, [r7, #16]
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	1c59      	adds	r1, r3, #1
 800a548:	6179      	str	r1, [r7, #20]
 800a54a:	7812      	ldrb	r2, [r2, #0]
 800a54c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	1e5a      	subs	r2, r3, #1
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1f2      	bne.n	800a53e <mem_cpy+0x16>
}
 800a558:	bf00      	nop
 800a55a:	bf00      	nop
 800a55c:	371c      	adds	r7, #28
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a566:	b480      	push	{r7}
 800a568:	b087      	sub	sp, #28
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	60b9      	str	r1, [r7, #8]
 800a570:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800a576:	e005      	b.n	800a584 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	617a      	str	r2, [r7, #20]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	b2d2      	uxtb	r2, r2
 800a582:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	1e5a      	subs	r2, r3, #1
 800a588:	607a      	str	r2, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d1f4      	bne.n	800a578 <mem_set+0x12>
}
 800a58e:	bf00      	nop
 800a590:	bf00      	nop
 800a592:	371c      	adds	r7, #28
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800a59c:	b480      	push	{r7}
 800a59e:	b089      	sub	sp, #36	; 0x24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	61fb      	str	r3, [r7, #28]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800a5b4:	bf00      	nop
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	1e5a      	subs	r2, r3, #1
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00d      	beq.n	800a5dc <mem_cmp+0x40>
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	61fa      	str	r2, [r7, #28]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	61ba      	str	r2, [r7, #24]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	1acb      	subs	r3, r1, r3
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d0ec      	beq.n	800a5b6 <mem_cmp+0x1a>
	return r;
 800a5dc:	697b      	ldr	r3, [r7, #20]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3724      	adds	r7, #36	; 0x24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800a5ea:	b480      	push	{r7}
 800a5ec:	b083      	sub	sp, #12
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a5f4:	e002      	b.n	800a5fc <chk_chr+0x12>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	607b      	str	r3, [r7, #4]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d005      	beq.n	800a610 <chk_chr+0x26>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	461a      	mov	r2, r3
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d1f2      	bne.n	800a5f6 <chk_chr+0xc>
	return *str;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	781b      	ldrb	r3, [r3, #0]
}
 800a614:	4618      	mov	r0, r3
 800a616:	370c      	adds	r7, #12
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a62e:	4618      	mov	r0, r3
 800a630:	f002 fb9d 	bl	800cd6e <ff_req_grant>
 800a634:	4603      	mov	r3, r0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b082      	sub	sp, #8
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	460b      	mov	r3, r1
 800a648:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d011      	beq.n	800a674 <unlock_fs+0x36>
 800a650:	78fb      	ldrb	r3, [r7, #3]
 800a652:	2b0c      	cmp	r3, #12
 800a654:	d00e      	beq.n	800a674 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800a656:	78fb      	ldrb	r3, [r7, #3]
 800a658:	2b0b      	cmp	r3, #11
 800a65a:	d00b      	beq.n	800a674 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800a65c:	78fb      	ldrb	r3, [r7, #3]
 800a65e:	2b09      	cmp	r3, #9
 800a660:	d008      	beq.n	800a674 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800a662:	78fb      	ldrb	r3, [r7, #3]
 800a664:	2b0f      	cmp	r3, #15
 800a666:	d005      	beq.n	800a674 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a66e:	4618      	mov	r0, r3
 800a670:	f002 fb92 	bl	800cd98 <ff_rel_grant>
	}
}
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a686:	2300      	movs	r3, #0
 800a688:	60bb      	str	r3, [r7, #8]
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	e038      	b.n	800a702 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800a690:	4930      	ldr	r1, [pc, #192]	; (800a754 <chk_lock+0xd8>)
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	4613      	mov	r3, r2
 800a696:	005b      	lsls	r3, r3, #1
 800a698:	4413      	add	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	440b      	add	r3, r1
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d029      	beq.n	800a6f8 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800a6a4:	492b      	ldr	r1, [pc, #172]	; (800a754 <chk_lock+0xd8>)
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d11e      	bne.n	800a6fc <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800a6be:	4925      	ldr	r1, [pc, #148]	; (800a754 <chk_lock+0xd8>)
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	4413      	add	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	440b      	add	r3, r1
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d110      	bne.n	800a6fc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800a6da:	491e      	ldr	r1, [pc, #120]	; (800a754 <chk_lock+0xd8>)
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	4413      	add	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	440b      	add	r3, r1
 800a6e8:	3308      	adds	r3, #8
 800a6ea:	881a      	ldrh	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d102      	bne.n	800a6fc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800a6f6:	e007      	b.n	800a708 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	3301      	adds	r3, #1
 800a700:	60fb      	str	r3, [r7, #12]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b07      	cmp	r3, #7
 800a706:	d9c3      	bls.n	800a690 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2b08      	cmp	r3, #8
 800a70c:	d109      	bne.n	800a722 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d102      	bne.n	800a71a <chk_lock+0x9e>
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	2b02      	cmp	r3, #2
 800a718:	d101      	bne.n	800a71e <chk_lock+0xa2>
 800a71a:	2300      	movs	r3, #0
 800a71c:	e013      	b.n	800a746 <chk_lock+0xca>
 800a71e:	2312      	movs	r3, #18
 800a720:	e011      	b.n	800a746 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <chk_lock+0xc4>
 800a728:	490a      	ldr	r1, [pc, #40]	; (800a754 <chk_lock+0xd8>)
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	4613      	mov	r3, r2
 800a72e:	005b      	lsls	r3, r3, #1
 800a730:	4413      	add	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	440b      	add	r3, r1
 800a736:	330a      	adds	r3, #10
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a73e:	d101      	bne.n	800a744 <chk_lock+0xc8>
 800a740:	2310      	movs	r3, #16
 800a742:	e000      	b.n	800a746 <chk_lock+0xca>
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	2000026c 	.word	0x2000026c

0800a758 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a75e:	2300      	movs	r3, #0
 800a760:	607b      	str	r3, [r7, #4]
 800a762:	e002      	b.n	800a76a <enq_lock+0x12>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3301      	adds	r3, #1
 800a768:	607b      	str	r3, [r7, #4]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b07      	cmp	r3, #7
 800a76e:	d809      	bhi.n	800a784 <enq_lock+0x2c>
 800a770:	490a      	ldr	r1, [pc, #40]	; (800a79c <enq_lock+0x44>)
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	4613      	mov	r3, r2
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	4413      	add	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	440b      	add	r3, r1
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1ef      	bne.n	800a764 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b08      	cmp	r3, #8
 800a788:	bf14      	ite	ne
 800a78a:	2301      	movne	r3, #1
 800a78c:	2300      	moveq	r3, #0
 800a78e:	b2db      	uxtb	r3, r3
}
 800a790:	4618      	mov	r0, r3
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr
 800a79c:	2000026c 	.word	0x2000026c

0800a7a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60fb      	str	r3, [r7, #12]
 800a7ae:	e02b      	b.n	800a808 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800a7b0:	4956      	ldr	r1, [pc, #344]	; (800a90c <inc_lock+0x16c>)
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	4413      	add	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	440b      	add	r3, r1
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d11b      	bne.n	800a802 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800a7ca:	4950      	ldr	r1, [pc, #320]	; (800a90c <inc_lock+0x16c>)
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	005b      	lsls	r3, r3, #1
 800a7d2:	4413      	add	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	440b      	add	r3, r1
 800a7d8:	3304      	adds	r3, #4
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d10d      	bne.n	800a802 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800a7e6:	4949      	ldr	r1, [pc, #292]	; (800a90c <inc_lock+0x16c>)
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	005b      	lsls	r3, r3, #1
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	440b      	add	r3, r1
 800a7f4:	3308      	adds	r3, #8
 800a7f6:	881a      	ldrh	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d006      	beq.n	800a810 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3301      	adds	r3, #1
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2b07      	cmp	r3, #7
 800a80c:	d9d0      	bls.n	800a7b0 <inc_lock+0x10>
 800a80e:	e000      	b.n	800a812 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800a810:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b08      	cmp	r3, #8
 800a816:	d145      	bne.n	800a8a4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a818:	2300      	movs	r3, #0
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	e002      	b.n	800a824 <inc_lock+0x84>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	3301      	adds	r3, #1
 800a822:	60fb      	str	r3, [r7, #12]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b07      	cmp	r3, #7
 800a828:	d809      	bhi.n	800a83e <inc_lock+0x9e>
 800a82a:	4938      	ldr	r1, [pc, #224]	; (800a90c <inc_lock+0x16c>)
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	4613      	mov	r3, r2
 800a830:	005b      	lsls	r3, r3, #1
 800a832:	4413      	add	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	440b      	add	r3, r1
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1ef      	bne.n	800a81e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b08      	cmp	r3, #8
 800a842:	d101      	bne.n	800a848 <inc_lock+0xa8>
 800a844:	2300      	movs	r3, #0
 800a846:	e05a      	b.n	800a8fe <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800a84e:	482f      	ldr	r0, [pc, #188]	; (800a90c <inc_lock+0x16c>)
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	4613      	mov	r3, r2
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	4413      	add	r3, r2
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4403      	add	r3, r0
 800a85c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800a864:	4829      	ldr	r0, [pc, #164]	; (800a90c <inc_lock+0x16c>)
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	4613      	mov	r3, r2
 800a86a:	005b      	lsls	r3, r3, #1
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4403      	add	r3, r0
 800a872:	3304      	adds	r3, #4
 800a874:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800a87c:	4923      	ldr	r1, [pc, #140]	; (800a90c <inc_lock+0x16c>)
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	4613      	mov	r3, r2
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	440b      	add	r3, r1
 800a88a:	3308      	adds	r3, #8
 800a88c:	4602      	mov	r2, r0
 800a88e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800a890:	491e      	ldr	r1, [pc, #120]	; (800a90c <inc_lock+0x16c>)
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	4613      	mov	r3, r2
 800a896:	005b      	lsls	r3, r3, #1
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	440b      	add	r3, r1
 800a89e:	330a      	adds	r3, #10
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00c      	beq.n	800a8c4 <inc_lock+0x124>
 800a8aa:	4918      	ldr	r1, [pc, #96]	; (800a90c <inc_lock+0x16c>)
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	005b      	lsls	r3, r3, #1
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	330a      	adds	r3, #10
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d001      	beq.n	800a8c4 <inc_lock+0x124>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	e01c      	b.n	800a8fe <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10b      	bne.n	800a8e2 <inc_lock+0x142>
 800a8ca:	4910      	ldr	r1, [pc, #64]	; (800a90c <inc_lock+0x16c>)
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	005b      	lsls	r3, r3, #1
 800a8d2:	4413      	add	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	440b      	add	r3, r1
 800a8d8:	330a      	adds	r3, #10
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	b299      	uxth	r1, r3
 800a8e0:	e001      	b.n	800a8e6 <inc_lock+0x146>
 800a8e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a8e6:	4809      	ldr	r0, [pc, #36]	; (800a90c <inc_lock+0x16c>)
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	005b      	lsls	r3, r3, #1
 800a8ee:	4413      	add	r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	4403      	add	r3, r0
 800a8f4:	330a      	adds	r3, #10
 800a8f6:	460a      	mov	r2, r1
 800a8f8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3301      	adds	r3, #1
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	2000026c 	.word	0x2000026c

0800a910 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	607b      	str	r3, [r7, #4]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b07      	cmp	r3, #7
 800a922:	d82e      	bhi.n	800a982 <dec_lock+0x72>
		n = Files[i].ctr;
 800a924:	491b      	ldr	r1, [pc, #108]	; (800a994 <dec_lock+0x84>)
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	4613      	mov	r3, r2
 800a92a:	005b      	lsls	r3, r3, #1
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	330a      	adds	r3, #10
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a938:	89fb      	ldrh	r3, [r7, #14]
 800a93a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93e:	d101      	bne.n	800a944 <dec_lock+0x34>
 800a940:	2300      	movs	r3, #0
 800a942:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800a944:	89fb      	ldrh	r3, [r7, #14]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d002      	beq.n	800a950 <dec_lock+0x40>
 800a94a:	89fb      	ldrh	r3, [r7, #14]
 800a94c:	3b01      	subs	r3, #1
 800a94e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a950:	4910      	ldr	r1, [pc, #64]	; (800a994 <dec_lock+0x84>)
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	4613      	mov	r3, r2
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	4413      	add	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	440b      	add	r3, r1
 800a95e:	330a      	adds	r3, #10
 800a960:	89fa      	ldrh	r2, [r7, #14]
 800a962:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a964:	89fb      	ldrh	r3, [r7, #14]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d108      	bne.n	800a97c <dec_lock+0x6c>
 800a96a:	490a      	ldr	r1, [pc, #40]	; (800a994 <dec_lock+0x84>)
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	4613      	mov	r3, r2
 800a970:	005b      	lsls	r3, r3, #1
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	440b      	add	r3, r1
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	737b      	strb	r3, [r7, #13]
 800a980:	e001      	b.n	800a986 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a982:	2302      	movs	r3, #2
 800a984:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a986:	7b7b      	ldrb	r3, [r7, #13]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	2000026c 	.word	0x2000026c

0800a998 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	e016      	b.n	800a9d4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a9a6:	4910      	ldr	r1, [pc, #64]	; (800a9e8 <clear_lock+0x50>)
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	005b      	lsls	r3, r3, #1
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	440b      	add	r3, r1
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d108      	bne.n	800a9ce <clear_lock+0x36>
 800a9bc:	490a      	ldr	r1, [pc, #40]	; (800a9e8 <clear_lock+0x50>)
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	005b      	lsls	r3, r3, #1
 800a9c4:	4413      	add	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	440b      	add	r3, r1
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2b07      	cmp	r3, #7
 800a9d8:	d9e5      	bls.n	800a9a6 <clear_lock+0xe>
	}
}
 800a9da:	bf00      	nop
 800a9dc:	bf00      	nop
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	2000026c 	.word	0x2000026c

0800a9ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d038      	beq.n	800aa74 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800aa08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800aa10:	6879      	ldr	r1, [r7, #4]
 800aa12:	2301      	movs	r3, #1
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	f7ff fd49 	bl	800a4ac <disk_write>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	73fb      	strb	r3, [r7, #15]
 800aa24:	e026      	b.n	800aa74 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	1ad2      	subs	r2, r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d218      	bcs.n	800aa74 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800aa48:	613b      	str	r3, [r7, #16]
 800aa4a:	e010      	b.n	800aa6e <sync_window+0x82>
					wsect += fs->fsize;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	4413      	add	r3, r2
 800aa56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	2301      	movs	r3, #1
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	f7ff fd22 	bl	800a4ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	613b      	str	r3, [r7, #16]
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d8eb      	bhi.n	800aa4c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b084      	sub	sp, #16
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d01b      	beq.n	800aad0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff ffa7 	bl	800a9ec <sync_window>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d113      	bne.n	800aad0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	2301      	movs	r3, #1
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	f7ff fcda 	bl	800a46c <disk_read>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d004      	beq.n	800aac8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aabe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aac2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b084      	sub	sp, #16
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f7ff ff82 	bl	800a9ec <sync_window>
 800aae8:	4603      	mov	r3, r0
 800aaea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f040 809b 	bne.w	800ac2a <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	f040 8088 	bne.w	800ac10 <sync_fs+0x136>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	f040 8082 	bne.w	800ac10 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab12:	2100      	movs	r1, #0
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff fd26 	bl	800a566 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2255      	movs	r2, #85	; 0x55
 800ab1e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	22aa      	movs	r2, #170	; 0xaa
 800ab26:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2252      	movs	r2, #82	; 0x52
 800ab2e:	701a      	strb	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2252      	movs	r2, #82	; 0x52
 800ab34:	705a      	strb	r2, [r3, #1]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2261      	movs	r2, #97	; 0x61
 800ab3a:	709a      	strb	r2, [r3, #2]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2241      	movs	r2, #65	; 0x41
 800ab40:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2272      	movs	r2, #114	; 0x72
 800ab46:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2272      	movs	r2, #114	; 0x72
 800ab4e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2241      	movs	r2, #65	; 0x41
 800ab56:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2261      	movs	r2, #97	; 0x61
 800ab5e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	0a1b      	lsrs	r3, r3, #8
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab8a:	0c1b      	lsrs	r3, r3, #16
 800ab8c:	b2da      	uxtb	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab9a:	0e1b      	lsrs	r3, r3, #24
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800abb8:	b29b      	uxth	r3, r3
 800abba:	0a1b      	lsrs	r3, r3, #8
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800abcc:	0c1b      	lsrs	r3, r3, #16
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800abdc:	0e1b      	lsrs	r3, r3, #24
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800abfa:	6879      	ldr	r1, [r7, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800ac02:	2301      	movs	r3, #1
 800ac04:	f7ff fc52 	bl	800a4ac <disk_write>
			fs->fsi_flag = 0;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ac16:	2200      	movs	r2, #0
 800ac18:	2100      	movs	r1, #0
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff fc66 	bl	800a4ec <disk_ioctl>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d001      	beq.n	800ac2a <sync_fs+0x150>
			res = FR_DISK_ERR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	3b02      	subs	r3, #2
 800ac42:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ac4a:	3b02      	subs	r3, #2
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d301      	bcc.n	800ac56 <clust2sect+0x22>
 800ac52:	2300      	movs	r3, #0
 800ac54:	e00a      	b.n	800ac6c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	fb03 f202 	mul.w	r2, r3, r2
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ac6a:	4413      	add	r3, r2
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d905      	bls.n	800ac94 <get_fat+0x1c>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d302      	bcc.n	800ac9a <get_fat+0x22>
		val = 1;	/* Internal error */
 800ac94:	2301      	movs	r3, #1
 800ac96:	617b      	str	r3, [r7, #20]
 800ac98:	e0a3      	b.n	800ade2 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ac9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac9e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aca6:	2b03      	cmp	r3, #3
 800aca8:	d068      	beq.n	800ad7c <get_fat+0x104>
 800acaa:	2b03      	cmp	r3, #3
 800acac:	f300 808f 	bgt.w	800adce <get_fat+0x156>
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d002      	beq.n	800acba <get_fat+0x42>
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d040      	beq.n	800ad3a <get_fat+0xc2>
 800acb8:	e089      	b.n	800adce <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	60fb      	str	r3, [r7, #12]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	085b      	lsrs	r3, r3, #1
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	4413      	add	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	0a5b      	lsrs	r3, r3, #9
 800acd2:	4413      	add	r3, r2
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7ff fed1 	bl	800aa7e <move_window>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d178      	bne.n	800add4 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	1c5a      	adds	r2, r3, #1
 800ace6:	60fa      	str	r2, [r7, #12]
 800ace8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	5cd3      	ldrb	r3, [r2, r3]
 800acf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	0a5b      	lsrs	r3, r3, #9
 800acfc:	4413      	add	r3, r2
 800acfe:	4619      	mov	r1, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff febc 	bl	800aa7e <move_window>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d165      	bne.n	800add8 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	5cd3      	ldrb	r3, [r2, r3]
 800ad16:	021b      	lsls	r3, r3, #8
 800ad18:	461a      	mov	r2, r3
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <get_fat+0xb8>
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	091b      	lsrs	r3, r3, #4
 800ad2e:	e002      	b.n	800ad36 <get_fat+0xbe>
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad36:	617b      	str	r3, [r7, #20]
			break;
 800ad38:	e053      	b.n	800ade2 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	0a1b      	lsrs	r3, r3, #8
 800ad44:	4413      	add	r3, r2
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff fe98 	bl	800aa7e <move_window>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d143      	bne.n	800addc <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	4413      	add	r3, r2
 800ad60:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	3301      	adds	r3, #1
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	021b      	lsls	r3, r3, #8
 800ad6a:	b21a      	sxth	r2, r3
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	b21b      	sxth	r3, r3
 800ad72:	4313      	orrs	r3, r2
 800ad74:	b21b      	sxth	r3, r3
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	617b      	str	r3, [r7, #20]
			break;
 800ad7a:	e032      	b.n	800ade2 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	09db      	lsrs	r3, r3, #7
 800ad86:	4413      	add	r3, r2
 800ad88:	4619      	mov	r1, r3
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7ff fe77 	bl	800aa7e <move_window>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d124      	bne.n	800ade0 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	4413      	add	r3, r2
 800ada2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	3303      	adds	r3, #3
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	061a      	lsls	r2, r3, #24
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	3302      	adds	r3, #2
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	041b      	lsls	r3, r3, #16
 800adb4:	4313      	orrs	r3, r2
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	3201      	adds	r2, #1
 800adba:	7812      	ldrb	r2, [r2, #0]
 800adbc:	0212      	lsls	r2, r2, #8
 800adbe:	4313      	orrs	r3, r2
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	7812      	ldrb	r2, [r2, #0]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800adca:	617b      	str	r3, [r7, #20]
			break;
 800adcc:	e009      	b.n	800ade2 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800adce:	2301      	movs	r3, #1
 800add0:	617b      	str	r3, [r7, #20]
 800add2:	e006      	b.n	800ade2 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800add4:	bf00      	nop
 800add6:	e004      	b.n	800ade2 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800add8:	bf00      	nop
 800adda:	e002      	b.n	800ade2 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800addc:	bf00      	nop
 800adde:	e000      	b.n	800ade2 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ade0:	bf00      	nop
		}
	}

	return val;
 800ade2:	697b      	ldr	r3, [r7, #20]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d905      	bls.n	800ae0a <put_fat+0x1e>
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d302      	bcc.n	800ae10 <put_fat+0x24>
		res = FR_INT_ERR;
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	77fb      	strb	r3, [r7, #31]
 800ae0e:	e0f6      	b.n	800affe <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	f000 809e 	beq.w	800af58 <put_fat+0x16c>
 800ae1c:	2b03      	cmp	r3, #3
 800ae1e:	f300 80e4 	bgt.w	800afea <put_fat+0x1fe>
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d002      	beq.n	800ae2c <put_fat+0x40>
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d06f      	beq.n	800af0a <put_fat+0x11e>
 800ae2a:	e0de      	b.n	800afea <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	617b      	str	r3, [r7, #20]
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	085b      	lsrs	r3, r3, #1
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	4413      	add	r3, r2
 800ae38:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	0a5b      	lsrs	r3, r3, #9
 800ae44:	4413      	add	r3, r2
 800ae46:	4619      	mov	r1, r3
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f7ff fe18 	bl	800aa7e <move_window>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae52:	7ffb      	ldrb	r3, [r7, #31]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f040 80cb 	bne.w	800aff0 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	617a      	str	r2, [r7, #20]
 800ae60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	4413      	add	r3, r2
 800ae68:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00d      	beq.n	800ae90 <put_fat+0xa4>
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	b25b      	sxtb	r3, r3
 800ae7a:	f003 030f 	and.w	r3, r3, #15
 800ae7e:	b25a      	sxtb	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	011b      	lsls	r3, r3, #4
 800ae86:	b25b      	sxtb	r3, r3
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	b25b      	sxtb	r3, r3
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	e001      	b.n	800ae94 <put_fat+0xa8>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	69ba      	ldr	r2, [r7, #24]
 800ae96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	0a5b      	lsrs	r3, r3, #9
 800aeaa:	4413      	add	r3, r2
 800aeac:	4619      	mov	r1, r3
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	f7ff fde5 	bl	800aa7e <move_window>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aeb8:	7ffb      	ldrb	r3, [r7, #31]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f040 809a 	bne.w	800aff4 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	4413      	add	r3, r2
 800aeca:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	f003 0301 	and.w	r3, r3, #1
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d003      	beq.n	800aede <put_fat+0xf2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	091b      	lsrs	r3, r3, #4
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	e00e      	b.n	800aefc <put_fat+0x110>
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	b25b      	sxtb	r3, r3
 800aee4:	f023 030f 	bic.w	r3, r3, #15
 800aee8:	b25a      	sxtb	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	0a1b      	lsrs	r3, r3, #8
 800aeee:	b25b      	sxtb	r3, r3
 800aef0:	f003 030f 	and.w	r3, r3, #15
 800aef4:	b25b      	sxtb	r3, r3
 800aef6:	4313      	orrs	r3, r2
 800aef8:	b25b      	sxtb	r3, r3
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	69ba      	ldr	r2, [r7, #24]
 800aefe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800af08:	e079      	b.n	800affe <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	0a1b      	lsrs	r3, r3, #8
 800af14:	4413      	add	r3, r2
 800af16:	4619      	mov	r1, r3
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7ff fdb0 	bl	800aa7e <move_window>
 800af1e:	4603      	mov	r3, r0
 800af20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af22:	7ffb      	ldrb	r3, [r7, #31]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d167      	bne.n	800aff8 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	005b      	lsls	r3, r3, #1
 800af2c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	4413      	add	r3, r2
 800af34:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	701a      	strb	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	b29b      	uxth	r3, r3
 800af42:	0a1b      	lsrs	r3, r3, #8
 800af44:	b29a      	uxth	r2, r3
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	3301      	adds	r3, #1
 800af4a:	b2d2      	uxtb	r2, r2
 800af4c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2201      	movs	r2, #1
 800af52:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800af56:	e052      	b.n	800affe <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	09db      	lsrs	r3, r3, #7
 800af62:	4413      	add	r3, r2
 800af64:	4619      	mov	r1, r3
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f7ff fd89 	bl	800aa7e <move_window>
 800af6c:	4603      	mov	r3, r0
 800af6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af70:	7ffb      	ldrb	r3, [r7, #31]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d142      	bne.n	800affc <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	4413      	add	r3, r2
 800af82:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	3303      	adds	r3, #3
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	061a      	lsls	r2, r3, #24
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	3302      	adds	r3, #2
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	041b      	lsls	r3, r3, #16
 800af94:	4313      	orrs	r3, r2
 800af96:	69ba      	ldr	r2, [r7, #24]
 800af98:	3201      	adds	r2, #1
 800af9a:	7812      	ldrb	r2, [r2, #0]
 800af9c:	0212      	lsls	r2, r2, #8
 800af9e:	4313      	orrs	r3, r2
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	7812      	ldrb	r2, [r2, #0]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	4313      	orrs	r3, r2
 800afae:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	701a      	strb	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	b29b      	uxth	r3, r3
 800afbc:	0a1b      	lsrs	r3, r3, #8
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	3301      	adds	r3, #1
 800afc4:	b2d2      	uxtb	r2, r2
 800afc6:	701a      	strb	r2, [r3, #0]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	0c1a      	lsrs	r2, r3, #16
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	3302      	adds	r3, #2
 800afd0:	b2d2      	uxtb	r2, r2
 800afd2:	701a      	strb	r2, [r3, #0]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	0e1a      	lsrs	r2, r3, #24
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	3303      	adds	r3, #3
 800afdc:	b2d2      	uxtb	r2, r2
 800afde:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2201      	movs	r2, #1
 800afe4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800afe8:	e009      	b.n	800affe <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800afea:	2302      	movs	r3, #2
 800afec:	77fb      	strb	r3, [r7, #31]
 800afee:	e006      	b.n	800affe <put_fat+0x212>
			if (res != FR_OK) break;
 800aff0:	bf00      	nop
 800aff2:	e004      	b.n	800affe <put_fat+0x212>
			if (res != FR_OK) break;
 800aff4:	bf00      	nop
 800aff6:	e002      	b.n	800affe <put_fat+0x212>
			if (res != FR_OK) break;
 800aff8:	bf00      	nop
 800affa:	e000      	b.n	800affe <put_fat+0x212>
			if (res != FR_OK) break;
 800affc:	bf00      	nop
		}
	}

	return res;
 800affe:	7ffb      	ldrb	r3, [r7, #31]
}
 800b000:	4618      	mov	r0, r3
 800b002:	3720      	adds	r7, #32
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d905      	bls.n	800b024 <remove_chain+0x1c>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d302      	bcc.n	800b02a <remove_chain+0x22>
		res = FR_INT_ERR;
 800b024:	2302      	movs	r3, #2
 800b026:	73fb      	strb	r3, [r7, #15]
 800b028:	e043      	b.n	800b0b2 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800b02e:	e036      	b.n	800b09e <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff fe20 	bl	800ac78 <get_fat>
 800b038:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d035      	beq.n	800b0ac <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d102      	bne.n	800b04c <remove_chain+0x44>
 800b046:	2302      	movs	r3, #2
 800b048:	73fb      	strb	r3, [r7, #15]
 800b04a:	e032      	b.n	800b0b2 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b052:	d102      	bne.n	800b05a <remove_chain+0x52>
 800b054:	2301      	movs	r3, #1
 800b056:	73fb      	strb	r3, [r7, #15]
 800b058:	e02b      	b.n	800b0b2 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800b05a:	2200      	movs	r2, #0
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff fec4 	bl	800adec <put_fat>
 800b064:	4603      	mov	r3, r0
 800b066:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b068:	7bfb      	ldrb	r3, [r7, #15]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d120      	bne.n	800b0b0 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b078:	d00f      	beq.n	800b09a <remove_chain+0x92>
				fs->free_clust++;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b080:	1c5a      	adds	r2, r3, #1
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800b08e:	f043 0301 	orr.w	r3, r3, #1
 800b092:	b2da      	uxtb	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d3c2      	bcc.n	800b030 <remove_chain+0x28>
 800b0aa:	e002      	b.n	800b0b2 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800b0ac:	bf00      	nop
 800b0ae:	e000      	b.n	800b0b2 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800b0b0:	bf00      	nop
		}
	}

	return res;
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3710      	adds	r7, #16
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10f      	bne.n	800b0ec <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b0d2:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d005      	beq.n	800b0e6 <create_chain+0x2a>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d31c      	bcc.n	800b120 <create_chain+0x64>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	613b      	str	r3, [r7, #16]
 800b0ea:	e019      	b.n	800b120 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7ff fdc2 	bl	800ac78 <get_fat>
 800b0f4:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d801      	bhi.n	800b100 <create_chain+0x44>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e076      	b.n	800b1ee <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b106:	d101      	bne.n	800b10c <create_chain+0x50>
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	e070      	b.n	800b1ee <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	429a      	cmp	r2, r3
 800b116:	d201      	bcs.n	800b11c <create_chain+0x60>
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	e068      	b.n	800b1ee <create_chain+0x132>
		scl = clst;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	3301      	adds	r3, #1
 800b128:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	429a      	cmp	r2, r3
 800b134:	d307      	bcc.n	800b146 <create_chain+0x8a>
			ncl = 2;
 800b136:	2302      	movs	r3, #2
 800b138:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d901      	bls.n	800b146 <create_chain+0x8a>
 800b142:	2300      	movs	r3, #0
 800b144:	e053      	b.n	800b1ee <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800b146:	6979      	ldr	r1, [r7, #20]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff fd95 	bl	800ac78 <get_fat>
 800b14e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00e      	beq.n	800b174 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b15c:	d002      	beq.n	800b164 <create_chain+0xa8>
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b01      	cmp	r3, #1
 800b162:	d101      	bne.n	800b168 <create_chain+0xac>
			return cs;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	e042      	b.n	800b1ee <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d1d9      	bne.n	800b124 <create_chain+0x68>
 800b170:	2300      	movs	r3, #0
 800b172:	e03c      	b.n	800b1ee <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800b174:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800b176:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800b17a:	6979      	ldr	r1, [r7, #20]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7ff fe35 	bl	800adec <put_fat>
 800b182:	4603      	mov	r3, r0
 800b184:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800b186:	7bfb      	ldrb	r3, [r7, #15]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d109      	bne.n	800b1a0 <create_chain+0xe4>
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d006      	beq.n	800b1a0 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	6839      	ldr	r1, [r7, #0]
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f7ff fe28 	bl	800adec <put_fat>
 800b19c:	4603      	mov	r3, r0
 800b19e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d11a      	bne.n	800b1dc <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b1b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1b8:	d018      	beq.n	800b1ec <create_chain+0x130>
			fs->free_clust--;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b1c0:	1e5a      	subs	r2, r3, #1
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800b1ce:	f043 0301 	orr.w	r3, r3, #1
 800b1d2:	b2da      	uxtb	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800b1da:	e007      	b.n	800b1ec <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800b1dc:	7bfb      	ldrb	r3, [r7, #15]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d102      	bne.n	800b1e8 <create_chain+0x12c>
 800b1e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1e6:	e000      	b.n	800b1ea <create_chain+0x12e>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800b1ec:	697b      	ldr	r3, [r7, #20]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b087      	sub	sp, #28
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800b206:	3304      	adds	r3, #4
 800b208:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	0a5b      	lsrs	r3, r3, #9
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800b214:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b218:	fbb3 f3f2 	udiv	r3, r3, r2
 800b21c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	1d1a      	adds	r2, r3, #4
 800b222:	613a      	str	r2, [r7, #16]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <clmt_clust+0x3c>
 800b22e:	2300      	movs	r3, #0
 800b230:	e010      	b.n	800b254 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800b232:	697a      	ldr	r2, [r7, #20]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	429a      	cmp	r2, r3
 800b238:	d307      	bcc.n	800b24a <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	617b      	str	r3, [r7, #20]
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	3304      	adds	r3, #4
 800b246:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b248:	e7e9      	b.n	800b21e <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800b24a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	4413      	add	r3, r2
}
 800b254:	4618      	mov	r0, r3
 800b256:	371c      	adds	r7, #28
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800b27a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d007      	beq.n	800b292 <dir_sdi+0x32>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b288:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b28c:	697a      	ldr	r2, [r7, #20]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d301      	bcc.n	800b296 <dir_sdi+0x36>
		return FR_INT_ERR;
 800b292:	2302      	movs	r3, #2
 800b294:	e074      	b.n	800b380 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10c      	bne.n	800b2b6 <dir_sdi+0x56>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d105      	bne.n	800b2b6 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2b0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800b2b4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d111      	bne.n	800b2e0 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2c2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d301      	bcc.n	800b2d2 <dir_sdi+0x72>
			return FR_INT_ERR;
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	e056      	b.n	800b380 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2d8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800b2dc:	613b      	str	r3, [r7, #16]
 800b2de:	e032      	b.n	800b346 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2e6:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b2ea:	011b      	lsls	r3, r3, #4
 800b2ec:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800b2ee:	e01e      	b.n	800b32e <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b2f6:	6979      	ldr	r1, [r7, #20]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7ff fcbd 	bl	800ac78 <get_fat>
 800b2fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b306:	d101      	bne.n	800b30c <dir_sdi+0xac>
 800b308:	2301      	movs	r3, #1
 800b30a:	e039      	b.n	800b380 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d907      	bls.n	800b322 <dir_sdi+0xc2>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b318:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d301      	bcc.n	800b326 <dir_sdi+0xc6>
				return FR_INT_ERR;
 800b322:	2302      	movs	r3, #2
 800b324:	e02c      	b.n	800b380 <dir_sdi+0x120>
			idx -= ic;
 800b326:	683a      	ldr	r2, [r7, #0]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	1ad3      	subs	r3, r2, r3
 800b32c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	429a      	cmp	r2, r3
 800b334:	d2dc      	bcs.n	800b2f0 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b33c:	6979      	ldr	r1, [r7, #20]
 800b33e:	4618      	mov	r0, r3
 800b340:	f7ff fc78 	bl	800ac34 <clust2sect>
 800b344:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	697a      	ldr	r2, [r7, #20]
 800b34a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <dir_sdi+0xf8>
 800b354:	2302      	movs	r3, #2
 800b356:	e013      	b.n	800b380 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	091a      	lsrs	r2, r3, #4
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	441a      	add	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b36c:	461a      	mov	r2, r3
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	f003 030f 	and.w	r3, r3, #15
 800b374:	015b      	lsls	r3, r3, #5
 800b376:	441a      	add	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b388:	b590      	push	{r4, r7, lr}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800b398:	3301      	adds	r3, #1
 800b39a:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d004      	beq.n	800b3ae <dir_next+0x26>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <dir_next+0x2a>
		return FR_NO_FILE;
 800b3ae:	2304      	movs	r3, #4
 800b3b0:	e0dd      	b.n	800b56e <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f003 030f 	and.w	r3, r3, #15
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	f040 80c6 	bne.w	800b54a <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b3c4:	1c5a      	adds	r2, r3, #1
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10b      	bne.n	800b3ee <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b3dc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	f0c0 80b0 	bcc.w	800b54a <dir_next+0x1c2>
				return FR_NO_FILE;
 800b3ea:	2304      	movs	r3, #4
 800b3ec:	e0bf      	b.n	800b56e <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	091b      	lsrs	r3, r3, #4
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800b3f8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b3fc:	3a01      	subs	r2, #1
 800b3fe:	4013      	ands	r3, r2
 800b400:	2b00      	cmp	r3, #0
 800b402:	f040 80a2 	bne.w	800b54a <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b412:	4619      	mov	r1, r3
 800b414:	4610      	mov	r0, r2
 800b416:	f7ff fc2f 	bl	800ac78 <get_fat>
 800b41a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d801      	bhi.n	800b426 <dir_next+0x9e>
 800b422:	2302      	movs	r3, #2
 800b424:	e0a3      	b.n	800b56e <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b42c:	d101      	bne.n	800b432 <dir_next+0xaa>
 800b42e:	2301      	movs	r3, #1
 800b430:	e09d      	b.n	800b56e <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b438:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d374      	bcc.n	800b52c <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d101      	bne.n	800b44c <dir_next+0xc4>
 800b448:	2304      	movs	r3, #4
 800b44a:	e090      	b.n	800b56e <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800b458:	4619      	mov	r1, r3
 800b45a:	4610      	mov	r0, r2
 800b45c:	f7ff fe2e 	bl	800b0bc <create_chain>
 800b460:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d101      	bne.n	800b46c <dir_next+0xe4>
 800b468:	2307      	movs	r3, #7
 800b46a:	e080      	b.n	800b56e <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d101      	bne.n	800b476 <dir_next+0xee>
 800b472:	2302      	movs	r3, #2
 800b474:	e07b      	b.n	800b56e <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b47c:	d101      	bne.n	800b482 <dir_next+0xfa>
 800b47e:	2301      	movs	r3, #1
 800b480:	e075      	b.n	800b56e <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b488:	4618      	mov	r0, r3
 800b48a:	f7ff faaf 	bl	800a9ec <sync_window>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <dir_next+0x110>
 800b494:	2301      	movs	r3, #1
 800b496:	e06a      	b.n	800b56e <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b49e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7ff f85e 	bl	800a566 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800b4b6:	6979      	ldr	r1, [r7, #20]
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	f7ff fbbb 	bl	800ac34 <clust2sect>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	613b      	str	r3, [r7, #16]
 800b4c8:	e01b      	b.n	800b502 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7ff fa85 	bl	800a9ec <sync_window>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <dir_next+0x164>
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e040      	b.n	800b56e <dir_next+0x1e6>
						dp->fs->winsect++;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b4f2:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800b4f6:	3201      	adds	r2, #1
 800b4f8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	3301      	adds	r3, #1
 800b500:	613b      	str	r3, [r7, #16]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b508:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b50c:	461a      	mov	r2, r3
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	4293      	cmp	r3, r2
 800b512:	d3da      	bcc.n	800b4ca <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b51a:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	1a8a      	subs	r2, r1, r2
 800b528:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b53a:	6979      	ldr	r1, [r7, #20]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff fb79 	bl	800ac34 <clust2sect>
 800b542:	4602      	mov	r2, r0
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b55a:	461a      	mov	r2, r3
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f003 030f 	and.w	r3, r3, #15
 800b562:	015b      	lsls	r3, r3, #5
 800b564:	441a      	add	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	371c      	adds	r7, #28
 800b572:	46bd      	mov	sp, r7
 800b574:	bd90      	pop	{r4, r7, pc}

0800b576 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b084      	sub	sp, #16
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800b580:	2100      	movs	r1, #0
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff fe6c 	bl	800b260 <dir_sdi>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d131      	bne.n	800b5f6 <dir_alloc+0x80>
		n = 0;
 800b592:	2300      	movs	r3, #0
 800b594:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	f7ff fa6a 	bl	800aa7e <move_window>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b5ae:	7bfb      	ldrb	r3, [r7, #15]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d11f      	bne.n	800b5f4 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	2be5      	cmp	r3, #229	; 0xe5
 800b5be:	d005      	beq.n	800b5cc <dir_alloc+0x56>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d107      	bne.n	800b5dc <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	60bb      	str	r3, [r7, #8]
 800b5d2:	68ba      	ldr	r2, [r7, #8]
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d102      	bne.n	800b5e0 <dir_alloc+0x6a>
 800b5da:	e00c      	b.n	800b5f6 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b5dc:	2300      	movs	r3, #0
 800b5de:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7ff fed0 	bl	800b388 <dir_next>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d0d1      	beq.n	800b596 <dir_alloc+0x20>
 800b5f2:	e000      	b.n	800b5f6 <dir_alloc+0x80>
			if (res != FR_OK) break;
 800b5f4:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
 800b5f8:	2b04      	cmp	r3, #4
 800b5fa:	d101      	bne.n	800b600 <dir_alloc+0x8a>
 800b5fc:	2307      	movs	r3, #7
 800b5fe:	73fb      	strb	r3, [r7, #15]
	return res;
 800b600:	7bfb      	ldrb	r3, [r7, #15]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b085      	sub	sp, #20
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	331b      	adds	r3, #27
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	021b      	lsls	r3, r3, #8
 800b61c:	b21a      	sxth	r2, r3
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	331a      	adds	r3, #26
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	b21b      	sxth	r3, r3
 800b626:	4313      	orrs	r3, r2
 800b628:	b21b      	sxth	r3, r3
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b634:	2b03      	cmp	r3, #3
 800b636:	d10f      	bne.n	800b658 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	3315      	adds	r3, #21
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	021b      	lsls	r3, r3, #8
 800b640:	b21a      	sxth	r2, r3
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	3314      	adds	r3, #20
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	b21b      	sxth	r3, r3
 800b64a:	4313      	orrs	r3, r2
 800b64c:	b21b      	sxth	r3, r3
 800b64e:	b29b      	uxth	r3, r3
 800b650:	041b      	lsls	r3, r3, #16
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	4313      	orrs	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]

	return cl;
 800b658:	68fb      	ldr	r3, [r7, #12]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	331a      	adds	r3, #26
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	b2d2      	uxtb	r2, r2
 800b678:	701a      	strb	r2, [r3, #0]
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	0a1b      	lsrs	r3, r3, #8
 800b680:	b29a      	uxth	r2, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	331b      	adds	r3, #27
 800b686:	b2d2      	uxtb	r2, r2
 800b688:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	0c1a      	lsrs	r2, r3, #16
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	3314      	adds	r3, #20
 800b692:	b2d2      	uxtb	r2, r2
 800b694:	701a      	strb	r2, [r3, #0]
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	0c1b      	lsrs	r3, r3, #16
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	0a1b      	lsrs	r3, r3, #8
 800b69e:	b29a      	uxth	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3315      	adds	r3, #21
 800b6a4:	b2d2      	uxtb	r2, r2
 800b6a6:	701a      	strb	r2, [r3, #0]
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b6bc:	2100      	movs	r1, #0
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7ff fdce 	bl	800b260 <dir_sdi>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d001      	beq.n	800b6d2 <dir_find+0x1e>
 800b6ce:	7dfb      	ldrb	r3, [r7, #23]
 800b6d0:	e03b      	b.n	800b74a <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b6de:	4619      	mov	r1, r3
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	f7ff f9cc 	bl	800aa7e <move_window>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d128      	bne.n	800b742 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b6f6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
 800b6fc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d102      	bne.n	800b70a <dir_find+0x56>
 800b704:	2304      	movs	r3, #4
 800b706:	75fb      	strb	r3, [r7, #23]
 800b708:	e01e      	b.n	800b748 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	330b      	adds	r3, #11
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	f003 0308 	and.w	r3, r3, #8
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10a      	bne.n	800b72e <dir_find+0x7a>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b71e:	220b      	movs	r2, #11
 800b720:	4619      	mov	r1, r3
 800b722:	6938      	ldr	r0, [r7, #16]
 800b724:	f7fe ff3a 	bl	800a59c <mem_cmp>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00b      	beq.n	800b746 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800b72e:	2100      	movs	r1, #0
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7ff fe29 	bl	800b388 <dir_next>
 800b736:	4603      	mov	r3, r0
 800b738:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d0c8      	beq.n	800b6d2 <dir_find+0x1e>
 800b740:	e002      	b.n	800b748 <dir_find+0x94>
		if (res != FR_OK) break;
 800b742:	bf00      	nop
 800b744:	e000      	b.n	800b748 <dir_find+0x94>
			break;
 800b746:	bf00      	nop

	return res;
 800b748:	7dfb      	ldrb	r3, [r7, #23]
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3718      	adds	r7, #24
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b084      	sub	sp, #16
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b75a:	2101      	movs	r1, #1
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7ff ff0a 	bl	800b576 <dir_alloc>
 800b762:	4603      	mov	r3, r0
 800b764:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800b766:	7bfb      	ldrb	r3, [r7, #15]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d126      	bne.n	800b7ba <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b778:	4619      	mov	r1, r3
 800b77a:	4610      	mov	r0, r2
 800b77c:	f7ff f97f 	bl	800aa7e <move_window>
 800b780:	4603      	mov	r3, r0
 800b782:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b784:	7bfb      	ldrb	r3, [r7, #15]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d117      	bne.n	800b7ba <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b790:	2220      	movs	r2, #32
 800b792:	2100      	movs	r1, #0
 800b794:	4618      	mov	r0, r3
 800b796:	f7fe fee6 	bl	800a566 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b7a6:	220b      	movs	r2, #11
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	f7fe febd 	bl	800a528 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b088      	sub	sp, #32
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	60fb      	str	r3, [r7, #12]
 800b7d4:	e002      	b.n	800b7dc <create_name+0x18>
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	60fb      	str	r3, [r7, #12]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	2b2f      	cmp	r3, #47	; 0x2f
 800b7e2:	d0f8      	beq.n	800b7d6 <create_name+0x12>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b5c      	cmp	r3, #92	; 0x5c
 800b7ea:	d0f4      	beq.n	800b7d6 <create_name+0x12>
	sfn = dp->fn;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b7f2:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b7f4:	220b      	movs	r2, #11
 800b7f6:	2120      	movs	r1, #32
 800b7f8:	68b8      	ldr	r0, [r7, #8]
 800b7fa:	f7fe feb4 	bl	800a566 <mem_set>
	si = i = b = 0; ni = 8;
 800b7fe:	2300      	movs	r3, #0
 800b800:	77fb      	strb	r3, [r7, #31]
 800b802:	2300      	movs	r3, #0
 800b804:	613b      	str	r3, [r7, #16]
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	617b      	str	r3, [r7, #20]
 800b80a:	2308      	movs	r3, #8
 800b80c:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	1c5a      	adds	r2, r3, #1
 800b812:	617a      	str	r2, [r7, #20]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	4413      	add	r3, r2
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800b81c:	7fbb      	ldrb	r3, [r7, #30]
 800b81e:	2b20      	cmp	r3, #32
 800b820:	d953      	bls.n	800b8ca <create_name+0x106>
 800b822:	7fbb      	ldrb	r3, [r7, #30]
 800b824:	2b2f      	cmp	r3, #47	; 0x2f
 800b826:	d050      	beq.n	800b8ca <create_name+0x106>
 800b828:	7fbb      	ldrb	r3, [r7, #30]
 800b82a:	2b5c      	cmp	r3, #92	; 0x5c
 800b82c:	d04d      	beq.n	800b8ca <create_name+0x106>
		if (c == '.' || i >= ni) {
 800b82e:	7fbb      	ldrb	r3, [r7, #30]
 800b830:	2b2e      	cmp	r3, #46	; 0x2e
 800b832:	d003      	beq.n	800b83c <create_name+0x78>
 800b834:	693a      	ldr	r2, [r7, #16]
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d30f      	bcc.n	800b85c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	2b08      	cmp	r3, #8
 800b840:	d102      	bne.n	800b848 <create_name+0x84>
 800b842:	7fbb      	ldrb	r3, [r7, #30]
 800b844:	2b2e      	cmp	r3, #46	; 0x2e
 800b846:	d001      	beq.n	800b84c <create_name+0x88>
 800b848:	2306      	movs	r3, #6
 800b84a:	e073      	b.n	800b934 <create_name+0x170>
			i = 8; ni = 11;
 800b84c:	2308      	movs	r3, #8
 800b84e:	613b      	str	r3, [r7, #16]
 800b850:	230b      	movs	r3, #11
 800b852:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800b854:	7ffb      	ldrb	r3, [r7, #31]
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	77fb      	strb	r3, [r7, #31]
 800b85a:	e035      	b.n	800b8c8 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b85c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b860:	2b00      	cmp	r3, #0
 800b862:	da08      	bge.n	800b876 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800b864:	7ffb      	ldrb	r3, [r7, #31]
 800b866:	f043 0303 	orr.w	r3, r3, #3
 800b86a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b86c:	7fbb      	ldrb	r3, [r7, #30]
 800b86e:	3b80      	subs	r3, #128	; 0x80
 800b870:	4a32      	ldr	r2, [pc, #200]	; (800b93c <create_name+0x178>)
 800b872:	5cd3      	ldrb	r3, [r2, r3]
 800b874:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800b876:	7fbb      	ldrb	r3, [r7, #30]
 800b878:	4619      	mov	r1, r3
 800b87a:	4831      	ldr	r0, [pc, #196]	; (800b940 <create_name+0x17c>)
 800b87c:	f7fe feb5 	bl	800a5ea <chk_chr>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <create_name+0xc6>
				return FR_INVALID_NAME;
 800b886:	2306      	movs	r3, #6
 800b888:	e054      	b.n	800b934 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800b88a:	7fbb      	ldrb	r3, [r7, #30]
 800b88c:	2b40      	cmp	r3, #64	; 0x40
 800b88e:	d907      	bls.n	800b8a0 <create_name+0xdc>
 800b890:	7fbb      	ldrb	r3, [r7, #30]
 800b892:	2b5a      	cmp	r3, #90	; 0x5a
 800b894:	d804      	bhi.n	800b8a0 <create_name+0xdc>
				b |= 2;
 800b896:	7ffb      	ldrb	r3, [r7, #31]
 800b898:	f043 0302 	orr.w	r3, r3, #2
 800b89c:	77fb      	strb	r3, [r7, #31]
 800b89e:	e00c      	b.n	800b8ba <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800b8a0:	7fbb      	ldrb	r3, [r7, #30]
 800b8a2:	2b60      	cmp	r3, #96	; 0x60
 800b8a4:	d909      	bls.n	800b8ba <create_name+0xf6>
 800b8a6:	7fbb      	ldrb	r3, [r7, #30]
 800b8a8:	2b7a      	cmp	r3, #122	; 0x7a
 800b8aa:	d806      	bhi.n	800b8ba <create_name+0xf6>
					b |= 1; c -= 0x20;
 800b8ac:	7ffb      	ldrb	r3, [r7, #31]
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	77fb      	strb	r3, [r7, #31]
 800b8b4:	7fbb      	ldrb	r3, [r7, #30]
 800b8b6:	3b20      	subs	r3, #32
 800b8b8:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	1c5a      	adds	r2, r3, #1
 800b8be:	613a      	str	r2, [r7, #16]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	7fba      	ldrb	r2, [r7, #30]
 800b8c6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b8c8:	e7a1      	b.n	800b80e <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	441a      	add	r2, r3
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800b8d4:	7fbb      	ldrb	r3, [r7, #30]
 800b8d6:	2b20      	cmp	r3, #32
 800b8d8:	d801      	bhi.n	800b8de <create_name+0x11a>
 800b8da:	2304      	movs	r3, #4
 800b8dc:	e000      	b.n	800b8e0 <create_name+0x11c>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <create_name+0x128>
 800b8e8:	2306      	movs	r3, #6
 800b8ea:	e023      	b.n	800b934 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	2be5      	cmp	r3, #229	; 0xe5
 800b8f2:	d102      	bne.n	800b8fa <create_name+0x136>
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	2205      	movs	r2, #5
 800b8f8:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	2b08      	cmp	r3, #8
 800b8fe:	d102      	bne.n	800b906 <create_name+0x142>
 800b900:	7ffb      	ldrb	r3, [r7, #31]
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800b906:	7ffb      	ldrb	r3, [r7, #31]
 800b908:	f003 0303 	and.w	r3, r3, #3
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d103      	bne.n	800b918 <create_name+0x154>
 800b910:	7fbb      	ldrb	r3, [r7, #30]
 800b912:	f043 0310 	orr.w	r3, r3, #16
 800b916:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800b918:	7ffb      	ldrb	r3, [r7, #31]
 800b91a:	f003 030c 	and.w	r3, r3, #12
 800b91e:	2b04      	cmp	r3, #4
 800b920:	d103      	bne.n	800b92a <create_name+0x166>
 800b922:	7fbb      	ldrb	r3, [r7, #30]
 800b924:	f043 0308 	orr.w	r3, r3, #8
 800b928:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	330b      	adds	r3, #11
 800b92e:	7fba      	ldrb	r2, [r7, #30]
 800b930:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b932:	2300      	movs	r3, #0
#endif
}
 800b934:	4618      	mov	r0, r3
 800b936:	3720      	adds	r7, #32
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	08017ec4 	.word	0x08017ec4
 800b940:	08017f44 	.word	0x08017f44

0800b944 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	2b2f      	cmp	r3, #47	; 0x2f
 800b954:	d003      	beq.n	800b95e <follow_path+0x1a>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	2b5c      	cmp	r3, #92	; 0x5c
 800b95c:	d102      	bne.n	800b964 <follow_path+0x20>
		path++;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	3301      	adds	r3, #1
 800b962:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	2b1f      	cmp	r3, #31
 800b972:	d80a      	bhi.n	800b98a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800b974:	2100      	movs	r1, #0
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7ff fc72 	bl	800b260 <dir_sdi>
 800b97c:	4603      	mov	r3, r0
 800b97e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b988:	e045      	b.n	800ba16 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b98a:	463b      	mov	r3, r7
 800b98c:	4619      	mov	r1, r3
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7ff ff18 	bl	800b7c4 <create_name>
 800b994:	4603      	mov	r3, r0
 800b996:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800b998:	7bfb      	ldrb	r3, [r7, #15]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d136      	bne.n	800ba0c <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7ff fe88 	bl	800b6b4 <dir_find>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800b9ae:	7adb      	ldrb	r3, [r3, #11]
 800b9b0:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800b9b2:	7bfb      	ldrb	r3, [r7, #15]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00a      	beq.n	800b9ce <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b9b8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ba:	2b04      	cmp	r3, #4
 800b9bc:	d128      	bne.n	800ba10 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b9be:	7bbb      	ldrb	r3, [r7, #14]
 800b9c0:	f003 0304 	and.w	r3, r3, #4
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d123      	bne.n	800ba10 <follow_path+0xcc>
 800b9c8:	2305      	movs	r3, #5
 800b9ca:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800b9cc:	e020      	b.n	800ba10 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b9ce:	7bbb      	ldrb	r3, [r7, #14]
 800b9d0:	f003 0304 	and.w	r3, r3, #4
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d11d      	bne.n	800ba14 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b9de:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	330b      	adds	r3, #11
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	f003 0310 	and.w	r3, r3, #16
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d102      	bne.n	800b9f4 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800b9ee:	2305      	movs	r3, #5
 800b9f0:	73fb      	strb	r3, [r7, #15]
 800b9f2:	e010      	b.n	800ba16 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7ff fe04 	bl	800b60a <ld_clust>
 800ba02:	4602      	mov	r2, r0
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba0a:	e7be      	b.n	800b98a <follow_path+0x46>
			if (res != FR_OK) break;
 800ba0c:	bf00      	nop
 800ba0e:	e002      	b.n	800ba16 <follow_path+0xd2>
				break;
 800ba10:	bf00      	nop
 800ba12:	e000      	b.n	800ba16 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba14:	bf00      	nop
		}
	}

	return res;
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b087      	sub	sp, #28
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ba28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba2c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d031      	beq.n	800ba9a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	617b      	str	r3, [r7, #20]
 800ba3c:	e002      	b.n	800ba44 <get_ldnumber+0x24>
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	3301      	adds	r3, #1
 800ba42:	617b      	str	r3, [r7, #20]
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	781b      	ldrb	r3, [r3, #0]
 800ba48:	2b20      	cmp	r3, #32
 800ba4a:	d903      	bls.n	800ba54 <get_ldnumber+0x34>
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b3a      	cmp	r3, #58	; 0x3a
 800ba52:	d1f4      	bne.n	800ba3e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	2b3a      	cmp	r3, #58	; 0x3a
 800ba5a:	d11c      	bne.n	800ba96 <get_ldnumber+0x76>
			tp = *path;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	1c5a      	adds	r2, r3, #1
 800ba66:	60fa      	str	r2, [r7, #12]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	3b30      	subs	r3, #48	; 0x30
 800ba6c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2b09      	cmp	r3, #9
 800ba72:	d80e      	bhi.n	800ba92 <get_ldnumber+0x72>
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d10a      	bne.n	800ba92 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d107      	bne.n	800ba92 <get_ldnumber+0x72>
					vol = (int)i;
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	617b      	str	r3, [r7, #20]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	e002      	b.n	800ba9c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ba96:	2300      	movs	r3, #0
 800ba98:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ba9a:	693b      	ldr	r3, [r7, #16]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	371c      	adds	r7, #28
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bac0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800bac4:	6839      	ldr	r1, [r7, #0]
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7fe ffd9 	bl	800aa7e <move_window>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d001      	beq.n	800bad6 <check_fs+0x2e>
		return 3;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e04a      	b.n	800bb6c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800badc:	3301      	adds	r3, #1
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	021b      	lsls	r3, r3, #8
 800bae2:	b21a      	sxth	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800baea:	b21b      	sxth	r3, r3
 800baec:	4313      	orrs	r3, r2
 800baee:	b21b      	sxth	r3, r3
 800baf0:	4a20      	ldr	r2, [pc, #128]	; (800bb74 <check_fs+0xcc>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d001      	beq.n	800bafa <check_fs+0x52>
		return 2;
 800baf6:	2302      	movs	r3, #2
 800baf8:	e038      	b.n	800bb6c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	3336      	adds	r3, #54	; 0x36
 800bafe:	3303      	adds	r3, #3
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	061a      	lsls	r2, r3, #24
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	3336      	adds	r3, #54	; 0x36
 800bb08:	3302      	adds	r3, #2
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	041b      	lsls	r3, r3, #16
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	3236      	adds	r2, #54	; 0x36
 800bb14:	3201      	adds	r2, #1
 800bb16:	7812      	ldrb	r2, [r2, #0]
 800bb18:	0212      	lsls	r2, r2, #8
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800bb22:	4313      	orrs	r3, r2
 800bb24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bb28:	4a13      	ldr	r2, [pc, #76]	; (800bb78 <check_fs+0xd0>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d101      	bne.n	800bb32 <check_fs+0x8a>
		return 0;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e01c      	b.n	800bb6c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	3352      	adds	r3, #82	; 0x52
 800bb36:	3303      	adds	r3, #3
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	061a      	lsls	r2, r3, #24
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	3352      	adds	r3, #82	; 0x52
 800bb40:	3302      	adds	r3, #2
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	041b      	lsls	r3, r3, #16
 800bb46:	4313      	orrs	r3, r2
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	3252      	adds	r2, #82	; 0x52
 800bb4c:	3201      	adds	r2, #1
 800bb4e:	7812      	ldrb	r2, [r2, #0]
 800bb50:	0212      	lsls	r2, r2, #8
 800bb52:	4313      	orrs	r3, r2
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bb60:	4a05      	ldr	r2, [pc, #20]	; (800bb78 <check_fs+0xd0>)
 800bb62:	4293      	cmp	r3, r2
 800bb64:	d101      	bne.n	800bb6a <check_fs+0xc2>
		return 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	e000      	b.n	800bb6c <check_fs+0xc4>

	return 1;
 800bb6a:	2301      	movs	r3, #1
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	ffffaa55 	.word	0xffffaa55
 800bb78:	00544146 	.word	0x00544146

0800bb7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b096      	sub	sp, #88	; 0x58
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	4613      	mov	r3, r2
 800bb88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bb90:	68b8      	ldr	r0, [r7, #8]
 800bb92:	f7ff ff45 	bl	800ba20 <get_ldnumber>
 800bb96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	da01      	bge.n	800bba2 <find_volume+0x26>
 800bb9e:	230b      	movs	r3, #11
 800bba0:	e2b2      	b.n	800c108 <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bba2:	4aa2      	ldr	r2, [pc, #648]	; (800be2c <find_volume+0x2b0>)
 800bba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbaa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <find_volume+0x3a>
 800bbb2:	230c      	movs	r3, #12
 800bbb4:	e2a8      	b.n	800c108 <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 800bbb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbb8:	f7fe fd32 	bl	800a620 <lock_fs>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d101      	bne.n	800bbc6 <find_volume+0x4a>
 800bbc2:	230f      	movs	r3, #15
 800bbc4:	e2a0      	b.n	800c108 <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbca:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d01b      	beq.n	800bc0e <find_volume+0x92>
		stat = disk_status(fs->drv);
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fe fc05 	bl	800a3ec <disk_status>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bbe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10c      	bne.n	800bc0e <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800bbf4:	79fb      	ldrb	r3, [r7, #7]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d007      	beq.n	800bc0a <find_volume+0x8e>
 800bbfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbfe:	f003 0304 	and.w	r3, r3, #4
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800bc06:	230a      	movs	r3, #10
 800bc08:	e27e      	b.n	800c108 <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e27c      	b.n	800c108 <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc22:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fe fbfa 	bl	800a420 <disk_initialize>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800bc32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc36:	f003 0301 	and.w	r3, r3, #1
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d001      	beq.n	800bc42 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e262      	b.n	800c108 <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800bc42:	79fb      	ldrb	r3, [r7, #7]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d007      	beq.n	800bc58 <find_volume+0xdc>
 800bc48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc4c:	f003 0304 	and.w	r3, r3, #4
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d001      	beq.n	800bc58 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800bc54:	230a      	movs	r3, #10
 800bc56:	e257      	b.n	800c108 <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800bc5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc60:	f7ff ff22 	bl	800baa8 <check_fs>
 800bc64:	4603      	mov	r3, r0
 800bc66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800bc6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d155      	bne.n	800bd1e <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800bc72:	2300      	movs	r3, #0
 800bc74:	643b      	str	r3, [r7, #64]	; 0x40
 800bc76:	e029      	b.n	800bccc <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800bc78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc7c:	011b      	lsls	r3, r3, #4
 800bc7e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bc82:	4413      	add	r3, r2
 800bc84:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800bc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc88:	3304      	adds	r3, #4
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d012      	beq.n	800bcb6 <find_volume+0x13a>
 800bc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc92:	330b      	adds	r3, #11
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	061a      	lsls	r2, r3, #24
 800bc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9a:	330a      	adds	r3, #10
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	041b      	lsls	r3, r3, #16
 800bca0:	4313      	orrs	r3, r2
 800bca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bca4:	3209      	adds	r2, #9
 800bca6:	7812      	ldrb	r2, [r2, #0]
 800bca8:	0212      	lsls	r2, r2, #8
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcae:	3208      	adds	r2, #8
 800bcb0:	7812      	ldrb	r2, [r2, #0]
 800bcb2:	431a      	orrs	r2, r3
 800bcb4:	e000      	b.n	800bcb8 <find_volume+0x13c>
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bcc0:	440b      	add	r3, r1
 800bcc2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800bcc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcc8:	3301      	adds	r3, #1
 800bcca:	643b      	str	r3, [r7, #64]	; 0x40
 800bccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	d9d2      	bls.n	800bc78 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bcd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <find_volume+0x166>
 800bcdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcde:	3b01      	subs	r3, #1
 800bce0:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800bce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bcea:	4413      	add	r3, r2
 800bcec:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bcf0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800bcf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d005      	beq.n	800bd04 <find_volume+0x188>
 800bcf8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcfc:	f7ff fed4 	bl	800baa8 <check_fs>
 800bd00:	4603      	mov	r3, r0
 800bd02:	e000      	b.n	800bd06 <find_volume+0x18a>
 800bd04:	2302      	movs	r3, #2
 800bd06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800bd0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d005      	beq.n	800bd1e <find_volume+0x1a2>
 800bd12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd14:	3301      	adds	r3, #1
 800bd16:	643b      	str	r3, [r7, #64]	; 0x40
 800bd18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d9e1      	bls.n	800bce2 <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bd1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd22:	2b03      	cmp	r3, #3
 800bd24:	d101      	bne.n	800bd2a <find_volume+0x1ae>
 800bd26:	2301      	movs	r3, #1
 800bd28:	e1ee      	b.n	800c108 <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800bd2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d001      	beq.n	800bd36 <find_volume+0x1ba>
 800bd32:	230d      	movs	r3, #13
 800bd34:	e1e8      	b.n	800c108 <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd38:	7b1b      	ldrb	r3, [r3, #12]
 800bd3a:	021b      	lsls	r3, r3, #8
 800bd3c:	b21a      	sxth	r2, r3
 800bd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd40:	7adb      	ldrb	r3, [r3, #11]
 800bd42:	b21b      	sxth	r3, r3
 800bd44:	4313      	orrs	r3, r2
 800bd46:	b21b      	sxth	r3, r3
 800bd48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd4c:	d001      	beq.n	800bd52 <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 800bd4e:	230d      	movs	r3, #13
 800bd50:	e1da      	b.n	800c108 <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800bd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd54:	7ddb      	ldrb	r3, [r3, #23]
 800bd56:	021b      	lsls	r3, r3, #8
 800bd58:	b21a      	sxth	r2, r3
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5c:	7d9b      	ldrb	r3, [r3, #22]
 800bd5e:	b21b      	sxth	r3, r3
 800bd60:	4313      	orrs	r3, r2
 800bd62:	b21b      	sxth	r3, r3
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800bd68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d112      	bne.n	800bd94 <find_volume+0x218>
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd70:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800bd74:	061a      	lsls	r2, r3, #24
 800bd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd78:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800bd7c:	041b      	lsls	r3, r3, #16
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd82:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800bd86:	0212      	lsls	r2, r2, #8
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd8c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800bd90:	4313      	orrs	r3, r2
 800bd92:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800bd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd98:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800bd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9e:	7c1a      	ldrb	r2, [r3, #16]
 800bda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda2:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800bda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d006      	beq.n	800bdbe <find_volume+0x242>
 800bdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	d001      	beq.n	800bdbe <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 800bdba:	230d      	movs	r3, #13
 800bdbc:	e1a4      	b.n	800c108 <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdc8:	fb02 f303 	mul.w	r3, r2, r3
 800bdcc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	7b5a      	ldrb	r2, [r3, #13]
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdda:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00a      	beq.n	800bdf8 <find_volume+0x27c>
 800bde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bde8:	461a      	mov	r2, r3
 800bdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d001      	beq.n	800bdfc <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 800bdf8:	230d      	movs	r3, #13
 800bdfa:	e185      	b.n	800c108 <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800bdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfe:	7c9b      	ldrb	r3, [r3, #18]
 800be00:	021b      	lsls	r3, r3, #8
 800be02:	b21a      	sxth	r2, r3
 800be04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be06:	7c5b      	ldrb	r3, [r3, #17]
 800be08:	b21b      	sxth	r3, r3
 800be0a:	4313      	orrs	r3, r2
 800be0c:	b21b      	sxth	r3, r3
 800be0e:	b29a      	uxth	r2, r3
 800be10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be12:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800be16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be18:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800be1c:	f003 030f 	and.w	r3, r3, #15
 800be20:	b29b      	uxth	r3, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d004      	beq.n	800be30 <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 800be26:	230d      	movs	r3, #13
 800be28:	e16e      	b.n	800c108 <find_volume+0x58c>
 800be2a:	bf00      	nop
 800be2c:	20000264 	.word	0x20000264

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800be30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be32:	7d1b      	ldrb	r3, [r3, #20]
 800be34:	021b      	lsls	r3, r3, #8
 800be36:	b21a      	sxth	r2, r3
 800be38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3a:	7cdb      	ldrb	r3, [r3, #19]
 800be3c:	b21b      	sxth	r3, r3
 800be3e:	4313      	orrs	r3, r2
 800be40:	b21b      	sxth	r3, r3
 800be42:	b29b      	uxth	r3, r3
 800be44:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800be46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d112      	bne.n	800be72 <find_volume+0x2f6>
 800be4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800be52:	061a      	lsls	r2, r3, #24
 800be54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be56:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800be5a:	041b      	lsls	r3, r3, #16
 800be5c:	4313      	orrs	r3, r2
 800be5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be60:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800be64:	0212      	lsls	r2, r2, #8
 800be66:	4313      	orrs	r3, r2
 800be68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be6a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800be6e:	4313      	orrs	r3, r2
 800be70:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800be72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be74:	7bdb      	ldrb	r3, [r3, #15]
 800be76:	021b      	lsls	r3, r3, #8
 800be78:	b21a      	sxth	r2, r3
 800be7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7c:	7b9b      	ldrb	r3, [r3, #14]
 800be7e:	b21b      	sxth	r3, r3
 800be80:	4313      	orrs	r3, r2
 800be82:	b21b      	sxth	r3, r3
 800be84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800be86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d101      	bne.n	800be90 <find_volume+0x314>
 800be8c:	230d      	movs	r3, #13
 800be8e:	e13b      	b.n	800c108 <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800be90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be94:	4413      	add	r3, r2
 800be96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be98:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800be9c:	0912      	lsrs	r2, r2, #4
 800be9e:	b292      	uxth	r2, r2
 800bea0:	4413      	add	r3, r2
 800bea2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d201      	bcs.n	800beb0 <find_volume+0x334>
 800beac:	230d      	movs	r3, #13
 800beae:	e12b      	b.n	800c108 <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800beb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800beb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800beb8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800bebc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bec0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d101      	bne.n	800becc <find_volume+0x350>
 800bec8:	230d      	movs	r3, #13
 800beca:	e11d      	b.n	800c108 <find_volume+0x58c>
	fmt = FS_FAT12;
 800becc:	2301      	movs	r3, #1
 800bece:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bed8:	4293      	cmp	r3, r2
 800beda:	d902      	bls.n	800bee2 <find_volume+0x366>
 800bedc:	2302      	movs	r3, #2
 800bede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800bee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bee8:	4293      	cmp	r3, r2
 800beea:	d902      	bls.n	800bef2 <find_volume+0x376>
 800beec:	2303      	movs	r3, #3
 800beee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800bef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef4:	1c9a      	adds	r2, r3, #2
 800bef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 800befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf00:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800bf04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bf06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf08:	441a      	add	r2, r3
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 800bf10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf14:	441a      	add	r2, r3
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 800bf1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf20:	2b03      	cmp	r3, #3
 800bf22:	d121      	bne.n	800bf68 <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d001      	beq.n	800bf32 <find_volume+0x3b6>
 800bf2e:	230d      	movs	r3, #13
 800bf30:	e0ea      	b.n	800c108 <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800bf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf38:	061a      	lsls	r2, r3, #24
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800bf40:	041b      	lsls	r3, r3, #16
 800bf42:	4313      	orrs	r3, r2
 800bf44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf46:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800bf4a:	0212      	lsls	r2, r2, #8
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf50:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800bf54:	431a      	orrs	r2, r3
 800bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf58:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800bf5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	647b      	str	r3, [r7, #68]	; 0x44
 800bf66:	e025      	b.n	800bfb4 <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800bf68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <find_volume+0x3fa>
 800bf72:	230d      	movs	r3, #13
 800bf74:	e0c8      	b.n	800c108 <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800bf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf78:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800bf7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf7e:	441a      	add	r2, r3
 800bf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf82:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bf86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d104      	bne.n	800bf98 <find_volume+0x41c>
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	e00c      	b.n	800bfb2 <find_volume+0x436>
 800bf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	4413      	add	r3, r2
 800bfa4:	085a      	lsrs	r2, r3, #1
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bfac:	f003 0301 	and.w	r3, r3, #1
 800bfb0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800bfb2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800bfba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfbc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bfc0:	0a5b      	lsrs	r3, r3, #9
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d201      	bcs.n	800bfca <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 800bfc6:	230d      	movs	r3, #13
 800bfc8:	e09e      	b.n	800c108 <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800bfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfd6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800bfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfdc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	2280      	movs	r2, #128	; 0x80
 800bfe4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800bfe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfec:	2b03      	cmp	r3, #3
 800bfee:	d177      	bne.n	800c0e0 <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800bff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bff6:	021b      	lsls	r3, r3, #8
 800bff8:	b21a      	sxth	r2, r3
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c000:	b21b      	sxth	r3, r3
 800c002:	4313      	orrs	r3, r2
 800c004:	b21b      	sxth	r3, r3
 800c006:	2b01      	cmp	r3, #1
 800c008:	d16a      	bne.n	800c0e0 <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 800c00a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c00c:	3301      	adds	r3, #1
 800c00e:	4619      	mov	r1, r3
 800c010:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c012:	f7fe fd34 	bl	800aa7e <move_window>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d161      	bne.n	800c0e0 <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 800c01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c026:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800c02a:	021b      	lsls	r3, r3, #8
 800c02c:	b21a      	sxth	r2, r3
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800c034:	b21b      	sxth	r3, r3
 800c036:	4313      	orrs	r3, r2
 800c038:	b21b      	sxth	r3, r3
 800c03a:	4a35      	ldr	r2, [pc, #212]	; (800c110 <find_volume+0x594>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d14f      	bne.n	800c0e0 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	78db      	ldrb	r3, [r3, #3]
 800c044:	061a      	lsls	r2, r3, #24
 800c046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c048:	789b      	ldrb	r3, [r3, #2]
 800c04a:	041b      	lsls	r3, r3, #16
 800c04c:	4313      	orrs	r3, r2
 800c04e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c050:	7852      	ldrb	r2, [r2, #1]
 800c052:	0212      	lsls	r2, r2, #8
 800c054:	4313      	orrs	r3, r2
 800c056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c058:	7812      	ldrb	r2, [r2, #0]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	4a2d      	ldr	r2, [pc, #180]	; (800c114 <find_volume+0x598>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d13e      	bne.n	800c0e0 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800c068:	061a      	lsls	r2, r3, #24
 800c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800c070:	041b      	lsls	r3, r3, #16
 800c072:	4313      	orrs	r3, r2
 800c074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c076:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800c07a:	0212      	lsls	r2, r2, #8
 800c07c:	4313      	orrs	r3, r2
 800c07e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c080:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800c084:	4313      	orrs	r3, r2
 800c086:	4a24      	ldr	r2, [pc, #144]	; (800c118 <find_volume+0x59c>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d129      	bne.n	800c0e0 <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800c092:	061a      	lsls	r2, r3, #24
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800c09a:	041b      	lsls	r3, r3, #16
 800c09c:	4313      	orrs	r3, r2
 800c09e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0a0:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800c0a4:	0212      	lsls	r2, r2, #8
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0aa:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800c0bc:	061a      	lsls	r2, r3, #24
 800c0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c0:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800c0c4:	041b      	lsls	r3, r3, #16
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0ca:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800c0ce:	0212      	lsls	r2, r2, #8
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0d4:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800c0d8:	431a      	orrs	r2, r3
 800c0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c0e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800c0ea:	4b0c      	ldr	r3, [pc, #48]	; (800c11c <find_volume+0x5a0>)
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <find_volume+0x5a0>)
 800c0f4:	801a      	strh	r2, [r3, #0]
 800c0f6:	4b09      	ldr	r3, [pc, #36]	; (800c11c <find_volume+0x5a0>)
 800c0f8:	881a      	ldrh	r2, [r3, #0]
 800c0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800c100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c102:	f7fe fc49 	bl	800a998 <clear_lock>
#endif

	return FR_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3758      	adds	r7, #88	; 0x58
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	ffffaa55 	.word	0xffffaa55
 800c114:	41615252 	.word	0x41615252
 800c118:	61417272 	.word	0x61417272
 800c11c:	20000268 	.word	0x20000268

0800c120 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d022      	beq.n	800c178 <validate+0x58>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d01d      	beq.n	800c178 <validate+0x58>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c142:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c146:	2b00      	cmp	r3, #0
 800c148:	d016      	beq.n	800c178 <validate+0x58>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c150:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d10c      	bne.n	800c178 <validate+0x58>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c164:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fe f93f 	bl	800a3ec <disk_status>
 800c16e:	4603      	mov	r3, r0
 800c170:	f003 0301 	and.w	r3, r3, #1
 800c174:	2b00      	cmp	r3, #0
 800c176:	d001      	beq.n	800c17c <validate+0x5c>
		return FR_INVALID_OBJECT;
 800c178:	2309      	movs	r3, #9
 800c17a:	e00b      	b.n	800c194 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c182:	4618      	mov	r0, r3
 800c184:	f7fe fa4c 	bl	800a620 <lock_fs>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <validate+0x72>
 800c18e:	230f      	movs	r3, #15
 800c190:	e000      	b.n	800c194 <validate+0x74>

	return FR_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b088      	sub	sp, #32
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800c1ae:	f107 0310 	add.w	r3, r7, #16
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7ff fc34 	bl	800ba20 <get_ldnumber>
 800c1b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	da01      	bge.n	800c1c4 <f_mount+0x28>
 800c1c0:	230b      	movs	r3, #11
 800c1c2:	e04c      	b.n	800c25e <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c1c4:	4a28      	ldr	r2, [pc, #160]	; (800c268 <f_mount+0xcc>)
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d011      	beq.n	800c1f8 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 800c1d4:	69b8      	ldr	r0, [r7, #24]
 800c1d6:	f7fe fbdf 	bl	800a998 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f000 fdb8 	bl	800cd56 <ff_del_syncobj>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <f_mount+0x54>
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	e036      	b.n	800c25e <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d011      	beq.n	800c222 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800c210:	4619      	mov	r1, r3
 800c212:	4610      	mov	r0, r2
 800c214:	f000 fd81 	bl	800cd1a <ff_cre_syncobj>
 800c218:	4603      	mov	r3, r0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d101      	bne.n	800c222 <f_mount+0x86>
 800c21e:	2302      	movs	r3, #2
 800c220:	e01d      	b.n	800c25e <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	4910      	ldr	r1, [pc, #64]	; (800c268 <f_mount+0xcc>)
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d002      	beq.n	800c238 <f_mount+0x9c>
 800c232:	79fb      	ldrb	r3, [r7, #7]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d001      	beq.n	800c23c <f_mount+0xa0>
 800c238:	2300      	movs	r3, #0
 800c23a:	e010      	b.n	800c25e <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800c23c:	f107 0108 	add.w	r1, r7, #8
 800c240:	f107 030c 	add.w	r3, r7, #12
 800c244:	2200      	movs	r2, #0
 800c246:	4618      	mov	r0, r3
 800c248:	f7ff fc98 	bl	800bb7c <find_volume>
 800c24c:	4603      	mov	r3, r0
 800c24e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	7dfa      	ldrb	r2, [r7, #23]
 800c254:	4611      	mov	r1, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe f9f1 	bl	800a63e <unlock_fs>
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3720      	adds	r7, #32
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	20000264 	.word	0x20000264

0800c26c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800c272:	af00      	add	r7, sp, #0
 800c274:	f107 030c 	add.w	r3, r7, #12
 800c278:	6018      	str	r0, [r3, #0]
 800c27a:	f107 0308 	add.w	r3, r7, #8
 800c27e:	6019      	str	r1, [r3, #0]
 800c280:	1dfb      	adds	r3, r7, #7
 800c282:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800c284:	f107 030c 	add.w	r3, r7, #12
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d101      	bne.n	800c292 <f_open+0x26>
 800c28e:	2309      	movs	r3, #9
 800c290:	e1fc      	b.n	800c68c <f_open+0x420>
	fp->fs = 0;			/* Clear file object */
 800c292:	f107 030c 	add.w	r3, r7, #12
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2200      	movs	r2, #0
 800c29a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800c29e:	1dfb      	adds	r3, r7, #7
 800c2a0:	1dfa      	adds	r2, r7, #7
 800c2a2:	7812      	ldrb	r2, [r2, #0]
 800c2a4:	f002 021f 	and.w	r2, r2, #31
 800c2a8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800c2aa:	1dfb      	adds	r3, r7, #7
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	f023 0301 	bic.w	r3, r3, #1
 800c2b2:	b2da      	uxtb	r2, r3
 800c2b4:	f107 0108 	add.w	r1, r7, #8
 800c2b8:	f107 031c 	add.w	r3, r7, #28
 800c2bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7ff fc5b 	bl	800bb7c <find_volume>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800c2cc:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f040 81cf 	bne.w	800c674 <f_open+0x408>
		INIT_BUF(dj);
 800c2d6:	f107 031c 	add.w	r3, r7, #28
 800c2da:	f107 0210 	add.w	r2, r7, #16
 800c2de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800c2e2:	f107 0308 	add.w	r3, r7, #8
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	f107 031c 	add.w	r3, r7, #28
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7ff fb28 	bl	800b944 <follow_path>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800c2fa:	f107 031c 	add.w	r3, r7, #28
 800c2fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c302:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c306:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d11a      	bne.n	800c344 <f_open+0xd8>
			if (!dir)	/* Default directory itself */
 800c30e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c312:	2b00      	cmp	r3, #0
 800c314:	d103      	bne.n	800c31e <f_open+0xb2>
				res = FR_INVALID_NAME;
 800c316:	2306      	movs	r3, #6
 800c318:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800c31c:	e012      	b.n	800c344 <f_open+0xd8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c31e:	1dfb      	adds	r3, r7, #7
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	f023 0301 	bic.w	r3, r3, #1
 800c326:	2b00      	cmp	r3, #0
 800c328:	bf14      	ite	ne
 800c32a:	2301      	movne	r3, #1
 800c32c:	2300      	moveq	r3, #0
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	461a      	mov	r2, r3
 800c332:	f107 031c 	add.w	r3, r7, #28
 800c336:	4611      	mov	r1, r2
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fe f99f 	bl	800a67c <chk_lock>
 800c33e:	4603      	mov	r3, r0
 800c340:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c344:	1dfb      	adds	r3, r7, #7
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	f003 031c 	and.w	r3, r3, #28
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f000 80cc 	beq.w	800c4ea <f_open+0x27e>
			if (res != FR_OK) {					/* No file, create new */
 800c352:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800c356:	2b00      	cmp	r3, #0
 800c358:	d01f      	beq.n	800c39a <f_open+0x12e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800c35a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800c35e:	2b04      	cmp	r3, #4
 800c360:	d10e      	bne.n	800c380 <f_open+0x114>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c362:	f7fe f9f9 	bl	800a758 <enq_lock>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d006      	beq.n	800c37a <f_open+0x10e>
 800c36c:	f107 031c 	add.w	r3, r7, #28
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff f9ee 	bl	800b752 <dir_register>
 800c376:	4603      	mov	r3, r0
 800c378:	e000      	b.n	800c37c <f_open+0x110>
 800c37a:	2312      	movs	r3, #18
 800c37c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c380:	1dfb      	adds	r3, r7, #7
 800c382:	1dfa      	adds	r2, r7, #7
 800c384:	7812      	ldrb	r2, [r2, #0]
 800c386:	f042 0208 	orr.w	r2, r2, #8
 800c38a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800c38c:	f107 031c 	add.w	r3, r7, #28
 800c390:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c394:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800c398:	e014      	b.n	800c3c4 <f_open+0x158>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c39a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c39e:	330b      	adds	r3, #11
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	f003 0311 	and.w	r3, r3, #17
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d003      	beq.n	800c3b2 <f_open+0x146>
					res = FR_DENIED;
 800c3aa:	2307      	movs	r3, #7
 800c3ac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800c3b0:	e008      	b.n	800c3c4 <f_open+0x158>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800c3b2:	1dfb      	adds	r3, r7, #7
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	f003 0304 	and.w	r3, r3, #4
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d002      	beq.n	800c3c4 <f_open+0x158>
						res = FR_EXIST;
 800c3be:	2308      	movs	r3, #8
 800c3c0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c3c4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	f040 80af 	bne.w	800c52c <f_open+0x2c0>
 800c3ce:	1dfb      	adds	r3, r7, #7
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	f003 0308 	and.w	r3, r3, #8
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 80a8 	beq.w	800c52c <f_open+0x2c0>
				dw = GET_FATTIME();				/* Created time */
 800c3dc:	f7fd fbd4 	bl	8009b88 <get_fattime>
 800c3e0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800c3e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c3e8:	330e      	adds	r3, #14
 800c3ea:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800c3ee:	b2d2      	uxtb	r2, r2
 800c3f0:	701a      	strb	r2, [r3, #0]
 800c3f2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	0a1b      	lsrs	r3, r3, #8
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c400:	330f      	adds	r3, #15
 800c402:	b2d2      	uxtb	r2, r2
 800c404:	701a      	strb	r2, [r3, #0]
 800c406:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800c40a:	0c1a      	lsrs	r2, r3, #16
 800c40c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c410:	3310      	adds	r3, #16
 800c412:	b2d2      	uxtb	r2, r2
 800c414:	701a      	strb	r2, [r3, #0]
 800c416:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800c41a:	0e1a      	lsrs	r2, r3, #24
 800c41c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c420:	3311      	adds	r3, #17
 800c422:	b2d2      	uxtb	r2, r2
 800c424:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800c426:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c42a:	330b      	adds	r3, #11
 800c42c:	2200      	movs	r2, #0
 800c42e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800c430:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c434:	331c      	adds	r3, #28
 800c436:	2200      	movs	r2, #0
 800c438:	701a      	strb	r2, [r3, #0]
 800c43a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c43e:	331d      	adds	r3, #29
 800c440:	2200      	movs	r2, #0
 800c442:	701a      	strb	r2, [r3, #0]
 800c444:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c448:	331e      	adds	r3, #30
 800c44a:	2200      	movs	r2, #0
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c452:	331f      	adds	r3, #31
 800c454:	2200      	movs	r2, #0
 800c456:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800c458:	f107 031c 	add.w	r3, r7, #28
 800c45c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c460:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800c464:	4618      	mov	r0, r3
 800c466:	f7ff f8d0 	bl	800b60a <ld_clust>
 800c46a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800c46e:	2100      	movs	r1, #0
 800c470:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800c474:	f7ff f8f7 	bl	800b666 <st_clust>
				dj.fs->wflag = 1;
 800c478:	f107 031c 	add.w	r3, r7, #28
 800c47c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c480:	2201      	movs	r2, #1
 800c482:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800c486:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d04e      	beq.n	800c52c <f_open+0x2c0>
					dw = dj.fs->winsect;
 800c48e:	f107 031c 	add.w	r3, r7, #28
 800c492:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c496:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800c49a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800c49e:	f107 031c 	add.w	r3, r7, #28
 800c4a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c4a6:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fe fdac 	bl	800b008 <remove_chain>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800c4b6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d136      	bne.n	800c52c <f_open+0x2c0>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800c4be:	f107 031c 	add.w	r3, r7, #28
 800c4c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c4c6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800c4ca:	3a01      	subs	r2, #1
 800c4cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 800c4d0:	f107 031c 	add.w	r3, r7, #28
 800c4d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c4d8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe face 	bl	800aa7e <move_window>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800c4e8:	e020      	b.n	800c52c <f_open+0x2c0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800c4ea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d11c      	bne.n	800c52c <f_open+0x2c0>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800c4f2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c4f6:	330b      	adds	r3, #11
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	f003 0310 	and.w	r3, r3, #16
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d003      	beq.n	800c50a <f_open+0x29e>
					res = FR_NO_FILE;
 800c502:	2304      	movs	r3, #4
 800c504:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800c508:	e010      	b.n	800c52c <f_open+0x2c0>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800c50a:	1dfb      	adds	r3, r7, #7
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	f003 0302 	and.w	r3, r3, #2
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00a      	beq.n	800c52c <f_open+0x2c0>
 800c516:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c51a:	330b      	adds	r3, #11
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <f_open+0x2c0>
						res = FR_DENIED;
 800c526:	2307      	movs	r3, #7
 800c528:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800c52c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800c530:	2b00      	cmp	r3, #0
 800c532:	d13d      	bne.n	800c5b0 <f_open+0x344>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c534:	1dfb      	adds	r3, r7, #7
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	f003 0308 	and.w	r3, r3, #8
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d005      	beq.n	800c54c <f_open+0x2e0>
				mode |= FA__WRITTEN;
 800c540:	1dfb      	adds	r3, r7, #7
 800c542:	1dfa      	adds	r2, r7, #7
 800c544:	7812      	ldrb	r2, [r2, #0]
 800c546:	f042 0220 	orr.w	r2, r2, #32
 800c54a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800c54c:	f107 031c 	add.w	r3, r7, #28
 800c550:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c554:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800c558:	f107 030c 	add.w	r3, r7, #12
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800c562:	f107 030c 	add.w	r3, r7, #12
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800c56c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c570:	1dfb      	adds	r3, r7, #7
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	f023 0301 	bic.w	r3, r3, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	bf14      	ite	ne
 800c57c:	2301      	movne	r3, #1
 800c57e:	2300      	moveq	r3, #0
 800c580:	b2db      	uxtb	r3, r3
 800c582:	461a      	mov	r2, r3
 800c584:	f107 031c 	add.w	r3, r7, #28
 800c588:	4611      	mov	r1, r2
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fe f908 	bl	800a7a0 <inc_lock>
 800c590:	4602      	mov	r2, r0
 800c592:	f107 030c 	add.w	r3, r7, #12
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800c59c:	f107 030c 	add.w	r3, r7, #12
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d102      	bne.n	800c5b0 <f_open+0x344>
 800c5aa:	2302      	movs	r3, #2
 800c5ac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800c5b0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d15d      	bne.n	800c674 <f_open+0x408>
			fp->flag = mode;					/* File access mode */
 800c5b8:	f107 030c 	add.w	r3, r7, #12
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	1dfa      	adds	r2, r7, #7
 800c5c0:	7812      	ldrb	r2, [r2, #0]
 800c5c2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800c5c6:	f107 030c 	add.w	r3, r7, #12
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800c5d2:	f107 031c 	add.w	r3, r7, #28
 800c5d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c5da:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff f813 	bl	800b60a <ld_clust>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	f107 030c 	add.w	r3, r7, #12
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800c5f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c5f4:	331f      	adds	r3, #31
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	061a      	lsls	r2, r3, #24
 800c5fa:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800c5fe:	331e      	adds	r3, #30
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	041b      	lsls	r3, r3, #16
 800c604:	4313      	orrs	r3, r2
 800c606:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800c60a:	321d      	adds	r2, #29
 800c60c:	7812      	ldrb	r2, [r2, #0]
 800c60e:	0212      	lsls	r2, r2, #8
 800c610:	4313      	orrs	r3, r2
 800c612:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800c616:	321c      	adds	r2, #28
 800c618:	7812      	ldrb	r2, [r2, #0]
 800c61a:	431a      	orrs	r2, r3
 800c61c:	f107 030c 	add.w	r3, r7, #12
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800c626:	f107 030c 	add.w	r3, r7, #12
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2200      	movs	r2, #0
 800c62e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800c632:	f107 030c 	add.w	r3, r7, #12
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2200      	movs	r2, #0
 800c63a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800c63e:	f107 030c 	add.w	r3, r7, #12
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2200      	movs	r2, #0
 800c646:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800c64a:	f107 031c 	add.w	r3, r7, #28
 800c64e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c652:	f107 030c 	add.w	r3, r7, #12
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800c65c:	f107 030c 	add.w	r3, r7, #12
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c666:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800c66a:	f107 030c 	add.w	r3, r7, #12
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800c674:	f107 031c 	add.w	r3, r7, #28
 800c678:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c67c:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 800c680:	4611      	mov	r1, r2
 800c682:	4618      	mov	r0, r3
 800c684:	f7fd ffdb 	bl	800a63e <unlock_fs>
 800c688:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b08c      	sub	sp, #48	; 0x30
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	60f8      	str	r0, [r7, #12]
 800c69e:	60b9      	str	r1, [r7, #8]
 800c6a0:	607a      	str	r2, [r7, #4]
 800c6a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f7ff fd36 	bl	800c120 <validate>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c6b8:	7ffb      	ldrb	r3, [r7, #31]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d009      	beq.n	800c6d2 <f_read+0x3c>
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c6c4:	7ffa      	ldrb	r2, [r7, #31]
 800c6c6:	4611      	mov	r1, r2
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fd ffb8 	bl	800a63e <unlock_fs>
 800c6ce:	7ffb      	ldrb	r3, [r7, #31]
 800c6d0:	e192      	b.n	800c9f8 <f_read+0x362>
	if (fp->err)								/* Check error */
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00d      	beq.n	800c6f8 <f_read+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	f7fd ffa7 	bl	800a63e <unlock_fs>
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800c6f6:	e17f      	b.n	800c9f8 <f_read+0x362>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c6fe:	f003 0301 	and.w	r3, r3, #1
 800c702:	2b00      	cmp	r3, #0
 800c704:	d108      	bne.n	800c718 <f_read+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c70c:	2107      	movs	r1, #7
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fd ff95 	bl	800a63e <unlock_fs>
 800c714:	2307      	movs	r3, #7
 800c716:	e16f      	b.n	800c9f8 <f_read+0x362>
	remain = fp->fsize - fp->fptr;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	f240 8157 	bls.w	800c9e0 <f_read+0x34a>
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c736:	e153      	b.n	800c9e0 <f_read+0x34a>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c742:	2b00      	cmp	r3, #0
 800c744:	f040 811c 	bne.w	800c980 <f_read+0x2ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c74e:	0a5b      	lsrs	r3, r3, #9
 800c750:	b2da      	uxtb	r2, r3
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c758:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c75c:	3b01      	subs	r3, #1
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	4013      	ands	r3, r2
 800c762:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800c764:	7dfb      	ldrb	r3, [r7, #23]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d147      	bne.n	800c7fa <f_read+0x164>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c770:	2b00      	cmp	r3, #0
 800c772:	d104      	bne.n	800c77e <f_read+0xe8>
					clst = fp->sclust;			/* Follow from the origin */
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c77a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c77c:	e018      	b.n	800c7b0 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800c784:	2b00      	cmp	r3, #0
 800c786:	d008      	beq.n	800c79a <f_read+0x104>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c78e:	4619      	mov	r1, r3
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f7fe fd30 	bl	800b1f6 <clmt_clust>
 800c796:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c798:	e00a      	b.n	800c7b0 <f_read+0x11a>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	f7fe fa65 	bl	800ac78 <get_fat>
 800c7ae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	2b01      	cmp	r3, #1
 800c7b4:	d80c      	bhi.n	800c7d0 <f_read+0x13a>
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2202      	movs	r2, #2
 800c7ba:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c7c4:	2102      	movs	r1, #2
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7fd ff39 	bl	800a63e <unlock_fs>
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	e113      	b.n	800c9f8 <f_read+0x362>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7d6:	d10c      	bne.n	800c7f2 <f_read+0x15c>
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c7e6:	2101      	movs	r1, #1
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f7fd ff28 	bl	800a63e <unlock_fs>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e102      	b.n	800c9f8 <f_read+0x362>
				fp->clust = clst;				/* Update current cluster */
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c806:	4619      	mov	r1, r3
 800c808:	4610      	mov	r0, r2
 800c80a:	f7fe fa13 	bl	800ac34 <clust2sect>
 800c80e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10c      	bne.n	800c830 <f_read+0x19a>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2202      	movs	r2, #2
 800c81a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c824:	2102      	movs	r1, #2
 800c826:	4618      	mov	r0, r3
 800c828:	f7fd ff09 	bl	800a63e <unlock_fs>
 800c82c:	2302      	movs	r3, #2
 800c82e:	e0e3      	b.n	800c9f8 <f_read+0x362>
			sect += csect;
 800c830:	7dfb      	ldrb	r3, [r7, #23]
 800c832:	693a      	ldr	r2, [r7, #16]
 800c834:	4413      	add	r3, r2
 800c836:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	0a5b      	lsrs	r3, r3, #9
 800c83c:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	2b00      	cmp	r3, #0
 800c842:	d04d      	beq.n	800c8e0 <f_read+0x24a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800c844:	7dfa      	ldrb	r2, [r7, #23]
 800c846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c848:	4413      	add	r3, r2
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800c850:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800c854:	4293      	cmp	r3, r2
 800c856:	d908      	bls.n	800c86a <f_read+0x1d4>
					cc = fp->fs->csize - csect;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c85e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800c862:	461a      	mov	r2, r3
 800c864:	7dfb      	ldrb	r3, [r7, #23]
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c870:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c876:	693a      	ldr	r2, [r7, #16]
 800c878:	6a39      	ldr	r1, [r7, #32]
 800c87a:	f7fd fdf7 	bl	800a46c <disk_read>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00c      	beq.n	800c89e <f_read+0x208>
					ABORT(fp->fs, FR_DISK_ERR);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c892:	2101      	movs	r1, #1
 800c894:	4618      	mov	r0, r3
 800c896:	f7fd fed2 	bl	800a63e <unlock_fs>
 800c89a:	2301      	movs	r3, #1
 800c89c:	e0ac      	b.n	800c9f8 <f_read+0x362>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d015      	beq.n	800c8d8 <f_read+0x242>
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	1ad3      	subs	r3, r2, r3
 800c8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d90d      	bls.n	800c8d8 <f_read+0x242>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	1ad3      	subs	r3, r2, r3
 800c8c6:	025b      	lsls	r3, r3, #9
 800c8c8:	6a3a      	ldr	r2, [r7, #32]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	68f9      	ldr	r1, [r7, #12]
 800c8ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7fd fe28 	bl	800a528 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 800c8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8da:	025b      	lsls	r3, r3, #9
 800c8dc:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 800c8de:	e069      	b.n	800c9b4 <f_read+0x31e>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800c8e6:	693a      	ldr	r2, [r7, #16]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d045      	beq.n	800c978 <f_read+0x2e2>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d024      	beq.n	800c944 <f_read+0x2ae>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c900:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c904:	68f9      	ldr	r1, [r7, #12]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800c90c:	2301      	movs	r3, #1
 800c90e:	f7fd fdcd 	bl	800a4ac <disk_write>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00c      	beq.n	800c932 <f_read+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c926:	2101      	movs	r1, #1
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fd fe88 	bl	800a63e <unlock_fs>
 800c92e:	2301      	movs	r3, #1
 800c930:	e062      	b.n	800c9f8 <f_read+0x362>
					fp->flag &= ~FA__DIRTY;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800c938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c93c:	b2da      	uxtb	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c94a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800c94e:	68f9      	ldr	r1, [r7, #12]
 800c950:	2301      	movs	r3, #1
 800c952:	693a      	ldr	r2, [r7, #16]
 800c954:	f7fd fd8a 	bl	800a46c <disk_read>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00c      	beq.n	800c978 <f_read+0x2e2>
					ABORT(fp->fs, FR_DISK_ERR);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2201      	movs	r2, #1
 800c962:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c96c:	2101      	movs	r1, #1
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fd fe65 	bl	800a63e <unlock_fs>
 800c974:	2301      	movs	r3, #1
 800c976:	e03f      	b.n	800c9f8 <f_read+0x362>
			}
#endif
			fp->dsect = sect;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c98a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c98e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 800c990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	429a      	cmp	r2, r3
 800c996:	d901      	bls.n	800c99c <f_read+0x306>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800c9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	6a38      	ldr	r0, [r7, #32]
 800c9b0:	f7fd fdba 	bl	800a528 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c9b4:	6a3a      	ldr	r2, [r7, #32]
 800c9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b8:	4413      	add	r3, r2
 800c9ba:	623b      	str	r3, [r7, #32]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c4:	441a      	add	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	441a      	add	r2, r3
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	601a      	str	r2, [r3, #0]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f47f aea8 	bne.w	800c738 <f_read+0xa2>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fd fe24 	bl	800a63e <unlock_fs>
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3730      	adds	r7, #48	; 0x30
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7ff fb89 	bl	800c120 <validate>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f040 80af 	bne.w	800cb78 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ca20:	f003 0320 	and.w	r3, r3, #32
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f000 80a7 	beq.w	800cb78 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ca30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d020      	beq.n	800ca7a <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ca3e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800ca42:	6879      	ldr	r1, [r7, #4]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	f7fd fd2e 	bl	800a4ac <disk_write>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d008      	beq.n	800ca68 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ca5c:	2101      	movs	r1, #1
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7fd fded 	bl	800a63e <unlock_fs>
 800ca64:	2301      	movs	r3, #1
 800ca66:	e090      	b.n	800cb8a <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ca6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800ca86:	4619      	mov	r1, r3
 800ca88:	4610      	mov	r0, r2
 800ca8a:	f7fd fff8 	bl	800aa7e <move_window>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800ca92:	7dfb      	ldrb	r3, [r7, #23]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d16f      	bne.n	800cb78 <f_sync+0x178>
				dir = fp->dir_ptr;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800ca9e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	330b      	adds	r3, #11
 800caa4:	781a      	ldrb	r2, [r3, #0]
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	330b      	adds	r3, #11
 800caaa:	f042 0220 	orr.w	r2, r2, #32
 800caae:	b2d2      	uxtb	r2, r2
 800cab0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	331c      	adds	r3, #28
 800cabc:	b2d2      	uxtb	r2, r2
 800cabe:	701a      	strb	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	0a1b      	lsrs	r3, r3, #8
 800caca:	b29a      	uxth	r2, r3
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	331d      	adds	r3, #29
 800cad0:	b2d2      	uxtb	r2, r2
 800cad2:	701a      	strb	r2, [r3, #0]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800cada:	0c1a      	lsrs	r2, r3, #16
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	331e      	adds	r3, #30
 800cae0:	b2d2      	uxtb	r2, r2
 800cae2:	701a      	strb	r2, [r3, #0]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800caea:	0e1a      	lsrs	r2, r3, #24
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	331f      	adds	r3, #31
 800caf0:	b2d2      	uxtb	r2, r2
 800caf2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cafa:	4619      	mov	r1, r3
 800cafc:	6938      	ldr	r0, [r7, #16]
 800cafe:	f7fe fdb2 	bl	800b666 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800cb02:	f7fd f841 	bl	8009b88 <get_fattime>
 800cb06:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	3316      	adds	r3, #22
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	b2d2      	uxtb	r2, r2
 800cb10:	701a      	strb	r2, [r3, #0]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	0a1b      	lsrs	r3, r3, #8
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	3317      	adds	r3, #23
 800cb1e:	b2d2      	uxtb	r2, r2
 800cb20:	701a      	strb	r2, [r3, #0]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	0c1a      	lsrs	r2, r3, #16
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	3318      	adds	r3, #24
 800cb2a:	b2d2      	uxtb	r2, r2
 800cb2c:	701a      	strb	r2, [r3, #0]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	0e1a      	lsrs	r2, r3, #24
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	3319      	adds	r3, #25
 800cb36:	b2d2      	uxtb	r2, r2
 800cb38:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	3312      	adds	r3, #18
 800cb3e:	2200      	movs	r2, #0
 800cb40:	701a      	strb	r2, [r3, #0]
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	3313      	adds	r3, #19
 800cb46:	2200      	movs	r2, #0
 800cb48:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800cb50:	f023 0320 	bic.w	r3, r3, #32
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fd ffb3 	bl	800aada <sync_fs>
 800cb74:	4603      	mov	r3, r0
 800cb76:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cb7e:	7dfa      	ldrb	r2, [r7, #23]
 800cb80:	4611      	mov	r1, r2
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fd fd5b 	bl	800a63e <unlock_fs>
 800cb88:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3718      	adds	r7, #24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b084      	sub	sp, #16
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff ff30 	bl	800ca00 <f_sync>
 800cba0:	4603      	mov	r3, r0
 800cba2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cba4:	7bfb      	ldrb	r3, [r7, #15]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d11e      	bne.n	800cbe8 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff fab8 	bl	800c120 <validate>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cbb4:	7bfb      	ldrb	r3, [r7, #15]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d116      	bne.n	800cbe8 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800cbc0:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fd fea1 	bl	800a910 <dec_lock>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d103      	bne.n	800cbe0 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	68b8      	ldr	r0, [r7, #8]
 800cbe4:	f7fd fd2b 	bl	800a63e <unlock_fs>
#endif
		}
	}
	return res;
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b088      	sub	sp, #32
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	60f8      	str	r0, [r7, #12]
 800cbfa:	60b9      	str	r1, [r7, #8]
 800cbfc:	607a      	str	r2, [r7, #4]
	int n = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cc06:	e017      	b.n	800cc38 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800cc08:	f107 0310 	add.w	r3, r7, #16
 800cc0c:	f107 0114 	add.w	r1, r7, #20
 800cc10:	2201      	movs	r2, #1
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f7ff fd3f 	bl	800c696 <f_read>
		if (rc != 1) break;
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d112      	bne.n	800cc44 <f_gets+0x52>
		c = s[0];
 800cc1e:	7d3b      	ldrb	r3, [r7, #20]
 800cc20:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	1c5a      	adds	r2, r3, #1
 800cc26:	61ba      	str	r2, [r7, #24]
 800cc28:	7dfa      	ldrb	r2, [r7, #23]
 800cc2a:	701a      	strb	r2, [r3, #0]
		n++;
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800cc32:	7dfb      	ldrb	r3, [r7, #23]
 800cc34:	2b0a      	cmp	r3, #10
 800cc36:	d007      	beq.n	800cc48 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	69fa      	ldr	r2, [r7, #28]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	dbe2      	blt.n	800cc08 <f_gets+0x16>
 800cc42:	e002      	b.n	800cc4a <f_gets+0x58>
		if (rc != 1) break;
 800cc44:	bf00      	nop
 800cc46:	e000      	b.n	800cc4a <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 800cc48:	bf00      	nop
	}
	*p = 0;
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d001      	beq.n	800cc5a <f_gets+0x68>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	e000      	b.n	800cc5c <f_gets+0x6a>
 800cc5a:	2300      	movs	r3, #0
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3720      	adds	r7, #32
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b087      	sub	sp, #28
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc72:	2301      	movs	r3, #1
 800cc74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800cc7a:	4b1f      	ldr	r3, [pc, #124]	; (800ccf8 <FATFS_LinkDriverEx+0x94>)
 800cc7c:	7a5b      	ldrb	r3, [r3, #9]
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d831      	bhi.n	800cce8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc84:	4b1c      	ldr	r3, [pc, #112]	; (800ccf8 <FATFS_LinkDriverEx+0x94>)
 800cc86:	7a5b      	ldrb	r3, [r3, #9]
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	4b1a      	ldr	r3, [pc, #104]	; (800ccf8 <FATFS_LinkDriverEx+0x94>)
 800cc8e:	2100      	movs	r1, #0
 800cc90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800cc92:	4b19      	ldr	r3, [pc, #100]	; (800ccf8 <FATFS_LinkDriverEx+0x94>)
 800cc94:	7a5b      	ldrb	r3, [r3, #9]
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	4a17      	ldr	r2, [pc, #92]	; (800ccf8 <FATFS_LinkDriverEx+0x94>)
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800cca2:	4b15      	ldr	r3, [pc, #84]	; (800ccf8 <FATFS_LinkDriverEx+0x94>)
 800cca4:	7a5b      	ldrb	r3, [r3, #9]
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	461a      	mov	r2, r3
 800ccaa:	4b13      	ldr	r3, [pc, #76]	; (800ccf8 <FATFS_LinkDriverEx+0x94>)
 800ccac:	4413      	add	r3, r2
 800ccae:	79fa      	ldrb	r2, [r7, #7]
 800ccb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ccb2:	4b11      	ldr	r3, [pc, #68]	; (800ccf8 <FATFS_LinkDriverEx+0x94>)
 800ccb4:	7a5b      	ldrb	r3, [r3, #9]
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	1c5a      	adds	r2, r3, #1
 800ccba:	b2d1      	uxtb	r1, r2
 800ccbc:	4a0e      	ldr	r2, [pc, #56]	; (800ccf8 <FATFS_LinkDriverEx+0x94>)
 800ccbe:	7251      	strb	r1, [r2, #9]
 800ccc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ccc2:	7dbb      	ldrb	r3, [r7, #22]
 800ccc4:	3330      	adds	r3, #48	; 0x30
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	223a      	movs	r2, #58	; 0x3a
 800ccd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	3302      	adds	r3, #2
 800ccd8:	222f      	movs	r2, #47	; 0x2f
 800ccda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	3303      	adds	r3, #3
 800cce0:	2200      	movs	r2, #0
 800cce2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	371c      	adds	r7, #28
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	200002cc 	.word	0x200002cc

0800ccfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cd06:	2200      	movs	r2, #0
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff ffaa 	bl	800cc64 <FATFS_LinkDriverEx>
 800cd10:	4603      	mov	r3, r0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b084      	sub	sp, #16
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	4603      	mov	r3, r0
 800cd22:	6039      	str	r1, [r7, #0]
 800cd24:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 800cd26:	2300      	movs	r3, #0
 800cd28:	60bb      	str	r3, [r7, #8]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 800cd2a:	f107 0308 	add.w	r3, r7, #8
 800cd2e:	2101      	movs	r1, #1
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 f94b 	bl	800cfcc <osSemaphoreCreate>
 800cd36:	4602      	mov	r2, r0
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	bf14      	ite	ne
 800cd44:	2301      	movne	r3, #1
 800cd46:	2300      	moveq	r3, #0
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	60fb      	str	r3, [r7, #12]
  
  return ret;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f9d8 	bl	800d114 <osSemaphoreDelete>
  return 1;
 800cd64:	2301      	movs	r3, #1
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b084      	sub	sp, #16
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800cd76:	2300      	movs	r3, #0
 800cd78:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800cd7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f942 	bl	800d008 <osSemaphoreWait>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d101      	bne.n	800cd8e <ff_req_grant+0x20>
  {
    ret = 1;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 f981 	bl	800d0a8 <osSemaphoreRelease>
}
 800cda6:	bf00      	nop
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b085      	sub	sp, #20
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800cdbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cdc0:	2b84      	cmp	r3, #132	; 0x84
 800cdc2:	d005      	beq.n	800cdd0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cdc4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4413      	add	r3, r2
 800cdcc:	3303      	adds	r3, #3
 800cdce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b083      	sub	sp, #12
 800cde2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cde4:	f3ef 8305 	mrs	r3, IPSR
 800cde8:	607b      	str	r3, [r7, #4]
  return(result);
 800cdea:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	bf14      	ite	ne
 800cdf0:	2301      	movne	r3, #1
 800cdf2:	2300      	moveq	r3, #0
 800cdf4:	b2db      	uxtb	r3, r3
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr

0800ce02 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ce06:	f001 fabd 	bl	800e384 <vTaskStartScheduler>
  
  return osOK;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ce14:	f7ff ffe3 	bl	800cdde <inHandlerMode>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d003      	beq.n	800ce26 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ce1e:	f001 fbb9 	bl	800e594 <xTaskGetTickCountFromISR>
 800ce22:	4603      	mov	r3, r0
 800ce24:	e002      	b.n	800ce2c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ce26:	f001 fba5 	bl	800e574 <xTaskGetTickCount>
 800ce2a:	4603      	mov	r3, r0
  }
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ce30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce32:	b087      	sub	sp, #28
 800ce34:	af02      	add	r7, sp, #8
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	685c      	ldr	r4, [r3, #4]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ce46:	b29e      	uxth	r6, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7ff ffad 	bl	800cdae <makeFreeRtosPriority>
 800ce54:	4602      	mov	r2, r0
 800ce56:	f107 030c 	add.w	r3, r7, #12
 800ce5a:	9301      	str	r3, [sp, #4]
 800ce5c:	9200      	str	r2, [sp, #0]
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	4632      	mov	r2, r6
 800ce62:	4629      	mov	r1, r5
 800ce64:	4620      	mov	r0, r4
 800ce66:	f001 f8a5 	bl	800dfb4 <xTaskCreate>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d001      	beq.n	800ce74 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800ce70:	2300      	movs	r3, #0
 800ce72:	e000      	b.n	800ce76 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800ce74:	68fb      	ldr	r3, [r7, #12]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3714      	adds	r7, #20
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce7e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b084      	sub	sp, #16
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <osDelay+0x16>
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	e000      	b.n	800ce96 <osDelay+0x18>
 800ce94:	2301      	movs	r3, #1
 800ce96:	4618      	mov	r0, r3
 800ce98:	f001 fa40 	bl	800e31c <vTaskDelay>
  
  return osOK;
 800ce9c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b082      	sub	sp, #8
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800ceae:	2001      	movs	r0, #1
 800ceb0:	f000 faf7 	bl	800d4a2 <xQueueCreateMutex>
 800ceb4:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3708      	adds	r7, #8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
	...

0800cec0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ceca:	2300      	movs	r3, #0
 800cecc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <osMutexWait+0x18>
    return osErrorParameter;
 800ced4:	2380      	movs	r3, #128	; 0x80
 800ced6:	e03c      	b.n	800cf52 <osMutexWait+0x92>
  }
  
  ticks = 0;
 800ced8:	2300      	movs	r3, #0
 800ceda:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cee2:	d103      	bne.n	800ceec <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800cee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cee8:	60fb      	str	r3, [r7, #12]
 800ceea:	e009      	b.n	800cf00 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d006      	beq.n	800cf00 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d101      	bne.n	800cf00 <osMutexWait+0x40>
      ticks = 1;
 800cefc:	2301      	movs	r3, #1
 800cefe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800cf00:	f7ff ff6d 	bl	800cdde <inHandlerMode>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d017      	beq.n	800cf3a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cf0a:	f107 0308 	add.w	r3, r7, #8
 800cf0e:	461a      	mov	r2, r3
 800cf10:	2100      	movs	r1, #0
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fe18 	bl	800db48 <xQueueReceiveFromISR>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d001      	beq.n	800cf22 <osMutexWait+0x62>
      return osErrorOS;
 800cf1e:	23ff      	movs	r3, #255	; 0xff
 800cf20:	e017      	b.n	800cf52 <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d013      	beq.n	800cf50 <osMutexWait+0x90>
 800cf28:	4b0c      	ldr	r3, [pc, #48]	; (800cf5c <osMutexWait+0x9c>)
 800cf2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf2e:	601a      	str	r2, [r3, #0]
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	f3bf 8f6f 	isb	sy
 800cf38:	e00a      	b.n	800cf50 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	68fa      	ldr	r2, [r7, #12]
 800cf3e:	2100      	movs	r1, #0
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 fceb 	bl	800d91c <xQueueGenericReceive>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d001      	beq.n	800cf50 <osMutexWait+0x90>
    return osErrorOS;
 800cf4c:	23ff      	movs	r3, #255	; 0xff
 800cf4e:	e000      	b.n	800cf52 <osMutexWait+0x92>
  }
  
  return osOK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	e000ed04 	.word	0xe000ed04

0800cf60 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800cf70:	f7ff ff35 	bl	800cdde <inHandlerMode>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d016      	beq.n	800cfa8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800cf7a:	f107 0308 	add.w	r3, r7, #8
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 fc3d 	bl	800d800 <xQueueGiveFromISR>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d001      	beq.n	800cf90 <osMutexRelease+0x30>
      return osErrorOS;
 800cf8c:	23ff      	movs	r3, #255	; 0xff
 800cf8e:	e017      	b.n	800cfc0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d013      	beq.n	800cfbe <osMutexRelease+0x5e>
 800cf96:	4b0c      	ldr	r3, [pc, #48]	; (800cfc8 <osMutexRelease+0x68>)
 800cf98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf9c:	601a      	str	r2, [r3, #0]
 800cf9e:	f3bf 8f4f 	dsb	sy
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	e00a      	b.n	800cfbe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	2200      	movs	r2, #0
 800cfac:	2100      	movs	r1, #0
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 fa90 	bl	800d4d4 <xQueueGenericSend>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d001      	beq.n	800cfbe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800cfba:	23ff      	movs	r3, #255	; 0xff
 800cfbc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3710      	adds	r7, #16
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	e000ed04 	.word	0xe000ed04

0800cfcc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d110      	bne.n	800cffe <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800cfdc:	2203      	movs	r2, #3
 800cfde:	2100      	movs	r1, #0
 800cfe0:	2001      	movs	r0, #1
 800cfe2:	f000 f9e7 	bl	800d3b4 <xQueueGenericCreate>
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d005      	beq.n	800cffa <osSemaphoreCreate+0x2e>
 800cfee:	2300      	movs	r3, #0
 800cff0:	2200      	movs	r2, #0
 800cff2:	2100      	movs	r1, #0
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f000 fa6d 	bl	800d4d4 <xQueueGenericSend>
    return sema;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	e000      	b.n	800d000 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800cffe:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800d012:	2300      	movs	r3, #0
 800d014:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800d01c:	2380      	movs	r3, #128	; 0x80
 800d01e:	e03c      	b.n	800d09a <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 800d020:	2300      	movs	r3, #0
 800d022:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d02a:	d103      	bne.n	800d034 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800d02c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d030:	60fb      	str	r3, [r7, #12]
 800d032:	e009      	b.n	800d048 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d006      	beq.n	800d048 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d101      	bne.n	800d048 <osSemaphoreWait+0x40>
      ticks = 1;
 800d044:	2301      	movs	r3, #1
 800d046:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800d048:	f7ff fec9 	bl	800cdde <inHandlerMode>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d017      	beq.n	800d082 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d052:	f107 0308 	add.w	r3, r7, #8
 800d056:	461a      	mov	r2, r3
 800d058:	2100      	movs	r1, #0
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 fd74 	bl	800db48 <xQueueReceiveFromISR>
 800d060:	4603      	mov	r3, r0
 800d062:	2b01      	cmp	r3, #1
 800d064:	d001      	beq.n	800d06a <osSemaphoreWait+0x62>
      return osErrorOS;
 800d066:	23ff      	movs	r3, #255	; 0xff
 800d068:	e017      	b.n	800d09a <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d013      	beq.n	800d098 <osSemaphoreWait+0x90>
 800d070:	4b0c      	ldr	r3, [pc, #48]	; (800d0a4 <osSemaphoreWait+0x9c>)
 800d072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d076:	601a      	str	r2, [r3, #0]
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	e00a      	b.n	800d098 <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800d082:	2300      	movs	r3, #0
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	2100      	movs	r1, #0
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 fc47 	bl	800d91c <xQueueGenericReceive>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b01      	cmp	r3, #1
 800d092:	d001      	beq.n	800d098 <osSemaphoreWait+0x90>
    return osErrorOS;
 800d094:	23ff      	movs	r3, #255	; 0xff
 800d096:	e000      	b.n	800d09a <osSemaphoreWait+0x92>
  }
  
  return osOK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	e000ed04 	.word	0xe000ed04

0800d0a8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800d0b8:	f7ff fe91 	bl	800cdde <inHandlerMode>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d016      	beq.n	800d0f0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800d0c2:	f107 0308 	add.w	r3, r7, #8
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fb99 	bl	800d800 <xQueueGiveFromISR>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	2b01      	cmp	r3, #1
 800d0d2:	d001      	beq.n	800d0d8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800d0d4:	23ff      	movs	r3, #255	; 0xff
 800d0d6:	e017      	b.n	800d108 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d013      	beq.n	800d106 <osSemaphoreRelease+0x5e>
 800d0de:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <osSemaphoreRelease+0x68>)
 800d0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	e00a      	b.n	800d106 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f9ec 	bl	800d4d4 <xQueueGenericSend>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d001      	beq.n	800d106 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800d102:	23ff      	movs	r3, #255	; 0xff
 800d104:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800d106:	68fb      	ldr	r3, [r7, #12]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	e000ed04 	.word	0xe000ed04

0800d114 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800d11c:	f7ff fe5f 	bl	800cdde <inHandlerMode>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d001      	beq.n	800d12a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800d126:	2382      	movs	r3, #130	; 0x82
 800d128:	e003      	b.n	800d132 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 fd8c 	bl	800dc48 <vQueueDelete>

  return osOK; 
 800d130:	2300      	movs	r3, #0
}
 800d132:	4618      	mov	r0, r3
 800d134:	3708      	adds	r7, #8
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800d13e:	f001 fd61 	bl	800ec04 <xTaskGetSchedulerState>
 800d142:	4603      	mov	r3, r0
 800d144:	2b01      	cmp	r3, #1
 800d146:	d001      	beq.n	800d14c <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800d148:	f002 fb5e 	bl	800f808 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800d14c:	bf00      	nop
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d001      	beq.n	800d168 <osDelayUntil+0x18>
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	e000      	b.n	800d16a <osDelayUntil+0x1a>
 800d168:	2301      	movs	r3, #1
 800d16a:	4619      	mov	r1, r3
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f001 f857 	bl	800e220 <vTaskDelayUntil>
  
  return osOK;
 800d172:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800d174:	4618      	mov	r0, r3
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f103 0208 	add.w	r2, r3, #8
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d194:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f103 0208 	add.w	r2, r3, #8
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f103 0208 	add.w	r2, r3, #8
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d1b0:	bf00      	nop
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d1ca:	bf00      	nop
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b085      	sub	sp, #20
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	689a      	ldr	r2, [r3, #8]
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	683a      	ldr	r2, [r7, #0]
 800d200:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	1c5a      	adds	r2, r3, #1
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	601a      	str	r2, [r3, #0]
}
 800d212:	bf00      	nop
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d21e:	b480      	push	{r7}
 800d220:	b085      	sub	sp, #20
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
 800d226:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d234:	d103      	bne.n	800d23e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	691b      	ldr	r3, [r3, #16]
 800d23a:	60fb      	str	r3, [r7, #12]
 800d23c:	e00c      	b.n	800d258 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	3308      	adds	r3, #8
 800d242:	60fb      	str	r3, [r7, #12]
 800d244:	e002      	b.n	800d24c <vListInsert+0x2e>
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	60fb      	str	r3, [r7, #12]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	68ba      	ldr	r2, [r7, #8]
 800d254:	429a      	cmp	r2, r3
 800d256:	d2f6      	bcs.n	800d246 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	685a      	ldr	r2, [r3, #4]
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	683a      	ldr	r2, [r7, #0]
 800d266:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	68fa      	ldr	r2, [r7, #12]
 800d26c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	1c5a      	adds	r2, r3, #1
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	601a      	str	r2, [r3, #0]
}
 800d284:	bf00      	nop
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr

0800d290 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d290:	b480      	push	{r7}
 800d292:	b085      	sub	sp, #20
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	691b      	ldr	r3, [r3, #16]
 800d29c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	6892      	ldr	r2, [r2, #8]
 800d2a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	6852      	ldr	r2, [r2, #4]
 800d2b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d103      	bne.n	800d2c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	689a      	ldr	r2, [r3, #8]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	1e5a      	subs	r2, r3, #1
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3714      	adds	r7, #20
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d10a      	bne.n	800d30e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800d30a:	bf00      	nop
 800d30c:	e7fe      	b.n	800d30c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d30e:	f002 f9e9 	bl	800f6e4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d31a:	68f9      	ldr	r1, [r7, #12]
 800d31c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d31e:	fb01 f303 	mul.w	r3, r1, r3
 800d322:	441a      	add	r2, r3
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2200      	movs	r2, #0
 800d32c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681a      	ldr	r2, [r3, #0]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d33e:	3b01      	subs	r3, #1
 800d340:	68f9      	ldr	r1, [r7, #12]
 800d342:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d344:	fb01 f303 	mul.w	r3, r1, r3
 800d348:	441a      	add	r2, r3
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	22ff      	movs	r2, #255	; 0xff
 800d352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	22ff      	movs	r2, #255	; 0xff
 800d35a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d114      	bne.n	800d38e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	691b      	ldr	r3, [r3, #16]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d01a      	beq.n	800d3a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	3310      	adds	r3, #16
 800d370:	4618      	mov	r0, r3
 800d372:	f001 fa8b 	bl	800e88c <xTaskRemoveFromEventList>
 800d376:	4603      	mov	r3, r0
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d012      	beq.n	800d3a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d37c:	4b0c      	ldr	r3, [pc, #48]	; (800d3b0 <xQueueGenericReset+0xcc>)
 800d37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	e009      	b.n	800d3a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3310      	adds	r3, #16
 800d392:	4618      	mov	r0, r3
 800d394:	f7ff fef2 	bl	800d17c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	3324      	adds	r3, #36	; 0x24
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7ff feed 	bl	800d17c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d3a2:	f002 f9cf 	bl	800f744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d3a6:	2301      	movs	r3, #1
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	e000ed04 	.word	0xe000ed04

0800d3b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b08a      	sub	sp, #40	; 0x28
 800d3b8:	af02      	add	r7, sp, #8
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10a      	bne.n	800d3de <xQueueGenericCreate+0x2a>
	__asm volatile
 800d3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3cc:	f383 8811 	msr	BASEPRI, r3
 800d3d0:	f3bf 8f6f 	isb	sy
 800d3d4:	f3bf 8f4f 	dsb	sy
 800d3d8:	613b      	str	r3, [r7, #16]
}
 800d3da:	bf00      	nop
 800d3dc:	e7fe      	b.n	800d3dc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d102      	bne.n	800d3ea <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	61fb      	str	r3, [r7, #28]
 800d3e8:	e004      	b.n	800d3f4 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	68ba      	ldr	r2, [r7, #8]
 800d3ee:	fb02 f303 	mul.w	r3, r2, r3
 800d3f2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	3350      	adds	r3, #80	; 0x50
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f002 fa8d 	bl	800f918 <pvPortMalloc>
 800d3fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00b      	beq.n	800d41e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	3350      	adds	r3, #80	; 0x50
 800d40a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d40c:	79fa      	ldrb	r2, [r7, #7]
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	4613      	mov	r3, r2
 800d414:	697a      	ldr	r2, [r7, #20]
 800d416:	68b9      	ldr	r1, [r7, #8]
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f000 f805 	bl	800d428 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800d41e:	69bb      	ldr	r3, [r7, #24]
	}
 800d420:	4618      	mov	r0, r3
 800d422:	3720      	adds	r7, #32
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
 800d434:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d103      	bne.n	800d444 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	69ba      	ldr	r2, [r7, #24]
 800d440:	601a      	str	r2, [r3, #0]
 800d442:	e002      	b.n	800d44a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d456:	2101      	movs	r1, #1
 800d458:	69b8      	ldr	r0, [r7, #24]
 800d45a:	f7ff ff43 	bl	800d2e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	78fa      	ldrb	r2, [r7, #3]
 800d462:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d466:	bf00      	nop
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b082      	sub	sp, #8
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00e      	beq.n	800d49a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d48e:	2300      	movs	r3, #0
 800d490:	2200      	movs	r2, #0
 800d492:	2100      	movs	r1, #0
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 f81d 	bl	800d4d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d49a:	bf00      	nop
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b086      	sub	sp, #24
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	617b      	str	r3, [r7, #20]
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d4b4:	79fb      	ldrb	r3, [r7, #7]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	6939      	ldr	r1, [r7, #16]
 800d4ba:	6978      	ldr	r0, [r7, #20]
 800d4bc:	f7ff ff7a 	bl	800d3b4 <xQueueGenericCreate>
 800d4c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7ff ffd3 	bl	800d46e <prvInitialiseMutex>

		return pxNewQueue;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
	}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3718      	adds	r7, #24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
	...

0800d4d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08e      	sub	sp, #56	; 0x38
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
 800d4e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <xQueueGenericSend+0x32>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d103      	bne.n	800d514 <xQueueGenericSend+0x40>
 800d50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d510:	2b00      	cmp	r3, #0
 800d512:	d101      	bne.n	800d518 <xQueueGenericSend+0x44>
 800d514:	2301      	movs	r3, #1
 800d516:	e000      	b.n	800d51a <xQueueGenericSend+0x46>
 800d518:	2300      	movs	r3, #0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10a      	bne.n	800d534 <xQueueGenericSend+0x60>
	__asm volatile
 800d51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d522:	f383 8811 	msr	BASEPRI, r3
 800d526:	f3bf 8f6f 	isb	sy
 800d52a:	f3bf 8f4f 	dsb	sy
 800d52e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d530:	bf00      	nop
 800d532:	e7fe      	b.n	800d532 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2b02      	cmp	r3, #2
 800d538:	d103      	bne.n	800d542 <xQueueGenericSend+0x6e>
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d101      	bne.n	800d546 <xQueueGenericSend+0x72>
 800d542:	2301      	movs	r3, #1
 800d544:	e000      	b.n	800d548 <xQueueGenericSend+0x74>
 800d546:	2300      	movs	r3, #0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10a      	bne.n	800d562 <xQueueGenericSend+0x8e>
	__asm volatile
 800d54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	623b      	str	r3, [r7, #32]
}
 800d55e:	bf00      	nop
 800d560:	e7fe      	b.n	800d560 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d562:	f001 fb4f 	bl	800ec04 <xTaskGetSchedulerState>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d102      	bne.n	800d572 <xQueueGenericSend+0x9e>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d101      	bne.n	800d576 <xQueueGenericSend+0xa2>
 800d572:	2301      	movs	r3, #1
 800d574:	e000      	b.n	800d578 <xQueueGenericSend+0xa4>
 800d576:	2300      	movs	r3, #0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10a      	bne.n	800d592 <xQueueGenericSend+0xbe>
	__asm volatile
 800d57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d580:	f383 8811 	msr	BASEPRI, r3
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	f3bf 8f4f 	dsb	sy
 800d58c:	61fb      	str	r3, [r7, #28]
}
 800d58e:	bf00      	nop
 800d590:	e7fe      	b.n	800d590 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d592:	f002 f8a7 	bl	800f6e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d302      	bcc.n	800d5a8 <xQueueGenericSend+0xd4>
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d129      	bne.n	800d5fc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	68b9      	ldr	r1, [r7, #8]
 800d5ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ae:	f000 fb69 	bl	800dc84 <prvCopyDataToQueue>
 800d5b2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d010      	beq.n	800d5de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5be:	3324      	adds	r3, #36	; 0x24
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f001 f963 	bl	800e88c <xTaskRemoveFromEventList>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d013      	beq.n	800d5f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d5cc:	4b3f      	ldr	r3, [pc, #252]	; (800d6cc <xQueueGenericSend+0x1f8>)
 800d5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	f3bf 8f6f 	isb	sy
 800d5dc:	e00a      	b.n	800d5f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d007      	beq.n	800d5f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d5e4:	4b39      	ldr	r3, [pc, #228]	; (800d6cc <xQueueGenericSend+0x1f8>)
 800d5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5ea:	601a      	str	r2, [r3, #0]
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5f4:	f002 f8a6 	bl	800f744 <vPortExitCritical>
				return pdPASS;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e063      	b.n	800d6c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d103      	bne.n	800d60a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d602:	f002 f89f 	bl	800f744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d606:	2300      	movs	r3, #0
 800d608:	e05c      	b.n	800d6c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d106      	bne.n	800d61e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800d610:	f107 0314 	add.w	r3, r7, #20
 800d614:	4618      	mov	r0, r3
 800d616:	f001 f99b 	bl	800e950 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d61a:	2301      	movs	r3, #1
 800d61c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d61e:	f002 f891 	bl	800f744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d622:	f000 fefd 	bl	800e420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d626:	f002 f85d 	bl	800f6e4 <vPortEnterCritical>
 800d62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d630:	b25b      	sxtb	r3, r3
 800d632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d636:	d103      	bne.n	800d640 <xQueueGenericSend+0x16c>
 800d638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63a:	2200      	movs	r2, #0
 800d63c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d646:	b25b      	sxtb	r3, r3
 800d648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d64c:	d103      	bne.n	800d656 <xQueueGenericSend+0x182>
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	2200      	movs	r2, #0
 800d652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d656:	f002 f875 	bl	800f744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d65a:	1d3a      	adds	r2, r7, #4
 800d65c:	f107 0314 	add.w	r3, r7, #20
 800d660:	4611      	mov	r1, r2
 800d662:	4618      	mov	r0, r3
 800d664:	f001 f998 	bl	800e998 <xTaskCheckForTimeOut>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d124      	bne.n	800d6b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d66e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d670:	f000 fc00 	bl	800de74 <prvIsQueueFull>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d018      	beq.n	800d6ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	3310      	adds	r3, #16
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	4611      	mov	r1, r2
 800d682:	4618      	mov	r0, r3
 800d684:	f001 f8b2 	bl	800e7ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d68a:	f000 fb8b 	bl	800dda4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d68e:	f000 fed5 	bl	800e43c <xTaskResumeAll>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	f47f af7c 	bne.w	800d592 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d69a:	4b0c      	ldr	r3, [pc, #48]	; (800d6cc <xQueueGenericSend+0x1f8>)
 800d69c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6a0:	601a      	str	r2, [r3, #0]
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	e772      	b.n	800d592 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ae:	f000 fb79 	bl	800dda4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6b2:	f000 fec3 	bl	800e43c <xTaskResumeAll>
 800d6b6:	e76c      	b.n	800d592 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ba:	f000 fb73 	bl	800dda4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6be:	f000 febd 	bl	800e43c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d6c2:	2300      	movs	r3, #0
		}
	}
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3738      	adds	r7, #56	; 0x38
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	e000ed04 	.word	0xe000ed04

0800d6d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b08e      	sub	sp, #56	; 0x38
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
 800d6dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10a      	bne.n	800d6fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d6fa:	bf00      	nop
 800d6fc:	e7fe      	b.n	800d6fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d103      	bne.n	800d70c <xQueueGenericSendFromISR+0x3c>
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d101      	bne.n	800d710 <xQueueGenericSendFromISR+0x40>
 800d70c:	2301      	movs	r3, #1
 800d70e:	e000      	b.n	800d712 <xQueueGenericSendFromISR+0x42>
 800d710:	2300      	movs	r3, #0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d10a      	bne.n	800d72c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	623b      	str	r3, [r7, #32]
}
 800d728:	bf00      	nop
 800d72a:	e7fe      	b.n	800d72a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d103      	bne.n	800d73a <xQueueGenericSendFromISR+0x6a>
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d736:	2b01      	cmp	r3, #1
 800d738:	d101      	bne.n	800d73e <xQueueGenericSendFromISR+0x6e>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e000      	b.n	800d740 <xQueueGenericSendFromISR+0x70>
 800d73e:	2300      	movs	r3, #0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10a      	bne.n	800d75a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d748:	f383 8811 	msr	BASEPRI, r3
 800d74c:	f3bf 8f6f 	isb	sy
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	61fb      	str	r3, [r7, #28]
}
 800d756:	bf00      	nop
 800d758:	e7fe      	b.n	800d758 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d75a:	f002 f89d 	bl	800f898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d75e:	f3ef 8211 	mrs	r2, BASEPRI
 800d762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d766:	f383 8811 	msr	BASEPRI, r3
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	61ba      	str	r2, [r7, #24]
 800d774:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d776:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d778:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d782:	429a      	cmp	r2, r3
 800d784:	d302      	bcc.n	800d78c <xQueueGenericSendFromISR+0xbc>
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d12c      	bne.n	800d7e6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	68b9      	ldr	r1, [r7, #8]
 800d79a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d79c:	f000 fa72 	bl	800dc84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d7a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d7a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7a8:	d112      	bne.n	800d7d0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d016      	beq.n	800d7e0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b4:	3324      	adds	r3, #36	; 0x24
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 f868 	bl	800e88c <xTaskRemoveFromEventList>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d00e      	beq.n	800d7e0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00b      	beq.n	800d7e0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	601a      	str	r2, [r3, #0]
 800d7ce:	e007      	b.n	800d7e0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	b25a      	sxtb	r2, r3
 800d7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d7e4:	e001      	b.n	800d7ea <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ec:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 800d7f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3738      	adds	r7, #56	; 0x38
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b08e      	sub	sp, #56	; 0x38
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10a      	bne.n	800d82a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	623b      	str	r3, [r7, #32]
}
 800d826:	bf00      	nop
 800d828:	e7fe      	b.n	800d828 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d00a      	beq.n	800d848 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d836:	f383 8811 	msr	BASEPRI, r3
 800d83a:	f3bf 8f6f 	isb	sy
 800d83e:	f3bf 8f4f 	dsb	sy
 800d842:	61fb      	str	r3, [r7, #28]
}
 800d844:	bf00      	nop
 800d846:	e7fe      	b.n	800d846 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800d848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d103      	bne.n	800d858 <xQueueGiveFromISR+0x58>
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d101      	bne.n	800d85c <xQueueGiveFromISR+0x5c>
 800d858:	2301      	movs	r3, #1
 800d85a:	e000      	b.n	800d85e <xQueueGiveFromISR+0x5e>
 800d85c:	2300      	movs	r3, #0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d10a      	bne.n	800d878 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	61bb      	str	r3, [r7, #24]
}
 800d874:	bf00      	nop
 800d876:	e7fe      	b.n	800d876 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d878:	f002 f80e 	bl	800f898 <vPortValidateInterruptPriority>
	__asm volatile
 800d87c:	f3ef 8211 	mrs	r2, BASEPRI
 800d880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d884:	f383 8811 	msr	BASEPRI, r3
 800d888:	f3bf 8f6f 	isb	sy
 800d88c:	f3bf 8f4f 	dsb	sy
 800d890:	617a      	str	r2, [r7, #20]
 800d892:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d894:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d896:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d22b      	bcs.n	800d900 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800d8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b4:	1c5a      	adds	r2, r3, #1
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8b8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d8ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d8be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8c2:	d112      	bne.n	800d8ea <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d016      	beq.n	800d8fa <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ce:	3324      	adds	r3, #36	; 0x24
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f000 ffdb 	bl	800e88c <xTaskRemoveFromEventList>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00e      	beq.n	800d8fa <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00b      	beq.n	800d8fa <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	601a      	str	r2, [r3, #0]
 800d8e8:	e007      	b.n	800d8fa <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d8ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	b25a      	sxtb	r2, r3
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	637b      	str	r3, [r7, #52]	; 0x34
 800d8fe:	e001      	b.n	800d904 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d900:	2300      	movs	r3, #0
 800d902:	637b      	str	r3, [r7, #52]	; 0x34
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f383 8811 	msr	BASEPRI, r3
}
 800d90e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d912:	4618      	mov	r0, r3
 800d914:	3738      	adds	r7, #56	; 0x38
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
	...

0800d91c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b08e      	sub	sp, #56	; 0x38
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
 800d928:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d92a:	2300      	movs	r3, #0
 800d92c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10a      	bne.n	800d94e <xQueueGenericReceive+0x32>
	__asm volatile
 800d938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d93c:	f383 8811 	msr	BASEPRI, r3
 800d940:	f3bf 8f6f 	isb	sy
 800d944:	f3bf 8f4f 	dsb	sy
 800d948:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d94a:	bf00      	nop
 800d94c:	e7fe      	b.n	800d94c <xQueueGenericReceive+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d103      	bne.n	800d95c <xQueueGenericReceive+0x40>
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d101      	bne.n	800d960 <xQueueGenericReceive+0x44>
 800d95c:	2301      	movs	r3, #1
 800d95e:	e000      	b.n	800d962 <xQueueGenericReceive+0x46>
 800d960:	2300      	movs	r3, #0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d10a      	bne.n	800d97c <xQueueGenericReceive+0x60>
	__asm volatile
 800d966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96a:	f383 8811 	msr	BASEPRI, r3
 800d96e:	f3bf 8f6f 	isb	sy
 800d972:	f3bf 8f4f 	dsb	sy
 800d976:	623b      	str	r3, [r7, #32]
}
 800d978:	bf00      	nop
 800d97a:	e7fe      	b.n	800d97a <xQueueGenericReceive+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d97c:	f001 f942 	bl	800ec04 <xTaskGetSchedulerState>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d102      	bne.n	800d98c <xQueueGenericReceive+0x70>
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d101      	bne.n	800d990 <xQueueGenericReceive+0x74>
 800d98c:	2301      	movs	r3, #1
 800d98e:	e000      	b.n	800d992 <xQueueGenericReceive+0x76>
 800d990:	2300      	movs	r3, #0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d10a      	bne.n	800d9ac <xQueueGenericReceive+0x90>
	__asm volatile
 800d996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99a:	f383 8811 	msr	BASEPRI, r3
 800d99e:	f3bf 8f6f 	isb	sy
 800d9a2:	f3bf 8f4f 	dsb	sy
 800d9a6:	61fb      	str	r3, [r7, #28]
}
 800d9a8:	bf00      	nop
 800d9aa:	e7fe      	b.n	800d9aa <xQueueGenericReceive+0x8e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9ac:	f001 fe9a 	bl	800f6e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d046      	beq.n	800da4a <xQueueGenericReceive+0x12e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800d9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9c2:	68b9      	ldr	r1, [r7, #8]
 800d9c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9c6:	f000 f9c7 	bl	800dd58 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d121      	bne.n	800da14 <xQueueGenericReceive+0xf8>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800d9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d2:	1e5a      	subs	r2, r3, #1
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d6:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d104      	bne.n	800d9ea <xQueueGenericReceive+0xce>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800d9e0:	f001 fa2a 	bl	800ee38 <pvTaskIncrementMutexHeldCount>
 800d9e4:	4602      	mov	r2, r0
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e8:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d027      	beq.n	800da42 <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f4:	3310      	adds	r3, #16
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f000 ff48 	bl	800e88c <xTaskRemoveFromEventList>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d01f      	beq.n	800da42 <xQueueGenericReceive+0x126>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800da02:	4b50      	ldr	r3, [pc, #320]	; (800db44 <xQueueGenericReceive+0x228>)
 800da04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da08:	601a      	str	r2, [r3, #0]
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	e016      	b.n	800da42 <xQueueGenericReceive+0x126>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800da14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da18:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00f      	beq.n	800da42 <xQueueGenericReceive+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da24:	3324      	adds	r3, #36	; 0x24
 800da26:	4618      	mov	r0, r3
 800da28:	f000 ff30 	bl	800e88c <xTaskRemoveFromEventList>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d007      	beq.n	800da42 <xQueueGenericReceive+0x126>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800da32:	4b44      	ldr	r3, [pc, #272]	; (800db44 <xQueueGenericReceive+0x228>)
 800da34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da38:	601a      	str	r2, [r3, #0]
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800da42:	f001 fe7f 	bl	800f744 <vPortExitCritical>
				return pdPASS;
 800da46:	2301      	movs	r3, #1
 800da48:	e077      	b.n	800db3a <xQueueGenericReceive+0x21e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d103      	bne.n	800da58 <xQueueGenericReceive+0x13c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da50:	f001 fe78 	bl	800f744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da54:	2300      	movs	r3, #0
 800da56:	e070      	b.n	800db3a <xQueueGenericReceive+0x21e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d106      	bne.n	800da6c <xQueueGenericReceive+0x150>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800da5e:	f107 0314 	add.w	r3, r7, #20
 800da62:	4618      	mov	r0, r3
 800da64:	f000 ff74 	bl	800e950 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da68:	2301      	movs	r3, #1
 800da6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da6c:	f001 fe6a 	bl	800f744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da70:	f000 fcd6 	bl	800e420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da74:	f001 fe36 	bl	800f6e4 <vPortEnterCritical>
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da7e:	b25b      	sxtb	r3, r3
 800da80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da84:	d103      	bne.n	800da8e <xQueueGenericReceive+0x172>
 800da86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da88:	2200      	movs	r2, #0
 800da8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da94:	b25b      	sxtb	r3, r3
 800da96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da9a:	d103      	bne.n	800daa4 <xQueueGenericReceive+0x188>
 800da9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800daa4:	f001 fe4e 	bl	800f744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800daa8:	1d3a      	adds	r2, r7, #4
 800daaa:	f107 0314 	add.w	r3, r7, #20
 800daae:	4611      	mov	r1, r2
 800dab0:	4618      	mov	r0, r3
 800dab2:	f000 ff71 	bl	800e998 <xTaskCheckForTimeOut>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d131      	bne.n	800db20 <xQueueGenericReceive+0x204>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dabc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dabe:	f000 f9c3 	bl	800de48 <prvIsQueueEmpty>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d025      	beq.n	800db14 <xQueueGenericReceive+0x1f8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d108      	bne.n	800dae2 <xQueueGenericReceive+0x1c6>
					{
						taskENTER_CRITICAL();
 800dad0:	f001 fe08 	bl	800f6e4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	685b      	ldr	r3, [r3, #4]
 800dad8:	4618      	mov	r0, r3
 800dada:	f001 f8b1 	bl	800ec40 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800dade:	f001 fe31 	bl	800f744 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae4:	3324      	adds	r3, #36	; 0x24
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	4611      	mov	r1, r2
 800daea:	4618      	mov	r0, r3
 800daec:	f000 fe7e 	bl	800e7ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800daf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800daf2:	f000 f957 	bl	800dda4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800daf6:	f000 fca1 	bl	800e43c <xTaskResumeAll>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	f47f af55 	bne.w	800d9ac <xQueueGenericReceive+0x90>
				{
					portYIELD_WITHIN_API();
 800db02:	4b10      	ldr	r3, [pc, #64]	; (800db44 <xQueueGenericReceive+0x228>)
 800db04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db08:	601a      	str	r2, [r3, #0]
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	e74b      	b.n	800d9ac <xQueueGenericReceive+0x90>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800db14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db16:	f000 f945 	bl	800dda4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db1a:	f000 fc8f 	bl	800e43c <xTaskResumeAll>
 800db1e:	e745      	b.n	800d9ac <xQueueGenericReceive+0x90>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800db20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db22:	f000 f93f 	bl	800dda4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db26:	f000 fc89 	bl	800e43c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db2c:	f000 f98c 	bl	800de48 <prvIsQueueEmpty>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	f43f af3a 	beq.w	800d9ac <xQueueGenericReceive+0x90>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3738      	adds	r7, #56	; 0x38
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
 800db42:	bf00      	nop
 800db44:	e000ed04 	.word	0xe000ed04

0800db48 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b08e      	sub	sp, #56	; 0x38
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10a      	bne.n	800db74 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800db5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	623b      	str	r3, [r7, #32]
}
 800db70:	bf00      	nop
 800db72:	e7fe      	b.n	800db72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d103      	bne.n	800db82 <xQueueReceiveFromISR+0x3a>
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d101      	bne.n	800db86 <xQueueReceiveFromISR+0x3e>
 800db82:	2301      	movs	r3, #1
 800db84:	e000      	b.n	800db88 <xQueueReceiveFromISR+0x40>
 800db86:	2300      	movs	r3, #0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d10a      	bne.n	800dba2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db90:	f383 8811 	msr	BASEPRI, r3
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	61fb      	str	r3, [r7, #28]
}
 800db9e:	bf00      	nop
 800dba0:	e7fe      	b.n	800dba0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dba2:	f001 fe79 	bl	800f898 <vPortValidateInterruptPriority>
	__asm volatile
 800dba6:	f3ef 8211 	mrs	r2, BASEPRI
 800dbaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbae:	f383 8811 	msr	BASEPRI, r3
 800dbb2:	f3bf 8f6f 	isb	sy
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	61ba      	str	r2, [r7, #24]
 800dbbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dbbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d02f      	beq.n	800dc2e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbd8:	68b9      	ldr	r1, [r7, #8]
 800dbda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbdc:	f000 f8bc 	bl	800dd58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800dbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe2:	1e5a      	subs	r2, r3, #1
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dbe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dbec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbf0:	d112      	bne.n	800dc18 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf4:	691b      	ldr	r3, [r3, #16]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d016      	beq.n	800dc28 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfc:	3310      	adds	r3, #16
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f000 fe44 	bl	800e88c <xTaskRemoveFromEventList>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d00e      	beq.n	800dc28 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d00b      	beq.n	800dc28 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2201      	movs	r2, #1
 800dc14:	601a      	str	r2, [r3, #0]
 800dc16:	e007      	b.n	800dc28 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	b25a      	sxtb	r2, r3
 800dc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	637b      	str	r3, [r7, #52]	; 0x34
 800dc2c:	e001      	b.n	800dc32 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	637b      	str	r3, [r7, #52]	; 0x34
 800dc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc34:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	f383 8811 	msr	BASEPRI, r3
}
 800dc3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3738      	adds	r7, #56	; 0x38
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d10a      	bne.n	800dc70 <vQueueDelete+0x28>
	__asm volatile
 800dc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc5e:	f383 8811 	msr	BASEPRI, r3
 800dc62:	f3bf 8f6f 	isb	sy
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	60bb      	str	r3, [r7, #8]
}
 800dc6c:	bf00      	nop
 800dc6e:	e7fe      	b.n	800dc6e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f000 f941 	bl	800def8 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f001 ff12 	bl	800faa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dc7c:	bf00      	nop
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b086      	sub	sp, #24
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc90:	2300      	movs	r3, #0
 800dc92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d10d      	bne.n	800dcbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d14d      	bne.n	800dd46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f001 f83c 	bl	800ed2c <xTaskPriorityDisinherit>
 800dcb4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	605a      	str	r2, [r3, #4]
 800dcbc:	e043      	b.n	800dd46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d119      	bne.n	800dcf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6898      	ldr	r0, [r3, #8]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dccc:	461a      	mov	r2, r3
 800dcce:	68b9      	ldr	r1, [r7, #8]
 800dcd0:	f004 fde4 	bl	801289c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	689a      	ldr	r2, [r3, #8]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcdc:	441a      	add	r2, r3
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	689a      	ldr	r2, [r3, #8]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d32b      	bcc.n	800dd46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	609a      	str	r2, [r3, #8]
 800dcf6:	e026      	b.n	800dd46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	68d8      	ldr	r0, [r3, #12]
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd00:	461a      	mov	r2, r3
 800dd02:	68b9      	ldr	r1, [r7, #8]
 800dd04:	f004 fdca 	bl	801289c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	68da      	ldr	r2, [r3, #12]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd10:	425b      	negs	r3, r3
 800dd12:	441a      	add	r2, r3
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	68da      	ldr	r2, [r3, #12]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d207      	bcs.n	800dd34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	685a      	ldr	r2, [r3, #4]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2c:	425b      	negs	r3, r3
 800dd2e:	441a      	add	r2, r3
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2b02      	cmp	r3, #2
 800dd38:	d105      	bne.n	800dd46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d002      	beq.n	800dd46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	3b01      	subs	r3, #1
 800dd44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dd4e:	697b      	ldr	r3, [r7, #20]
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d018      	beq.n	800dd9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	68da      	ldr	r2, [r3, #12]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd72:	441a      	add	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	68da      	ldr	r2, [r3, #12]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	685b      	ldr	r3, [r3, #4]
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d303      	bcc.n	800dd8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	68d9      	ldr	r1, [r3, #12]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd94:	461a      	mov	r2, r3
 800dd96:	6838      	ldr	r0, [r7, #0]
 800dd98:	f004 fd80 	bl	801289c <memcpy>
	}
}
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ddac:	f001 fc9a 	bl	800f6e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ddb8:	e011      	b.n	800ddde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d012      	beq.n	800dde8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	3324      	adds	r3, #36	; 0x24
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f000 fd60 	bl	800e88c <xTaskRemoveFromEventList>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ddd2:	f000 fe41 	bl	800ea58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ddd6:	7bfb      	ldrb	r3, [r7, #15]
 800ddd8:	3b01      	subs	r3, #1
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ddde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	dce9      	bgt.n	800ddba <prvUnlockQueue+0x16>
 800dde6:	e000      	b.n	800ddea <prvUnlockQueue+0x46>
					break;
 800dde8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	22ff      	movs	r2, #255	; 0xff
 800ddee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ddf2:	f001 fca7 	bl	800f744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ddf6:	f001 fc75 	bl	800f6e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de02:	e011      	b.n	800de28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	691b      	ldr	r3, [r3, #16]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d012      	beq.n	800de32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	3310      	adds	r3, #16
 800de10:	4618      	mov	r0, r3
 800de12:	f000 fd3b 	bl	800e88c <xTaskRemoveFromEventList>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d001      	beq.n	800de20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800de1c:	f000 fe1c 	bl	800ea58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800de20:	7bbb      	ldrb	r3, [r7, #14]
 800de22:	3b01      	subs	r3, #1
 800de24:	b2db      	uxtb	r3, r3
 800de26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800de28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	dce9      	bgt.n	800de04 <prvUnlockQueue+0x60>
 800de30:	e000      	b.n	800de34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	22ff      	movs	r2, #255	; 0xff
 800de38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800de3c:	f001 fc82 	bl	800f744 <vPortExitCritical>
}
 800de40:	bf00      	nop
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de50:	f001 fc48 	bl	800f6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d102      	bne.n	800de62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de5c:	2301      	movs	r3, #1
 800de5e:	60fb      	str	r3, [r7, #12]
 800de60:	e001      	b.n	800de66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de62:	2300      	movs	r3, #0
 800de64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de66:	f001 fc6d 	bl	800f744 <vPortExitCritical>

	return xReturn;
 800de6a:	68fb      	ldr	r3, [r7, #12]
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3710      	adds	r7, #16
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de7c:	f001 fc32 	bl	800f6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de88:	429a      	cmp	r2, r3
 800de8a:	d102      	bne.n	800de92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de8c:	2301      	movs	r3, #1
 800de8e:	60fb      	str	r3, [r7, #12]
 800de90:	e001      	b.n	800de96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de92:	2300      	movs	r3, #0
 800de94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de96:	f001 fc55 	bl	800f744 <vPortExitCritical>

	return xReturn;
 800de9a:	68fb      	ldr	r3, [r7, #12]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3710      	adds	r7, #16
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800deae:	2300      	movs	r3, #0
 800deb0:	60fb      	str	r3, [r7, #12]
 800deb2:	e014      	b.n	800dede <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800deb4:	4a0f      	ldr	r2, [pc, #60]	; (800def4 <vQueueAddToRegistry+0x50>)
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10b      	bne.n	800ded8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dec0:	490c      	ldr	r1, [pc, #48]	; (800def4 <vQueueAddToRegistry+0x50>)
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	683a      	ldr	r2, [r7, #0]
 800dec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800deca:	4a0a      	ldr	r2, [pc, #40]	; (800def4 <vQueueAddToRegistry+0x50>)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	00db      	lsls	r3, r3, #3
 800ded0:	4413      	add	r3, r2
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ded6:	e006      	b.n	800dee6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	3301      	adds	r3, #1
 800dedc:	60fb      	str	r3, [r7, #12]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2b07      	cmp	r3, #7
 800dee2:	d9e7      	bls.n	800deb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dee4:	bf00      	nop
 800dee6:	bf00      	nop
 800dee8:	3714      	adds	r7, #20
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr
 800def2:	bf00      	nop
 800def4:	20008270 	.word	0x20008270

0800def8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df00:	2300      	movs	r3, #0
 800df02:	60fb      	str	r3, [r7, #12]
 800df04:	e016      	b.n	800df34 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800df06:	4a10      	ldr	r2, [pc, #64]	; (800df48 <vQueueUnregisterQueue+0x50>)
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	00db      	lsls	r3, r3, #3
 800df0c:	4413      	add	r3, r2
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	429a      	cmp	r2, r3
 800df14:	d10b      	bne.n	800df2e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800df16:	4a0c      	ldr	r2, [pc, #48]	; (800df48 <vQueueUnregisterQueue+0x50>)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2100      	movs	r1, #0
 800df1c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800df20:	4a09      	ldr	r2, [pc, #36]	; (800df48 <vQueueUnregisterQueue+0x50>)
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	00db      	lsls	r3, r3, #3
 800df26:	4413      	add	r3, r2
 800df28:	2200      	movs	r2, #0
 800df2a:	605a      	str	r2, [r3, #4]
				break;
 800df2c:	e006      	b.n	800df3c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	3301      	adds	r3, #1
 800df32:	60fb      	str	r3, [r7, #12]
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2b07      	cmp	r3, #7
 800df38:	d9e5      	bls.n	800df06 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800df3a:	bf00      	nop
 800df3c:	bf00      	nop
 800df3e:	3714      	adds	r7, #20
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr
 800df48:	20008270 	.word	0x20008270

0800df4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b086      	sub	sp, #24
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800df5c:	f001 fbc2 	bl	800f6e4 <vPortEnterCritical>
 800df60:	697b      	ldr	r3, [r7, #20]
 800df62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df66:	b25b      	sxtb	r3, r3
 800df68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df6c:	d103      	bne.n	800df76 <vQueueWaitForMessageRestricted+0x2a>
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	2200      	movs	r2, #0
 800df72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df7c:	b25b      	sxtb	r3, r3
 800df7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df82:	d103      	bne.n	800df8c <vQueueWaitForMessageRestricted+0x40>
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	2200      	movs	r2, #0
 800df88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df8c:	f001 fbda 	bl	800f744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df94:	2b00      	cmp	r3, #0
 800df96:	d106      	bne.n	800dfa6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	3324      	adds	r3, #36	; 0x24
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	68b9      	ldr	r1, [r7, #8]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f000 fc47 	bl	800e834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dfa6:	6978      	ldr	r0, [r7, #20]
 800dfa8:	f7ff fefc 	bl	800dda4 <prvUnlockQueue>
	}
 800dfac:	bf00      	nop
 800dfae:	3718      	adds	r7, #24
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b08c      	sub	sp, #48	; 0x30
 800dfb8:	af04      	add	r7, sp, #16
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	603b      	str	r3, [r7, #0]
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfc4:	88fb      	ldrh	r3, [r7, #6]
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f001 fca5 	bl	800f918 <pvPortMalloc>
 800dfce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00e      	beq.n	800dff4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800dfd6:	205c      	movs	r0, #92	; 0x5c
 800dfd8:	f001 fc9e 	bl	800f918 <pvPortMalloc>
 800dfdc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d003      	beq.n	800dfec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	697a      	ldr	r2, [r7, #20]
 800dfe8:	631a      	str	r2, [r3, #48]	; 0x30
 800dfea:	e005      	b.n	800dff8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dfec:	6978      	ldr	r0, [r7, #20]
 800dfee:	f001 fd57 	bl	800faa0 <vPortFree>
 800dff2:	e001      	b.n	800dff8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dff4:	2300      	movs	r3, #0
 800dff6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d013      	beq.n	800e026 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dffe:	88fa      	ldrh	r2, [r7, #6]
 800e000:	2300      	movs	r3, #0
 800e002:	9303      	str	r3, [sp, #12]
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	9302      	str	r3, [sp, #8]
 800e008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00a:	9301      	str	r3, [sp, #4]
 800e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00e:	9300      	str	r3, [sp, #0]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	68b9      	ldr	r1, [r7, #8]
 800e014:	68f8      	ldr	r0, [r7, #12]
 800e016:	f000 f80e 	bl	800e036 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e01a:	69f8      	ldr	r0, [r7, #28]
 800e01c:	f000 f892 	bl	800e144 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e020:	2301      	movs	r3, #1
 800e022:	61bb      	str	r3, [r7, #24]
 800e024:	e002      	b.n	800e02c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e02a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e02c:	69bb      	ldr	r3, [r7, #24]
	}
 800e02e:	4618      	mov	r0, r3
 800e030:	3720      	adds	r7, #32
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b088      	sub	sp, #32
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	60f8      	str	r0, [r7, #12]
 800e03e:	60b9      	str	r1, [r7, #8]
 800e040:	607a      	str	r2, [r7, #4]
 800e042:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e046:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	461a      	mov	r2, r3
 800e04e:	21a5      	movs	r1, #165	; 0xa5
 800e050:	f004 fc32 	bl	80128b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800e054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e05e:	3b01      	subs	r3, #1
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	4413      	add	r3, r2
 800e064:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	f023 0307 	bic.w	r3, r3, #7
 800e06c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	f003 0307 	and.w	r3, r3, #7
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00a      	beq.n	800e08e <prvInitialiseNewTask+0x58>
	__asm volatile
 800e078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07c:	f383 8811 	msr	BASEPRI, r3
 800e080:	f3bf 8f6f 	isb	sy
 800e084:	f3bf 8f4f 	dsb	sy
 800e088:	617b      	str	r3, [r7, #20]
}
 800e08a:	bf00      	nop
 800e08c:	e7fe      	b.n	800e08c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e08e:	2300      	movs	r3, #0
 800e090:	61fb      	str	r3, [r7, #28]
 800e092:	e012      	b.n	800e0ba <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e094:	68ba      	ldr	r2, [r7, #8]
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	4413      	add	r3, r2
 800e09a:	7819      	ldrb	r1, [r3, #0]
 800e09c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	3334      	adds	r3, #52	; 0x34
 800e0a4:	460a      	mov	r2, r1
 800e0a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800e0a8:	68ba      	ldr	r2, [r7, #8]
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d006      	beq.n	800e0c2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0b4:	69fb      	ldr	r3, [r7, #28]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	61fb      	str	r3, [r7, #28]
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	2b0f      	cmp	r3, #15
 800e0be:	d9e9      	bls.n	800e094 <prvInitialiseNewTask+0x5e>
 800e0c0:	e000      	b.n	800e0c4 <prvInitialiseNewTask+0x8e>
		{
			break;
 800e0c2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	2b06      	cmp	r3, #6
 800e0d0:	d901      	bls.n	800e0d6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e0d2:	2306      	movs	r3, #6
 800e0d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ea:	3304      	adds	r3, #4
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7ff f865 	bl	800d1bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f4:	3318      	adds	r3, #24
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7ff f860 	bl	800d1bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e100:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e104:	f1c3 0207 	rsb	r2, r3, #7
 800e108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e110:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e114:	2200      	movs	r2, #0
 800e116:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e120:	683a      	ldr	r2, [r7, #0]
 800e122:	68f9      	ldr	r1, [r7, #12]
 800e124:	69b8      	ldr	r0, [r7, #24]
 800e126:	f001 f9d3 	bl	800f4d0 <pxPortInitialiseStack>
 800e12a:	4602      	mov	r2, r0
 800e12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800e130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e132:	2b00      	cmp	r3, #0
 800e134:	d002      	beq.n	800e13c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e13a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e13c:	bf00      	nop
 800e13e:	3720      	adds	r7, #32
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e14c:	f001 faca 	bl	800f6e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e150:	4b2c      	ldr	r3, [pc, #176]	; (800e204 <prvAddNewTaskToReadyList+0xc0>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	3301      	adds	r3, #1
 800e156:	4a2b      	ldr	r2, [pc, #172]	; (800e204 <prvAddNewTaskToReadyList+0xc0>)
 800e158:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e15a:	4b2b      	ldr	r3, [pc, #172]	; (800e208 <prvAddNewTaskToReadyList+0xc4>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d109      	bne.n	800e176 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e162:	4a29      	ldr	r2, [pc, #164]	; (800e208 <prvAddNewTaskToReadyList+0xc4>)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e168:	4b26      	ldr	r3, [pc, #152]	; (800e204 <prvAddNewTaskToReadyList+0xc0>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d110      	bne.n	800e192 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e170:	f000 fc96 	bl	800eaa0 <prvInitialiseTaskLists>
 800e174:	e00d      	b.n	800e192 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e176:	4b25      	ldr	r3, [pc, #148]	; (800e20c <prvAddNewTaskToReadyList+0xc8>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d109      	bne.n	800e192 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e17e:	4b22      	ldr	r3, [pc, #136]	; (800e208 <prvAddNewTaskToReadyList+0xc4>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e188:	429a      	cmp	r2, r3
 800e18a:	d802      	bhi.n	800e192 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e18c:	4a1e      	ldr	r2, [pc, #120]	; (800e208 <prvAddNewTaskToReadyList+0xc4>)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e192:	4b1f      	ldr	r3, [pc, #124]	; (800e210 <prvAddNewTaskToReadyList+0xcc>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	3301      	adds	r3, #1
 800e198:	4a1d      	ldr	r2, [pc, #116]	; (800e210 <prvAddNewTaskToReadyList+0xcc>)
 800e19a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e19c:	4b1c      	ldr	r3, [pc, #112]	; (800e210 <prvAddNewTaskToReadyList+0xcc>)
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	409a      	lsls	r2, r3
 800e1ac:	4b19      	ldr	r3, [pc, #100]	; (800e214 <prvAddNewTaskToReadyList+0xd0>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	4a18      	ldr	r2, [pc, #96]	; (800e214 <prvAddNewTaskToReadyList+0xd0>)
 800e1b4:	6013      	str	r3, [r2, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	009b      	lsls	r3, r3, #2
 800e1be:	4413      	add	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4a15      	ldr	r2, [pc, #84]	; (800e218 <prvAddNewTaskToReadyList+0xd4>)
 800e1c4:	441a      	add	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	3304      	adds	r3, #4
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	4610      	mov	r0, r2
 800e1ce:	f7ff f802 	bl	800d1d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e1d2:	f001 fab7 	bl	800f744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e1d6:	4b0d      	ldr	r3, [pc, #52]	; (800e20c <prvAddNewTaskToReadyList+0xc8>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00e      	beq.n	800e1fc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e1de:	4b0a      	ldr	r3, [pc, #40]	; (800e208 <prvAddNewTaskToReadyList+0xc4>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d207      	bcs.n	800e1fc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1ec:	4b0b      	ldr	r3, [pc, #44]	; (800e21c <prvAddNewTaskToReadyList+0xd8>)
 800e1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	f3bf 8f4f 	dsb	sy
 800e1f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	200003d8 	.word	0x200003d8
 800e208:	200002d8 	.word	0x200002d8
 800e20c:	200003e4 	.word	0x200003e4
 800e210:	200003f4 	.word	0x200003f4
 800e214:	200003e0 	.word	0x200003e0
 800e218:	200002dc 	.word	0x200002dc
 800e21c:	e000ed04 	.word	0xe000ed04

0800e220 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e220:	b580      	push	{r7, lr}
 800e222:	b08a      	sub	sp, #40	; 0x28
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e22a:	2300      	movs	r3, #0
 800e22c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d10a      	bne.n	800e24a <vTaskDelayUntil+0x2a>
	__asm volatile
 800e234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	617b      	str	r3, [r7, #20]
}
 800e246:	bf00      	nop
 800e248:	e7fe      	b.n	800e248 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d10a      	bne.n	800e266 <vTaskDelayUntil+0x46>
	__asm volatile
 800e250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e254:	f383 8811 	msr	BASEPRI, r3
 800e258:	f3bf 8f6f 	isb	sy
 800e25c:	f3bf 8f4f 	dsb	sy
 800e260:	613b      	str	r3, [r7, #16]
}
 800e262:	bf00      	nop
 800e264:	e7fe      	b.n	800e264 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e266:	4b2a      	ldr	r3, [pc, #168]	; (800e310 <vTaskDelayUntil+0xf0>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00a      	beq.n	800e284 <vTaskDelayUntil+0x64>
	__asm volatile
 800e26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e272:	f383 8811 	msr	BASEPRI, r3
 800e276:	f3bf 8f6f 	isb	sy
 800e27a:	f3bf 8f4f 	dsb	sy
 800e27e:	60fb      	str	r3, [r7, #12]
}
 800e280:	bf00      	nop
 800e282:	e7fe      	b.n	800e282 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e284:	f000 f8cc 	bl	800e420 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e288:	4b22      	ldr	r3, [pc, #136]	; (800e314 <vTaskDelayUntil+0xf4>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	683a      	ldr	r2, [r7, #0]
 800e294:	4413      	add	r3, r2
 800e296:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	6a3a      	ldr	r2, [r7, #32]
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d20b      	bcs.n	800e2ba <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	69fa      	ldr	r2, [r7, #28]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d211      	bcs.n	800e2d0 <vTaskDelayUntil+0xb0>
 800e2ac:	69fa      	ldr	r2, [r7, #28]
 800e2ae:	6a3b      	ldr	r3, [r7, #32]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d90d      	bls.n	800e2d0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	627b      	str	r3, [r7, #36]	; 0x24
 800e2b8:	e00a      	b.n	800e2d0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	69fa      	ldr	r2, [r7, #28]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d303      	bcc.n	800e2cc <vTaskDelayUntil+0xac>
 800e2c4:	69fa      	ldr	r2, [r7, #28]
 800e2c6:	6a3b      	ldr	r3, [r7, #32]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d901      	bls.n	800e2d0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	69fa      	ldr	r2, [r7, #28]
 800e2d4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d006      	beq.n	800e2ea <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e2dc:	69fa      	ldr	r2, [r7, #28]
 800e2de:	6a3b      	ldr	r3, [r7, #32]
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f000 fdbb 	bl	800ee60 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e2ea:	f000 f8a7 	bl	800e43c <xTaskResumeAll>
 800e2ee:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d107      	bne.n	800e306 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e2f6:	4b08      	ldr	r3, [pc, #32]	; (800e318 <vTaskDelayUntil+0xf8>)
 800e2f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2fc:	601a      	str	r2, [r3, #0]
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e306:	bf00      	nop
 800e308:	3728      	adds	r7, #40	; 0x28
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	20000400 	.word	0x20000400
 800e314:	200003dc 	.word	0x200003dc
 800e318:	e000ed04 	.word	0xe000ed04

0800e31c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e324:	2300      	movs	r3, #0
 800e326:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d017      	beq.n	800e35e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e32e:	4b13      	ldr	r3, [pc, #76]	; (800e37c <vTaskDelay+0x60>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00a      	beq.n	800e34c <vTaskDelay+0x30>
	__asm volatile
 800e336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33a:	f383 8811 	msr	BASEPRI, r3
 800e33e:	f3bf 8f6f 	isb	sy
 800e342:	f3bf 8f4f 	dsb	sy
 800e346:	60bb      	str	r3, [r7, #8]
}
 800e348:	bf00      	nop
 800e34a:	e7fe      	b.n	800e34a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e34c:	f000 f868 	bl	800e420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e350:	2100      	movs	r1, #0
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 fd84 	bl	800ee60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e358:	f000 f870 	bl	800e43c <xTaskResumeAll>
 800e35c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d107      	bne.n	800e374 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e364:	4b06      	ldr	r3, [pc, #24]	; (800e380 <vTaskDelay+0x64>)
 800e366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e36a:	601a      	str	r2, [r3, #0]
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e374:	bf00      	nop
 800e376:	3710      	adds	r7, #16
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	20000400 	.word	0x20000400
 800e380:	e000ed04 	.word	0xe000ed04

0800e384 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b086      	sub	sp, #24
 800e388:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800e38a:	4b1f      	ldr	r3, [pc, #124]	; (800e408 <vTaskStartScheduler+0x84>)
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	2300      	movs	r3, #0
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	2300      	movs	r3, #0
 800e394:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e398:	491c      	ldr	r1, [pc, #112]	; (800e40c <vTaskStartScheduler+0x88>)
 800e39a:	481d      	ldr	r0, [pc, #116]	; (800e410 <vTaskStartScheduler+0x8c>)
 800e39c:	f7ff fe0a 	bl	800dfb4 <xTaskCreate>
 800e3a0:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d102      	bne.n	800e3ae <vTaskStartScheduler+0x2a>
		{
			xReturn = xTimerCreateTimerTask();
 800e3a8:	f000 fdc0 	bl	800ef2c <xTimerCreateTimerTask>
 800e3ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d116      	bne.n	800e3e2 <vTaskStartScheduler+0x5e>
	__asm volatile
 800e3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b8:	f383 8811 	msr	BASEPRI, r3
 800e3bc:	f3bf 8f6f 	isb	sy
 800e3c0:	f3bf 8f4f 	dsb	sy
 800e3c4:	60bb      	str	r3, [r7, #8]
}
 800e3c6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e3c8:	4b12      	ldr	r3, [pc, #72]	; (800e414 <vTaskStartScheduler+0x90>)
 800e3ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e3d0:	4b11      	ldr	r3, [pc, #68]	; (800e418 <vTaskStartScheduler+0x94>)
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800e3d6:	4b11      	ldr	r3, [pc, #68]	; (800e41c <vTaskStartScheduler+0x98>)
 800e3d8:	2200      	movs	r2, #0
 800e3da:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e3dc:	f001 f8f4 	bl	800f5c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e3e0:	e00e      	b.n	800e400 <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3e8:	d10a      	bne.n	800e400 <vTaskStartScheduler+0x7c>
	__asm volatile
 800e3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ee:	f383 8811 	msr	BASEPRI, r3
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	f3bf 8f4f 	dsb	sy
 800e3fa:	607b      	str	r3, [r7, #4]
}
 800e3fc:	bf00      	nop
 800e3fe:	e7fe      	b.n	800e3fe <vTaskStartScheduler+0x7a>
}
 800e400:	bf00      	nop
 800e402:	3710      	adds	r7, #16
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	200003fc 	.word	0x200003fc
 800e40c:	08017fb8 	.word	0x08017fb8
 800e410:	0800ea71 	.word	0x0800ea71
 800e414:	200003f8 	.word	0x200003f8
 800e418:	200003e4 	.word	0x200003e4
 800e41c:	200003dc 	.word	0x200003dc

0800e420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e420:	b480      	push	{r7}
 800e422:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e424:	4b04      	ldr	r3, [pc, #16]	; (800e438 <vTaskSuspendAll+0x18>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	3301      	adds	r3, #1
 800e42a:	4a03      	ldr	r2, [pc, #12]	; (800e438 <vTaskSuspendAll+0x18>)
 800e42c:	6013      	str	r3, [r2, #0]
}
 800e42e:	bf00      	nop
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr
 800e438:	20000400 	.word	0x20000400

0800e43c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b084      	sub	sp, #16
 800e440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e446:	2300      	movs	r3, #0
 800e448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e44a:	4b41      	ldr	r3, [pc, #260]	; (800e550 <xTaskResumeAll+0x114>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d10a      	bne.n	800e468 <xTaskResumeAll+0x2c>
	__asm volatile
 800e452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e456:	f383 8811 	msr	BASEPRI, r3
 800e45a:	f3bf 8f6f 	isb	sy
 800e45e:	f3bf 8f4f 	dsb	sy
 800e462:	603b      	str	r3, [r7, #0]
}
 800e464:	bf00      	nop
 800e466:	e7fe      	b.n	800e466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e468:	f001 f93c 	bl	800f6e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e46c:	4b38      	ldr	r3, [pc, #224]	; (800e550 <xTaskResumeAll+0x114>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	3b01      	subs	r3, #1
 800e472:	4a37      	ldr	r2, [pc, #220]	; (800e550 <xTaskResumeAll+0x114>)
 800e474:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e476:	4b36      	ldr	r3, [pc, #216]	; (800e550 <xTaskResumeAll+0x114>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d161      	bne.n	800e542 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e47e:	4b35      	ldr	r3, [pc, #212]	; (800e554 <xTaskResumeAll+0x118>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d05d      	beq.n	800e542 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e486:	e02e      	b.n	800e4e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800e488:	4b33      	ldr	r3, [pc, #204]	; (800e558 <xTaskResumeAll+0x11c>)
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	3318      	adds	r3, #24
 800e494:	4618      	mov	r0, r3
 800e496:	f7fe fefb 	bl	800d290 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	3304      	adds	r3, #4
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fe fef6 	bl	800d290 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	409a      	lsls	r2, r3
 800e4ac:	4b2b      	ldr	r3, [pc, #172]	; (800e55c <xTaskResumeAll+0x120>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	4a2a      	ldr	r2, [pc, #168]	; (800e55c <xTaskResumeAll+0x120>)
 800e4b4:	6013      	str	r3, [r2, #0]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ba:	4613      	mov	r3, r2
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4413      	add	r3, r2
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	4a27      	ldr	r2, [pc, #156]	; (800e560 <xTaskResumeAll+0x124>)
 800e4c4:	441a      	add	r2, r3
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	3304      	adds	r3, #4
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	4610      	mov	r0, r2
 800e4ce:	f7fe fe82 	bl	800d1d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4d6:	4b23      	ldr	r3, [pc, #140]	; (800e564 <xTaskResumeAll+0x128>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d302      	bcc.n	800e4e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e4e0:	4b21      	ldr	r3, [pc, #132]	; (800e568 <xTaskResumeAll+0x12c>)
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4e6:	4b1c      	ldr	r3, [pc, #112]	; (800e558 <xTaskResumeAll+0x11c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1cc      	bne.n	800e488 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d001      	beq.n	800e4f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e4f4:	f000 fb60 	bl	800ebb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e4f8:	4b1c      	ldr	r3, [pc, #112]	; (800e56c <xTaskResumeAll+0x130>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d010      	beq.n	800e526 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e504:	f000 f858 	bl	800e5b8 <xTaskIncrementTick>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d002      	beq.n	800e514 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e50e:	4b16      	ldr	r3, [pc, #88]	; (800e568 <xTaskResumeAll+0x12c>)
 800e510:	2201      	movs	r2, #1
 800e512:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	3b01      	subs	r3, #1
 800e518:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d1f1      	bne.n	800e504 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e520:	4b12      	ldr	r3, [pc, #72]	; (800e56c <xTaskResumeAll+0x130>)
 800e522:	2200      	movs	r2, #0
 800e524:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e526:	4b10      	ldr	r3, [pc, #64]	; (800e568 <xTaskResumeAll+0x12c>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d009      	beq.n	800e542 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e52e:	2301      	movs	r3, #1
 800e530:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e532:	4b0f      	ldr	r3, [pc, #60]	; (800e570 <xTaskResumeAll+0x134>)
 800e534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e538:	601a      	str	r2, [r3, #0]
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e542:	f001 f8ff 	bl	800f744 <vPortExitCritical>

	return xAlreadyYielded;
 800e546:	68bb      	ldr	r3, [r7, #8]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	20000400 	.word	0x20000400
 800e554:	200003d8 	.word	0x200003d8
 800e558:	20000398 	.word	0x20000398
 800e55c:	200003e0 	.word	0x200003e0
 800e560:	200002dc 	.word	0x200002dc
 800e564:	200002d8 	.word	0x200002d8
 800e568:	200003ec 	.word	0x200003ec
 800e56c:	200003e8 	.word	0x200003e8
 800e570:	e000ed04 	.word	0xe000ed04

0800e574 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e57a:	4b05      	ldr	r3, [pc, #20]	; (800e590 <xTaskGetTickCount+0x1c>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e580:	687b      	ldr	r3, [r7, #4]
}
 800e582:	4618      	mov	r0, r3
 800e584:	370c      	adds	r7, #12
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr
 800e58e:	bf00      	nop
 800e590:	200003dc 	.word	0x200003dc

0800e594 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e59a:	f001 f97d 	bl	800f898 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e59e:	2300      	movs	r3, #0
 800e5a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e5a2:	4b04      	ldr	r3, [pc, #16]	; (800e5b4 <xTaskGetTickCountFromISR+0x20>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e5a8:	683b      	ldr	r3, [r7, #0]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3708      	adds	r7, #8
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	200003dc 	.word	0x200003dc

0800e5b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b086      	sub	sp, #24
 800e5bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5c2:	4b51      	ldr	r3, [pc, #324]	; (800e708 <xTaskIncrementTick+0x150>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f040 808d 	bne.w	800e6e6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800e5cc:	4b4f      	ldr	r3, [pc, #316]	; (800e70c <xTaskIncrementTick+0x154>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e5d4:	4a4d      	ldr	r2, [pc, #308]	; (800e70c <xTaskIncrementTick+0x154>)
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d120      	bne.n	800e622 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e5e0:	4b4b      	ldr	r3, [pc, #300]	; (800e710 <xTaskIncrementTick+0x158>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d00a      	beq.n	800e600 <xTaskIncrementTick+0x48>
	__asm volatile
 800e5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ee:	f383 8811 	msr	BASEPRI, r3
 800e5f2:	f3bf 8f6f 	isb	sy
 800e5f6:	f3bf 8f4f 	dsb	sy
 800e5fa:	603b      	str	r3, [r7, #0]
}
 800e5fc:	bf00      	nop
 800e5fe:	e7fe      	b.n	800e5fe <xTaskIncrementTick+0x46>
 800e600:	4b43      	ldr	r3, [pc, #268]	; (800e710 <xTaskIncrementTick+0x158>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	60fb      	str	r3, [r7, #12]
 800e606:	4b43      	ldr	r3, [pc, #268]	; (800e714 <xTaskIncrementTick+0x15c>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a41      	ldr	r2, [pc, #260]	; (800e710 <xTaskIncrementTick+0x158>)
 800e60c:	6013      	str	r3, [r2, #0]
 800e60e:	4a41      	ldr	r2, [pc, #260]	; (800e714 <xTaskIncrementTick+0x15c>)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6013      	str	r3, [r2, #0]
 800e614:	4b40      	ldr	r3, [pc, #256]	; (800e718 <xTaskIncrementTick+0x160>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	3301      	adds	r3, #1
 800e61a:	4a3f      	ldr	r2, [pc, #252]	; (800e718 <xTaskIncrementTick+0x160>)
 800e61c:	6013      	str	r3, [r2, #0]
 800e61e:	f000 facb 	bl	800ebb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e622:	4b3e      	ldr	r3, [pc, #248]	; (800e71c <xTaskIncrementTick+0x164>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	693a      	ldr	r2, [r7, #16]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d34d      	bcc.n	800e6c8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e62c:	4b38      	ldr	r3, [pc, #224]	; (800e710 <xTaskIncrementTick+0x158>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d101      	bne.n	800e63a <xTaskIncrementTick+0x82>
 800e636:	2301      	movs	r3, #1
 800e638:	e000      	b.n	800e63c <xTaskIncrementTick+0x84>
 800e63a:	2300      	movs	r3, #0
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d004      	beq.n	800e64a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e640:	4b36      	ldr	r3, [pc, #216]	; (800e71c <xTaskIncrementTick+0x164>)
 800e642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e646:	601a      	str	r2, [r3, #0]
					break;
 800e648:	e03e      	b.n	800e6c8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800e64a:	4b31      	ldr	r3, [pc, #196]	; (800e710 <xTaskIncrementTick+0x158>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e65a:	693a      	ldr	r2, [r7, #16]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d203      	bcs.n	800e66a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e662:	4a2e      	ldr	r2, [pc, #184]	; (800e71c <xTaskIncrementTick+0x164>)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6013      	str	r3, [r2, #0]
						break;
 800e668:	e02e      	b.n	800e6c8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	3304      	adds	r3, #4
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fe fe0e 	bl	800d290 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d004      	beq.n	800e686 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	3318      	adds	r3, #24
 800e680:	4618      	mov	r0, r3
 800e682:	f7fe fe05 	bl	800d290 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68a:	2201      	movs	r2, #1
 800e68c:	409a      	lsls	r2, r3
 800e68e:	4b24      	ldr	r3, [pc, #144]	; (800e720 <xTaskIncrementTick+0x168>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	4313      	orrs	r3, r2
 800e694:	4a22      	ldr	r2, [pc, #136]	; (800e720 <xTaskIncrementTick+0x168>)
 800e696:	6013      	str	r3, [r2, #0]
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e69c:	4613      	mov	r3, r2
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	4413      	add	r3, r2
 800e6a2:	009b      	lsls	r3, r3, #2
 800e6a4:	4a1f      	ldr	r2, [pc, #124]	; (800e724 <xTaskIncrementTick+0x16c>)
 800e6a6:	441a      	add	r2, r3
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	3304      	adds	r3, #4
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4610      	mov	r0, r2
 800e6b0:	f7fe fd91 	bl	800d1d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6b8:	4b1b      	ldr	r3, [pc, #108]	; (800e728 <xTaskIncrementTick+0x170>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d3b4      	bcc.n	800e62c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6c6:	e7b1      	b.n	800e62c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e6c8:	4b17      	ldr	r3, [pc, #92]	; (800e728 <xTaskIncrementTick+0x170>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ce:	4915      	ldr	r1, [pc, #84]	; (800e724 <xTaskIncrementTick+0x16c>)
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	4413      	add	r3, r2
 800e6d6:	009b      	lsls	r3, r3, #2
 800e6d8:	440b      	add	r3, r1
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d907      	bls.n	800e6f0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	617b      	str	r3, [r7, #20]
 800e6e4:	e004      	b.n	800e6f0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e6e6:	4b11      	ldr	r3, [pc, #68]	; (800e72c <xTaskIncrementTick+0x174>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	4a0f      	ldr	r2, [pc, #60]	; (800e72c <xTaskIncrementTick+0x174>)
 800e6ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e6f0:	4b0f      	ldr	r3, [pc, #60]	; (800e730 <xTaskIncrementTick+0x178>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d001      	beq.n	800e6fc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e6fc:	697b      	ldr	r3, [r7, #20]
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3718      	adds	r7, #24
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20000400 	.word	0x20000400
 800e70c:	200003dc 	.word	0x200003dc
 800e710:	20000390 	.word	0x20000390
 800e714:	20000394 	.word	0x20000394
 800e718:	200003f0 	.word	0x200003f0
 800e71c:	200003f8 	.word	0x200003f8
 800e720:	200003e0 	.word	0x200003e0
 800e724:	200002dc 	.word	0x200002dc
 800e728:	200002d8 	.word	0x200002d8
 800e72c:	200003e8 	.word	0x200003e8
 800e730:	200003ec 	.word	0x200003ec

0800e734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e734:	b480      	push	{r7}
 800e736:	b087      	sub	sp, #28
 800e738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e73a:	4b27      	ldr	r3, [pc, #156]	; (800e7d8 <vTaskSwitchContext+0xa4>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d003      	beq.n	800e74a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e742:	4b26      	ldr	r3, [pc, #152]	; (800e7dc <vTaskSwitchContext+0xa8>)
 800e744:	2201      	movs	r2, #1
 800e746:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e748:	e03f      	b.n	800e7ca <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e74a:	4b24      	ldr	r3, [pc, #144]	; (800e7dc <vTaskSwitchContext+0xa8>)
 800e74c:	2200      	movs	r2, #0
 800e74e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800e750:	4b23      	ldr	r3, [pc, #140]	; (800e7e0 <vTaskSwitchContext+0xac>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	fab3 f383 	clz	r3, r3
 800e75c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e75e:	7afb      	ldrb	r3, [r7, #11]
 800e760:	f1c3 031f 	rsb	r3, r3, #31
 800e764:	617b      	str	r3, [r7, #20]
 800e766:	491f      	ldr	r1, [pc, #124]	; (800e7e4 <vTaskSwitchContext+0xb0>)
 800e768:	697a      	ldr	r2, [r7, #20]
 800e76a:	4613      	mov	r3, r2
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	4413      	add	r3, r2
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	440b      	add	r3, r1
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10a      	bne.n	800e790 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77e:	f383 8811 	msr	BASEPRI, r3
 800e782:	f3bf 8f6f 	isb	sy
 800e786:	f3bf 8f4f 	dsb	sy
 800e78a:	607b      	str	r3, [r7, #4]
}
 800e78c:	bf00      	nop
 800e78e:	e7fe      	b.n	800e78e <vTaskSwitchContext+0x5a>
 800e790:	697a      	ldr	r2, [r7, #20]
 800e792:	4613      	mov	r3, r2
 800e794:	009b      	lsls	r3, r3, #2
 800e796:	4413      	add	r3, r2
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	4a12      	ldr	r2, [pc, #72]	; (800e7e4 <vTaskSwitchContext+0xb0>)
 800e79c:	4413      	add	r3, r2
 800e79e:	613b      	str	r3, [r7, #16]
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	685a      	ldr	r2, [r3, #4]
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	605a      	str	r2, [r3, #4]
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	685a      	ldr	r2, [r3, #4]
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	3308      	adds	r3, #8
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d104      	bne.n	800e7c0 <vTaskSwitchContext+0x8c>
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	685a      	ldr	r2, [r3, #4]
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	605a      	str	r2, [r3, #4]
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	4a08      	ldr	r2, [pc, #32]	; (800e7e8 <vTaskSwitchContext+0xb4>)
 800e7c8:	6013      	str	r3, [r2, #0]
}
 800e7ca:	bf00      	nop
 800e7cc:	371c      	adds	r7, #28
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr
 800e7d6:	bf00      	nop
 800e7d8:	20000400 	.word	0x20000400
 800e7dc:	200003ec 	.word	0x200003ec
 800e7e0:	200003e0 	.word	0x200003e0
 800e7e4:	200002dc 	.word	0x200002dc
 800e7e8:	200002d8 	.word	0x200002d8

0800e7ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b084      	sub	sp, #16
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d10a      	bne.n	800e812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e800:	f383 8811 	msr	BASEPRI, r3
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	f3bf 8f4f 	dsb	sy
 800e80c:	60fb      	str	r3, [r7, #12]
}
 800e80e:	bf00      	nop
 800e810:	e7fe      	b.n	800e810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e812:	4b07      	ldr	r3, [pc, #28]	; (800e830 <vTaskPlaceOnEventList+0x44>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	3318      	adds	r3, #24
 800e818:	4619      	mov	r1, r3
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7fe fcff 	bl	800d21e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e820:	2101      	movs	r1, #1
 800e822:	6838      	ldr	r0, [r7, #0]
 800e824:	f000 fb1c 	bl	800ee60 <prvAddCurrentTaskToDelayedList>
}
 800e828:	bf00      	nop
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	200002d8 	.word	0x200002d8

0800e834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	60f8      	str	r0, [r7, #12]
 800e83c:	60b9      	str	r1, [r7, #8]
 800e83e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10a      	bne.n	800e85c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e84a:	f383 8811 	msr	BASEPRI, r3
 800e84e:	f3bf 8f6f 	isb	sy
 800e852:	f3bf 8f4f 	dsb	sy
 800e856:	617b      	str	r3, [r7, #20]
}
 800e858:	bf00      	nop
 800e85a:	e7fe      	b.n	800e85a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e85c:	4b0a      	ldr	r3, [pc, #40]	; (800e888 <vTaskPlaceOnEventListRestricted+0x54>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	3318      	adds	r3, #24
 800e862:	4619      	mov	r1, r3
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f7fe fcb6 	bl	800d1d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e874:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e876:	6879      	ldr	r1, [r7, #4]
 800e878:	68b8      	ldr	r0, [r7, #8]
 800e87a:	f000 faf1 	bl	800ee60 <prvAddCurrentTaskToDelayedList>
	}
 800e87e:	bf00      	nop
 800e880:	3718      	adds	r7, #24
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	200002d8 	.word	0x200002d8

0800e88c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b086      	sub	sp, #24
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10a      	bne.n	800e8b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a6:	f383 8811 	msr	BASEPRI, r3
 800e8aa:	f3bf 8f6f 	isb	sy
 800e8ae:	f3bf 8f4f 	dsb	sy
 800e8b2:	60fb      	str	r3, [r7, #12]
}
 800e8b4:	bf00      	nop
 800e8b6:	e7fe      	b.n	800e8b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	3318      	adds	r3, #24
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fe fce7 	bl	800d290 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8c2:	4b1d      	ldr	r3, [pc, #116]	; (800e938 <xTaskRemoveFromEventList+0xac>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d11c      	bne.n	800e904 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	3304      	adds	r3, #4
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fe fcde 	bl	800d290 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8d8:	2201      	movs	r2, #1
 800e8da:	409a      	lsls	r2, r3
 800e8dc:	4b17      	ldr	r3, [pc, #92]	; (800e93c <xTaskRemoveFromEventList+0xb0>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	4a16      	ldr	r2, [pc, #88]	; (800e93c <xTaskRemoveFromEventList+0xb0>)
 800e8e4:	6013      	str	r3, [r2, #0]
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	4413      	add	r3, r2
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4a13      	ldr	r2, [pc, #76]	; (800e940 <xTaskRemoveFromEventList+0xb4>)
 800e8f4:	441a      	add	r2, r3
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	f7fe fc6a 	bl	800d1d6 <vListInsertEnd>
 800e902:	e005      	b.n	800e910 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	3318      	adds	r3, #24
 800e908:	4619      	mov	r1, r3
 800e90a:	480e      	ldr	r0, [pc, #56]	; (800e944 <xTaskRemoveFromEventList+0xb8>)
 800e90c:	f7fe fc63 	bl	800d1d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e914:	4b0c      	ldr	r3, [pc, #48]	; (800e948 <xTaskRemoveFromEventList+0xbc>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d905      	bls.n	800e92a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e91e:	2301      	movs	r3, #1
 800e920:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e922:	4b0a      	ldr	r3, [pc, #40]	; (800e94c <xTaskRemoveFromEventList+0xc0>)
 800e924:	2201      	movs	r2, #1
 800e926:	601a      	str	r2, [r3, #0]
 800e928:	e001      	b.n	800e92e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e92a:	2300      	movs	r3, #0
 800e92c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800e92e:	697b      	ldr	r3, [r7, #20]
}
 800e930:	4618      	mov	r0, r3
 800e932:	3718      	adds	r7, #24
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}
 800e938:	20000400 	.word	0x20000400
 800e93c:	200003e0 	.word	0x200003e0
 800e940:	200002dc 	.word	0x200002dc
 800e944:	20000398 	.word	0x20000398
 800e948:	200002d8 	.word	0x200002d8
 800e94c:	200003ec 	.word	0x200003ec

0800e950 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e950:	b480      	push	{r7}
 800e952:	b085      	sub	sp, #20
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10a      	bne.n	800e974 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800e95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	60fb      	str	r3, [r7, #12]
}
 800e970:	bf00      	nop
 800e972:	e7fe      	b.n	800e972 <vTaskSetTimeOutState+0x22>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e974:	4b06      	ldr	r3, [pc, #24]	; (800e990 <vTaskSetTimeOutState+0x40>)
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e97c:	4b05      	ldr	r3, [pc, #20]	; (800e994 <vTaskSetTimeOutState+0x44>)
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	605a      	str	r2, [r3, #4]
}
 800e984:	bf00      	nop
 800e986:	3714      	adds	r7, #20
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr
 800e990:	200003f0 	.word	0x200003f0
 800e994:	200003dc 	.word	0x200003dc

0800e998 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b086      	sub	sp, #24
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d10a      	bne.n	800e9be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9ac:	f383 8811 	msr	BASEPRI, r3
 800e9b0:	f3bf 8f6f 	isb	sy
 800e9b4:	f3bf 8f4f 	dsb	sy
 800e9b8:	60fb      	str	r3, [r7, #12]
}
 800e9ba:	bf00      	nop
 800e9bc:	e7fe      	b.n	800e9bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d10a      	bne.n	800e9da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c8:	f383 8811 	msr	BASEPRI, r3
 800e9cc:	f3bf 8f6f 	isb	sy
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	60bb      	str	r3, [r7, #8]
}
 800e9d6:	bf00      	nop
 800e9d8:	e7fe      	b.n	800e9d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e9da:	f000 fe83 	bl	800f6e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e9de:	4b1c      	ldr	r3, [pc, #112]	; (800ea50 <xTaskCheckForTimeOut+0xb8>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9ec:	d102      	bne.n	800e9f4 <xTaskCheckForTimeOut+0x5c>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	617b      	str	r3, [r7, #20]
 800e9f2:	e026      	b.n	800ea42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	4b16      	ldr	r3, [pc, #88]	; (800ea54 <xTaskCheckForTimeOut+0xbc>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d007      	beq.n	800ea10 <xTaskCheckForTimeOut+0x78>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	693a      	ldr	r2, [r7, #16]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d302      	bcc.n	800ea10 <xTaskCheckForTimeOut+0x78>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	617b      	str	r3, [r7, #20]
 800ea0e:	e018      	b.n	800ea42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	1ad2      	subs	r2, r2, r3
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d20e      	bcs.n	800ea3e <xTaskCheckForTimeOut+0xa6>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	681a      	ldr	r2, [r3, #0]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	6859      	ldr	r1, [r3, #4]
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	1acb      	subs	r3, r1, r3
 800ea2c:	441a      	add	r2, r3
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7ff ff8c 	bl	800e950 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	617b      	str	r3, [r7, #20]
 800ea3c:	e001      	b.n	800ea42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			xReturn = pdTRUE;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800ea42:	f000 fe7f 	bl	800f744 <vPortExitCritical>

	return xReturn;
 800ea46:	697b      	ldr	r3, [r7, #20]
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3718      	adds	r7, #24
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}
 800ea50:	200003dc 	.word	0x200003dc
 800ea54:	200003f0 	.word	0x200003f0

0800ea58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ea58:	b480      	push	{r7}
 800ea5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ea5c:	4b03      	ldr	r3, [pc, #12]	; (800ea6c <vTaskMissedYield+0x14>)
 800ea5e:	2201      	movs	r2, #1
 800ea60:	601a      	str	r2, [r3, #0]
}
 800ea62:	bf00      	nop
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	200003ec 	.word	0x200003ec

0800ea70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea78:	f000 f852 	bl	800eb20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea7c:	4b06      	ldr	r3, [pc, #24]	; (800ea98 <prvIdleTask+0x28>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d9f9      	bls.n	800ea78 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ea84:	4b05      	ldr	r3, [pc, #20]	; (800ea9c <prvIdleTask+0x2c>)
 800ea86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea8a:	601a      	str	r2, [r3, #0]
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ea94:	e7f0      	b.n	800ea78 <prvIdleTask+0x8>
 800ea96:	bf00      	nop
 800ea98:	200002dc 	.word	0x200002dc
 800ea9c:	e000ed04 	.word	0xe000ed04

0800eaa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	607b      	str	r3, [r7, #4]
 800eaaa:	e00c      	b.n	800eac6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	4613      	mov	r3, r2
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	4413      	add	r3, r2
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	4a12      	ldr	r2, [pc, #72]	; (800eb00 <prvInitialiseTaskLists+0x60>)
 800eab8:	4413      	add	r3, r2
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fe fb5e 	bl	800d17c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	3301      	adds	r3, #1
 800eac4:	607b      	str	r3, [r7, #4]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2b06      	cmp	r3, #6
 800eaca:	d9ef      	bls.n	800eaac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eacc:	480d      	ldr	r0, [pc, #52]	; (800eb04 <prvInitialiseTaskLists+0x64>)
 800eace:	f7fe fb55 	bl	800d17c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ead2:	480d      	ldr	r0, [pc, #52]	; (800eb08 <prvInitialiseTaskLists+0x68>)
 800ead4:	f7fe fb52 	bl	800d17c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ead8:	480c      	ldr	r0, [pc, #48]	; (800eb0c <prvInitialiseTaskLists+0x6c>)
 800eada:	f7fe fb4f 	bl	800d17c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eade:	480c      	ldr	r0, [pc, #48]	; (800eb10 <prvInitialiseTaskLists+0x70>)
 800eae0:	f7fe fb4c 	bl	800d17c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eae4:	480b      	ldr	r0, [pc, #44]	; (800eb14 <prvInitialiseTaskLists+0x74>)
 800eae6:	f7fe fb49 	bl	800d17c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eaea:	4b0b      	ldr	r3, [pc, #44]	; (800eb18 <prvInitialiseTaskLists+0x78>)
 800eaec:	4a05      	ldr	r2, [pc, #20]	; (800eb04 <prvInitialiseTaskLists+0x64>)
 800eaee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eaf0:	4b0a      	ldr	r3, [pc, #40]	; (800eb1c <prvInitialiseTaskLists+0x7c>)
 800eaf2:	4a05      	ldr	r2, [pc, #20]	; (800eb08 <prvInitialiseTaskLists+0x68>)
 800eaf4:	601a      	str	r2, [r3, #0]
}
 800eaf6:	bf00      	nop
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	200002dc 	.word	0x200002dc
 800eb04:	20000368 	.word	0x20000368
 800eb08:	2000037c 	.word	0x2000037c
 800eb0c:	20000398 	.word	0x20000398
 800eb10:	200003ac 	.word	0x200003ac
 800eb14:	200003c4 	.word	0x200003c4
 800eb18:	20000390 	.word	0x20000390
 800eb1c:	20000394 	.word	0x20000394

0800eb20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb26:	e028      	b.n	800eb7a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800eb28:	f7ff fc7a 	bl	800e420 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800eb2c:	4b17      	ldr	r3, [pc, #92]	; (800eb8c <prvCheckTasksWaitingTermination+0x6c>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	bf0c      	ite	eq
 800eb34:	2301      	moveq	r3, #1
 800eb36:	2300      	movne	r3, #0
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800eb3c:	f7ff fc7e 	bl	800e43c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d119      	bne.n	800eb7a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800eb46:	f000 fdcd 	bl	800f6e4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800eb4a:	4b10      	ldr	r3, [pc, #64]	; (800eb8c <prvCheckTasksWaitingTermination+0x6c>)
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	3304      	adds	r3, #4
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7fe fb9a 	bl	800d290 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800eb5c:	4b0c      	ldr	r3, [pc, #48]	; (800eb90 <prvCheckTasksWaitingTermination+0x70>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	3b01      	subs	r3, #1
 800eb62:	4a0b      	ldr	r2, [pc, #44]	; (800eb90 <prvCheckTasksWaitingTermination+0x70>)
 800eb64:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800eb66:	4b0b      	ldr	r3, [pc, #44]	; (800eb94 <prvCheckTasksWaitingTermination+0x74>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	3b01      	subs	r3, #1
 800eb6c:	4a09      	ldr	r2, [pc, #36]	; (800eb94 <prvCheckTasksWaitingTermination+0x74>)
 800eb6e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800eb70:	f000 fde8 	bl	800f744 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800eb74:	6838      	ldr	r0, [r7, #0]
 800eb76:	f000 f80f 	bl	800eb98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb7a:	4b06      	ldr	r3, [pc, #24]	; (800eb94 <prvCheckTasksWaitingTermination+0x74>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d1d2      	bne.n	800eb28 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb82:	bf00      	nop
 800eb84:	bf00      	nop
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	200003ac 	.word	0x200003ac
 800eb90:	200003d8 	.word	0x200003d8
 800eb94:	200003c0 	.word	0x200003c0

0800eb98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eba4:	4618      	mov	r0, r3
 800eba6:	f000 ff7b 	bl	800faa0 <vPortFree>
			vPortFree( pxTCB );
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 ff78 	bl	800faa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebb0:	bf00      	nop
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebbe:	4b0f      	ldr	r3, [pc, #60]	; (800ebfc <prvResetNextTaskUnblockTime+0x44>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d101      	bne.n	800ebcc <prvResetNextTaskUnblockTime+0x14>
 800ebc8:	2301      	movs	r3, #1
 800ebca:	e000      	b.n	800ebce <prvResetNextTaskUnblockTime+0x16>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d004      	beq.n	800ebdc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebd2:	4b0b      	ldr	r3, [pc, #44]	; (800ec00 <prvResetNextTaskUnblockTime+0x48>)
 800ebd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebd8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ebda:	e008      	b.n	800ebee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ebdc:	4b07      	ldr	r3, [pc, #28]	; (800ebfc <prvResetNextTaskUnblockTime+0x44>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	68db      	ldr	r3, [r3, #12]
 800ebe4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	4a05      	ldr	r2, [pc, #20]	; (800ec00 <prvResetNextTaskUnblockTime+0x48>)
 800ebec:	6013      	str	r3, [r2, #0]
}
 800ebee:	bf00      	nop
 800ebf0:	370c      	adds	r7, #12
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	20000390 	.word	0x20000390
 800ec00:	200003f8 	.word	0x200003f8

0800ec04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec0a:	4b0b      	ldr	r3, [pc, #44]	; (800ec38 <xTaskGetSchedulerState+0x34>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d102      	bne.n	800ec18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec12:	2301      	movs	r3, #1
 800ec14:	607b      	str	r3, [r7, #4]
 800ec16:	e008      	b.n	800ec2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec18:	4b08      	ldr	r3, [pc, #32]	; (800ec3c <xTaskGetSchedulerState+0x38>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d102      	bne.n	800ec26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec20:	2302      	movs	r3, #2
 800ec22:	607b      	str	r3, [r7, #4]
 800ec24:	e001      	b.n	800ec2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec26:	2300      	movs	r3, #0
 800ec28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec2a:	687b      	ldr	r3, [r7, #4]
	}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	200003e4 	.word	0x200003e4
 800ec3c:	20000400 	.word	0x20000400

0800ec40 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d062      	beq.n	800ed18 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec56:	4b32      	ldr	r3, [pc, #200]	; (800ed20 <vTaskPriorityInherit+0xe0>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d25b      	bcs.n	800ed18 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	db06      	blt.n	800ec76 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec68:	4b2d      	ldr	r3, [pc, #180]	; (800ed20 <vTaskPriorityInherit+0xe0>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec6e:	f1c3 0207 	rsb	r2, r3, #7
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6959      	ldr	r1, [r3, #20]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7e:	4613      	mov	r3, r2
 800ec80:	009b      	lsls	r3, r3, #2
 800ec82:	4413      	add	r3, r2
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	4a27      	ldr	r2, [pc, #156]	; (800ed24 <vTaskPriorityInherit+0xe4>)
 800ec88:	4413      	add	r3, r2
 800ec8a:	4299      	cmp	r1, r3
 800ec8c:	d101      	bne.n	800ec92 <vTaskPriorityInherit+0x52>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e000      	b.n	800ec94 <vTaskPriorityInherit+0x54>
 800ec92:	2300      	movs	r3, #0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d03a      	beq.n	800ed0e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fe faf7 	bl	800d290 <uxListRemove>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d115      	bne.n	800ecd4 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecac:	491d      	ldr	r1, [pc, #116]	; (800ed24 <vTaskPriorityInherit+0xe4>)
 800ecae:	4613      	mov	r3, r2
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	4413      	add	r3, r2
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	440b      	add	r3, r1
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d10a      	bne.n	800ecd4 <vTaskPriorityInherit+0x94>
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	fa02 f303 	lsl.w	r3, r2, r3
 800ecc8:	43da      	mvns	r2, r3
 800ecca:	4b17      	ldr	r3, [pc, #92]	; (800ed28 <vTaskPriorityInherit+0xe8>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	4013      	ands	r3, r2
 800ecd0:	4a15      	ldr	r2, [pc, #84]	; (800ed28 <vTaskPriorityInherit+0xe8>)
 800ecd2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecd4:	4b12      	ldr	r3, [pc, #72]	; (800ed20 <vTaskPriorityInherit+0xe0>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece2:	2201      	movs	r2, #1
 800ece4:	409a      	lsls	r2, r3
 800ece6:	4b10      	ldr	r3, [pc, #64]	; (800ed28 <vTaskPriorityInherit+0xe8>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4313      	orrs	r3, r2
 800ecec:	4a0e      	ldr	r2, [pc, #56]	; (800ed28 <vTaskPriorityInherit+0xe8>)
 800ecee:	6013      	str	r3, [r2, #0]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	4413      	add	r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	4a09      	ldr	r2, [pc, #36]	; (800ed24 <vTaskPriorityInherit+0xe4>)
 800ecfe:	441a      	add	r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	3304      	adds	r3, #4
 800ed04:	4619      	mov	r1, r3
 800ed06:	4610      	mov	r0, r2
 800ed08:	f7fe fa65 	bl	800d1d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ed0c:	e004      	b.n	800ed18 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed0e:	4b04      	ldr	r3, [pc, #16]	; (800ed20 <vTaskPriorityInherit+0xe0>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800ed18:	bf00      	nop
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	200002d8 	.word	0x200002d8
 800ed24:	200002dc 	.word	0x200002dc
 800ed28:	200003e0 	.word	0x200003e0

0800ed2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b086      	sub	sp, #24
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d06e      	beq.n	800ee20 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed42:	4b3a      	ldr	r3, [pc, #232]	; (800ee2c <xTaskPriorityDisinherit+0x100>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	693a      	ldr	r2, [r7, #16]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d00a      	beq.n	800ed62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ed4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed50:	f383 8811 	msr	BASEPRI, r3
 800ed54:	f3bf 8f6f 	isb	sy
 800ed58:	f3bf 8f4f 	dsb	sy
 800ed5c:	60fb      	str	r3, [r7, #12]
}
 800ed5e:	bf00      	nop
 800ed60:	e7fe      	b.n	800ed60 <xTaskPriorityDisinherit+0x34>

			configASSERT( pxTCB->uxMutexesHeld );
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d10a      	bne.n	800ed80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ed6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6e:	f383 8811 	msr	BASEPRI, r3
 800ed72:	f3bf 8f6f 	isb	sy
 800ed76:	f3bf 8f4f 	dsb	sy
 800ed7a:	60bb      	str	r3, [r7, #8]
}
 800ed7c:	bf00      	nop
 800ed7e:	e7fe      	b.n	800ed7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed84:	1e5a      	subs	r2, r3, #1
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d044      	beq.n	800ee20 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d140      	bne.n	800ee20 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	3304      	adds	r3, #4
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fe fa74 	bl	800d290 <uxListRemove>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d115      	bne.n	800edda <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edb2:	491f      	ldr	r1, [pc, #124]	; (800ee30 <xTaskPriorityDisinherit+0x104>)
 800edb4:	4613      	mov	r3, r2
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	4413      	add	r3, r2
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	440b      	add	r3, r1
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d10a      	bne.n	800edda <xTaskPriorityDisinherit+0xae>
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edc8:	2201      	movs	r2, #1
 800edca:	fa02 f303 	lsl.w	r3, r2, r3
 800edce:	43da      	mvns	r2, r3
 800edd0:	4b18      	ldr	r3, [pc, #96]	; (800ee34 <xTaskPriorityDisinherit+0x108>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4013      	ands	r3, r2
 800edd6:	4a17      	ldr	r2, [pc, #92]	; (800ee34 <xTaskPriorityDisinherit+0x108>)
 800edd8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede6:	f1c3 0207 	rsb	r2, r3, #7
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf2:	2201      	movs	r2, #1
 800edf4:	409a      	lsls	r2, r3
 800edf6:	4b0f      	ldr	r3, [pc, #60]	; (800ee34 <xTaskPriorityDisinherit+0x108>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4313      	orrs	r3, r2
 800edfc:	4a0d      	ldr	r2, [pc, #52]	; (800ee34 <xTaskPriorityDisinherit+0x108>)
 800edfe:	6013      	str	r3, [r2, #0]
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee04:	4613      	mov	r3, r2
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4413      	add	r3, r2
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	4a08      	ldr	r2, [pc, #32]	; (800ee30 <xTaskPriorityDisinherit+0x104>)
 800ee0e:	441a      	add	r2, r3
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	3304      	adds	r3, #4
 800ee14:	4619      	mov	r1, r3
 800ee16:	4610      	mov	r0, r2
 800ee18:	f7fe f9dd 	bl	800d1d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee20:	697b      	ldr	r3, [r7, #20]
	}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3718      	adds	r7, #24
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	200002d8 	.word	0x200002d8
 800ee30:	200002dc 	.word	0x200002dc
 800ee34:	200003e0 	.word	0x200003e0

0800ee38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800ee38:	b480      	push	{r7}
 800ee3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ee3c:	4b07      	ldr	r3, [pc, #28]	; (800ee5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d004      	beq.n	800ee4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ee44:	4b05      	ldr	r3, [pc, #20]	; (800ee5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee4a:	3201      	adds	r2, #1
 800ee4c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ee4e:	4b03      	ldr	r3, [pc, #12]	; (800ee5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ee50:	681b      	ldr	r3, [r3, #0]
	}
 800ee52:	4618      	mov	r0, r3
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	200002d8 	.word	0x200002d8

0800ee60 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee6a:	4b29      	ldr	r3, [pc, #164]	; (800ef10 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee70:	4b28      	ldr	r3, [pc, #160]	; (800ef14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	3304      	adds	r3, #4
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fe fa0a 	bl	800d290 <uxListRemove>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d10b      	bne.n	800ee9a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ee82:	4b24      	ldr	r3, [pc, #144]	; (800ef14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee88:	2201      	movs	r2, #1
 800ee8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee8e:	43da      	mvns	r2, r3
 800ee90:	4b21      	ldr	r3, [pc, #132]	; (800ef18 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4013      	ands	r3, r2
 800ee96:	4a20      	ldr	r2, [pc, #128]	; (800ef18 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ee98:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eea0:	d10a      	bne.n	800eeb8 <prvAddCurrentTaskToDelayedList+0x58>
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d007      	beq.n	800eeb8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eea8:	4b1a      	ldr	r3, [pc, #104]	; (800ef14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	3304      	adds	r3, #4
 800eeae:	4619      	mov	r1, r3
 800eeb0:	481a      	ldr	r0, [pc, #104]	; (800ef1c <prvAddCurrentTaskToDelayedList+0xbc>)
 800eeb2:	f7fe f990 	bl	800d1d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eeb6:	e026      	b.n	800ef06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eeb8:	68fa      	ldr	r2, [r7, #12]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4413      	add	r3, r2
 800eebe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eec0:	4b14      	ldr	r3, [pc, #80]	; (800ef14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	68ba      	ldr	r2, [r7, #8]
 800eec6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eec8:	68ba      	ldr	r2, [r7, #8]
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	429a      	cmp	r2, r3
 800eece:	d209      	bcs.n	800eee4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eed0:	4b13      	ldr	r3, [pc, #76]	; (800ef20 <prvAddCurrentTaskToDelayedList+0xc0>)
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	4b0f      	ldr	r3, [pc, #60]	; (800ef14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	3304      	adds	r3, #4
 800eeda:	4619      	mov	r1, r3
 800eedc:	4610      	mov	r0, r2
 800eede:	f7fe f99e 	bl	800d21e <vListInsert>
}
 800eee2:	e010      	b.n	800ef06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eee4:	4b0f      	ldr	r3, [pc, #60]	; (800ef24 <prvAddCurrentTaskToDelayedList+0xc4>)
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	4b0a      	ldr	r3, [pc, #40]	; (800ef14 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	3304      	adds	r3, #4
 800eeee:	4619      	mov	r1, r3
 800eef0:	4610      	mov	r0, r2
 800eef2:	f7fe f994 	bl	800d21e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eef6:	4b0c      	ldr	r3, [pc, #48]	; (800ef28 <prvAddCurrentTaskToDelayedList+0xc8>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	68ba      	ldr	r2, [r7, #8]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d202      	bcs.n	800ef06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ef00:	4a09      	ldr	r2, [pc, #36]	; (800ef28 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	6013      	str	r3, [r2, #0]
}
 800ef06:	bf00      	nop
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	200003dc 	.word	0x200003dc
 800ef14:	200002d8 	.word	0x200002d8
 800ef18:	200003e0 	.word	0x200003e0
 800ef1c:	200003c4 	.word	0x200003c4
 800ef20:	20000394 	.word	0x20000394
 800ef24:	20000390 	.word	0x20000390
 800ef28:	200003f8 	.word	0x200003f8

0800ef2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800ef32:	2300      	movs	r3, #0
 800ef34:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ef36:	f000 fa95 	bl	800f464 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ef3a:	4b11      	ldr	r3, [pc, #68]	; (800ef80 <xTimerCreateTimerTask+0x54>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00b      	beq.n	800ef5a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800ef42:	4b10      	ldr	r3, [pc, #64]	; (800ef84 <xTimerCreateTimerTask+0x58>)
 800ef44:	9301      	str	r3, [sp, #4]
 800ef46:	2303      	movs	r3, #3
 800ef48:	9300      	str	r3, [sp, #0]
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef50:	490d      	ldr	r1, [pc, #52]	; (800ef88 <xTimerCreateTimerTask+0x5c>)
 800ef52:	480e      	ldr	r0, [pc, #56]	; (800ef8c <xTimerCreateTimerTask+0x60>)
 800ef54:	f7ff f82e 	bl	800dfb4 <xTaskCreate>
 800ef58:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d10a      	bne.n	800ef76 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800ef60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef64:	f383 8811 	msr	BASEPRI, r3
 800ef68:	f3bf 8f6f 	isb	sy
 800ef6c:	f3bf 8f4f 	dsb	sy
 800ef70:	603b      	str	r3, [r7, #0]
}
 800ef72:	bf00      	nop
 800ef74:	e7fe      	b.n	800ef74 <xTimerCreateTimerTask+0x48>
	return xReturn;
 800ef76:	687b      	ldr	r3, [r7, #4]
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}
 800ef80:	20000434 	.word	0x20000434
 800ef84:	20000438 	.word	0x20000438
 800ef88:	08017fc0 	.word	0x08017fc0
 800ef8c:	0800f0ad 	.word	0x0800f0ad

0800ef90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b08a      	sub	sp, #40	; 0x28
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	607a      	str	r2, [r7, #4]
 800ef9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d10a      	bne.n	800efbe <xTimerGenericCommand+0x2e>
	__asm volatile
 800efa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efac:	f383 8811 	msr	BASEPRI, r3
 800efb0:	f3bf 8f6f 	isb	sy
 800efb4:	f3bf 8f4f 	dsb	sy
 800efb8:	623b      	str	r3, [r7, #32]
}
 800efba:	bf00      	nop
 800efbc:	e7fe      	b.n	800efbc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800efbe:	4b1a      	ldr	r3, [pc, #104]	; (800f028 <xTimerGenericCommand+0x98>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d02a      	beq.n	800f01c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	2b05      	cmp	r3, #5
 800efd6:	dc18      	bgt.n	800f00a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800efd8:	f7ff fe14 	bl	800ec04 <xTaskGetSchedulerState>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d109      	bne.n	800eff6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800efe2:	4b11      	ldr	r3, [pc, #68]	; (800f028 <xTimerGenericCommand+0x98>)
 800efe4:	6818      	ldr	r0, [r3, #0]
 800efe6:	f107 0114 	add.w	r1, r7, #20
 800efea:	2300      	movs	r3, #0
 800efec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efee:	f7fe fa71 	bl	800d4d4 <xQueueGenericSend>
 800eff2:	6278      	str	r0, [r7, #36]	; 0x24
 800eff4:	e012      	b.n	800f01c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eff6:	4b0c      	ldr	r3, [pc, #48]	; (800f028 <xTimerGenericCommand+0x98>)
 800eff8:	6818      	ldr	r0, [r3, #0]
 800effa:	f107 0114 	add.w	r1, r7, #20
 800effe:	2300      	movs	r3, #0
 800f000:	2200      	movs	r2, #0
 800f002:	f7fe fa67 	bl	800d4d4 <xQueueGenericSend>
 800f006:	6278      	str	r0, [r7, #36]	; 0x24
 800f008:	e008      	b.n	800f01c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f00a:	4b07      	ldr	r3, [pc, #28]	; (800f028 <xTimerGenericCommand+0x98>)
 800f00c:	6818      	ldr	r0, [r3, #0]
 800f00e:	f107 0114 	add.w	r1, r7, #20
 800f012:	2300      	movs	r3, #0
 800f014:	683a      	ldr	r2, [r7, #0]
 800f016:	f7fe fb5b 	bl	800d6d0 <xQueueGenericSendFromISR>
 800f01a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3728      	adds	r7, #40	; 0x28
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
 800f026:	bf00      	nop
 800f028:	20000434 	.word	0x20000434

0800f02c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b088      	sub	sp, #32
 800f030:	af02      	add	r7, sp, #8
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f036:	4b1c      	ldr	r3, [pc, #112]	; (800f0a8 <prvProcessExpiredTimer+0x7c>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	68db      	ldr	r3, [r3, #12]
 800f03e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	3304      	adds	r3, #4
 800f044:	4618      	mov	r0, r3
 800f046:	f7fe f923 	bl	800d290 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	69db      	ldr	r3, [r3, #28]
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d122      	bne.n	800f098 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	699a      	ldr	r2, [r3, #24]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	18d1      	adds	r1, r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	683a      	ldr	r2, [r7, #0]
 800f05e:	6978      	ldr	r0, [r7, #20]
 800f060:	f000 f8c8 	bl	800f1f4 <prvInsertTimerInActiveList>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d016      	beq.n	800f098 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f06a:	2300      	movs	r3, #0
 800f06c:	9300      	str	r3, [sp, #0]
 800f06e:	2300      	movs	r3, #0
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	2100      	movs	r1, #0
 800f074:	6978      	ldr	r0, [r7, #20]
 800f076:	f7ff ff8b 	bl	800ef90 <xTimerGenericCommand>
 800f07a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d10a      	bne.n	800f098 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800f082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f086:	f383 8811 	msr	BASEPRI, r3
 800f08a:	f3bf 8f6f 	isb	sy
 800f08e:	f3bf 8f4f 	dsb	sy
 800f092:	60fb      	str	r3, [r7, #12]
}
 800f094:	bf00      	nop
 800f096:	e7fe      	b.n	800f096 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f09c:	6978      	ldr	r0, [r7, #20]
 800f09e:	4798      	blx	r3
}
 800f0a0:	bf00      	nop
 800f0a2:	3718      	adds	r7, #24
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	2000042c 	.word	0x2000042c

0800f0ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0b4:	f107 0308 	add.w	r3, r7, #8
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f000 f857 	bl	800f16c <prvGetNextExpireTime>
 800f0be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	68f8      	ldr	r0, [r7, #12]
 800f0c6:	f000 f803 	bl	800f0d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f0ca:	f000 f8d5 	bl	800f278 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f0ce:	e7f1      	b.n	800f0b4 <prvTimerTask+0x8>

0800f0d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f0da:	f7ff f9a1 	bl	800e420 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0de:	f107 0308 	add.w	r3, r7, #8
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 f866 	bl	800f1b4 <prvSampleTimeNow>
 800f0e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d130      	bne.n	800f152 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d10a      	bne.n	800f10c <prvProcessTimerOrBlockTask+0x3c>
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d806      	bhi.n	800f10c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f0fe:	f7ff f99d 	bl	800e43c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f102:	68f9      	ldr	r1, [r7, #12]
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f7ff ff91 	bl	800f02c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f10a:	e024      	b.n	800f156 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d008      	beq.n	800f124 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f112:	4b13      	ldr	r3, [pc, #76]	; (800f160 <prvProcessTimerOrBlockTask+0x90>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	bf0c      	ite	eq
 800f11c:	2301      	moveq	r3, #1
 800f11e:	2300      	movne	r3, #0
 800f120:	b2db      	uxtb	r3, r3
 800f122:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f124:	4b0f      	ldr	r3, [pc, #60]	; (800f164 <prvProcessTimerOrBlockTask+0x94>)
 800f126:	6818      	ldr	r0, [r3, #0]
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	683a      	ldr	r2, [r7, #0]
 800f130:	4619      	mov	r1, r3
 800f132:	f7fe ff0b 	bl	800df4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f136:	f7ff f981 	bl	800e43c <xTaskResumeAll>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d10a      	bne.n	800f156 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f140:	4b09      	ldr	r3, [pc, #36]	; (800f168 <prvProcessTimerOrBlockTask+0x98>)
 800f142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f146:	601a      	str	r2, [r3, #0]
 800f148:	f3bf 8f4f 	dsb	sy
 800f14c:	f3bf 8f6f 	isb	sy
}
 800f150:	e001      	b.n	800f156 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f152:	f7ff f973 	bl	800e43c <xTaskResumeAll>
}
 800f156:	bf00      	nop
 800f158:	3710      	adds	r7, #16
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
 800f15e:	bf00      	nop
 800f160:	20000430 	.word	0x20000430
 800f164:	20000434 	.word	0x20000434
 800f168:	e000ed04 	.word	0xe000ed04

0800f16c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f16c:	b480      	push	{r7}
 800f16e:	b085      	sub	sp, #20
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f174:	4b0e      	ldr	r3, [pc, #56]	; (800f1b0 <prvGetNextExpireTime+0x44>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	bf0c      	ite	eq
 800f17e:	2301      	moveq	r3, #1
 800f180:	2300      	movne	r3, #0
 800f182:	b2db      	uxtb	r3, r3
 800f184:	461a      	mov	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d105      	bne.n	800f19e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f192:	4b07      	ldr	r3, [pc, #28]	; (800f1b0 <prvGetNextExpireTime+0x44>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	60fb      	str	r3, [r7, #12]
 800f19c:	e001      	b.n	800f1a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3714      	adds	r7, #20
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr
 800f1b0:	2000042c 	.word	0x2000042c

0800f1b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f1bc:	f7ff f9da 	bl	800e574 <xTaskGetTickCount>
 800f1c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f1c2:	4b0b      	ldr	r3, [pc, #44]	; (800f1f0 <prvSampleTimeNow+0x3c>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	68fa      	ldr	r2, [r7, #12]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d205      	bcs.n	800f1d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f1cc:	f000 f8e8 	bl	800f3a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	601a      	str	r2, [r3, #0]
 800f1d6:	e002      	b.n	800f1de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f1de:	4a04      	ldr	r2, [pc, #16]	; (800f1f0 <prvSampleTimeNow+0x3c>)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3710      	adds	r7, #16
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	2000043c 	.word	0x2000043c

0800f1f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b086      	sub	sp, #24
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
 800f200:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f202:	2300      	movs	r3, #0
 800f204:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	68ba      	ldr	r2, [r7, #8]
 800f20a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	429a      	cmp	r2, r3
 800f218:	d812      	bhi.n	800f240 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f21a:	687a      	ldr	r2, [r7, #4]
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	1ad2      	subs	r2, r2, r3
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	699b      	ldr	r3, [r3, #24]
 800f224:	429a      	cmp	r2, r3
 800f226:	d302      	bcc.n	800f22e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f228:	2301      	movs	r3, #1
 800f22a:	617b      	str	r3, [r7, #20]
 800f22c:	e01b      	b.n	800f266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f22e:	4b10      	ldr	r3, [pc, #64]	; (800f270 <prvInsertTimerInActiveList+0x7c>)
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3304      	adds	r3, #4
 800f236:	4619      	mov	r1, r3
 800f238:	4610      	mov	r0, r2
 800f23a:	f7fd fff0 	bl	800d21e <vListInsert>
 800f23e:	e012      	b.n	800f266 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	429a      	cmp	r2, r3
 800f246:	d206      	bcs.n	800f256 <prvInsertTimerInActiveList+0x62>
 800f248:	68ba      	ldr	r2, [r7, #8]
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d302      	bcc.n	800f256 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f250:	2301      	movs	r3, #1
 800f252:	617b      	str	r3, [r7, #20]
 800f254:	e007      	b.n	800f266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f256:	4b07      	ldr	r3, [pc, #28]	; (800f274 <prvInsertTimerInActiveList+0x80>)
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	3304      	adds	r3, #4
 800f25e:	4619      	mov	r1, r3
 800f260:	4610      	mov	r0, r2
 800f262:	f7fd ffdc 	bl	800d21e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f266:	697b      	ldr	r3, [r7, #20]
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3718      	adds	r7, #24
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	20000430 	.word	0x20000430
 800f274:	2000042c 	.word	0x2000042c

0800f278 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b08c      	sub	sp, #48	; 0x30
 800f27c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f27e:	e07c      	b.n	800f37a <prvProcessReceivedCommands+0x102>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	2b00      	cmp	r3, #0
 800f284:	db78      	blt.n	800f378 <prvProcessReceivedCommands+0x100>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800f28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28c:	695b      	ldr	r3, [r3, #20]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d004      	beq.n	800f29c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f294:	3304      	adds	r3, #4
 800f296:	4618      	mov	r0, r3
 800f298:	f7fd fffa 	bl	800d290 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f29c:	1d3b      	adds	r3, r7, #4
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7ff ff88 	bl	800f1b4 <prvSampleTimeNow>
 800f2a4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	2b09      	cmp	r3, #9
 800f2aa:	d866      	bhi.n	800f37a <prvProcessReceivedCommands+0x102>
 800f2ac:	a201      	add	r2, pc, #4	; (adr r2, 800f2b4 <prvProcessReceivedCommands+0x3c>)
 800f2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b2:	bf00      	nop
 800f2b4:	0800f2dd 	.word	0x0800f2dd
 800f2b8:	0800f2dd 	.word	0x0800f2dd
 800f2bc:	0800f2dd 	.word	0x0800f2dd
 800f2c0:	0800f37b 	.word	0x0800f37b
 800f2c4:	0800f339 	.word	0x0800f339
 800f2c8:	0800f371 	.word	0x0800f371
 800f2cc:	0800f2dd 	.word	0x0800f2dd
 800f2d0:	0800f2dd 	.word	0x0800f2dd
 800f2d4:	0800f37b 	.word	0x0800f37b
 800f2d8:	0800f339 	.word	0x0800f339
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f2dc:	68fa      	ldr	r2, [r7, #12]
 800f2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e0:	699b      	ldr	r3, [r3, #24]
 800f2e2:	18d1      	adds	r1, r2, r3
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	6a3a      	ldr	r2, [r7, #32]
 800f2e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2ea:	f7ff ff83 	bl	800f1f4 <prvInsertTimerInActiveList>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d042      	beq.n	800f37a <prvProcessReceivedCommands+0x102>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2fa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fe:	69db      	ldr	r3, [r3, #28]
 800f300:	2b01      	cmp	r3, #1
 800f302:	d13a      	bne.n	800f37a <prvProcessReceivedCommands+0x102>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f304:	68fa      	ldr	r2, [r7, #12]
 800f306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f308:	699b      	ldr	r3, [r3, #24]
 800f30a:	441a      	add	r2, r3
 800f30c:	2300      	movs	r3, #0
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	2300      	movs	r3, #0
 800f312:	2100      	movs	r1, #0
 800f314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f316:	f7ff fe3b 	bl	800ef90 <xTimerGenericCommand>
 800f31a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800f31c:	69fb      	ldr	r3, [r7, #28]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d12b      	bne.n	800f37a <prvProcessReceivedCommands+0x102>
	__asm volatile
 800f322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f326:	f383 8811 	msr	BASEPRI, r3
 800f32a:	f3bf 8f6f 	isb	sy
 800f32e:	f3bf 8f4f 	dsb	sy
 800f332:	61bb      	str	r3, [r7, #24]
}
 800f334:	bf00      	nop
 800f336:	e7fe      	b.n	800f336 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f338:	68fa      	ldr	r2, [r7, #12]
 800f33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f33c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f340:	699b      	ldr	r3, [r3, #24]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d10a      	bne.n	800f35c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800f346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f34a:	f383 8811 	msr	BASEPRI, r3
 800f34e:	f3bf 8f6f 	isb	sy
 800f352:	f3bf 8f4f 	dsb	sy
 800f356:	617b      	str	r3, [r7, #20]
}
 800f358:	bf00      	nop
 800f35a:	e7fe      	b.n	800f35a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f35e:	699a      	ldr	r2, [r3, #24]
 800f360:	6a3b      	ldr	r3, [r7, #32]
 800f362:	18d1      	adds	r1, r2, r3
 800f364:	6a3b      	ldr	r3, [r7, #32]
 800f366:	6a3a      	ldr	r2, [r7, #32]
 800f368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f36a:	f7ff ff43 	bl	800f1f4 <prvInsertTimerInActiveList>
					break;
 800f36e:	e004      	b.n	800f37a <prvProcessReceivedCommands+0x102>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800f370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f372:	f000 fb95 	bl	800faa0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f376:	e000      	b.n	800f37a <prvProcessReceivedCommands+0x102>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f378:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f37a:	4b08      	ldr	r3, [pc, #32]	; (800f39c <prvProcessReceivedCommands+0x124>)
 800f37c:	6818      	ldr	r0, [r3, #0]
 800f37e:	f107 0108 	add.w	r1, r7, #8
 800f382:	2300      	movs	r3, #0
 800f384:	2200      	movs	r2, #0
 800f386:	f7fe fac9 	bl	800d91c <xQueueGenericReceive>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f47f af77 	bne.w	800f280 <prvProcessReceivedCommands+0x8>
	}
}
 800f392:	bf00      	nop
 800f394:	bf00      	nop
 800f396:	3728      	adds	r7, #40	; 0x28
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	20000434 	.word	0x20000434

0800f3a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b088      	sub	sp, #32
 800f3a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f3a6:	e045      	b.n	800f434 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3a8:	4b2c      	ldr	r3, [pc, #176]	; (800f45c <prvSwitchTimerLists+0xbc>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3b2:	4b2a      	ldr	r3, [pc, #168]	; (800f45c <prvSwitchTimerLists+0xbc>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	3304      	adds	r3, #4
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fd ff65 	bl	800d290 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	69db      	ldr	r3, [r3, #28]
 800f3d2:	2b01      	cmp	r3, #1
 800f3d4:	d12e      	bne.n	800f434 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	699b      	ldr	r3, [r3, #24]
 800f3da:	693a      	ldr	r2, [r7, #16]
 800f3dc:	4413      	add	r3, r2
 800f3de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f3e0:	68ba      	ldr	r2, [r7, #8]
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d90e      	bls.n	800f406 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	68ba      	ldr	r2, [r7, #8]
 800f3ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	68fa      	ldr	r2, [r7, #12]
 800f3f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3f4:	4b19      	ldr	r3, [pc, #100]	; (800f45c <prvSwitchTimerLists+0xbc>)
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	3304      	adds	r3, #4
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	4610      	mov	r0, r2
 800f400:	f7fd ff0d 	bl	800d21e <vListInsert>
 800f404:	e016      	b.n	800f434 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f406:	2300      	movs	r3, #0
 800f408:	9300      	str	r3, [sp, #0]
 800f40a:	2300      	movs	r3, #0
 800f40c:	693a      	ldr	r2, [r7, #16]
 800f40e:	2100      	movs	r1, #0
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f7ff fdbd 	bl	800ef90 <xTimerGenericCommand>
 800f416:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d10a      	bne.n	800f434 <prvSwitchTimerLists+0x94>
	__asm volatile
 800f41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f422:	f383 8811 	msr	BASEPRI, r3
 800f426:	f3bf 8f6f 	isb	sy
 800f42a:	f3bf 8f4f 	dsb	sy
 800f42e:	603b      	str	r3, [r7, #0]
}
 800f430:	bf00      	nop
 800f432:	e7fe      	b.n	800f432 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f434:	4b09      	ldr	r3, [pc, #36]	; (800f45c <prvSwitchTimerLists+0xbc>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d1b4      	bne.n	800f3a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f43e:	4b07      	ldr	r3, [pc, #28]	; (800f45c <prvSwitchTimerLists+0xbc>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f444:	4b06      	ldr	r3, [pc, #24]	; (800f460 <prvSwitchTimerLists+0xc0>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	4a04      	ldr	r2, [pc, #16]	; (800f45c <prvSwitchTimerLists+0xbc>)
 800f44a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f44c:	4a04      	ldr	r2, [pc, #16]	; (800f460 <prvSwitchTimerLists+0xc0>)
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	6013      	str	r3, [r2, #0]
}
 800f452:	bf00      	nop
 800f454:	3718      	adds	r7, #24
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	2000042c 	.word	0x2000042c
 800f460:	20000430 	.word	0x20000430

0800f464 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f468:	f000 f93c 	bl	800f6e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f46c:	4b12      	ldr	r3, [pc, #72]	; (800f4b8 <prvCheckForValidListAndQueue+0x54>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d11d      	bne.n	800f4b0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800f474:	4811      	ldr	r0, [pc, #68]	; (800f4bc <prvCheckForValidListAndQueue+0x58>)
 800f476:	f7fd fe81 	bl	800d17c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f47a:	4811      	ldr	r0, [pc, #68]	; (800f4c0 <prvCheckForValidListAndQueue+0x5c>)
 800f47c:	f7fd fe7e 	bl	800d17c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f480:	4b10      	ldr	r3, [pc, #64]	; (800f4c4 <prvCheckForValidListAndQueue+0x60>)
 800f482:	4a0e      	ldr	r2, [pc, #56]	; (800f4bc <prvCheckForValidListAndQueue+0x58>)
 800f484:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f486:	4b10      	ldr	r3, [pc, #64]	; (800f4c8 <prvCheckForValidListAndQueue+0x64>)
 800f488:	4a0d      	ldr	r2, [pc, #52]	; (800f4c0 <prvCheckForValidListAndQueue+0x5c>)
 800f48a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800f48c:	2200      	movs	r2, #0
 800f48e:	210c      	movs	r1, #12
 800f490:	200a      	movs	r0, #10
 800f492:	f7fd ff8f 	bl	800d3b4 <xQueueGenericCreate>
 800f496:	4603      	mov	r3, r0
 800f498:	4a07      	ldr	r2, [pc, #28]	; (800f4b8 <prvCheckForValidListAndQueue+0x54>)
 800f49a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f49c:	4b06      	ldr	r3, [pc, #24]	; (800f4b8 <prvCheckForValidListAndQueue+0x54>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d005      	beq.n	800f4b0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f4a4:	4b04      	ldr	r3, [pc, #16]	; (800f4b8 <prvCheckForValidListAndQueue+0x54>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4908      	ldr	r1, [pc, #32]	; (800f4cc <prvCheckForValidListAndQueue+0x68>)
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fe fcfa 	bl	800dea4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f4b0:	f000 f948 	bl	800f744 <vPortExitCritical>
}
 800f4b4:	bf00      	nop
 800f4b6:	bd80      	pop	{r7, pc}
 800f4b8:	20000434 	.word	0x20000434
 800f4bc:	20000404 	.word	0x20000404
 800f4c0:	20000418 	.word	0x20000418
 800f4c4:	2000042c 	.word	0x2000042c
 800f4c8:	20000430 	.word	0x20000430
 800f4cc:	08017fc8 	.word	0x08017fc8

0800f4d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	3b04      	subs	r3, #4
 800f4e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f4e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	3b04      	subs	r3, #4
 800f4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	f023 0201 	bic.w	r2, r3, #1
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	3b04      	subs	r3, #4
 800f4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f500:	4a0c      	ldr	r2, [pc, #48]	; (800f534 <pxPortInitialiseStack+0x64>)
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	3b14      	subs	r3, #20
 800f50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	3b04      	subs	r3, #4
 800f516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	f06f 0202 	mvn.w	r2, #2
 800f51e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	3b20      	subs	r3, #32
 800f524:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f526:	68fb      	ldr	r3, [r7, #12]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3714      	adds	r7, #20
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr
 800f534:	0800f539 	.word	0x0800f539

0800f538 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f538:	b480      	push	{r7}
 800f53a:	b083      	sub	sp, #12
 800f53c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f53e:	4b0d      	ldr	r3, [pc, #52]	; (800f574 <prvTaskExitError+0x3c>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f546:	d00a      	beq.n	800f55e <prvTaskExitError+0x26>
	__asm volatile
 800f548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54c:	f383 8811 	msr	BASEPRI, r3
 800f550:	f3bf 8f6f 	isb	sy
 800f554:	f3bf 8f4f 	dsb	sy
 800f558:	607b      	str	r3, [r7, #4]
}
 800f55a:	bf00      	nop
 800f55c:	e7fe      	b.n	800f55c <prvTaskExitError+0x24>
	__asm volatile
 800f55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f562:	f383 8811 	msr	BASEPRI, r3
 800f566:	f3bf 8f6f 	isb	sy
 800f56a:	f3bf 8f4f 	dsb	sy
 800f56e:	603b      	str	r3, [r7, #0]
}
 800f570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 800f572:	e7fe      	b.n	800f572 <prvTaskExitError+0x3a>
 800f574:	20000018 	.word	0x20000018
	...

0800f580 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f580:	4b07      	ldr	r3, [pc, #28]	; (800f5a0 <pxCurrentTCBConst2>)
 800f582:	6819      	ldr	r1, [r3, #0]
 800f584:	6808      	ldr	r0, [r1, #0]
 800f586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58a:	f380 8809 	msr	PSP, r0
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f04f 0000 	mov.w	r0, #0
 800f596:	f380 8811 	msr	BASEPRI, r0
 800f59a:	4770      	bx	lr
 800f59c:	f3af 8000 	nop.w

0800f5a0 <pxCurrentTCBConst2>:
 800f5a0:	200002d8 	.word	0x200002d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f5a4:	bf00      	nop
 800f5a6:	bf00      	nop

0800f5a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800f5a8:	4806      	ldr	r0, [pc, #24]	; (800f5c4 <prvPortStartFirstTask+0x1c>)
 800f5aa:	6800      	ldr	r0, [r0, #0]
 800f5ac:	6800      	ldr	r0, [r0, #0]
 800f5ae:	f380 8808 	msr	MSP, r0
 800f5b2:	b662      	cpsie	i
 800f5b4:	b661      	cpsie	f
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	f3bf 8f6f 	isb	sy
 800f5be:	df00      	svc	0
 800f5c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f5c2:	bf00      	nop
 800f5c4:	e000ed08 	.word	0xe000ed08

0800f5c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b086      	sub	sp, #24
 800f5cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f5ce:	4b3c      	ldr	r3, [pc, #240]	; (800f6c0 <xPortStartScheduler+0xf8>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	4a3c      	ldr	r2, [pc, #240]	; (800f6c4 <xPortStartScheduler+0xfc>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d10a      	bne.n	800f5ee <xPortStartScheduler+0x26>
	__asm volatile
 800f5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5dc:	f383 8811 	msr	BASEPRI, r3
 800f5e0:	f3bf 8f6f 	isb	sy
 800f5e4:	f3bf 8f4f 	dsb	sy
 800f5e8:	613b      	str	r3, [r7, #16]
}
 800f5ea:	bf00      	nop
 800f5ec:	e7fe      	b.n	800f5ec <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f5ee:	4b34      	ldr	r3, [pc, #208]	; (800f6c0 <xPortStartScheduler+0xf8>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a35      	ldr	r2, [pc, #212]	; (800f6c8 <xPortStartScheduler+0x100>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d10a      	bne.n	800f60e <xPortStartScheduler+0x46>
	__asm volatile
 800f5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fc:	f383 8811 	msr	BASEPRI, r3
 800f600:	f3bf 8f6f 	isb	sy
 800f604:	f3bf 8f4f 	dsb	sy
 800f608:	60fb      	str	r3, [r7, #12]
}
 800f60a:	bf00      	nop
 800f60c:	e7fe      	b.n	800f60c <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f60e:	4b2f      	ldr	r3, [pc, #188]	; (800f6cc <xPortStartScheduler+0x104>)
 800f610:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	b2db      	uxtb	r3, r3
 800f618:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	22ff      	movs	r2, #255	; 0xff
 800f61e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	b2db      	uxtb	r3, r3
 800f626:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f628:	79fb      	ldrb	r3, [r7, #7]
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f630:	b2da      	uxtb	r2, r3
 800f632:	4b27      	ldr	r3, [pc, #156]	; (800f6d0 <xPortStartScheduler+0x108>)
 800f634:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f636:	4b27      	ldr	r3, [pc, #156]	; (800f6d4 <xPortStartScheduler+0x10c>)
 800f638:	2207      	movs	r2, #7
 800f63a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f63c:	e009      	b.n	800f652 <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f63e:	4b25      	ldr	r3, [pc, #148]	; (800f6d4 <xPortStartScheduler+0x10c>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	3b01      	subs	r3, #1
 800f644:	4a23      	ldr	r2, [pc, #140]	; (800f6d4 <xPortStartScheduler+0x10c>)
 800f646:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f648:	79fb      	ldrb	r3, [r7, #7]
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	005b      	lsls	r3, r3, #1
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f652:	79fb      	ldrb	r3, [r7, #7]
 800f654:	b2db      	uxtb	r3, r3
 800f656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f65a:	2b80      	cmp	r3, #128	; 0x80
 800f65c:	d0ef      	beq.n	800f63e <xPortStartScheduler+0x76>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f65e:	4b1d      	ldr	r3, [pc, #116]	; (800f6d4 <xPortStartScheduler+0x10c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	021b      	lsls	r3, r3, #8
 800f664:	4a1b      	ldr	r2, [pc, #108]	; (800f6d4 <xPortStartScheduler+0x10c>)
 800f666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f668:	4b1a      	ldr	r3, [pc, #104]	; (800f6d4 <xPortStartScheduler+0x10c>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f670:	4a18      	ldr	r2, [pc, #96]	; (800f6d4 <xPortStartScheduler+0x10c>)
 800f672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	b2da      	uxtb	r2, r3
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f67c:	4b16      	ldr	r3, [pc, #88]	; (800f6d8 <xPortStartScheduler+0x110>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a15      	ldr	r2, [pc, #84]	; (800f6d8 <xPortStartScheduler+0x110>)
 800f682:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f688:	4b13      	ldr	r3, [pc, #76]	; (800f6d8 <xPortStartScheduler+0x110>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a12      	ldr	r2, [pc, #72]	; (800f6d8 <xPortStartScheduler+0x110>)
 800f68e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f694:	f000 f8da 	bl	800f84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f698:	4b10      	ldr	r3, [pc, #64]	; (800f6dc <xPortStartScheduler+0x114>)
 800f69a:	2200      	movs	r2, #0
 800f69c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f69e:	f000 f8f1 	bl	800f884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f6a2:	4b0f      	ldr	r3, [pc, #60]	; (800f6e0 <xPortStartScheduler+0x118>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	4a0e      	ldr	r2, [pc, #56]	; (800f6e0 <xPortStartScheduler+0x118>)
 800f6a8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f6ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f6ae:	f7ff ff7b 	bl	800f5a8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800f6b2:	f7ff ff41 	bl	800f538 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f6b6:	2300      	movs	r3, #0
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3718      	adds	r7, #24
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	e000ed00 	.word	0xe000ed00
 800f6c4:	410fc271 	.word	0x410fc271
 800f6c8:	410fc270 	.word	0x410fc270
 800f6cc:	e000e400 	.word	0xe000e400
 800f6d0:	20000440 	.word	0x20000440
 800f6d4:	20000444 	.word	0x20000444
 800f6d8:	e000ed20 	.word	0xe000ed20
 800f6dc:	20000018 	.word	0x20000018
 800f6e0:	e000ef34 	.word	0xe000ef34

0800f6e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
	__asm volatile
 800f6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ee:	f383 8811 	msr	BASEPRI, r3
 800f6f2:	f3bf 8f6f 	isb	sy
 800f6f6:	f3bf 8f4f 	dsb	sy
 800f6fa:	607b      	str	r3, [r7, #4]
}
 800f6fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f6fe:	4b0f      	ldr	r3, [pc, #60]	; (800f73c <vPortEnterCritical+0x58>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	3301      	adds	r3, #1
 800f704:	4a0d      	ldr	r2, [pc, #52]	; (800f73c <vPortEnterCritical+0x58>)
 800f706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f708:	4b0c      	ldr	r3, [pc, #48]	; (800f73c <vPortEnterCritical+0x58>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d10f      	bne.n	800f730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f710:	4b0b      	ldr	r3, [pc, #44]	; (800f740 <vPortEnterCritical+0x5c>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	b2db      	uxtb	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00a      	beq.n	800f730 <vPortEnterCritical+0x4c>
	__asm volatile
 800f71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71e:	f383 8811 	msr	BASEPRI, r3
 800f722:	f3bf 8f6f 	isb	sy
 800f726:	f3bf 8f4f 	dsb	sy
 800f72a:	603b      	str	r3, [r7, #0]
}
 800f72c:	bf00      	nop
 800f72e:	e7fe      	b.n	800f72e <vPortEnterCritical+0x4a>
	}
}
 800f730:	bf00      	nop
 800f732:	370c      	adds	r7, #12
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr
 800f73c:	20000018 	.word	0x20000018
 800f740:	e000ed04 	.word	0xe000ed04

0800f744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f74a:	4b12      	ldr	r3, [pc, #72]	; (800f794 <vPortExitCritical+0x50>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d10a      	bne.n	800f768 <vPortExitCritical+0x24>
	__asm volatile
 800f752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f756:	f383 8811 	msr	BASEPRI, r3
 800f75a:	f3bf 8f6f 	isb	sy
 800f75e:	f3bf 8f4f 	dsb	sy
 800f762:	607b      	str	r3, [r7, #4]
}
 800f764:	bf00      	nop
 800f766:	e7fe      	b.n	800f766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f768:	4b0a      	ldr	r3, [pc, #40]	; (800f794 <vPortExitCritical+0x50>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	3b01      	subs	r3, #1
 800f76e:	4a09      	ldr	r2, [pc, #36]	; (800f794 <vPortExitCritical+0x50>)
 800f770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f772:	4b08      	ldr	r3, [pc, #32]	; (800f794 <vPortExitCritical+0x50>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d105      	bne.n	800f786 <vPortExitCritical+0x42>
 800f77a:	2300      	movs	r3, #0
 800f77c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	f383 8811 	msr	BASEPRI, r3
}
 800f784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f786:	bf00      	nop
 800f788:	370c      	adds	r7, #12
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	20000018 	.word	0x20000018
	...

0800f7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f7a0:	f3ef 8009 	mrs	r0, PSP
 800f7a4:	f3bf 8f6f 	isb	sy
 800f7a8:	4b15      	ldr	r3, [pc, #84]	; (800f800 <pxCurrentTCBConst>)
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	f01e 0f10 	tst.w	lr, #16
 800f7b0:	bf08      	it	eq
 800f7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ba:	6010      	str	r0, [r2, #0]
 800f7bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 800f7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f7c4:	f380 8811 	msr	BASEPRI, r0
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f7fe ffb0 	bl	800e734 <vTaskSwitchContext>
 800f7d4:	f04f 0000 	mov.w	r0, #0
 800f7d8:	f380 8811 	msr	BASEPRI, r0
 800f7dc:	bc08      	pop	{r3}
 800f7de:	6819      	ldr	r1, [r3, #0]
 800f7e0:	6808      	ldr	r0, [r1, #0]
 800f7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7e6:	f01e 0f10 	tst.w	lr, #16
 800f7ea:	bf08      	it	eq
 800f7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f7f0:	f380 8809 	msr	PSP, r0
 800f7f4:	f3bf 8f6f 	isb	sy
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop
 800f7fc:	f3af 8000 	nop.w

0800f800 <pxCurrentTCBConst>:
 800f800:	200002d8 	.word	0x200002d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop

0800f808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
	__asm volatile
 800f80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f812:	f383 8811 	msr	BASEPRI, r3
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	f3bf 8f4f 	dsb	sy
 800f81e:	607b      	str	r3, [r7, #4]
}
 800f820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f822:	f7fe fec9 	bl	800e5b8 <xTaskIncrementTick>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d003      	beq.n	800f834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f82c:	4b06      	ldr	r3, [pc, #24]	; (800f848 <xPortSysTickHandler+0x40>)
 800f82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f832:	601a      	str	r2, [r3, #0]
 800f834:	2300      	movs	r3, #0
 800f836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	f383 8811 	msr	BASEPRI, r3
}
 800f83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f840:	bf00      	nop
 800f842:	3708      	adds	r7, #8
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}
 800f848:	e000ed04 	.word	0xe000ed04

0800f84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f84c:	b480      	push	{r7}
 800f84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f850:	4b08      	ldr	r3, [pc, #32]	; (800f874 <vPortSetupTimerInterrupt+0x28>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a08      	ldr	r2, [pc, #32]	; (800f878 <vPortSetupTimerInterrupt+0x2c>)
 800f856:	fba2 2303 	umull	r2, r3, r2, r3
 800f85a:	099b      	lsrs	r3, r3, #6
 800f85c:	4a07      	ldr	r2, [pc, #28]	; (800f87c <vPortSetupTimerInterrupt+0x30>)
 800f85e:	3b01      	subs	r3, #1
 800f860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f862:	4b07      	ldr	r3, [pc, #28]	; (800f880 <vPortSetupTimerInterrupt+0x34>)
 800f864:	2207      	movs	r2, #7
 800f866:	601a      	str	r2, [r3, #0]
}
 800f868:	bf00      	nop
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr
 800f872:	bf00      	nop
 800f874:	20000014 	.word	0x20000014
 800f878:	10624dd3 	.word	0x10624dd3
 800f87c:	e000e014 	.word	0xe000e014
 800f880:	e000e010 	.word	0xe000e010

0800f884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f894 <vPortEnableVFP+0x10>
 800f888:	6801      	ldr	r1, [r0, #0]
 800f88a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f88e:	6001      	str	r1, [r0, #0]
 800f890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f892:	bf00      	nop
 800f894:	e000ed88 	.word	0xe000ed88

0800f898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800f89e:	f3ef 8305 	mrs	r3, IPSR
 800f8a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	2b0f      	cmp	r3, #15
 800f8a8:	d914      	bls.n	800f8d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f8aa:	4a17      	ldr	r2, [pc, #92]	; (800f908 <vPortValidateInterruptPriority+0x70>)
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f8b4:	4b15      	ldr	r3, [pc, #84]	; (800f90c <vPortValidateInterruptPriority+0x74>)
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	7afa      	ldrb	r2, [r7, #11]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d20a      	bcs.n	800f8d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c2:	f383 8811 	msr	BASEPRI, r3
 800f8c6:	f3bf 8f6f 	isb	sy
 800f8ca:	f3bf 8f4f 	dsb	sy
 800f8ce:	607b      	str	r3, [r7, #4]
}
 800f8d0:	bf00      	nop
 800f8d2:	e7fe      	b.n	800f8d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f8d4:	4b0e      	ldr	r3, [pc, #56]	; (800f910 <vPortValidateInterruptPriority+0x78>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f8dc:	4b0d      	ldr	r3, [pc, #52]	; (800f914 <vPortValidateInterruptPriority+0x7c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d90a      	bls.n	800f8fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e8:	f383 8811 	msr	BASEPRI, r3
 800f8ec:	f3bf 8f6f 	isb	sy
 800f8f0:	f3bf 8f4f 	dsb	sy
 800f8f4:	603b      	str	r3, [r7, #0]
}
 800f8f6:	bf00      	nop
 800f8f8:	e7fe      	b.n	800f8f8 <vPortValidateInterruptPriority+0x60>
	}
 800f8fa:	bf00      	nop
 800f8fc:	3714      	adds	r7, #20
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop
 800f908:	e000e3f0 	.word	0xe000e3f0
 800f90c:	20000440 	.word	0x20000440
 800f910:	e000ed0c 	.word	0xe000ed0c
 800f914:	20000444 	.word	0x20000444

0800f918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b08a      	sub	sp, #40	; 0x28
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f920:	2300      	movs	r3, #0
 800f922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f924:	f7fe fd7c 	bl	800e420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f928:	4b58      	ldr	r3, [pc, #352]	; (800fa8c <pvPortMalloc+0x174>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d101      	bne.n	800f934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f930:	f000 f910 	bl	800fb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f934:	4b56      	ldr	r3, [pc, #344]	; (800fa90 <pvPortMalloc+0x178>)
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	4013      	ands	r3, r2
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f040 808e 	bne.w	800fa5e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d01d      	beq.n	800f984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f948:	2208      	movs	r2, #8
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	4413      	add	r3, r2
 800f94e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f003 0307 	and.w	r3, r3, #7
 800f956:	2b00      	cmp	r3, #0
 800f958:	d014      	beq.n	800f984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f023 0307 	bic.w	r3, r3, #7
 800f960:	3308      	adds	r3, #8
 800f962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f003 0307 	and.w	r3, r3, #7
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00a      	beq.n	800f984 <pvPortMalloc+0x6c>
	__asm volatile
 800f96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f972:	f383 8811 	msr	BASEPRI, r3
 800f976:	f3bf 8f6f 	isb	sy
 800f97a:	f3bf 8f4f 	dsb	sy
 800f97e:	617b      	str	r3, [r7, #20]
}
 800f980:	bf00      	nop
 800f982:	e7fe      	b.n	800f982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d069      	beq.n	800fa5e <pvPortMalloc+0x146>
 800f98a:	4b42      	ldr	r3, [pc, #264]	; (800fa94 <pvPortMalloc+0x17c>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	429a      	cmp	r2, r3
 800f992:	d864      	bhi.n	800fa5e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f994:	4b40      	ldr	r3, [pc, #256]	; (800fa98 <pvPortMalloc+0x180>)
 800f996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f998:	4b3f      	ldr	r3, [pc, #252]	; (800fa98 <pvPortMalloc+0x180>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f99e:	e004      	b.n	800f9aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d903      	bls.n	800f9bc <pvPortMalloc+0xa4>
 800f9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d1f1      	bne.n	800f9a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f9bc:	4b33      	ldr	r3, [pc, #204]	; (800fa8c <pvPortMalloc+0x174>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d04b      	beq.n	800fa5e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f9c6:	6a3b      	ldr	r3, [r7, #32]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2208      	movs	r2, #8
 800f9cc:	4413      	add	r3, r2
 800f9ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	6a3b      	ldr	r3, [r7, #32]
 800f9d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9da:	685a      	ldr	r2, [r3, #4]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	1ad2      	subs	r2, r2, r3
 800f9e0:	2308      	movs	r3, #8
 800f9e2:	005b      	lsls	r3, r3, #1
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d91f      	bls.n	800fa28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	4413      	add	r3, r2
 800f9ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	f003 0307 	and.w	r3, r3, #7
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d00a      	beq.n	800fa10 <pvPortMalloc+0xf8>
	__asm volatile
 800f9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fe:	f383 8811 	msr	BASEPRI, r3
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	613b      	str	r3, [r7, #16]
}
 800fa0c:	bf00      	nop
 800fa0e:	e7fe      	b.n	800fa0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa12:	685a      	ldr	r2, [r3, #4]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	1ad2      	subs	r2, r2, r3
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1e:	687a      	ldr	r2, [r7, #4]
 800fa20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa22:	69b8      	ldr	r0, [r7, #24]
 800fa24:	f000 f8f8 	bl	800fc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa28:	4b1a      	ldr	r3, [pc, #104]	; (800fa94 <pvPortMalloc+0x17c>)
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	1ad3      	subs	r3, r2, r3
 800fa32:	4a18      	ldr	r2, [pc, #96]	; (800fa94 <pvPortMalloc+0x17c>)
 800fa34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa36:	4b17      	ldr	r3, [pc, #92]	; (800fa94 <pvPortMalloc+0x17c>)
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	4b18      	ldr	r3, [pc, #96]	; (800fa9c <pvPortMalloc+0x184>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d203      	bcs.n	800fa4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa42:	4b14      	ldr	r3, [pc, #80]	; (800fa94 <pvPortMalloc+0x17c>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4a15      	ldr	r2, [pc, #84]	; (800fa9c <pvPortMalloc+0x184>)
 800fa48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4c:	685a      	ldr	r2, [r3, #4]
 800fa4e:	4b10      	ldr	r3, [pc, #64]	; (800fa90 <pvPortMalloc+0x178>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	431a      	orrs	r2, r3
 800fa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fa5e:	f7fe fced 	bl	800e43c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	f003 0307 	and.w	r3, r3, #7
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d00a      	beq.n	800fa82 <pvPortMalloc+0x16a>
	__asm volatile
 800fa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa70:	f383 8811 	msr	BASEPRI, r3
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	f3bf 8f4f 	dsb	sy
 800fa7c:	60fb      	str	r3, [r7, #12]
}
 800fa7e:	bf00      	nop
 800fa80:	e7fe      	b.n	800fa80 <pvPortMalloc+0x168>
	return pvReturn;
 800fa82:	69fb      	ldr	r3, [r7, #28]
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	3728      	adds	r7, #40	; 0x28
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	20007c50 	.word	0x20007c50
 800fa90:	20007c5c 	.word	0x20007c5c
 800fa94:	20007c54 	.word	0x20007c54
 800fa98:	20007c48 	.word	0x20007c48
 800fa9c:	20007c58 	.word	0x20007c58

0800faa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d048      	beq.n	800fb44 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fab2:	2308      	movs	r3, #8
 800fab4:	425b      	negs	r3, r3
 800fab6:	697a      	ldr	r2, [r7, #20]
 800fab8:	4413      	add	r3, r2
 800faba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	685a      	ldr	r2, [r3, #4]
 800fac4:	4b21      	ldr	r3, [pc, #132]	; (800fb4c <vPortFree+0xac>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4013      	ands	r3, r2
 800faca:	2b00      	cmp	r3, #0
 800facc:	d10a      	bne.n	800fae4 <vPortFree+0x44>
	__asm volatile
 800face:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	60fb      	str	r3, [r7, #12]
}
 800fae0:	bf00      	nop
 800fae2:	e7fe      	b.n	800fae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00a      	beq.n	800fb02 <vPortFree+0x62>
	__asm volatile
 800faec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf0:	f383 8811 	msr	BASEPRI, r3
 800faf4:	f3bf 8f6f 	isb	sy
 800faf8:	f3bf 8f4f 	dsb	sy
 800fafc:	60bb      	str	r3, [r7, #8]
}
 800fafe:	bf00      	nop
 800fb00:	e7fe      	b.n	800fb00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	685a      	ldr	r2, [r3, #4]
 800fb06:	4b11      	ldr	r3, [pc, #68]	; (800fb4c <vPortFree+0xac>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	4013      	ands	r3, r2
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d019      	beq.n	800fb44 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d115      	bne.n	800fb44 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	685a      	ldr	r2, [r3, #4]
 800fb1c:	4b0b      	ldr	r3, [pc, #44]	; (800fb4c <vPortFree+0xac>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	43db      	mvns	r3, r3
 800fb22:	401a      	ands	r2, r3
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fb28:	f7fe fc7a 	bl	800e420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	685a      	ldr	r2, [r3, #4]
 800fb30:	4b07      	ldr	r3, [pc, #28]	; (800fb50 <vPortFree+0xb0>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4413      	add	r3, r2
 800fb36:	4a06      	ldr	r2, [pc, #24]	; (800fb50 <vPortFree+0xb0>)
 800fb38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb3a:	6938      	ldr	r0, [r7, #16]
 800fb3c:	f000 f86c 	bl	800fc18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fb40:	f7fe fc7c 	bl	800e43c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fb44:	bf00      	nop
 800fb46:	3718      	adds	r7, #24
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	20007c5c 	.word	0x20007c5c
 800fb50:	20007c54 	.word	0x20007c54

0800fb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fb54:	b480      	push	{r7}
 800fb56:	b085      	sub	sp, #20
 800fb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fb5a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800fb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fb60:	4b27      	ldr	r3, [pc, #156]	; (800fc00 <prvHeapInit+0xac>)
 800fb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f003 0307 	and.w	r3, r3, #7
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d00c      	beq.n	800fb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	3307      	adds	r3, #7
 800fb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f023 0307 	bic.w	r3, r3, #7
 800fb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fb7c:	68ba      	ldr	r2, [r7, #8]
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	1ad3      	subs	r3, r2, r3
 800fb82:	4a1f      	ldr	r2, [pc, #124]	; (800fc00 <prvHeapInit+0xac>)
 800fb84:	4413      	add	r3, r2
 800fb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fb8c:	4a1d      	ldr	r2, [pc, #116]	; (800fc04 <prvHeapInit+0xb0>)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fb92:	4b1c      	ldr	r3, [pc, #112]	; (800fc04 <prvHeapInit+0xb0>)
 800fb94:	2200      	movs	r2, #0
 800fb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fba0:	2208      	movs	r2, #8
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	1a9b      	subs	r3, r3, r2
 800fba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f023 0307 	bic.w	r3, r3, #7
 800fbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	4a15      	ldr	r2, [pc, #84]	; (800fc08 <prvHeapInit+0xb4>)
 800fbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fbb6:	4b14      	ldr	r3, [pc, #80]	; (800fc08 <prvHeapInit+0xb4>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fbbe:	4b12      	ldr	r3, [pc, #72]	; (800fc08 <prvHeapInit+0xb4>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	1ad2      	subs	r2, r2, r3
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fbd4:	4b0c      	ldr	r3, [pc, #48]	; (800fc08 <prvHeapInit+0xb4>)
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	4a0a      	ldr	r2, [pc, #40]	; (800fc0c <prvHeapInit+0xb8>)
 800fbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	4a09      	ldr	r2, [pc, #36]	; (800fc10 <prvHeapInit+0xbc>)
 800fbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fbec:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <prvHeapInit+0xc0>)
 800fbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fbf2:	601a      	str	r2, [r3, #0]
}
 800fbf4:	bf00      	nop
 800fbf6:	3714      	adds	r7, #20
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr
 800fc00:	20000448 	.word	0x20000448
 800fc04:	20007c48 	.word	0x20007c48
 800fc08:	20007c50 	.word	0x20007c50
 800fc0c:	20007c58 	.word	0x20007c58
 800fc10:	20007c54 	.word	0x20007c54
 800fc14:	20007c5c 	.word	0x20007c5c

0800fc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc20:	4b28      	ldr	r3, [pc, #160]	; (800fcc4 <prvInsertBlockIntoFreeList+0xac>)
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	e002      	b.n	800fc2c <prvInsertBlockIntoFreeList+0x14>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	60fb      	str	r3, [r7, #12]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	687a      	ldr	r2, [r7, #4]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d8f7      	bhi.n	800fc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	68ba      	ldr	r2, [r7, #8]
 800fc40:	4413      	add	r3, r2
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d108      	bne.n	800fc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	685a      	ldr	r2, [r3, #4]
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	441a      	add	r2, r3
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	685b      	ldr	r3, [r3, #4]
 800fc62:	68ba      	ldr	r2, [r7, #8]
 800fc64:	441a      	add	r2, r3
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d118      	bne.n	800fca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	4b15      	ldr	r3, [pc, #84]	; (800fcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d00d      	beq.n	800fc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	685a      	ldr	r2, [r3, #4]
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	685b      	ldr	r3, [r3, #4]
 800fc84:	441a      	add	r2, r3
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	601a      	str	r2, [r3, #0]
 800fc94:	e008      	b.n	800fca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fc96:	4b0c      	ldr	r3, [pc, #48]	; (800fcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	601a      	str	r2, [r3, #0]
 800fc9e:	e003      	b.n	800fca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fca8:	68fa      	ldr	r2, [r7, #12]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d002      	beq.n	800fcb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fcb6:	bf00      	nop
 800fcb8:	3714      	adds	r7, #20
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop
 800fcc4:	20007c48 	.word	0x20007c48
 800fcc8:	20007c50 	.word	0x20007c50

0800fccc <AT_config>:

#include "parse.h"

#ifndef CONFIG
void AT_config(const char *filename)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
	parse_at_file(filename);
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f002 faef 	bl	80122b8 <parse_at_file>
}
 800fcda:	bf00      	nop
 800fcdc:	3708      	adds	r7, #8
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}

0800fce2 <AT_init>:
	parse_at_bin(at_bin);
}
#endif

void AT_init(void)
{
 800fce2:	b480      	push	{r7}
 800fce4:	af00      	add	r7, sp, #0
	return;
 800fce6:	bf00      	nop
}
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr

0800fcf0 <AT_update>:

void AT_update(void)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
	//R2U2_DEBUG_PRINT("\n\nAT Update\n");
	uint32_t i;
	for(i = 0; i < num_instr; i++) {
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	607b      	str	r3, [r7, #4]
 800fcfa:	e019      	b.n	800fd30 <AT_update+0x40>
		//R2U2_DEBUG_PRINT("\tAT Inst: %d\n", i);
		//R2U2_DEBUG_PRINT("\tSig# %d -> Filt# %d-> Comp# %d -> Atom#: %d\n",
		//                 at_instructions[i].sig_addr, at_instructions[i].filter,
		//                 at_instructions[i].cond, at_instructions[i].atom_addr);
		decode[at_instructions[i].filter](at_instructions+i);
 800fcfc:	4911      	ldr	r1, [pc, #68]	; (800fd44 <AT_update+0x54>)
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	4613      	mov	r3, r2
 800fd02:	005b      	lsls	r3, r3, #1
 800fd04:	4413      	add	r3, r2
 800fd06:	00db      	lsls	r3, r3, #3
 800fd08:	440b      	add	r3, r1
 800fd0a:	3301      	adds	r3, #1
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	461a      	mov	r2, r3
 800fd10:	4b0d      	ldr	r3, [pc, #52]	; (800fd48 <AT_update+0x58>)
 800fd12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	005b      	lsls	r3, r3, #1
 800fd1c:	4413      	add	r3, r2
 800fd1e:	00db      	lsls	r3, r3, #3
 800fd20:	461a      	mov	r2, r3
 800fd22:	4b08      	ldr	r3, [pc, #32]	; (800fd44 <AT_update+0x54>)
 800fd24:	4413      	add	r3, r2
 800fd26:	4618      	mov	r0, r3
 800fd28:	4788      	blx	r1
	for(i = 0; i < num_instr; i++) {
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	607b      	str	r3, [r7, #4]
 800fd30:	4b06      	ldr	r3, [pc, #24]	; (800fd4c <AT_update+0x5c>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d3e0      	bcc.n	800fcfc <AT_update+0xc>
	//R2U2_DEBUG_PRINT("\n\n");
	}
}
 800fd3a:	bf00      	nop
 800fd3c:	bf00      	nop
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	200086b0 	.word	0x200086b0
 800fd48:	2000004c 	.word	0x2000004c
 800fd4c:	20007c60 	.word	0x20007c60

0800fd50 <compare_int_eq>:
#include "at_compare.h"

bool compare_int_eq(int32_t a, int32_t b)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  //R2U2_DEBUG_PRINT("\t\tInt Compare: %d == %d = %d \n", a, b, (a == b));
  return a == b;
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	bf0c      	ite	eq
 800fd62:	2301      	moveq	r3, #1
 800fd64:	2300      	movne	r3, #0
 800fd66:	b2db      	uxtb	r3, r3
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	370c      	adds	r7, #12
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr

0800fd74 <compare_int_neq>:

bool compare_int_neq(int32_t a, int32_t b)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6039      	str	r1, [r7, #0]
  //R2U2_DEBUG_PRINT("\t\tInt Compare: %d != %d = %d \n", a, b, (a != b));
  return a != b;
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	bf14      	ite	ne
 800fd86:	2301      	movne	r3, #1
 800fd88:	2300      	moveq	r3, #0
 800fd8a:	b2db      	uxtb	r3, r3
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	370c      	adds	r7, #12
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <compare_int_lt>:

bool compare_int_lt(int32_t a, int32_t b)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  //R2U2_DEBUG_PRINT("\t\tInt Compare: %d < %d = %d \n", a, b, (a < b));
  return a < b;
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	bfb4      	ite	lt
 800fdaa:	2301      	movlt	r3, #1
 800fdac:	2300      	movge	r3, #0
 800fdae:	b2db      	uxtb	r3, r3
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	370c      	adds	r7, #12
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdba:	4770      	bx	lr

0800fdbc <compare_int_leq>:

bool compare_int_leq(int32_t a, int32_t b)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b083      	sub	sp, #12
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
  //R2U2_DEBUG_PRINT("\t\tInt Compare: %d <= %d = %d \n", a, b, (a <= b));
  return a <= b;
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	bfd4      	ite	le
 800fdce:	2301      	movle	r3, #1
 800fdd0:	2300      	movgt	r3, #0
 800fdd2:	b2db      	uxtb	r3, r3
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	370c      	adds	r7, #12
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr

0800fde0 <compare_int_gt>:

bool compare_int_gt(int32_t a, int32_t b)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
 800fde8:	6039      	str	r1, [r7, #0]
  //R2U2_DEBUG_PRINT("\t\tInt Compare: %d > %d = %d \n", a, b, (a > b));
  return a > b;
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	bfcc      	ite	gt
 800fdf2:	2301      	movgt	r3, #1
 800fdf4:	2300      	movle	r3, #0
 800fdf6:	b2db      	uxtb	r3, r3
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	370c      	adds	r7, #12
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr

0800fe04 <compare_int_geq>:

bool compare_int_geq(int32_t a, int32_t b)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b083      	sub	sp, #12
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
  //R2U2_DEBUG_PRINT("\t\tInt Compare: %d >= %d = %d \n", a, b, (a >= b));
  return a >= b;
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	bfac      	ite	ge
 800fe16:	2301      	movge	r3, #1
 800fe18:	2300      	movlt	r3, #0
 800fe1a:	b2db      	uxtb	r3, r3
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	370c      	adds	r7, #12
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr

0800fe28 <compare_double_eq>:

bool compare_double_eq(double a, double b)
{
 800fe28:	b590      	push	{r4, r7, lr}
 800fe2a:	b085      	sub	sp, #20
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	ed87 0b02 	vstr	d0, [r7, #8]
 800fe32:	ed87 1b00 	vstr	d1, [r7]
  //R2U2_DEBUG_PRINT("\t\tDub Compare: %lf == %lf = %d \n", a, b, (a == b));
  return a == b;
 800fe36:	2301      	movs	r3, #1
 800fe38:	461c      	mov	r4, r3
 800fe3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fe42:	f7f0 fe51 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d101      	bne.n	800fe50 <compare_double_eq+0x28>
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	461c      	mov	r4, r3
 800fe50:	b2e3      	uxtb	r3, r4
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3714      	adds	r7, #20
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd90      	pop	{r4, r7, pc}

0800fe5a <compare_double_neq>:

bool compare_double_neq(double a, double b)
{
 800fe5a:	b590      	push	{r4, r7, lr}
 800fe5c:	b085      	sub	sp, #20
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	ed87 0b02 	vstr	d0, [r7, #8]
 800fe64:	ed87 1b00 	vstr	d1, [r7]
  //R2U2_DEBUG_PRINT("\t\tDub Compare: %lf != %lf = %d \n", a, b, (a != b));
  return a != b;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	461c      	mov	r4, r3
 800fe6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fe74:	f7f0 fe38 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d001      	beq.n	800fe82 <compare_double_neq+0x28>
 800fe7e:	2300      	movs	r3, #0
 800fe80:	461c      	mov	r4, r3
 800fe82:	b2e3      	uxtb	r3, r4
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3714      	adds	r7, #20
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd90      	pop	{r4, r7, pc}

0800fe8c <compare_double_lt>:
bool compare_double_lt(double a, double b)
{
 800fe8c:	b590      	push	{r4, r7, lr}
 800fe8e:	b085      	sub	sp, #20
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	ed87 0b02 	vstr	d0, [r7, #8]
 800fe96:	ed87 1b00 	vstr	d1, [r7]
  //R2U2_DEBUG_PRINT("\t\tDub Compare: %lf < %lf = %d \n", a, b, (a < b));
  return a < b;
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	461c      	mov	r4, r3
 800fe9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fea2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fea6:	f7f0 fe29 	bl	8000afc <__aeabi_dcmplt>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d101      	bne.n	800feb4 <compare_double_lt+0x28>
 800feb0:	2300      	movs	r3, #0
 800feb2:	461c      	mov	r4, r3
 800feb4:	b2e3      	uxtb	r3, r4
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3714      	adds	r7, #20
 800feba:	46bd      	mov	sp, r7
 800febc:	bd90      	pop	{r4, r7, pc}

0800febe <compare_double_leq>:

bool compare_double_leq(double a, double b)
{
 800febe:	b590      	push	{r4, r7, lr}
 800fec0:	b085      	sub	sp, #20
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	ed87 0b02 	vstr	d0, [r7, #8]
 800fec8:	ed87 1b00 	vstr	d1, [r7]
  //R2U2_DEBUG_PRINT("\t\tDub Compare: %lf <= %lf = %d \n", a, b, (a <= b));
  return a <= b;
 800fecc:	2301      	movs	r3, #1
 800fece:	461c      	mov	r4, r3
 800fed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fed4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fed8:	f7f0 fe1a 	bl	8000b10 <__aeabi_dcmple>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d101      	bne.n	800fee6 <compare_double_leq+0x28>
 800fee2:	2300      	movs	r3, #0
 800fee4:	461c      	mov	r4, r3
 800fee6:	b2e3      	uxtb	r3, r4
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3714      	adds	r7, #20
 800feec:	46bd      	mov	sp, r7
 800feee:	bd90      	pop	{r4, r7, pc}

0800fef0 <compare_double_gt>:

bool compare_double_gt(double a, double b)
{
 800fef0:	b590      	push	{r4, r7, lr}
 800fef2:	b085      	sub	sp, #20
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	ed87 0b02 	vstr	d0, [r7, #8]
 800fefa:	ed87 1b00 	vstr	d1, [r7]
  //R2U2_DEBUG_PRINT("\t\tDub Compare: %lf > %lf = %d \n", a, b, (a > b));
  return a > b;
 800fefe:	2301      	movs	r3, #1
 800ff00:	461c      	mov	r4, r3
 800ff02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ff0a:	f7f0 fe15 	bl	8000b38 <__aeabi_dcmpgt>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d101      	bne.n	800ff18 <compare_double_gt+0x28>
 800ff14:	2300      	movs	r3, #0
 800ff16:	461c      	mov	r4, r3
 800ff18:	b2e3      	uxtb	r3, r4
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	3714      	adds	r7, #20
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	bd90      	pop	{r4, r7, pc}

0800ff22 <compare_double_geq>:

bool compare_double_geq(double a, double b)
{
 800ff22:	b590      	push	{r4, r7, lr}
 800ff24:	b085      	sub	sp, #20
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	ed87 0b02 	vstr	d0, [r7, #8]
 800ff2c:	ed87 1b00 	vstr	d1, [r7]
  //R2U2_DEBUG_PRINT("\t\tDub Compare: %lf >= %lf = %d \n", a, b, (a >= b));
  return a >= b;
 800ff30:	2301      	movs	r3, #1
 800ff32:	461c      	mov	r4, r3
 800ff34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ff3c:	f7f0 fdf2 	bl	8000b24 <__aeabi_dcmpge>
 800ff40:	4603      	mov	r3, r0
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d101      	bne.n	800ff4a <compare_double_geq+0x28>
 800ff46:	2300      	movs	r3, #0
 800ff48:	461c      	mov	r4, r3
 800ff4a:	b2e3      	uxtb	r3, r4
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3714      	adds	r7, #20
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd90      	pop	{r4, r7, pc}

0800ff54 <op_abs_diff_angle>:

#include "../TL/TL_observers.h"

#if R2U2_AT_Extra_Filters
void op_abs_diff_angle(at_instruction_t *instr)
{
 800ff54:	b590      	push	{r4, r7, lr}
 800ff56:	b089      	sub	sp, #36	; 0x24
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
	double signal;
	sscanf(signals_vector[instr->sig_addr], "%lf", &signal);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	789b      	ldrb	r3, [r3, #2]
 800ff60:	461a      	mov	r2, r3
 800ff62:	4b2e      	ldr	r3, [pc, #184]	; (801001c <op_abs_diff_angle+0xc8>)
 800ff64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff68:	f107 0210 	add.w	r2, r7, #16
 800ff6c:	492c      	ldr	r1, [pc, #176]	; (8010020 <op_abs_diff_angle+0xcc>)
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f003 fe9e 	bl	8013cb0 <siscanf>
	double diff_angle = (double)abs_diff_angle(signal, instr->filt_data_struct.diff_angle);
 800ff74:	ed97 7b04 	vldr	d7, [r7, #16]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	ed93 6b04 	vldr	d6, [r3, #16]
 800ff7e:	eeb0 1a46 	vmov.f32	s2, s12
 800ff82:	eef0 1a66 	vmov.f32	s3, s13
 800ff86:	eeb0 0a47 	vmov.f32	s0, s14
 800ff8a:	eef0 0a67 	vmov.f32	s1, s15
 800ff8e:	f000 fa3b 	bl	8010408 <abs_diff_angle>
 800ff92:	ed87 0b06 	vstr	d0, [r7, #24]

	if(instr->comp_is_sig) {
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	791b      	ldrb	r3, [r3, #4]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d023      	beq.n	800ffe6 <op_abs_diff_angle+0x92>
		double comp_sig;
		sscanf(signals_vector[instr->comp.s], "%lf", &comp_sig);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	4b1d      	ldr	r3, [pc, #116]	; (801001c <op_abs_diff_angle+0xc8>)
 800ffa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffac:	f107 0208 	add.w	r2, r7, #8
 800ffb0:	491b      	ldr	r1, [pc, #108]	; (8010020 <op_abs_diff_angle+0xcc>)
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f003 fe7c 	bl	8013cb0 <siscanf>
		atomics_vector[instr->atom_addr] =
			compare_double[instr->cond](diff_angle, comp_sig);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	4b19      	ldr	r3, [pc, #100]	; (8010024 <op_abs_diff_angle+0xd0>)
 800ffc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffc4:	ed97 7b02 	vldr	d7, [r7, #8]
		atomics_vector[instr->atom_addr] =
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	78d2      	ldrb	r2, [r2, #3]
 800ffcc:	4614      	mov	r4, r2
			compare_double[instr->cond](diff_angle, comp_sig);
 800ffce:	eeb0 1a47 	vmov.f32	s2, s14
 800ffd2:	eef0 1a67 	vmov.f32	s3, s15
 800ffd6:	ed97 0b06 	vldr	d0, [r7, #24]
 800ffda:	4798      	blx	r3
 800ffdc:	4603      	mov	r3, r0
 800ffde:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 800ffe0:	4b11      	ldr	r3, [pc, #68]	; (8010028 <op_abs_diff_angle+0xd4>)
 800ffe2:	551a      	strb	r2, [r3, r4]
	} else {
		atomics_vector[instr->atom_addr] =
			compare_double[instr->cond](diff_angle, instr->comp.d);
	}
}
 800ffe4:	e016      	b.n	8010014 <op_abs_diff_angle+0xc0>
			compare_double[instr->cond](diff_angle, instr->comp.d);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	461a      	mov	r2, r3
 800ffec:	4b0d      	ldr	r3, [pc, #52]	; (8010024 <op_abs_diff_angle+0xd0>)
 800ffee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	ed92 7b02 	vldr	d7, [r2, #8]
		atomics_vector[instr->atom_addr] =
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	78d2      	ldrb	r2, [r2, #3]
 800fffc:	4614      	mov	r4, r2
			compare_double[instr->cond](diff_angle, instr->comp.d);
 800fffe:	eeb0 1a47 	vmov.f32	s2, s14
 8010002:	eef0 1a67 	vmov.f32	s3, s15
 8010006:	ed97 0b06 	vldr	d0, [r7, #24]
 801000a:	4798      	blx	r3
 801000c:	4603      	mov	r3, r0
 801000e:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 8010010:	4b05      	ldr	r3, [pc, #20]	; (8010028 <op_abs_diff_angle+0xd4>)
 8010012:	551a      	strb	r2, [r3, r4]
}
 8010014:	bf00      	nop
 8010016:	3724      	adds	r7, #36	; 0x24
 8010018:	46bd      	mov	sp, r7
 801001a:	bd90      	pop	{r4, r7, pc}
 801001c:	200082b0 	.word	0x200082b0
 8010020:	08017fd0 	.word	0x08017fd0
 8010024:	20000034 	.word	0x20000034
 8010028:	2001ffb0 	.word	0x2001ffb0

0801002c <op_movavg>:

void op_movavg(at_instruction_t *instr)
{
 801002c:	b590      	push	{r4, r7, lr}
 801002e:	b089      	sub	sp, #36	; 0x24
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
	int32_t signal;
	sscanf(signals_vector[instr->sig_addr], "%ld", &signal);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	789b      	ldrb	r3, [r3, #2]
 8010038:	461a      	mov	r2, r3
 801003a:	4b2d      	ldr	r3, [pc, #180]	; (80100f0 <op_movavg+0xc4>)
 801003c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010040:	f107 0214 	add.w	r2, r7, #20
 8010044:	492b      	ldr	r1, [pc, #172]	; (80100f4 <op_movavg+0xc8>)
 8010046:	4618      	mov	r0, r3
 8010048:	f003 fe32 	bl	8013cb0 <siscanf>
	filter_movavg_update_data(instr->filt_data_struct.movavg, signal);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	697a      	ldr	r2, [r7, #20]
 8010052:	4611      	mov	r1, r2
 8010054:	4618      	mov	r0, r3
 8010056:	f000 fa6b 	bl	8010530 <filter_movavg_update_data>
	double avg = filter_movavg_get(instr->filt_data_struct.movavg);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	691b      	ldr	r3, [r3, #16]
 801005e:	4618      	mov	r0, r3
 8010060:	f000 fabc 	bl	80105dc <filter_movavg_get>
 8010064:	ed87 0b06 	vstr	d0, [r7, #24]

	if(instr->comp_is_sig) {
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	791b      	ldrb	r3, [r3, #4]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d023      	beq.n	80100b8 <op_movavg+0x8c>
		double comp_sig;
		sscanf(signals_vector[instr->comp.s], "%lf", &comp_sig);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8010076:	461a      	mov	r2, r3
 8010078:	4b1d      	ldr	r3, [pc, #116]	; (80100f0 <op_movavg+0xc4>)
 801007a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801007e:	f107 0208 	add.w	r2, r7, #8
 8010082:	491d      	ldr	r1, [pc, #116]	; (80100f8 <op_movavg+0xcc>)
 8010084:	4618      	mov	r0, r3
 8010086:	f003 fe13 	bl	8013cb0 <siscanf>
		atomics_vector[instr->atom_addr] =
			compare_double[instr->cond](avg, comp_sig);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	461a      	mov	r2, r3
 8010090:	4b1a      	ldr	r3, [pc, #104]	; (80100fc <op_movavg+0xd0>)
 8010092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010096:	ed97 7b02 	vldr	d7, [r7, #8]
		atomics_vector[instr->atom_addr] =
 801009a:	687a      	ldr	r2, [r7, #4]
 801009c:	78d2      	ldrb	r2, [r2, #3]
 801009e:	4614      	mov	r4, r2
			compare_double[instr->cond](avg, comp_sig);
 80100a0:	eeb0 1a47 	vmov.f32	s2, s14
 80100a4:	eef0 1a67 	vmov.f32	s3, s15
 80100a8:	ed97 0b06 	vldr	d0, [r7, #24]
 80100ac:	4798      	blx	r3
 80100ae:	4603      	mov	r3, r0
 80100b0:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 80100b2:	4b13      	ldr	r3, [pc, #76]	; (8010100 <op_movavg+0xd4>)
 80100b4:	551a      	strb	r2, [r3, r4]
	} else {
		atomics_vector[instr->atom_addr] =
			compare_double[instr->cond](avg, instr->comp.d);
	}
}
 80100b6:	e016      	b.n	80100e6 <op_movavg+0xba>
			compare_double[instr->cond](avg, instr->comp.d);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	461a      	mov	r2, r3
 80100be:	4b0f      	ldr	r3, [pc, #60]	; (80100fc <op_movavg+0xd0>)
 80100c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100c4:	687a      	ldr	r2, [r7, #4]
 80100c6:	ed92 7b02 	vldr	d7, [r2, #8]
		atomics_vector[instr->atom_addr] =
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	78d2      	ldrb	r2, [r2, #3]
 80100ce:	4614      	mov	r4, r2
			compare_double[instr->cond](avg, instr->comp.d);
 80100d0:	eeb0 1a47 	vmov.f32	s2, s14
 80100d4:	eef0 1a67 	vmov.f32	s3, s15
 80100d8:	ed97 0b06 	vldr	d0, [r7, #24]
 80100dc:	4798      	blx	r3
 80100de:	4603      	mov	r3, r0
 80100e0:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 80100e2:	4b07      	ldr	r3, [pc, #28]	; (8010100 <op_movavg+0xd4>)
 80100e4:	551a      	strb	r2, [r3, r4]
}
 80100e6:	bf00      	nop
 80100e8:	3724      	adds	r7, #36	; 0x24
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd90      	pop	{r4, r7, pc}
 80100ee:	bf00      	nop
 80100f0:	200082b0 	.word	0x200082b0
 80100f4:	08017fd4 	.word	0x08017fd4
 80100f8:	08017fd0 	.word	0x08017fd0
 80100fc:	20000034 	.word	0x20000034
 8010100:	2001ffb0 	.word	0x2001ffb0

08010104 <op_rate>:

void op_rate(at_instruction_t *instr)
{
 8010104:	b590      	push	{r4, r7, lr}
 8010106:	b089      	sub	sp, #36	; 0x24
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
	double signal;
	sscanf(signals_vector[instr->sig_addr], "%lf", &signal);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	789b      	ldrb	r3, [r3, #2]
 8010110:	461a      	mov	r2, r3
 8010112:	4b2c      	ldr	r3, [pc, #176]	; (80101c4 <op_rate+0xc0>)
 8010114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010118:	f107 0210 	add.w	r2, r7, #16
 801011c:	492a      	ldr	r1, [pc, #168]	; (80101c8 <op_rate+0xc4>)
 801011e:	4618      	mov	r0, r3
 8010120:	f003 fdc6 	bl	8013cb0 <siscanf>
	double rate = filter_rate_update_data(signal, &instr->filt_data_struct.prev);
 8010124:	ed97 7b04 	vldr	d7, [r7, #16]
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	3310      	adds	r3, #16
 801012c:	4618      	mov	r0, r3
 801012e:	eeb0 0a47 	vmov.f32	s0, s14
 8010132:	eef0 0a67 	vmov.f32	s1, s15
 8010136:	f000 fa63 	bl	8010600 <filter_rate_update_data>
 801013a:	ed87 0b06 	vstr	d0, [r7, #24]

	if(instr->comp_is_sig) {
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	791b      	ldrb	r3, [r3, #4]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d023      	beq.n	801018e <op_rate+0x8a>
		double comp_sig;
		sscanf(signals_vector[instr->comp.s], "%lf", &comp_sig);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801014c:	461a      	mov	r2, r3
 801014e:	4b1d      	ldr	r3, [pc, #116]	; (80101c4 <op_rate+0xc0>)
 8010150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010154:	f107 0208 	add.w	r2, r7, #8
 8010158:	491b      	ldr	r1, [pc, #108]	; (80101c8 <op_rate+0xc4>)
 801015a:	4618      	mov	r0, r3
 801015c:	f003 fda8 	bl	8013cb0 <siscanf>
		atomics_vector[instr->atom_addr] =
			compare_double[instr->cond](rate, comp_sig);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	461a      	mov	r2, r3
 8010166:	4b19      	ldr	r3, [pc, #100]	; (80101cc <op_rate+0xc8>)
 8010168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801016c:	ed97 7b02 	vldr	d7, [r7, #8]
		atomics_vector[instr->atom_addr] =
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	78d2      	ldrb	r2, [r2, #3]
 8010174:	4614      	mov	r4, r2
			compare_double[instr->cond](rate, comp_sig);
 8010176:	eeb0 1a47 	vmov.f32	s2, s14
 801017a:	eef0 1a67 	vmov.f32	s3, s15
 801017e:	ed97 0b06 	vldr	d0, [r7, #24]
 8010182:	4798      	blx	r3
 8010184:	4603      	mov	r3, r0
 8010186:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 8010188:	4b11      	ldr	r3, [pc, #68]	; (80101d0 <op_rate+0xcc>)
 801018a:	551a      	strb	r2, [r3, r4]
	} else {
		atomics_vector[instr->atom_addr] =
			compare_double[instr->cond](rate, instr->comp.d);
	}
}
 801018c:	e016      	b.n	80101bc <op_rate+0xb8>
			compare_double[instr->cond](rate, instr->comp.d);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	461a      	mov	r2, r3
 8010194:	4b0d      	ldr	r3, [pc, #52]	; (80101cc <op_rate+0xc8>)
 8010196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	ed92 7b02 	vldr	d7, [r2, #8]
		atomics_vector[instr->atom_addr] =
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	78d2      	ldrb	r2, [r2, #3]
 80101a4:	4614      	mov	r4, r2
			compare_double[instr->cond](rate, instr->comp.d);
 80101a6:	eeb0 1a47 	vmov.f32	s2, s14
 80101aa:	eef0 1a67 	vmov.f32	s3, s15
 80101ae:	ed97 0b06 	vldr	d0, [r7, #24]
 80101b2:	4798      	blx	r3
 80101b4:	4603      	mov	r3, r0
 80101b6:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 80101b8:	4b05      	ldr	r3, [pc, #20]	; (80101d0 <op_rate+0xcc>)
 80101ba:	551a      	strb	r2, [r3, r4]
}
 80101bc:	bf00      	nop
 80101be:	3724      	adds	r7, #36	; 0x24
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd90      	pop	{r4, r7, pc}
 80101c4:	200082b0 	.word	0x200082b0
 80101c8:	08017fd0 	.word	0x08017fd0
 80101cc:	20000034 	.word	0x20000034
 80101d0:	2001ffb0 	.word	0x2001ffb0

080101d4 <op_bool>:
	}
}
#endif

void op_bool(at_instruction_t *instr)
{
 80101d4:	b590      	push	{r4, r7, lr}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
	bool signal;
	sscanf(signals_vector[instr->sig_addr], "%hhu", (char*)&signal);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	789b      	ldrb	r3, [r3, #2]
 80101e0:	461a      	mov	r2, r3
 80101e2:	4b22      	ldr	r3, [pc, #136]	; (801026c <op_bool+0x98>)
 80101e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e8:	f107 020f 	add.w	r2, r7, #15
 80101ec:	4920      	ldr	r1, [pc, #128]	; (8010270 <op_bool+0x9c>)
 80101ee:	4618      	mov	r0, r3
 80101f0:	f003 fd5e 	bl	8013cb0 <siscanf>

	if(instr->comp_is_sig) {
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	791b      	ldrb	r3, [r3, #4]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d01f      	beq.n	801023c <op_bool+0x68>
		bool comp_sig;
		sscanf(signals_vector[instr->comp.s], "%hhu", (char*)&comp_sig);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8010202:	461a      	mov	r2, r3
 8010204:	4b19      	ldr	r3, [pc, #100]	; (801026c <op_bool+0x98>)
 8010206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801020a:	f107 020e 	add.w	r2, r7, #14
 801020e:	4918      	ldr	r1, [pc, #96]	; (8010270 <op_bool+0x9c>)
 8010210:	4618      	mov	r0, r3
 8010212:	f003 fd4d 	bl	8013cb0 <siscanf>
		atomics_vector[instr->atom_addr] =
			compare_int[instr->cond](signal, comp_sig);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	461a      	mov	r2, r3
 801021c:	4b15      	ldr	r3, [pc, #84]	; (8010274 <op_bool+0xa0>)
 801021e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010222:	7bfa      	ldrb	r2, [r7, #15]
 8010224:	4610      	mov	r0, r2
 8010226:	7bba      	ldrb	r2, [r7, #14]
 8010228:	4611      	mov	r1, r2
		atomics_vector[instr->atom_addr] =
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	78d2      	ldrb	r2, [r2, #3]
 801022e:	4614      	mov	r4, r2
			compare_int[instr->cond](signal, comp_sig);
 8010230:	4798      	blx	r3
 8010232:	4603      	mov	r3, r0
 8010234:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 8010236:	4b10      	ldr	r3, [pc, #64]	; (8010278 <op_bool+0xa4>)
 8010238:	551a      	strb	r2, [r3, r4]
	} else {
		atomics_vector[instr->atom_addr] =
			compare_int[instr->cond](signal, instr->comp.b);
	}
}
 801023a:	e012      	b.n	8010262 <op_bool+0x8e>
			compare_int[instr->cond](signal, instr->comp.b);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	461a      	mov	r2, r3
 8010242:	4b0c      	ldr	r3, [pc, #48]	; (8010274 <op_bool+0xa0>)
 8010244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010248:	7bfa      	ldrb	r2, [r7, #15]
 801024a:	4610      	mov	r0, r2
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	7a12      	ldrb	r2, [r2, #8]
 8010250:	4611      	mov	r1, r2
		atomics_vector[instr->atom_addr] =
 8010252:	687a      	ldr	r2, [r7, #4]
 8010254:	78d2      	ldrb	r2, [r2, #3]
 8010256:	4614      	mov	r4, r2
			compare_int[instr->cond](signal, instr->comp.b);
 8010258:	4798      	blx	r3
 801025a:	4603      	mov	r3, r0
 801025c:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 801025e:	4b06      	ldr	r3, [pc, #24]	; (8010278 <op_bool+0xa4>)
 8010260:	551a      	strb	r2, [r3, r4]
}
 8010262:	bf00      	nop
 8010264:	3714      	adds	r7, #20
 8010266:	46bd      	mov	sp, r7
 8010268:	bd90      	pop	{r4, r7, pc}
 801026a:	bf00      	nop
 801026c:	200082b0 	.word	0x200082b0
 8010270:	08017fd8 	.word	0x08017fd8
 8010274:	2000001c 	.word	0x2000001c
 8010278:	2001ffb0 	.word	0x2001ffb0

0801027c <op_int>:

void op_int(at_instruction_t *instr)
{
 801027c:	b590      	push	{r4, r7, lr}
 801027e:	b085      	sub	sp, #20
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
	int32_t signal;
	sscanf(signals_vector[instr->sig_addr], "%ld", &signal);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	789b      	ldrb	r3, [r3, #2]
 8010288:	461a      	mov	r2, r3
 801028a:	4b20      	ldr	r3, [pc, #128]	; (801030c <op_int+0x90>)
 801028c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010290:	f107 020c 	add.w	r2, r7, #12
 8010294:	491e      	ldr	r1, [pc, #120]	; (8010310 <op_int+0x94>)
 8010296:	4618      	mov	r0, r3
 8010298:	f003 fd0a 	bl	8013cb0 <siscanf>

	if(instr->comp_is_sig) {
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	791b      	ldrb	r3, [r3, #4]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d01d      	beq.n	80102e0 <op_int+0x64>
		int32_t comp_sig;
		sscanf(signals_vector[instr->comp.s], "%ld", &comp_sig);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80102aa:	461a      	mov	r2, r3
 80102ac:	4b17      	ldr	r3, [pc, #92]	; (801030c <op_int+0x90>)
 80102ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102b2:	f107 0208 	add.w	r2, r7, #8
 80102b6:	4916      	ldr	r1, [pc, #88]	; (8010310 <op_int+0x94>)
 80102b8:	4618      	mov	r0, r3
 80102ba:	f003 fcf9 	bl	8013cb0 <siscanf>
		atomics_vector[instr->atom_addr] =
			compare_int[instr->cond](signal, comp_sig);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	461a      	mov	r2, r3
 80102c4:	4b13      	ldr	r3, [pc, #76]	; (8010314 <op_int+0x98>)
 80102c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102ca:	68f8      	ldr	r0, [r7, #12]
 80102cc:	68b9      	ldr	r1, [r7, #8]
		atomics_vector[instr->atom_addr] =
 80102ce:	687a      	ldr	r2, [r7, #4]
 80102d0:	78d2      	ldrb	r2, [r2, #3]
 80102d2:	4614      	mov	r4, r2
			compare_int[instr->cond](signal, comp_sig);
 80102d4:	4798      	blx	r3
 80102d6:	4603      	mov	r3, r0
 80102d8:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 80102da:	4b0f      	ldr	r3, [pc, #60]	; (8010318 <op_int+0x9c>)
 80102dc:	551a      	strb	r2, [r3, r4]
	} else {
		atomics_vector[instr->atom_addr] =
			compare_int[instr->cond](signal, instr->comp.i);
	}
}
 80102de:	e010      	b.n	8010302 <op_int+0x86>
			compare_int[instr->cond](signal, instr->comp.i);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	461a      	mov	r2, r3
 80102e6:	4b0b      	ldr	r3, [pc, #44]	; (8010314 <op_int+0x98>)
 80102e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102ec:	68f8      	ldr	r0, [r7, #12]
 80102ee:	687a      	ldr	r2, [r7, #4]
 80102f0:	6891      	ldr	r1, [r2, #8]
		atomics_vector[instr->atom_addr] =
 80102f2:	687a      	ldr	r2, [r7, #4]
 80102f4:	78d2      	ldrb	r2, [r2, #3]
 80102f6:	4614      	mov	r4, r2
			compare_int[instr->cond](signal, instr->comp.i);
 80102f8:	4798      	blx	r3
 80102fa:	4603      	mov	r3, r0
 80102fc:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 80102fe:	4b06      	ldr	r3, [pc, #24]	; (8010318 <op_int+0x9c>)
 8010300:	551a      	strb	r2, [r3, r4]
}
 8010302:	bf00      	nop
 8010304:	3714      	adds	r7, #20
 8010306:	46bd      	mov	sp, r7
 8010308:	bd90      	pop	{r4, r7, pc}
 801030a:	bf00      	nop
 801030c:	200082b0 	.word	0x200082b0
 8010310:	08017fd4 	.word	0x08017fd4
 8010314:	2000001c 	.word	0x2000001c
 8010318:	2001ffb0 	.word	0x2001ffb0

0801031c <op_double>:

void op_double(at_instruction_t *instr)
{
 801031c:	b590      	push	{r4, r7, lr}
 801031e:	b087      	sub	sp, #28
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
	double signal;
	sscanf(signals_vector[instr->sig_addr], "%lf", &signal);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	789b      	ldrb	r3, [r3, #2]
 8010328:	461a      	mov	r2, r3
 801032a:	4b2a      	ldr	r3, [pc, #168]	; (80103d4 <op_double+0xb8>)
 801032c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010330:	f107 0210 	add.w	r2, r7, #16
 8010334:	4928      	ldr	r1, [pc, #160]	; (80103d8 <op_double+0xbc>)
 8010336:	4618      	mov	r0, r3
 8010338:	f003 fcba 	bl	8013cb0 <siscanf>

	if(instr->comp_is_sig) {
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	791b      	ldrb	r3, [r3, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d027      	beq.n	8010394 <op_double+0x78>
		double comp_sig;
		sscanf(signals_vector[instr->comp.s], "%lf", &comp_sig);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801034a:	461a      	mov	r2, r3
 801034c:	4b21      	ldr	r3, [pc, #132]	; (80103d4 <op_double+0xb8>)
 801034e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010352:	f107 0208 	add.w	r2, r7, #8
 8010356:	4920      	ldr	r1, [pc, #128]	; (80103d8 <op_double+0xbc>)
 8010358:	4618      	mov	r0, r3
 801035a:	f003 fca9 	bl	8013cb0 <siscanf>
		atomics_vector[instr->atom_addr] =
			compare_double[instr->cond](signal, comp_sig);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	4b1d      	ldr	r3, [pc, #116]	; (80103dc <op_double+0xc0>)
 8010366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801036a:	ed97 7b04 	vldr	d7, [r7, #16]
 801036e:	ed97 6b02 	vldr	d6, [r7, #8]
		atomics_vector[instr->atom_addr] =
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	78d2      	ldrb	r2, [r2, #3]
 8010376:	4614      	mov	r4, r2
			compare_double[instr->cond](signal, comp_sig);
 8010378:	eeb0 1a46 	vmov.f32	s2, s12
 801037c:	eef0 1a66 	vmov.f32	s3, s13
 8010380:	eeb0 0a47 	vmov.f32	s0, s14
 8010384:	eef0 0a67 	vmov.f32	s1, s15
 8010388:	4798      	blx	r3
 801038a:	4603      	mov	r3, r0
 801038c:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 801038e:	4b14      	ldr	r3, [pc, #80]	; (80103e0 <op_double+0xc4>)
 8010390:	551a      	strb	r2, [r3, r4]
	} else {
		atomics_vector[instr->atom_addr] =
			compare_double[instr->cond](signal, instr->comp.d);
	}
}
 8010392:	e01a      	b.n	80103ca <op_double+0xae>
			compare_double[instr->cond](signal, instr->comp.d);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	461a      	mov	r2, r3
 801039a:	4b10      	ldr	r3, [pc, #64]	; (80103dc <op_double+0xc0>)
 801039c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80103a4:	687a      	ldr	r2, [r7, #4]
 80103a6:	ed92 6b02 	vldr	d6, [r2, #8]
		atomics_vector[instr->atom_addr] =
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	78d2      	ldrb	r2, [r2, #3]
 80103ae:	4614      	mov	r4, r2
			compare_double[instr->cond](signal, instr->comp.d);
 80103b0:	eeb0 1a46 	vmov.f32	s2, s12
 80103b4:	eef0 1a66 	vmov.f32	s3, s13
 80103b8:	eeb0 0a47 	vmov.f32	s0, s14
 80103bc:	eef0 0a67 	vmov.f32	s1, s15
 80103c0:	4798      	blx	r3
 80103c2:	4603      	mov	r3, r0
 80103c4:	461a      	mov	r2, r3
		atomics_vector[instr->atom_addr] =
 80103c6:	4b06      	ldr	r3, [pc, #24]	; (80103e0 <op_double+0xc4>)
 80103c8:	551a      	strb	r2, [r3, r4]
}
 80103ca:	bf00      	nop
 80103cc:	371c      	adds	r7, #28
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd90      	pop	{r4, r7, pc}
 80103d2:	bf00      	nop
 80103d4:	200082b0 	.word	0x200082b0
 80103d8:	08017fd0 	.word	0x08017fd0
 80103dc:	20000034 	.word	0x20000034
 80103e0:	2001ffb0 	.word	0x2001ffb0

080103e4 <op_error>:

void op_error(at_instruction_t *instr) {
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
	printf("Error: invalid opcode %d at addr %p\n", instr->filter, (void *) instr);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	785b      	ldrb	r3, [r3, #1]
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	4619      	mov	r1, r3
 80103f4:	4803      	ldr	r0, [pc, #12]	; (8010404 <op_error+0x20>)
 80103f6:	f003 fb97 	bl	8013b28 <iprintf>
}
 80103fa:	bf00      	nop
 80103fc:	3708      	adds	r7, #8
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}
 8010402:	bf00      	nop
 8010404:	08017fe0 	.word	0x08017fe0

08010408 <abs_diff_angle>:

//------------------------------------------------------------
//	input new data x to filter; execute filter and populate
//	output buffer
//------------------------------------------------------------
double abs_diff_angle(double a1, double a2){
 8010408:	b580      	push	{r7, lr}
 801040a:	b08a      	sub	sp, #40	; 0x28
 801040c:	af00      	add	r7, sp, #0
 801040e:	ed87 0b02 	vstr	d0, [r7, #8]
 8010412:	ed87 1b00 	vstr	d1, [r7]
  if (a1 < 0) a1 = a1 + 360.0;
 8010416:	f04f 0200 	mov.w	r2, #0
 801041a:	f04f 0300 	mov.w	r3, #0
 801041e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010422:	f7f0 fb6b 	bl	8000afc <__aeabi_dcmplt>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d00a      	beq.n	8010442 <abs_diff_angle+0x3a>
 801042c:	f04f 0200 	mov.w	r2, #0
 8010430:	4b28      	ldr	r3, [pc, #160]	; (80104d4 <abs_diff_angle+0xcc>)
 8010432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010436:	f7ef ff39 	bl	80002ac <__adddf3>
 801043a:	4602      	mov	r2, r0
 801043c:	460b      	mov	r3, r1
 801043e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (a2 < 0) a2 = a2 + 360.0;
 8010442:	f04f 0200 	mov.w	r2, #0
 8010446:	f04f 0300 	mov.w	r3, #0
 801044a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801044e:	f7f0 fb55 	bl	8000afc <__aeabi_dcmplt>
 8010452:	4603      	mov	r3, r0
 8010454:	2b00      	cmp	r3, #0
 8010456:	d00a      	beq.n	801046e <abs_diff_angle+0x66>
 8010458:	f04f 0200 	mov.w	r2, #0
 801045c:	4b1d      	ldr	r3, [pc, #116]	; (80104d4 <abs_diff_angle+0xcc>)
 801045e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8010462:	f7ef ff23 	bl	80002ac <__adddf3>
 8010466:	4602      	mov	r2, r0
 8010468:	460b      	mov	r3, r1
 801046a:	e9c7 2300 	strd	r2, r3, [r7]
  double d = (double)fabs(a1 - a2);
 801046e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010472:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010476:	f7ef ff17 	bl	80002a8 <__aeabi_dsub>
 801047a:	4602      	mov	r2, r0
 801047c:	460b      	mov	r3, r1
 801047e:	4611      	mov	r1, r2
 8010480:	6239      	str	r1, [r7, #32]
 8010482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010486:	627b      	str	r3, [r7, #36]	; 0x24
  double c = 360.0 - d;
 8010488:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801048c:	f04f 0000 	mov.w	r0, #0
 8010490:	4910      	ldr	r1, [pc, #64]	; (80104d4 <abs_diff_angle+0xcc>)
 8010492:	f7ef ff09 	bl	80002a8 <__aeabi_dsub>
 8010496:	4602      	mov	r2, r0
 8010498:	460b      	mov	r3, r1
 801049a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double mn = d < c ? d : c;
 801049e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80104a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80104a6:	f7f0 fb29 	bl	8000afc <__aeabi_dcmplt>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d002      	beq.n	80104b6 <abs_diff_angle+0xae>
 80104b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80104b4:	e001      	b.n	80104ba <abs_diff_angle+0xb2>
 80104b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80104ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return mn;
 80104be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80104c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80104c6:	eeb0 0a47 	vmov.f32	s0, s14
 80104ca:	eef0 0a67 	vmov.f32	s1, s15
 80104ce:	3728      	adds	r7, #40	; 0x28
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	40768000 	.word	0x40768000

080104d8 <filter_movavg_init>:

#include <stdlib.h>
#include <stdio.h>
#include "filter_movavg.h"

movAvg_t *filter_movavg_init(uint16_t filter_size) {
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	4603      	mov	r3, r0
 80104e0:	80fb      	strh	r3, [r7, #6]

	int32_t *filt_buffer = (int32_t *) malloc(sizeof(int32_t) * filter_size);
 80104e2:	88fb      	ldrh	r3, [r7, #6]
 80104e4:	009b      	lsls	r3, r3, #2
 80104e6:	4618      	mov	r0, r3
 80104e8:	f002 f9c8 	bl	801287c <malloc>
 80104ec:	4603      	mov	r3, r0
 80104ee:	60fb      	str	r3, [r7, #12]
	movAvg_t *movavg = (movAvg_t *) malloc(sizeof(movAvg_t));
 80104f0:	2018      	movs	r0, #24
 80104f2:	f002 f9c3 	bl	801287c <malloc>
 80104f6:	4603      	mov	r3, r0
 80104f8:	60bb      	str	r3, [r7, #8]
	movavg->buffer = filt_buffer;
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	601a      	str	r2, [r3, #0]
	movavg->sum = 0;
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	2200      	movs	r2, #0
 8010504:	605a      	str	r2, [r3, #4]
	movavg->avg = 0;
 8010506:	68b9      	ldr	r1, [r7, #8]
 8010508:	f04f 0200 	mov.w	r2, #0
 801050c:	f04f 0300 	mov.w	r3, #0
 8010510:	e9c1 2302 	strd	r2, r3, [r1, #8]
	movavg->head = 0;
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	2200      	movs	r2, #0
 8010518:	821a      	strh	r2, [r3, #16]
	movavg->num_elems = 0;
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	2200      	movs	r2, #0
 801051e:	825a      	strh	r2, [r3, #18]
	movavg->size = filter_size;
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	88fa      	ldrh	r2, [r7, #6]
 8010524:	829a      	strh	r2, [r3, #20]

	return movavg;
 8010526:	68bb      	ldr	r3, [r7, #8]

}
 8010528:	4618      	mov	r0, r3
 801052a:	3710      	adds	r7, #16
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}

08010530 <filter_movavg_update_data>:

//----------------------------------------------------------------
//	update moving avg filter with new data "data"
//----------------------------------------------------------------
void filter_movavg_update_data(movAvg_t *movavg, int32_t new_data) {
 8010530:	b5b0      	push	{r4, r5, r7, lr}
 8010532:	b084      	sub	sp, #16
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
 8010538:	6039      	str	r1, [r7, #0]

	int32_t old_data;

	if(movavg->num_elems == movavg->size) {
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	8a5a      	ldrh	r2, [r3, #18]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	8a9b      	ldrh	r3, [r3, #20]
 8010542:	429a      	cmp	r2, r3
 8010544:	d10e      	bne.n	8010564 <filter_movavg_update_data+0x34>
		// Buffer is full
		old_data = movavg->buffer[movavg->head];
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	8a1b      	ldrh	r3, [r3, #16]
 801054e:	009b      	lsls	r3, r3, #2
 8010550:	4413      	add	r3, r2
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	60fb      	str	r3, [r7, #12]
		movavg->sum -= old_data;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	685a      	ldr	r2, [r3, #4]
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	1ad2      	subs	r2, r2, r3
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	605a      	str	r2, [r3, #4]
 8010562:	e005      	b.n	8010570 <filter_movavg_update_data+0x40>
	} else {
		// Buffer is not full
		movavg->num_elems++;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	8a5b      	ldrh	r3, [r3, #18]
 8010568:	3301      	adds	r3, #1
 801056a:	b29a      	uxth	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	825a      	strh	r2, [r3, #18]
	}

	movavg->buffer[movavg->head] = new_data;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	8a1b      	ldrh	r3, [r3, #16]
 8010578:	009b      	lsls	r3, r3, #2
 801057a:	4413      	add	r3, r2
 801057c:	683a      	ldr	r2, [r7, #0]
 801057e:	601a      	str	r2, [r3, #0]
	movavg->sum += new_data;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	685a      	ldr	r2, [r3, #4]
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	441a      	add	r2, r3
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	605a      	str	r2, [r3, #4]

	movavg->avg = (double)movavg->sum / (double)movavg->num_elems;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	4618      	mov	r0, r3
 8010592:	f7ef ffd7 	bl	8000544 <__aeabi_i2d>
 8010596:	4604      	mov	r4, r0
 8010598:	460d      	mov	r5, r1
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	8a5b      	ldrh	r3, [r3, #18]
 801059e:	4618      	mov	r0, r3
 80105a0:	f7ef ffc0 	bl	8000524 <__aeabi_ui2d>
 80105a4:	4602      	mov	r2, r0
 80105a6:	460b      	mov	r3, r1
 80105a8:	4620      	mov	r0, r4
 80105aa:	4629      	mov	r1, r5
 80105ac:	f7f0 f95e 	bl	800086c <__aeabi_ddiv>
 80105b0:	4602      	mov	r2, r0
 80105b2:	460b      	mov	r3, r1
 80105b4:	6879      	ldr	r1, [r7, #4]
 80105b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	movavg->head = (movavg->head + 1) % movavg->size;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	8a1b      	ldrh	r3, [r3, #16]
 80105be:	3301      	adds	r3, #1
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	8a92      	ldrh	r2, [r2, #20]
 80105c4:	fb93 f1f2 	sdiv	r1, r3, r2
 80105c8:	fb02 f201 	mul.w	r2, r2, r1
 80105cc:	1a9b      	subs	r3, r3, r2
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	821a      	strh	r2, [r3, #16]

}
 80105d4:	bf00      	nop
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bdb0      	pop	{r4, r5, r7, pc}

080105dc <filter_movavg_get>:

//----------------------------------------------------------------
//	get the average value
//----------------------------------------------------------------
double filter_movavg_get(movAvg_t *movavg) {
 80105dc:	b480      	push	{r7}
 80105de:	b083      	sub	sp, #12
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
	return movavg->avg;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80105ea:	ec43 2b17 	vmov	d7, r2, r3
}
 80105ee:	eeb0 0a47 	vmov.f32	s0, s14
 80105f2:	eef0 0a67 	vmov.f32	s1, s15
 80105f6:	370c      	adds	r7, #12
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <filter_rate_update_data>:

//-----------------------------------------------------------------
//	update rate filter and return current rate
//-----------------------------------------------------------------
double filter_rate_update_data(double x, double *prev)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b086      	sub	sp, #24
 8010604:	af00      	add	r7, sp, #0
 8010606:	ed87 0b02 	vstr	d0, [r7, #8]
 801060a:	6078      	str	r0, [r7, #4]
	double rate;

	rate = x - *prev;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010616:	f7ef fe47 	bl	80002a8 <__aeabi_dsub>
 801061a:	4602      	mov	r2, r0
 801061c:	460b      	mov	r3, r1
 801061e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	*prev = x;
 8010622:	6879      	ldr	r1, [r7, #4]
 8010624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010628:	e9c1 2300 	strd	r2, r3, [r1]

	return rate;
 801062c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010630:	ec43 2b17 	vmov	d7, r2, r3
}
 8010634:	eeb0 0a47 	vmov.f32	s0, s14
 8010638:	eef0 0a67 	vmov.f32	s1, s15
 801063c:	3718      	adds	r7, #24
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <TL_config>:
#include "TL_queue_pt.h"
#include "parse.h"

#ifndef CONFIG // TODO: Do we need to conditionally compile these?
void TL_config(const char* ftm, const char* fti, const char* ftscq, const char* ptm, const char* pti)
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b084      	sub	sp, #16
 8010646:	af00      	add	r7, sp, #0
 8010648:	60f8      	str	r0, [r7, #12]
 801064a:	60b9      	str	r1, [r7, #8]
 801064c:	607a      	str	r2, [r7, #4]
 801064e:	603b      	str	r3, [r7, #0]
    // TODO: Does this crash on bad bins?
    // TODO: Weird memory stuff to be checked
    parse_inst_ft_file(ftm);
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	f001 fc7d 	bl	8011f50 <parse_inst_ft_file>
    parse_interval_ft_file(fti);
 8010656:	68b8      	ldr	r0, [r7, #8]
 8010658:	f001 fd26 	bl	80120a8 <parse_interval_ft_file>
    parse_scq_size_file(ftscq);
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f001 fdcb 	bl	80121f8 <parse_scq_size_file>

    parse_inst_pt_file(ptm);
 8010662:	6838      	ldr	r0, [r7, #0]
 8010664:	f001 fcca 	bl	8011ffc <parse_inst_pt_file>
    parse_interval_pt_file(pti);
 8010668:	69b8      	ldr	r0, [r7, #24]
 801066a:	f001 fd71 	bl	8012150 <parse_interval_pt_file>
}
 801066e:	bf00      	nop
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}
	...

08010678 <TL_init>:
        perror ( aux ); /* why didn't the file open? */
    }
}

int TL_init()
{
 8010678:	b480      	push	{r7}
 801067a:	b089      	sub	sp, #36	; 0x24
 801067c:	af00      	add	r7, sp, #0
    int i;

    t_now = 0;
 801067e:	4b63      	ldr	r3, [pc, #396]	; (801080c <TL_init+0x194>)
 8010680:	2200      	movs	r2, #0
 8010682:	601a      	str	r2, [r3, #0]
    r2u2_errno = 0;
 8010684:	4b62      	ldr	r3, [pc, #392]	; (8010810 <TL_init+0x198>)
 8010686:	2200      	movs	r2, #0
 8010688:	601a      	str	r2, [r3, #0]
    //
    // reset execution engine (TBD)
    // initialize input and output vectors
    // and local memories
    //
    for (i=0; i<N_INSTRUCTIONS;i++){
 801068a:	2300      	movs	r3, #0
 801068c:	61fb      	str	r3, [r7, #28]
 801068e:	e011      	b.n	80106b4 <TL_init+0x3c>
        //
        // initialize PT results
        //
        results_pt[i]= false;
 8010690:	4a60      	ldr	r2, [pc, #384]	; (8010814 <TL_init+0x19c>)
 8010692:	69fb      	ldr	r3, [r7, #28]
 8010694:	4413      	add	r3, r2
 8010696:	2200      	movs	r2, #0
 8010698:	701a      	strb	r2, [r3, #0]
        results_pt_prev[i]= false;
 801069a:	4a5f      	ldr	r2, [pc, #380]	; (8010818 <TL_init+0x1a0>)
 801069c:	69fb      	ldr	r3, [r7, #28]
 801069e:	4413      	add	r3, r2
 80106a0:	2200      	movs	r2, #0
 80106a2:	701a      	strb	r2, [r3, #0]
        results_pt_rising[i] = TL_INF;
 80106a4:	4a5d      	ldr	r2, [pc, #372]	; (801081c <TL_init+0x1a4>)
 80106a6:	69fb      	ldr	r3, [r7, #28]
 80106a8:	495d      	ldr	r1, [pc, #372]	; (8010820 <TL_init+0x1a8>)
 80106aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i=0; i<N_INSTRUCTIONS;i++){
 80106ae:	69fb      	ldr	r3, [r7, #28]
 80106b0:	3301      	adds	r3, #1
 80106b2:	61fb      	str	r3, [r7, #28]
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	2bff      	cmp	r3, #255	; 0xff
 80106b8:	ddea      	ble.n	8010690 <TL_init+0x18>
    //}

    //
    // initialize atomics
    //
    for (i = 0; i < N_ATOMICS; i++) {
 80106ba:	2300      	movs	r3, #0
 80106bc:	61fb      	str	r3, [r7, #28]
 80106be:	e00c      	b.n	80106da <TL_init+0x62>
        atomics_vector[i] = false;
 80106c0:	4a58      	ldr	r2, [pc, #352]	; (8010824 <TL_init+0x1ac>)
 80106c2:	69fb      	ldr	r3, [r7, #28]
 80106c4:	4413      	add	r3, r2
 80106c6:	2200      	movs	r2, #0
 80106c8:	701a      	strb	r2, [r3, #0]
        atomics_vector_prev[i] = false;
 80106ca:	4a57      	ldr	r2, [pc, #348]	; (8010828 <TL_init+0x1b0>)
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	4413      	add	r3, r2
 80106d0:	2200      	movs	r2, #0
 80106d2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < N_ATOMICS; i++) {
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	3301      	adds	r3, #1
 80106d8:	61fb      	str	r3, [r7, #28]
 80106da:	69fb      	ldr	r3, [r7, #28]
 80106dc:	2bff      	cmp	r3, #255	; 0xff
 80106de:	ddef      	ble.n	80106c0 <TL_init+0x48>
        r2u2_errno = 1;
        return 1; // TODO: Error codes
    }

    // set up pt queues
    for (i=0; i< N_PT_QUEUES;i++){
 80106e0:	2300      	movs	r3, #0
 80106e2:	61fb      	str	r3, [r7, #28]
 80106e4:	e021      	b.n	801072a <TL_init+0xb2>
        pt_box_queues[i].head = 0;
 80106e6:	4a51      	ldr	r2, [pc, #324]	; (801082c <TL_init+0x1b4>)
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	011b      	lsls	r3, r3, #4
 80106ec:	4413      	add	r3, r2
 80106ee:	2200      	movs	r2, #0
 80106f0:	601a      	str	r2, [r3, #0]
        pt_box_queues[i].tail = 0;
 80106f2:	4a4e      	ldr	r2, [pc, #312]	; (801082c <TL_init+0x1b4>)
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	011b      	lsls	r3, r3, #4
 80106f8:	4413      	add	r3, r2
 80106fa:	3304      	adds	r3, #4
 80106fc:	2200      	movs	r2, #0
 80106fe:	601a      	str	r2, [r3, #0]
        pt_box_queues[i].n_elts = 0;
 8010700:	4a4a      	ldr	r2, [pc, #296]	; (801082c <TL_init+0x1b4>)
 8010702:	69fb      	ldr	r3, [r7, #28]
 8010704:	011b      	lsls	r3, r3, #4
 8010706:	4413      	add	r3, r2
 8010708:	3308      	adds	r3, #8
 801070a:	2200      	movs	r2, #0
 801070c:	601a      	str	r2, [r3, #0]
        pt_box_queues[i].queue = &(pt_box_queue_mem[i * L_DOT_BUFFER]);
 801070e:	69fb      	ldr	r3, [r7, #28]
 8010710:	019b      	lsls	r3, r3, #6
 8010712:	00db      	lsls	r3, r3, #3
 8010714:	4a46      	ldr	r2, [pc, #280]	; (8010830 <TL_init+0x1b8>)
 8010716:	441a      	add	r2, r3
 8010718:	4944      	ldr	r1, [pc, #272]	; (801082c <TL_init+0x1b4>)
 801071a:	69fb      	ldr	r3, [r7, #28]
 801071c:	011b      	lsls	r3, r3, #4
 801071e:	440b      	add	r3, r1
 8010720:	330c      	adds	r3, #12
 8010722:	601a      	str	r2, [r3, #0]
    for (i=0; i< N_PT_QUEUES;i++){
 8010724:	69fb      	ldr	r3, [r7, #28]
 8010726:	3301      	adds	r3, #1
 8010728:	61fb      	str	r3, [r7, #28]
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	2b7f      	cmp	r3, #127	; 0x7f
 801072e:	ddda      	ble.n	80106e6 <TL_init+0x6e>
     }

    // Initialize ft-sync queues
    for (i = 0; i < N_SUBFORMULA_SNYC_QUEUES; i++) {
 8010730:	2300      	movs	r3, #0
 8010732:	61fb      	str	r3, [r7, #28]
 8010734:	e060      	b.n	80107f8 <TL_init+0x180>
        ft_sync_queues[i].wr_ptr = 0;
 8010736:	4a3f      	ldr	r2, [pc, #252]	; (8010834 <TL_init+0x1bc>)
 8010738:	69fb      	ldr	r3, [r7, #28]
 801073a:	015b      	lsls	r3, r3, #5
 801073c:	4413      	add	r3, r2
 801073e:	2200      	movs	r2, #0
 8010740:	601a      	str	r2, [r3, #0]
        ft_sync_queues[i].rd_ptr = 0;
 8010742:	4a3c      	ldr	r2, [pc, #240]	; (8010834 <TL_init+0x1bc>)
 8010744:	69fb      	ldr	r3, [r7, #28]
 8010746:	015b      	lsls	r3, r3, #5
 8010748:	4413      	add	r3, r2
 801074a:	3304      	adds	r3, #4
 801074c:	2200      	movs	r2, #0
 801074e:	601a      	str	r2, [r3, #0]
        ft_sync_queues[i].rd_ptr2 = 0;
 8010750:	4a38      	ldr	r2, [pc, #224]	; (8010834 <TL_init+0x1bc>)
 8010752:	69fb      	ldr	r3, [r7, #28]
 8010754:	015b      	lsls	r3, r3, #5
 8010756:	4413      	add	r3, r2
 8010758:	3308      	adds	r3, #8
 801075a:	2200      	movs	r2, #0
 801075c:	601a      	str	r2, [r3, #0]
        ft_sync_queues[i].m_edge = 0;
 801075e:	4a35      	ldr	r2, [pc, #212]	; (8010834 <TL_init+0x1bc>)
 8010760:	69fb      	ldr	r3, [r7, #28]
 8010762:	015b      	lsls	r3, r3, #5
 8010764:	4413      	add	r3, r2
 8010766:	330c      	adds	r3, #12
 8010768:	2200      	movs	r2, #0
 801076a:	601a      	str	r2, [r3, #0]
        ft_sync_queues[i].preResult = 0;
 801076c:	4a31      	ldr	r2, [pc, #196]	; (8010834 <TL_init+0x1bc>)
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	015b      	lsls	r3, r3, #5
 8010772:	4413      	add	r3, r2
 8010774:	3318      	adds	r3, #24
 8010776:	2200      	movs	r2, #0
 8010778:	601a      	str	r2, [r3, #0]
        ft_sync_queues[i].desired_time_stamp = 0;
 801077a:	4a2e      	ldr	r2, [pc, #184]	; (8010834 <TL_init+0x1bc>)
 801077c:	69fb      	ldr	r3, [r7, #28]
 801077e:	015b      	lsls	r3, r3, #5
 8010780:	4413      	add	r3, r2
 8010782:	331c      	adds	r3, #28
 8010784:	2200      	movs	r2, #0
 8010786:	601a      	str	r2, [r3, #0]
        switch (instruction_mem_ft[i].opcode) {
 8010788:	492b      	ldr	r1, [pc, #172]	; (8010838 <TL_init+0x1c0>)
 801078a:	69fa      	ldr	r2, [r7, #28]
 801078c:	4613      	mov	r3, r2
 801078e:	00db      	lsls	r3, r3, #3
 8010790:	1a9b      	subs	r3, r3, r2
 8010792:	440b      	add	r3, r1
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	2b17      	cmp	r3, #23
 8010798:	d002      	beq.n	80107a0 <TL_init+0x128>
 801079a:	2b1a      	cmp	r3, #26
 801079c:	d010      	beq.n	80107c0 <TL_init+0x148>
 801079e:	e01a      	b.n	80107d6 <TL_init+0x15e>
        case OP_FT_GLOBALLY_INTERVAL:
            ft_sync_queues[i].pre = (elt_ft_queue_t) { false, -1 };
 80107a0:	4a24      	ldr	r2, [pc, #144]	; (8010834 <TL_init+0x1bc>)
 80107a2:	69fb      	ldr	r3, [r7, #28]
 80107a4:	015b      	lsls	r3, r3, #5
 80107a6:	4413      	add	r3, r2
 80107a8:	3310      	adds	r3, #16
 80107aa:	2200      	movs	r2, #0
 80107ac:	701a      	strb	r2, [r3, #0]
 80107ae:	4a21      	ldr	r2, [pc, #132]	; (8010834 <TL_init+0x1bc>)
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	015b      	lsls	r3, r3, #5
 80107b4:	4413      	add	r3, r2
 80107b6:	3314      	adds	r3, #20
 80107b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80107bc:	601a      	str	r2, [r3, #0]
            break;
 80107be:	e018      	b.n	80107f2 <TL_init+0x17a>
        case OP_FT_UNTIL_INTERVAL:
            ft_sync_queues[i].pre = (elt_ft_queue_t) { true, -1 };
 80107c0:	4a1c      	ldr	r2, [pc, #112]	; (8010834 <TL_init+0x1bc>)
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	015b      	lsls	r3, r3, #5
 80107c6:	4413      	add	r3, r2
 80107c8:	3310      	adds	r3, #16
 80107ca:	4a1c      	ldr	r2, [pc, #112]	; (801083c <TL_init+0x1c4>)
 80107cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107d0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80107d4:	e00d      	b.n	80107f2 <TL_init+0x17a>
        default:
            ft_sync_queues[i].pre = (elt_ft_queue_t) { true, 0 };
 80107d6:	4a17      	ldr	r2, [pc, #92]	; (8010834 <TL_init+0x1bc>)
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	015b      	lsls	r3, r3, #5
 80107dc:	4413      	add	r3, r2
 80107de:	3310      	adds	r3, #16
 80107e0:	2201      	movs	r2, #1
 80107e2:	701a      	strb	r2, [r3, #0]
 80107e4:	4a13      	ldr	r2, [pc, #76]	; (8010834 <TL_init+0x1bc>)
 80107e6:	69fb      	ldr	r3, [r7, #28]
 80107e8:	015b      	lsls	r3, r3, #5
 80107ea:	4413      	add	r3, r2
 80107ec:	3314      	adds	r3, #20
 80107ee:	2200      	movs	r2, #0
 80107f0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < N_SUBFORMULA_SNYC_QUEUES; i++) {
 80107f2:	69fb      	ldr	r3, [r7, #28]
 80107f4:	3301      	adds	r3, #1
 80107f6:	61fb      	str	r3, [r7, #28]
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	2bff      	cmp	r3, #255	; 0xff
 80107fc:	dd9b      	ble.n	8010736 <TL_init+0xbe>
        }
    }

    return 0;
 80107fe:	2300      	movs	r3, #0
}
 8010800:	4618      	mov	r0, r3
 8010802:	3724      	adds	r7, #36	; 0x24
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr
 801080c:	200200b0 	.word	0x200200b0
 8010810:	20007c64 	.word	0x20007c64
 8010814:	2001fab0 	.word	0x2001fab0
 8010818:	2000a2b0 	.word	0x2000a2b0
 801081c:	2000a3b0 	.word	0x2000a3b0
 8010820:	3fff0001 	.word	0x3fff0001
 8010824:	2001ffb0 	.word	0x2001ffb0
 8010828:	200200b4 	.word	0x200200b4
 801082c:	2000a7b0 	.word	0x2000a7b0
 8010830:	2000f6b0 	.word	0x2000f6b0
 8010834:	2000d6b0 	.word	0x2000d6b0
 8010838:	200201b4 	.word	0x200201b4
 801083c:	08018010 	.word	0x08018010

08010840 <TL_update>:

int TL_update(int results[], int* index)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]

    r2u2_errno = 0;
 801084a:	4b0d      	ldr	r3, [pc, #52]	; (8010880 <TL_update+0x40>)
 801084c:	2200      	movs	r2, #0
 801084e:	601a      	str	r2, [r3, #0]

    //TL_update_pt(log_file);
    TL_update_ft(results, index);
 8010850:	6839      	ldr	r1, [r7, #0]
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 f90e 	bl	8010a74 <TL_update_ft>

    //
    // put the current atomics into the previous one
    //
    // TODO: Would it be better to dubble flip buffers?
    memcpy(atomics_vector_prev, atomics_vector, sizeof(atomics_vector_t));
 8010858:	4a0a      	ldr	r2, [pc, #40]	; (8010884 <TL_update+0x44>)
 801085a:	4b0b      	ldr	r3, [pc, #44]	; (8010888 <TL_update+0x48>)
 801085c:	4610      	mov	r0, r2
 801085e:	4619      	mov	r1, r3
 8010860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010864:	461a      	mov	r2, r3
 8010866:	f002 f819 	bl	801289c <memcpy>

    //
    // increase time stamp
    //
    t_now++;
 801086a:	4b08      	ldr	r3, [pc, #32]	; (801088c <TL_update+0x4c>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	3301      	adds	r3, #1
 8010870:	4a06      	ldr	r2, [pc, #24]	; (801088c <TL_update+0x4c>)
 8010872:	6013      	str	r3, [r2, #0]

    return 0;
 8010874:	2300      	movs	r3, #0
}
 8010876:	4618      	mov	r0, r3
 8010878:	3708      	adds	r7, #8
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	20007c64 	.word	0x20007c64
 8010884:	200200b4 	.word	0x200200b4
 8010888:	2001ffb0 	.word	0x2001ffb0
 801088c:	200200b0 	.word	0x200200b0

08010890 <inc_ptr>:
// extern sync_queues_ft_t		ft_sync_queues;


// input ptr is relative to addr_start
// size = addr_end - addr_start+1
static inline int inc_ptr(int ptr, int size) {
 8010890:	b480      	push	{r7}
 8010892:	b083      	sub	sp, #12
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	6039      	str	r1, [r7, #0]
	if(ptr==size-1) return 0;
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	3b01      	subs	r3, #1
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d101      	bne.n	80108a8 <inc_ptr+0x18>
 80108a4:	2300      	movs	r3, #0
 80108a6:	e001      	b.n	80108ac <inc_ptr+0x1c>
	return ptr+1;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	3301      	adds	r3, #1
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	370c      	adds	r7, #12
 80108b0:	46bd      	mov	sp, r7
 80108b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b6:	4770      	bx	lr

080108b8 <dec_ptr>:
static inline int dec_ptr(int ptr, int size) {
 80108b8:	b480      	push	{r7}
 80108ba:	b083      	sub	sp, #12
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
 80108c0:	6039      	str	r1, [r7, #0]
	if(ptr==0) return size-1;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d102      	bne.n	80108ce <dec_ptr+0x16>
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	3b01      	subs	r3, #1
 80108cc:	e001      	b.n	80108d2 <dec_ptr+0x1a>
	return ptr-1;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	3b01      	subs	r3, #1
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	370c      	adds	r7, #12
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr

080108de <add>:

// add new element to the SCQ
void add(elt_ft_queue_t* const scq, int size, elt_ft_queue_t newData, int* wr_ptr) {
 80108de:	b580      	push	{r7, lr}
 80108e0:	b084      	sub	sp, #16
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	60f8      	str	r0, [r7, #12]
 80108e6:	60b9      	str	r1, [r7, #8]
 80108e8:	4639      	mov	r1, r7
 80108ea:	e881 000c 	stmia.w	r1, {r2, r3}
	#ifdef AGGREGATION
		//if ( (scq+*wr_ptr)->v_q == false && (scq+dec_ptr(*wr_ptr, size))->v_q == false) { // case during initialization
		if ( (scq+*wr_ptr)->t_q == -1 ) { // case during initialization
 80108ee:	69bb      	ldr	r3, [r7, #24]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	00db      	lsls	r3, r3, #3
 80108f4:	68fa      	ldr	r2, [r7, #12]
 80108f6:	4413      	add	r3, r2
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108fe:	d114      	bne.n	801092a <add+0x4c>
			*(scq+*wr_ptr) = newData;
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	00db      	lsls	r3, r3, #3
 8010906:	68fa      	ldr	r2, [r7, #12]
 8010908:	4413      	add	r3, r2
 801090a:	461a      	mov	r2, r3
 801090c:	463b      	mov	r3, r7
 801090e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010912:	e882 0003 	stmia.w	r2, {r0, r1}
			*wr_ptr = inc_ptr(*wr_ptr, size);
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	68b9      	ldr	r1, [r7, #8]
 801091c:	4618      	mov	r0, r3
 801091e:	f7ff ffb7 	bl	8010890 <inc_ptr>
 8010922:	4602      	mov	r2, r0
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	601a      	str	r2, [r3, #0]
			return;
 8010928:	e040      	b.n	80109ac <add+0xce>
		}
		if((scq+dec_ptr(*wr_ptr, size))->v_q == newData.v_q && \
 801092a:	69bb      	ldr	r3, [r7, #24]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	68b9      	ldr	r1, [r7, #8]
 8010930:	4618      	mov	r0, r3
 8010932:	f7ff ffc1 	bl	80108b8 <dec_ptr>
 8010936:	4603      	mov	r3, r0
 8010938:	00db      	lsls	r3, r3, #3
 801093a:	68fa      	ldr	r2, [r7, #12]
 801093c:	4413      	add	r3, r2
 801093e:	781a      	ldrb	r2, [r3, #0]
 8010940:	783b      	ldrb	r3, [r7, #0]
 8010942:	429a      	cmp	r2, r3
 8010944:	d11e      	bne.n	8010984 <add+0xa6>
			(scq+dec_ptr(*wr_ptr, size))->t_q < newData.t_q) { // assign to previous address
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	68b9      	ldr	r1, [r7, #8]
 801094c:	4618      	mov	r0, r3
 801094e:	f7ff ffb3 	bl	80108b8 <dec_ptr>
 8010952:	4603      	mov	r3, r0
 8010954:	00db      	lsls	r3, r3, #3
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	4413      	add	r3, r2
 801095a:	685a      	ldr	r2, [r3, #4]
 801095c:	687b      	ldr	r3, [r7, #4]
		if((scq+dec_ptr(*wr_ptr, size))->v_q == newData.v_q && \
 801095e:	429a      	cmp	r2, r3
 8010960:	d210      	bcs.n	8010984 <add+0xa6>
			*(scq+dec_ptr(*wr_ptr,size)) = newData;
 8010962:	69bb      	ldr	r3, [r7, #24]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	68b9      	ldr	r1, [r7, #8]
 8010968:	4618      	mov	r0, r3
 801096a:	f7ff ffa5 	bl	80108b8 <dec_ptr>
 801096e:	4603      	mov	r3, r0
 8010970:	00db      	lsls	r3, r3, #3
 8010972:	68fa      	ldr	r2, [r7, #12]
 8010974:	4413      	add	r3, r2
 8010976:	461a      	mov	r2, r3
 8010978:	463b      	mov	r3, r7
 801097a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801097e:	e882 0003 	stmia.w	r2, {r0, r1}
 8010982:	e013      	b.n	80109ac <add+0xce>
		} else {
			*(scq+*wr_ptr) = newData;
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	00db      	lsls	r3, r3, #3
 801098a:	68fa      	ldr	r2, [r7, #12]
 801098c:	4413      	add	r3, r2
 801098e:	461a      	mov	r2, r3
 8010990:	463b      	mov	r3, r7
 8010992:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010996:	e882 0003 	stmia.w	r2, {r0, r1}
			*wr_ptr = inc_ptr(*wr_ptr, size);
 801099a:	69bb      	ldr	r3, [r7, #24]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	68b9      	ldr	r1, [r7, #8]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7ff ff75 	bl	8010890 <inc_ptr>
 80109a6:	4602      	mov	r2, r0
 80109a8:	69bb      	ldr	r3, [r7, #24]
 80109aa:	601a      	str	r2, [r3, #0]
		//printf("%d,%d\n",(scq+dec_ptr(*wr_ptr,size))->v_q, (scq+dec_ptr(*wr_ptr,size))->t_q);
	#else
		*(scq+*wr_ptr) = newData;
		*wr_ptr = inc_ptr(*wr_ptr, size);
	#endif
}
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <isEmpty>:


// *scq points to the curent node info structure
// size: size of the current SCQ assign to the specific node (addr_end - addr_start + 1)
// wr_ptr and rd_ptr are relative to addr_start (counting from 0~size-1)
bool isEmpty(elt_ft_queue_t* const scq, int size, const int wr_ptr, int* rd_ptr, int desired_time_stamp){
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b084      	sub	sp, #16
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	60f8      	str	r0, [r7, #12]
 80109ba:	60b9      	str	r1, [r7, #8]
 80109bc:	607a      	str	r2, [r7, #4]
 80109be:	603b      	str	r3, [r7, #0]
	//print_scq(scq, size);
	//R2U2_TRACE_PRINT("inQueue, size: %d, rd_ptr: %d, wr_ptr: %d, desired_time_stamp: %d\n", size, *rd_ptr, wr_ptr, desired_time_stamp);
	//R2U2_TRACE_PRINT("inQueue data content: t_q: %d, v_q: %d\n", scq[1].t_q, scq[1].v_q);
	if ((int)(scq+*rd_ptr)->t_q >= desired_time_stamp) {
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	00db      	lsls	r3, r3, #3
 80109c6:	68fa      	ldr	r2, [r7, #12]
 80109c8:	4413      	add	r3, r2
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	461a      	mov	r2, r3
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	4293      	cmp	r3, r2
 80109d2:	dc01      	bgt.n	80109d8 <isEmpty+0x26>
		return false;
 80109d4:	2300      	movs	r3, #0
 80109d6:	e033      	b.n	8010a40 <isEmpty+0x8e>
	} else if (*rd_ptr!=wr_ptr){
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	687a      	ldr	r2, [r7, #4]
 80109de:	429a      	cmp	r2, r3
 80109e0:	d02d      	beq.n	8010a3e <isEmpty+0x8c>
		while(*rd_ptr!=wr_ptr && (scq+*rd_ptr)->t_q < desired_time_stamp) {
 80109e2:	e008      	b.n	80109f6 <isEmpty+0x44>
			*rd_ptr = inc_ptr(*rd_ptr, size);
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	68b9      	ldr	r1, [r7, #8]
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7ff ff50 	bl	8010890 <inc_ptr>
 80109f0:	4602      	mov	r2, r0
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	601a      	str	r2, [r3, #0]
		while(*rd_ptr!=wr_ptr && (scq+*rd_ptr)->t_q < desired_time_stamp) {
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	687a      	ldr	r2, [r7, #4]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d008      	beq.n	8010a12 <isEmpty+0x60>
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	00db      	lsls	r3, r3, #3
 8010a06:	68fa      	ldr	r2, [r7, #12]
 8010a08:	4413      	add	r3, r2
 8010a0a:	685a      	ldr	r2, [r3, #4]
 8010a0c:	69bb      	ldr	r3, [r7, #24]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d3e8      	bcc.n	80109e4 <isEmpty+0x32>
		}
		if ((scq+*rd_ptr)->t_q < desired_time_stamp) {
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	00db      	lsls	r3, r3, #3
 8010a18:	68fa      	ldr	r2, [r7, #12]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	685a      	ldr	r2, [r3, #4]
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d20a      	bcs.n	8010a3a <isEmpty+0x88>
			*rd_ptr = dec_ptr(*rd_ptr, size);
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	68b9      	ldr	r1, [r7, #8]
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f7ff ff44 	bl	80108b8 <dec_ptr>
 8010a30:	4602      	mov	r2, r0
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	601a      	str	r2, [r3, #0]
			return true;
 8010a36:	2301      	movs	r3, #1
 8010a38:	e002      	b.n	8010a40 <isEmpty+0x8e>
		} else {
			return false;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	e000      	b.n	8010a40 <isEmpty+0x8e>
		}
	} else { //*rd_ptr==wr_ptr and no result
		// this is the case when space = 1 or initialization 
		return true;
 8010a3e:	2301      	movs	r3, #1
	}
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3710      	adds	r7, #16
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <pop>:

// always check isEmpty first before pop();
elt_ft_queue_t pop(elt_ft_queue_t* scq, int rd_ptr) {
 8010a48:	b480      	push	{r7}
 8010a4a:	b085      	sub	sp, #20
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
	return scq[rd_ptr];
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	00db      	lsls	r3, r3, #3
 8010a58:	68ba      	ldr	r2, [r7, #8]
 8010a5a:	441a      	add	r2, r3
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a62:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	3714      	adds	r7, #20
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr
	...

08010a74 <TL_update_ft>:
//  TL_update_ft()
//  main routine to run the PT engine on compiled instructions
//  * executes all instructions
//  * updates results_ft and queues
//--------------------------------------------------------------------
int TL_update_ft(int results[], int* index) {
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b0f4      	sub	sp, #464	; 0x1d0
 8010a78:	af04      	add	r7, sp, #16
 8010a7a:	1d3b      	adds	r3, r7, #4
 8010a7c:	6018      	str	r0, [r3, #0]
 8010a7e:	463b      	mov	r3, r7
 8010a80:	6019      	str	r1, [r3, #0]
	int pc   = 0;
 8010a82:	2300      	movs	r3, #0
 8010a84:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	int total_progress = 0;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	int loop_progress = 0;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	*index = 0;
 8010a94:	463b      	mov	r3, r7
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	2200      	movs	r2, #0
 8010a9a:	601a      	str	r2, [r3, #0]

	do {
	    // Sequentially iterate through the program instructions
	    loop_progress = 0;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
		for(pc = 0; pc < N_INSTRUCTIONS; pc++) {
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8010aa8:	f000 bf4c 	b.w	8011944 <TL_update_ft+0xed0>
            if (instruction_mem_ft[pc].opcode == OP_END_SEQUENCE) {
 8010aac:	49a8      	ldr	r1, [pc, #672]	; (8010d50 <TL_update_ft+0x2dc>)
 8010aae:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	00db      	lsls	r3, r3, #3
 8010ab6:	1a9b      	subs	r3, r3, r2
 8010ab8:	440b      	add	r3, r1
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	2b1f      	cmp	r3, #31
 8010abe:	f000 8747 	beq.w	8011950 <TL_update_ft+0xedc>
                //R2U2_DEBUG_PRINT("PC:%d END_SEQUENCE\n", pc);
                break; // Break PC for loop
            }

                // Case statement for determining which opcode is currently in the program counter 'pc'
	        switch(instruction_mem_ft[pc].opcode){
 8010ac2:	49a3      	ldr	r1, [pc, #652]	; (8010d50 <TL_update_ft+0x2dc>)
 8010ac4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010ac8:	4613      	mov	r3, r2
 8010aca:	00db      	lsls	r3, r3, #3
 8010acc:	1a9b      	subs	r3, r3, r2
 8010ace:	440b      	add	r3, r1
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	3b0c      	subs	r3, #12
 8010ad4:	2b10      	cmp	r3, #16
 8010ad6:	f200 8721 	bhi.w	801191c <TL_update_ft+0xea8>
 8010ada:	a201      	add	r2, pc, #4	; (adr r2, 8010ae0 <TL_update_ft+0x6c>)
 8010adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae0:	08010b25 	.word	0x08010b25
 8010ae4:	0801191d 	.word	0x0801191d
 8010ae8:	0801191d 	.word	0x0801191d
 8010aec:	0801191d 	.word	0x0801191d
 8010af0:	0801191d 	.word	0x0801191d
 8010af4:	0801191d 	.word	0x0801191d
 8010af8:	0801191d 	.word	0x0801191d
 8010afc:	0801191d 	.word	0x0801191d
 8010b00:	08010d61 	.word	0x08010d61
 8010b04:	08010ef1 	.word	0x08010ef1
 8010b08:	0801191d 	.word	0x0801191d
 8010b0c:	080112c7 	.word	0x080112c7
 8010b10:	0801191d 	.word	0x0801191d
 8010b14:	0801191d 	.word	0x0801191d
 8010b18:	08011565 	.word	0x08011565
 8010b1c:	0801191d 	.word	0x0801191d
 8010b20:	08010ccf 	.word	0x08010ccf

			//----------------------------------------------------
			// OP_END, OP_END_SEQUENCE
			//----------------------------------------------------
			case OP_END: {
				int op1 = 0, scq_size_rd = 0, input_wr_ptr = 0;
 8010b24:	2300      	movs	r3, #0
 8010b26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8010b30:	2300      	movs	r3, #0
 8010b32:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	            // Declare a new pointer for the SCQ's operand
	            elt_ft_queue_t *scq_seg = NULL;
 8010b36:	2300      	movs	r3, #0
 8010b38:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	            // If the opcode type is a subformula
	            if(instruction_mem_ft[pc].op1.opnd_type == subformula) {
 8010b3c:	4984      	ldr	r1, [pc, #528]	; (8010d50 <TL_update_ft+0x2dc>)
 8010b3e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010b42:	4613      	mov	r3, r2
 8010b44:	00db      	lsls	r3, r3, #3
 8010b46:	1a9b      	subs	r3, r3, r2
 8010b48:	440b      	add	r3, r1
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	2b02      	cmp	r3, #2
 8010b50:	d12b      	bne.n	8010baa <TL_update_ft+0x136>
	                // Grab the op1 value from the instruction memory
	                op1 = instruction_mem_ft[pc].op1.value;
 8010b52:	497f      	ldr	r1, [pc, #508]	; (8010d50 <TL_update_ft+0x2dc>)
 8010b54:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010b58:	4613      	mov	r3, r2
 8010b5a:	00db      	lsls	r3, r3, #3
 8010b5c:	1a9b      	subs	r3, r3, r2
 8010b5e:	440b      	add	r3, r1
 8010b60:	3302      	adds	r3, #2
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	                // Set the SCQ's read pointer
	                scq_size_rd = addr_SCQ_map_ft[op1].end_addr - addr_SCQ_map_ft[op1].start_addr;
 8010b68:	4a7a      	ldr	r2, [pc, #488]	; (8010d54 <TL_update_ft+0x2e0>)
 8010b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010b6e:	009b      	lsls	r3, r3, #2
 8010b70:	4413      	add	r3, r2
 8010b72:	885b      	ldrh	r3, [r3, #2]
 8010b74:	4619      	mov	r1, r3
 8010b76:	4a77      	ldr	r2, [pc, #476]	; (8010d54 <TL_update_ft+0x2e0>)
 8010b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010b7c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010b80:	1acb      	subs	r3, r1, r3
 8010b82:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        	        // Grab the values within the SCQ at the start address
        	        scq_seg = &SCQ[addr_SCQ_map_ft[op1].start_addr];
 8010b86:	4a73      	ldr	r2, [pc, #460]	; (8010d54 <TL_update_ft+0x2e0>)
 8010b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010b8c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010b90:	00db      	lsls	r3, r3, #3
 8010b92:	4a71      	ldr	r2, [pc, #452]	; (8010d58 <TL_update_ft+0x2e4>)
 8010b94:	4413      	add	r3, r2
 8010b96:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
        	        // Set the input's write pointer (old queue structure)
        	        input_wr_ptr = ft_sync_queues[op1].wr_ptr;
 8010b9a:	4a70      	ldr	r2, [pc, #448]	; (8010d5c <TL_update_ft+0x2e8>)
 8010b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010ba0:	015b      	lsls	r3, r3, #5
 8010ba2:	4413      	add	r3, r2
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
        	    }
        	    // Set the SCQ's write pointer
        	    int scq_size_wr = addr_SCQ_map_ft[pc].end_addr - addr_SCQ_map_ft[pc].start_addr;
 8010baa:	4a6a      	ldr	r2, [pc, #424]	; (8010d54 <TL_update_ft+0x2e0>)
 8010bac:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	4413      	add	r3, r2
 8010bb4:	885b      	ldrh	r3, [r3, #2]
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	4a66      	ldr	r2, [pc, #408]	; (8010d54 <TL_update_ft+0x2e0>)
 8010bba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010bbe:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010bc2:	1acb      	subs	r3, r1, r3
 8010bc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
        	    int* rd_ptr = &(ft_sync_queues[pc].rd_ptr);
 8010bc8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010bcc:	015b      	lsls	r3, r3, #5
 8010bce:	4a63      	ldr	r2, [pc, #396]	; (8010d5c <TL_update_ft+0x2e8>)
 8010bd0:	4413      	add	r3, r2
 8010bd2:	3304      	adds	r3, #4
 8010bd4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        	    // While the formula is not complete, i.e., the SCQ is non-empty
        	    if(!isEmpty_cap(pc, 1, scq_seg, scq_size_rd, input_wr_ptr, rd_ptr, ft_sync_queues[pc].desired_time_stamp)) {
 8010bd8:	4a60      	ldr	r2, [pc, #384]	; (8010d5c <TL_update_ft+0x2e8>)
 8010bda:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010bde:	015b      	lsls	r3, r3, #5
 8010be0:	4413      	add	r3, r2
 8010be2:	331c      	adds	r3, #28
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	9302      	str	r3, [sp, #8]
 8010be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010bec:	9301      	str	r3, [sp, #4]
 8010bee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8010bf8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8010bfc:	2101      	movs	r1, #1
 8010bfe:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8010c02:	f000 ff21 	bl	8011a48 <isEmpty_cap>
 8010c06:	4603      	mov	r3, r0
 8010c08:	f083 0301 	eor.w	r3, r3, #1
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	f000 8688 	beq.w	8011924 <TL_update_ft+0xeb0>
        	        // Pop the sequence from the SCQ
        	        elt_ft_queue_t input = pop_cap(pc, 1, scq_seg, *rd_ptr);
 8010c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 8010c1e:	9300      	str	r3, [sp, #0]
 8010c20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8010c24:	2201      	movs	r2, #1
 8010c26:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8010c2a:	f000 ff7b 	bl	8011b24 <pop_cap>
        	        // Copy over the sequence from input to res
        	        elt_ft_queue_t res = {input.v_q,input.t_q};
 8010c2e:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 8010c32:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
 8010c36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        	        // Add the new element to the SCQ
        	        add(&SCQ[addr_SCQ_map_ft[pc].start_addr], scq_size_wr, res, &(ft_sync_queues[pc].wr_ptr));
 8010c3e:	4a45      	ldr	r2, [pc, #276]	; (8010d54 <TL_update_ft+0x2e0>)
 8010c40:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010c44:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010c48:	00db      	lsls	r3, r3, #3
 8010c4a:	4a43      	ldr	r2, [pc, #268]	; (8010d58 <TL_update_ft+0x2e4>)
 8010c4c:	1898      	adds	r0, r3, r2
 8010c4e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010c52:	015b      	lsls	r3, r3, #5
 8010c54:	4a41      	ldr	r2, [pc, #260]	; (8010d5c <TL_update_ft+0x2e8>)
 8010c56:	4413      	add	r3, r2
 8010c58:	9300      	str	r3, [sp, #0]
 8010c5a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8010c5e:	cb0c      	ldmia	r3, {r2, r3}
 8010c60:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8010c64:	f7ff fe3b 	bl	80108de <add>
					loop_progress += 1;
 8010c68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        	        // Synchronize the queues
        	        ft_sync_queues[pc].desired_time_stamp = input.t_q+1;
 8010c72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010c76:	3301      	adds	r3, #1
 8010c78:	4619      	mov	r1, r3
 8010c7a:	4a38      	ldr	r2, [pc, #224]	; (8010d5c <TL_update_ft+0x2e8>)
 8010c7c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010c80:	015b      	lsls	r3, r3, #5
 8010c82:	4413      	add	r3, r2
 8010c84:	331c      	adds	r3, #28
 8010c86:	6019      	str	r1, [r3, #0]
        	        	/* Use formula name from aux file */
	        	        fprintf(log_file,"%s:%d,%s\n", aux_str_map[(int)instruction_mem_ft[pc].op2.value], res.t_q, res.v_q?"T":"F");
        	        }
        	        #else
        	        //fprintf(log_file,"%d:%d,%s\n", (int)instruction_mem_ft[pc].op2.value, res.t_q, res.v_q?"T":"F");
        	        if(res.v_q == 0){
 8010c88:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8010c8c:	f083 0301 	eor.w	r3, r3, #1
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	f000 8646 	beq.w	8011924 <TL_update_ft+0xeb0>
        	            results[*index] = (int)instruction_mem_ft[pc].op2.value;
 8010c98:	492d      	ldr	r1, [pc, #180]	; (8010d50 <TL_update_ft+0x2dc>)
 8010c9a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	00db      	lsls	r3, r3, #3
 8010ca2:	1a9b      	subs	r3, r3, r2
 8010ca4:	440b      	add	r3, r1
 8010ca6:	3304      	adds	r3, #4
 8010ca8:	7819      	ldrb	r1, [r3, #0]
 8010caa:	463b      	mov	r3, r7
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	1d3a      	adds	r2, r7, #4
 8010cb4:	6812      	ldr	r2, [r2, #0]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	460a      	mov	r2, r1
 8010cba:	601a      	str	r2, [r3, #0]
        	            *index = *index + 1;
 8010cbc:	463b      	mov	r3, r7
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	1c5a      	adds	r2, r3, #1
 8010cc4:	463b      	mov	r3, r7
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	601a      	str	r2, [r3, #0]
        	        		// i = 3*aux_con_max;
        	        	}
        	        }
        	        #endif
				}
				break;
 8010cca:	f000 be2b 	b.w	8011924 <TL_update_ft+0xeb0>
        	//----------------------------------------------------
        	case OP_FT_LOD: {
        	    bool v;
        	    unsigned int t_e;

        	    if (total_progress == 0) // Only run first time through
 8010cce:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f040 8628 	bne.w	8011928 <TL_update_ft+0xeb4>
        	    {
	        	    // Retrieve the Boolean atomic from the pre-processing layer
	        	    read_atomic(pc, &v, &t_e);
 8010cd8:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8010cdc:	f107 03e3 	add.w	r3, r7, #227	; 0xe3
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8010ce6:	f000 fe4f 	bl	8011988 <read_atomic>


	        	    // Set 'newData' as the newly read atomic
	        	    elt_ft_queue_t newData = {v,t_e};
 8010cea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8010cee:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8010cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	        	    // Set the SCQ's write pointer
	        	    int scq_size_wr = addr_SCQ_map_ft[pc].end_addr - addr_SCQ_map_ft[pc].start_addr;
 8010cfa:	4a16      	ldr	r2, [pc, #88]	; (8010d54 <TL_update_ft+0x2e0>)
 8010cfc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	4413      	add	r3, r2
 8010d04:	885b      	ldrh	r3, [r3, #2]
 8010d06:	4619      	mov	r1, r3
 8010d08:	4a12      	ldr	r2, [pc, #72]	; (8010d54 <TL_update_ft+0x2e0>)
 8010d0a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010d0e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010d12:	1acb      	subs	r3, r1, r3
 8010d14:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

		            // And add asynchrounous results to the shared connection queue
		            add(&SCQ[addr_SCQ_map_ft[pc].start_addr], scq_size_wr, newData, &(ft_sync_queues[pc].wr_ptr));
 8010d18:	4a0e      	ldr	r2, [pc, #56]	; (8010d54 <TL_update_ft+0x2e0>)
 8010d1a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010d1e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010d22:	00db      	lsls	r3, r3, #3
 8010d24:	4a0c      	ldr	r2, [pc, #48]	; (8010d58 <TL_update_ft+0x2e4>)
 8010d26:	1898      	adds	r0, r3, r2
 8010d28:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010d2c:	015b      	lsls	r3, r3, #5
 8010d2e:	4a0b      	ldr	r2, [pc, #44]	; (8010d5c <TL_update_ft+0x2e8>)
 8010d30:	4413      	add	r3, r2
 8010d32:	9300      	str	r3, [sp, #0]
 8010d34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8010d38:	cb0c      	ldmia	r3, {r2, r3}
 8010d3a:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8010d3e:	f7ff fdce 	bl	80108de <add>
				    loop_progress += 1;
 8010d42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8010d46:	3301      	adds	r3, #1
 8010d48:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

		            //add_and_aggregate_queue_ft(&ft_sync_queues[pc], v, t_e);
        	    }
	            break;
 8010d4c:	f000 bdec 	b.w	8011928 <TL_update_ft+0xeb4>
 8010d50:	200201b4 	.word	0x200201b4
 8010d54:	20009eb0 	.word	0x20009eb0
 8010d58:	2000b6b0 	.word	0x2000b6b0
 8010d5c:	2000d6b0 	.word	0x2000d6b0

	        //----------------------------------------------------
	        // OP_FT_NOT
	        //----------------------------------------------------
	        case OP_FT_NOT: {
	            int op1=0, scq_size_rd=0, input_wr_ptr=0;
 8010d60:	2300      	movs	r3, #0
 8010d62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8010d66:	2300      	movs	r3, #0
 8010d68:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

	            // Declare a new pointer for the SCQ's operand
	            elt_ft_queue_t *scq_seg = NULL;
 8010d72:	2300      	movs	r3, #0
 8010d74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	            // If the opcode type is a subformula
	            if(instruction_mem_ft[pc].op1.opnd_type == subformula) {
 8010d78:	4959      	ldr	r1, [pc, #356]	; (8010ee0 <TL_update_ft+0x46c>)
 8010d7a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010d7e:	4613      	mov	r3, r2
 8010d80:	00db      	lsls	r3, r3, #3
 8010d82:	1a9b      	subs	r3, r3, r2
 8010d84:	440b      	add	r3, r1
 8010d86:	3301      	adds	r3, #1
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	2b02      	cmp	r3, #2
 8010d8c:	d12b      	bne.n	8010de6 <TL_update_ft+0x372>
	                // Grab the operand's value
	                op1 = instruction_mem_ft[pc].op1.value;
 8010d8e:	4954      	ldr	r1, [pc, #336]	; (8010ee0 <TL_update_ft+0x46c>)
 8010d90:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010d94:	4613      	mov	r3, r2
 8010d96:	00db      	lsls	r3, r3, #3
 8010d98:	1a9b      	subs	r3, r3, r2
 8010d9a:	440b      	add	r3, r1
 8010d9c:	3302      	adds	r3, #2
 8010d9e:	781b      	ldrb	r3, [r3, #0]
 8010da0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	                // Set the SCQ's read pointer
	                scq_size_rd = addr_SCQ_map_ft[op1].end_addr - addr_SCQ_map_ft[op1].start_addr;
 8010da4:	4a4f      	ldr	r2, [pc, #316]	; (8010ee4 <TL_update_ft+0x470>)
 8010da6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	4413      	add	r3, r2
 8010dae:	885b      	ldrh	r3, [r3, #2]
 8010db0:	4619      	mov	r1, r3
 8010db2:	4a4c      	ldr	r2, [pc, #304]	; (8010ee4 <TL_update_ft+0x470>)
 8010db4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010db8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010dbc:	1acb      	subs	r3, r1, r3
 8010dbe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	                // Grab the values within the SCQ at the start address
	                scq_seg = &SCQ[addr_SCQ_map_ft[op1].start_addr];
 8010dc2:	4a48      	ldr	r2, [pc, #288]	; (8010ee4 <TL_update_ft+0x470>)
 8010dc4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010dc8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010dcc:	00db      	lsls	r3, r3, #3
 8010dce:	4a46      	ldr	r2, [pc, #280]	; (8010ee8 <TL_update_ft+0x474>)
 8010dd0:	4413      	add	r3, r2
 8010dd2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	                // Set the input's write pointer (old queue structure)
	                input_wr_ptr = ft_sync_queues[op1].wr_ptr;
 8010dd6:	4a45      	ldr	r2, [pc, #276]	; (8010eec <TL_update_ft+0x478>)
 8010dd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010ddc:	015b      	lsls	r3, r3, #5
 8010dde:	4413      	add	r3, r2
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	            }

	            // Set the SCQ's write pointer
	            int scq_size_wr = addr_SCQ_map_ft[pc].end_addr - addr_SCQ_map_ft[pc].start_addr;
 8010de6:	4a3f      	ldr	r2, [pc, #252]	; (8010ee4 <TL_update_ft+0x470>)
 8010de8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	4413      	add	r3, r2
 8010df0:	885b      	ldrh	r3, [r3, #2]
 8010df2:	4619      	mov	r1, r3
 8010df4:	4a3b      	ldr	r2, [pc, #236]	; (8010ee4 <TL_update_ft+0x470>)
 8010df6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010dfa:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010dfe:	1acb      	subs	r3, r1, r3
 8010e00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	            int* rd_ptr = &(ft_sync_queues[pc].rd_ptr);
 8010e04:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010e08:	015b      	lsls	r3, r3, #5
 8010e0a:	4a38      	ldr	r2, [pc, #224]	; (8010eec <TL_update_ft+0x478>)
 8010e0c:	4413      	add	r3, r2
 8010e0e:	3304      	adds	r3, #4
 8010e10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	            // While the formula is not complete, i.e., the SCQ is non-empty
	            if(!isEmpty_cap(pc, 1, scq_seg, scq_size_rd, input_wr_ptr, rd_ptr, ft_sync_queues[pc].desired_time_stamp)) {
 8010e14:	4a35      	ldr	r2, [pc, #212]	; (8010eec <TL_update_ft+0x478>)
 8010e16:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010e1a:	015b      	lsls	r3, r3, #5
 8010e1c:	4413      	add	r3, r2
 8010e1e:	331c      	adds	r3, #28
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	9302      	str	r3, [sp, #8]
 8010e24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e28:	9301      	str	r3, [sp, #4]
 8010e2a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8010e2e:	9300      	str	r3, [sp, #0]
 8010e30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8010e34:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8010e38:	2101      	movs	r1, #1
 8010e3a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8010e3e:	f000 fe03 	bl	8011a48 <isEmpty_cap>
 8010e42:	4603      	mov	r3, r0
 8010e44:	f083 0301 	eor.w	r3, r3, #1
 8010e48:	b2db      	uxtb	r3, r3
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f000 856e 	beq.w	801192c <TL_update_ft+0xeb8>
	                // Pop the sequence from the SCQ
	                elt_ft_queue_t input = pop_cap(pc, 1, scq_seg, *rd_ptr);
 8010e50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8010e5a:	9300      	str	r3, [sp, #0]
 8010e5c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8010e60:	2201      	movs	r2, #1
 8010e62:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8010e66:	f000 fe5d 	bl	8011b24 <pop_cap>
	                // Copy over the sequence from input to res
	                elt_ft_queue_t res = {!input.v_q,input.t_q};
 8010e6a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	bf14      	ite	ne
 8010e72:	2301      	movne	r3, #1
 8010e74:	2300      	moveq	r3, #0
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	f083 0301 	eor.w	r3, r3, #1
 8010e7c:	b2db      	uxtb	r3, r3
 8010e7e:	f003 0301 	and.w	r3, r3, #1
 8010e82:	b2db      	uxtb	r3, r3
 8010e84:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 8010e88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	                // Add the new element to the SCQ
	                add(&SCQ[addr_SCQ_map_ft[pc].start_addr], scq_size_wr, res, &(ft_sync_queues[pc].wr_ptr));
 8010e90:	4a14      	ldr	r2, [pc, #80]	; (8010ee4 <TL_update_ft+0x470>)
 8010e92:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010e96:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010e9a:	00db      	lsls	r3, r3, #3
 8010e9c:	4a12      	ldr	r2, [pc, #72]	; (8010ee8 <TL_update_ft+0x474>)
 8010e9e:	1898      	adds	r0, r3, r2
 8010ea0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010ea4:	015b      	lsls	r3, r3, #5
 8010ea6:	4a11      	ldr	r2, [pc, #68]	; (8010eec <TL_update_ft+0x478>)
 8010ea8:	4413      	add	r3, r2
 8010eaa:	9300      	str	r3, [sp, #0]
 8010eac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010eb0:	cb0c      	ldmia	r3, {r2, r3}
 8010eb2:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8010eb6:	f7ff fd12 	bl	80108de <add>
				    loop_progress += 1;
 8010eba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	                // Synchronize the queues
	                ft_sync_queues[pc].desired_time_stamp = input.t_q+1;
 8010ec4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010ec8:	3301      	adds	r3, #1
 8010eca:	4619      	mov	r1, r3
 8010ecc:	4a07      	ldr	r2, [pc, #28]	; (8010eec <TL_update_ft+0x478>)
 8010ece:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8010ed2:	015b      	lsls	r3, r3, #5
 8010ed4:	4413      	add	r3, r2
 8010ed6:	331c      	adds	r3, #28
 8010ed8:	6019      	str	r1, [r3, #0]
	            }
	            break;
 8010eda:	f000 bd27 	b.w	801192c <TL_update_ft+0xeb8>
 8010ede:	bf00      	nop
 8010ee0:	200201b4 	.word	0x200201b4
 8010ee4:	20009eb0 	.word	0x20009eb0
 8010ee8:	2000b6b0 	.word	0x2000b6b0
 8010eec:	2000d6b0 	.word	0x2000d6b0
	        // OP_FT_AND
	        //----------------------------------------------------

	        case OP_FT_AND: {
	            //R2U2_TRACE_PRINT("\n\n--AND--\n");
	            int op1=0, op2=0, scq_size_rd_1=0, scq_size_rd_2=0, input_wr_ptr_1=0, input_wr_ptr_2=0;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8010efc:	2300      	movs	r3, #0
 8010efe:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8010f02:	2300      	movs	r3, #0
 8010f04:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8010f08:	2300      	movs	r3, #0
 8010f0a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8010f0e:	2300      	movs	r3, #0
 8010f10:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

	            // Declare new pointers for the SCQ's operandds
	            elt_ft_queue_t *scq_seg_1 = NULL, *scq_seg_2 = NULL;
 8010f14:	2300      	movs	r3, #0
 8010f16:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

	            // If the first operand's opcode is a subformula
	            if(instruction_mem_ft[pc].op1.opnd_type==subformula) {
 8010f20:	49be      	ldr	r1, [pc, #760]	; (801121c <TL_update_ft+0x7a8>)
 8010f22:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010f26:	4613      	mov	r3, r2
 8010f28:	00db      	lsls	r3, r3, #3
 8010f2a:	1a9b      	subs	r3, r3, r2
 8010f2c:	440b      	add	r3, r1
 8010f2e:	3301      	adds	r3, #1
 8010f30:	781b      	ldrb	r3, [r3, #0]
 8010f32:	2b02      	cmp	r3, #2
 8010f34:	d12b      	bne.n	8010f8e <TL_update_ft+0x51a>
	                // Grab the op1 value from the instruction memory
	                op1 = instruction_mem_ft[pc].op1.value;
 8010f36:	49b9      	ldr	r1, [pc, #740]	; (801121c <TL_update_ft+0x7a8>)
 8010f38:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010f3c:	4613      	mov	r3, r2
 8010f3e:	00db      	lsls	r3, r3, #3
 8010f40:	1a9b      	subs	r3, r3, r2
 8010f42:	440b      	add	r3, r1
 8010f44:	3302      	adds	r3, #2
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	                // Set the SCQ's read pointer for the first operand
	                scq_size_rd_1 = addr_SCQ_map_ft[op1].end_addr-addr_SCQ_map_ft[op1].start_addr;
 8010f4c:	4ab4      	ldr	r2, [pc, #720]	; (8011220 <TL_update_ft+0x7ac>)
 8010f4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	4413      	add	r3, r2
 8010f56:	885b      	ldrh	r3, [r3, #2]
 8010f58:	4619      	mov	r1, r3
 8010f5a:	4ab1      	ldr	r2, [pc, #708]	; (8011220 <TL_update_ft+0x7ac>)
 8010f5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010f60:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010f64:	1acb      	subs	r3, r1, r3
 8010f66:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	                // Grab the values within the SCQ at the start address
	                scq_seg_1 = &SCQ[addr_SCQ_map_ft[op1].start_addr];
 8010f6a:	4aad      	ldr	r2, [pc, #692]	; (8011220 <TL_update_ft+0x7ac>)
 8010f6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010f70:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010f74:	00db      	lsls	r3, r3, #3
 8010f76:	4aab      	ldr	r2, [pc, #684]	; (8011224 <TL_update_ft+0x7b0>)
 8010f78:	4413      	add	r3, r2
 8010f7a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	                // Set the input's write pointer (old queue structure)
	                input_wr_ptr_1 = ft_sync_queues[op1].wr_ptr;
 8010f7e:	4aaa      	ldr	r2, [pc, #680]	; (8011228 <TL_update_ft+0x7b4>)
 8010f80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010f84:	015b      	lsls	r3, r3, #5
 8010f86:	4413      	add	r3, r2
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	            }
	            // If the second operand's opcode is a subformula
	            if(instruction_mem_ft[pc].op2.opnd_type==subformula) {
 8010f8e:	49a3      	ldr	r1, [pc, #652]	; (801121c <TL_update_ft+0x7a8>)
 8010f90:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010f94:	4613      	mov	r3, r2
 8010f96:	00db      	lsls	r3, r3, #3
 8010f98:	1a9b      	subs	r3, r3, r2
 8010f9a:	440b      	add	r3, r1
 8010f9c:	3303      	adds	r3, #3
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	2b02      	cmp	r3, #2
 8010fa2:	d12b      	bne.n	8010ffc <TL_update_ft+0x588>
	                // Grab the op2 value from the instruction memory
	                op2 = instruction_mem_ft[pc].op2.value;
 8010fa4:	499d      	ldr	r1, [pc, #628]	; (801121c <TL_update_ft+0x7a8>)
 8010fa6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8010faa:	4613      	mov	r3, r2
 8010fac:	00db      	lsls	r3, r3, #3
 8010fae:	1a9b      	subs	r3, r3, r2
 8010fb0:	440b      	add	r3, r1
 8010fb2:	3304      	adds	r3, #4
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	                // Set the SCQ's read pointer for the second operand
	                scq_size_rd_2 = addr_SCQ_map_ft[op2].end_addr-addr_SCQ_map_ft[op2].start_addr;
 8010fba:	4a99      	ldr	r2, [pc, #612]	; (8011220 <TL_update_ft+0x7ac>)
 8010fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	4413      	add	r3, r2
 8010fc4:	885b      	ldrh	r3, [r3, #2]
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	4a95      	ldr	r2, [pc, #596]	; (8011220 <TL_update_ft+0x7ac>)
 8010fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010fce:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010fd2:	1acb      	subs	r3, r1, r3
 8010fd4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	                // Grab the values within the SCQ at the start address
	                scq_seg_2 = &SCQ[addr_SCQ_map_ft[op2].start_addr];
 8010fd8:	4a91      	ldr	r2, [pc, #580]	; (8011220 <TL_update_ft+0x7ac>)
 8010fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010fde:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010fe2:	00db      	lsls	r3, r3, #3
 8010fe4:	4a8f      	ldr	r2, [pc, #572]	; (8011224 <TL_update_ft+0x7b0>)
 8010fe6:	4413      	add	r3, r2
 8010fe8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	                // Set the input's write pointer (old queue structure)
	                input_wr_ptr_2 = ft_sync_queues[op2].wr_ptr;
 8010fec:	4a8e      	ldr	r2, [pc, #568]	; (8011228 <TL_update_ft+0x7b4>)
 8010fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010ff2:	015b      	lsls	r3, r3, #5
 8010ff4:	4413      	add	r3, r2
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	            }

	            int scq_size_wr = addr_SCQ_map_ft[pc].end_addr-addr_SCQ_map_ft[pc].start_addr;
 8010ffc:	4a88      	ldr	r2, [pc, #544]	; (8011220 <TL_update_ft+0x7ac>)
 8010ffe:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	4413      	add	r3, r2
 8011006:	885b      	ldrh	r3, [r3, #2]
 8011008:	4619      	mov	r1, r3
 801100a:	4a85      	ldr	r2, [pc, #532]	; (8011220 <TL_update_ft+0x7ac>)
 801100c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011010:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8011014:	1acb      	subs	r3, r1, r3
 8011016:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	            int* rd_ptr_1 = &(ft_sync_queues[pc].rd_ptr);
 801101a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801101e:	015b      	lsls	r3, r3, #5
 8011020:	4a81      	ldr	r2, [pc, #516]	; (8011228 <TL_update_ft+0x7b4>)
 8011022:	4413      	add	r3, r2
 8011024:	3304      	adds	r3, #4
 8011026:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	            int* rd_ptr_2 = &(ft_sync_queues[pc].rd_ptr2);
 801102a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801102e:	015b      	lsls	r3, r3, #5
 8011030:	3308      	adds	r3, #8
 8011032:	4a7d      	ldr	r2, [pc, #500]	; (8011228 <TL_update_ft+0x7b4>)
 8011034:	4413      	add	r3, r2
 8011036:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	            // Initialize the loop conditions
	            bool isEmpty_1 = isEmpty_cap(pc, 1, scq_seg_1, scq_size_rd_1, input_wr_ptr_1, rd_ptr_1, ft_sync_queues[pc].desired_time_stamp);
 801103a:	4a7b      	ldr	r2, [pc, #492]	; (8011228 <TL_update_ft+0x7b4>)
 801103c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011040:	015b      	lsls	r3, r3, #5
 8011042:	4413      	add	r3, r2
 8011044:	331c      	adds	r3, #28
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	9302      	str	r3, [sp, #8]
 801104a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801104e:	9301      	str	r3, [sp, #4]
 8011050:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8011054:	9300      	str	r3, [sp, #0]
 8011056:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801105a:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801105e:	2101      	movs	r1, #1
 8011060:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8011064:	f000 fcf0 	bl	8011a48 <isEmpty_cap>
 8011068:	4603      	mov	r3, r0
 801106a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	            bool isEmpty_2 = isEmpty_cap(pc, 2, scq_seg_2, scq_size_rd_2, input_wr_ptr_2, rd_ptr_2, ft_sync_queues[pc].desired_time_stamp);
 801106e:	4a6e      	ldr	r2, [pc, #440]	; (8011228 <TL_update_ft+0x7b4>)
 8011070:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011074:	015b      	lsls	r3, r3, #5
 8011076:	4413      	add	r3, r2
 8011078:	331c      	adds	r3, #28
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	9302      	str	r3, [sp, #8]
 801107e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011082:	9301      	str	r3, [sp, #4]
 8011084:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8011088:	9300      	str	r3, [sp, #0]
 801108a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801108e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8011092:	2102      	movs	r1, #2
 8011094:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8011098:	f000 fcd6 	bl	8011a48 <isEmpty_cap>
 801109c:	4603      	mov	r3, r0
 801109e:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	            // While the formula is not complete, i.e., one of the operands within the SCQ is non-empty
	            if(!isEmpty_1|| !isEmpty_2) {
 80110a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80110a6:	f083 0301 	eor.w	r3, r3, #1
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d107      	bne.n	80110c0 <TL_update_ft+0x64c>
 80110b0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80110b4:	f083 0301 	eor.w	r3, r3, #1
 80110b8:	b2db      	uxtb	r3, r3
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	f000 8438 	beq.w	8011930 <TL_update_ft+0xebc>
	                elt_ft_queue_t res = {false,-1};
 80110c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80110c4:	2200      	movs	r2, #0
 80110c6:	701a      	strb	r2, [r3, #0]
 80110c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80110cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110d0:	605a      	str	r2, [r3, #4]
	                // If both are still non-empty
	                if(!isEmpty_1 && !isEmpty_2) {
 80110d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80110d6:	f083 0301 	eor.w	r3, r3, #1
 80110da:	b2db      	uxtb	r3, r3
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d078      	beq.n	80111d2 <TL_update_ft+0x75e>
 80110e0:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 80110e4:	f083 0301 	eor.w	r3, r3, #1
 80110e8:	b2db      	uxtb	r3, r3
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d071      	beq.n	80111d2 <TL_update_ft+0x75e>
	                    elt_ft_queue_t res_1 = pop_cap(pc, 1, scq_seg_1, *rd_ptr_1);
 80110ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 80110f8:	9300      	str	r3, [sp, #0]
 80110fa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80110fe:	2201      	movs	r2, #1
 8011100:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8011104:	f000 fd0e 	bl	8011b24 <pop_cap>
	                    elt_ft_queue_t res_2 = pop_cap(pc, 2, scq_seg_2, *rd_ptr_2);
 8011108:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8011112:	9300      	str	r3, [sp, #0]
 8011114:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8011118:	2202      	movs	r2, #2
 801111a:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 801111e:	f000 fd01 	bl	8011b24 <pop_cap>
	                    if(res_1.v_q && res_2.v_q) res = (elt_ft_queue_t){true, min(res_1.t_q, res_2.t_q)};
 8011122:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d015      	beq.n	8011158 <TL_update_ft+0x6e4>
 801112c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d010      	beq.n	8011158 <TL_update_ft+0x6e4>
 8011136:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801113a:	685a      	ldr	r2, [r3, #4]
 801113c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	429a      	cmp	r2, r3
 8011144:	bf28      	it	cs
 8011146:	461a      	movcs	r2, r3
 8011148:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801114c:	2101      	movs	r1, #1
 801114e:	7019      	strb	r1, [r3, #0]
 8011150:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011154:	605a      	str	r2, [r3, #4]
 8011156:	e03b      	b.n	80111d0 <TL_update_ft+0x75c>
	                    else if (!res_1.v_q && !res_2.v_q) res = (elt_ft_queue_t){false, max(res_1.t_q, res_2.t_q)};
 8011158:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	f083 0301 	eor.w	r3, r3, #1
 8011162:	b2db      	uxtb	r3, r3
 8011164:	2b00      	cmp	r3, #0
 8011166:	d018      	beq.n	801119a <TL_update_ft+0x726>
 8011168:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	f083 0301 	eor.w	r3, r3, #1
 8011172:	b2db      	uxtb	r3, r3
 8011174:	2b00      	cmp	r3, #0
 8011176:	d010      	beq.n	801119a <TL_update_ft+0x726>
 8011178:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801117c:	685a      	ldr	r2, [r3, #4]
 801117e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	429a      	cmp	r2, r3
 8011186:	bf38      	it	cc
 8011188:	461a      	movcc	r2, r3
 801118a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801118e:	2100      	movs	r1, #0
 8011190:	7019      	strb	r1, [r3, #0]
 8011192:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011196:	605a      	str	r2, [r3, #4]
 8011198:	e01a      	b.n	80111d0 <TL_update_ft+0x75c>
	                    else if (res_1.v_q) res = (elt_ft_queue_t){false, res_2.t_q};
 801119a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d00a      	beq.n	80111ba <TL_update_ft+0x746>
 80111a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80111a8:	685a      	ldr	r2, [r3, #4]
 80111aa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80111ae:	2100      	movs	r1, #0
 80111b0:	7019      	strb	r1, [r3, #0]
 80111b2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80111b6:	605a      	str	r2, [r3, #4]
	                if(!isEmpty_1 && !isEmpty_2) {
 80111b8:	e057      	b.n	801126a <TL_update_ft+0x7f6>
	                    else res = (elt_ft_queue_t){false, res_1.t_q};
 80111ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80111be:	685a      	ldr	r2, [r3, #4]
 80111c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80111c4:	2100      	movs	r1, #0
 80111c6:	7019      	strb	r1, [r3, #0]
 80111c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80111cc:	605a      	str	r2, [r3, #4]
	                if(!isEmpty_1 && !isEmpty_2) {
 80111ce:	e04c      	b.n	801126a <TL_update_ft+0x7f6>
 80111d0:	e04b      	b.n	801126a <TL_update_ft+0x7f6>
	                }
	                // If the first operand's is empty
	                else if(isEmpty_1) {
 80111d2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d028      	beq.n	801122c <TL_update_ft+0x7b8>
	                    elt_ft_queue_t res_2 = pop_cap(pc, 2, scq_seg_2, *rd_ptr_2);
 80111da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80111e4:	9300      	str	r3, [sp, #0]
 80111e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80111ea:	2202      	movs	r2, #2
 80111ec:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80111f0:	f000 fc98 	bl	8011b24 <pop_cap>
	                    if(!res_2.v_q) res = (elt_ft_queue_t){false, res_2.t_q};
 80111f4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	f083 0301 	eor.w	r3, r3, #1
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	2b00      	cmp	r3, #0
 8011202:	d032      	beq.n	801126a <TL_update_ft+0x7f6>
 8011204:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8011208:	685a      	ldr	r2, [r3, #4]
 801120a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801120e:	2100      	movs	r1, #0
 8011210:	7019      	strb	r1, [r3, #0]
 8011212:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011216:	605a      	str	r2, [r3, #4]
 8011218:	e027      	b.n	801126a <TL_update_ft+0x7f6>
 801121a:	bf00      	nop
 801121c:	200201b4 	.word	0x200201b4
 8011220:	20009eb0 	.word	0x20009eb0
 8011224:	2000b6b0 	.word	0x2000b6b0
 8011228:	2000d6b0 	.word	0x2000d6b0
	                }
	                // if the second operand's is empty
	                else {
	                    elt_ft_queue_t res_1 = pop_cap(pc, 1, scq_seg_1, *rd_ptr_1);
 801122c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8011236:	9300      	str	r3, [sp, #0]
 8011238:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801123c:	2201      	movs	r2, #1
 801123e:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8011242:	f000 fc6f 	bl	8011b24 <pop_cap>
	                    if(!res_1.v_q) res = (elt_ft_queue_t){false, res_1.t_q};
 8011246:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	f083 0301 	eor.w	r3, r3, #1
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d009      	beq.n	801126a <TL_update_ft+0x7f6>
 8011256:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801125a:	685a      	ldr	r2, [r3, #4]
 801125c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011260:	2100      	movs	r1, #0
 8011262:	7019      	strb	r1, [r3, #0]
 8011264:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011268:	605a      	str	r2, [r3, #4]
	                }
	                // If the time is not -1
	                if(res.t_q != -1) {
 801126a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011274:	f000 835c 	beq.w	8011930 <TL_update_ft+0xebc>
	                    // Add the new element to the SCQ
	                    add(&SCQ[addr_SCQ_map_ft[pc].start_addr], scq_size_wr, res, &(ft_sync_queues[pc].wr_ptr));
 8011278:	4ab6      	ldr	r2, [pc, #728]	; (8011554 <TL_update_ft+0xae0>)
 801127a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801127e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8011282:	00db      	lsls	r3, r3, #3
 8011284:	4ab4      	ldr	r2, [pc, #720]	; (8011558 <TL_update_ft+0xae4>)
 8011286:	1898      	adds	r0, r3, r2
 8011288:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801128c:	015b      	lsls	r3, r3, #5
 801128e:	4ab3      	ldr	r2, [pc, #716]	; (801155c <TL_update_ft+0xae8>)
 8011290:	441a      	add	r2, r3
 8011292:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011296:	9200      	str	r2, [sp, #0]
 8011298:	cb0c      	ldmia	r3, {r2, r3}
 801129a:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801129e:	f7ff fb1e 	bl	80108de <add>
	                    loop_progress += 1;
 80112a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80112a6:	3301      	adds	r3, #1
 80112a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	                    // Synchronize the queues
	                    //ft_sync_queues[pc].desired_time_stamp += 1;
	                    ft_sync_queues[pc].desired_time_stamp = res.t_q+1;
 80112ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	3301      	adds	r3, #1
 80112b4:	4619      	mov	r1, r3
 80112b6:	4aa9      	ldr	r2, [pc, #676]	; (801155c <TL_update_ft+0xae8>)
 80112b8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80112bc:	015b      	lsls	r3, r3, #5
 80112be:	4413      	add	r3, r2
 80112c0:	331c      	adds	r3, #28
 80112c2:	6019      	str	r1, [r3, #0]
	                }
	            }
	            break;
 80112c4:	e334      	b.n	8011930 <TL_update_ft+0xebc>

	        //----------------------------------------------------
	        // OP_FT_GJ (globally, interval:  G[t1,t2])
	        //----------------------------------------------------
	        case OP_FT_GLOBALLY_INTERVAL: {
	            int op1=0, scq_size_rd=0, input_wr_ptr=0;
 80112c6:	2300      	movs	r3, #0
 80112c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80112cc:	2300      	movs	r3, #0
 80112ce:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80112d2:	2300      	movs	r3, #0
 80112d4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	            elt_ft_queue_t *scq_seg = NULL;
 80112d8:	2300      	movs	r3, #0
 80112da:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	            if(instruction_mem_ft[pc].op1.opnd_type==subformula) {
 80112de:	49a0      	ldr	r1, [pc, #640]	; (8011560 <TL_update_ft+0xaec>)
 80112e0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80112e4:	4613      	mov	r3, r2
 80112e6:	00db      	lsls	r3, r3, #3
 80112e8:	1a9b      	subs	r3, r3, r2
 80112ea:	440b      	add	r3, r1
 80112ec:	3301      	adds	r3, #1
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	2b02      	cmp	r3, #2
 80112f2:	d12b      	bne.n	801134c <TL_update_ft+0x8d8>
	                op1 = instruction_mem_ft[pc].op1.value;
 80112f4:	499a      	ldr	r1, [pc, #616]	; (8011560 <TL_update_ft+0xaec>)
 80112f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80112fa:	4613      	mov	r3, r2
 80112fc:	00db      	lsls	r3, r3, #3
 80112fe:	1a9b      	subs	r3, r3, r2
 8011300:	440b      	add	r3, r1
 8011302:	3302      	adds	r3, #2
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	                scq_size_rd = addr_SCQ_map_ft[op1].end_addr-addr_SCQ_map_ft[op1].start_addr;
 801130a:	4a92      	ldr	r2, [pc, #584]	; (8011554 <TL_update_ft+0xae0>)
 801130c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011310:	009b      	lsls	r3, r3, #2
 8011312:	4413      	add	r3, r2
 8011314:	885b      	ldrh	r3, [r3, #2]
 8011316:	4619      	mov	r1, r3
 8011318:	4a8e      	ldr	r2, [pc, #568]	; (8011554 <TL_update_ft+0xae0>)
 801131a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801131e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8011322:	1acb      	subs	r3, r1, r3
 8011324:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	                scq_seg = &SCQ[addr_SCQ_map_ft[op1].start_addr];
 8011328:	4a8a      	ldr	r2, [pc, #552]	; (8011554 <TL_update_ft+0xae0>)
 801132a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801132e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8011332:	00db      	lsls	r3, r3, #3
 8011334:	4a88      	ldr	r2, [pc, #544]	; (8011558 <TL_update_ft+0xae4>)
 8011336:	4413      	add	r3, r2
 8011338:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	                input_wr_ptr = ft_sync_queues[op1].wr_ptr;
 801133c:	4a87      	ldr	r2, [pc, #540]	; (801155c <TL_update_ft+0xae8>)
 801133e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011342:	015b      	lsls	r3, r3, #5
 8011344:	4413      	add	r3, r2
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	            }

	            int scq_size_wr = addr_SCQ_map_ft[pc].end_addr-addr_SCQ_map_ft[pc].start_addr;
 801134c:	4a81      	ldr	r2, [pc, #516]	; (8011554 <TL_update_ft+0xae0>)
 801134e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011352:	009b      	lsls	r3, r3, #2
 8011354:	4413      	add	r3, r2
 8011356:	885b      	ldrh	r3, [r3, #2]
 8011358:	4619      	mov	r1, r3
 801135a:	4a7e      	ldr	r2, [pc, #504]	; (8011554 <TL_update_ft+0xae0>)
 801135c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011360:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8011364:	1acb      	subs	r3, r1, r3
 8011366:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	            int* rd_ptr = &(ft_sync_queues[pc].rd_ptr);
 801136a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801136e:	015b      	lsls	r3, r3, #5
 8011370:	4a7a      	ldr	r2, [pc, #488]	; (801155c <TL_update_ft+0xae8>)
 8011372:	4413      	add	r3, r2
 8011374:	3304      	adds	r3, #4
 8011376:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	            int lb = get_interval_lb_ft(pc);
 801137a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801137e:	f000 fb2b 	bl	80119d8 <get_interval_lb_ft>
 8011382:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
	            int ub = get_interval_ub_ft(pc);
 8011386:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801138a:	f000 fb41 	bl	8011a10 <get_interval_ub_ft>
 801138e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
	            //printf("ft_sync_queues[pc].desired_time_stamp: %d\n", ft_sync_queues[pc].desired_time_stamp);
	            if(!isEmpty_cap(pc, 1, scq_seg, scq_size_rd, input_wr_ptr, rd_ptr, ft_sync_queues[pc].desired_time_stamp)) {
 8011392:	4a72      	ldr	r2, [pc, #456]	; (801155c <TL_update_ft+0xae8>)
 8011394:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011398:	015b      	lsls	r3, r3, #5
 801139a:	4413      	add	r3, r2
 801139c:	331c      	adds	r3, #28
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	9302      	str	r3, [sp, #8]
 80113a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80113a6:	9301      	str	r3, [sp, #4]
 80113a8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80113ac:	9300      	str	r3, [sp, #0]
 80113ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80113b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80113b6:	2101      	movs	r1, #1
 80113b8:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80113bc:	f000 fb44 	bl	8011a48 <isEmpty_cap>
 80113c0:	4603      	mov	r3, r0
 80113c2:	f083 0301 	eor.w	r3, r3, #1
 80113c6:	b2db      	uxtb	r3, r3
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	f000 82b3 	beq.w	8011934 <TL_update_ft+0xec0>
	                //printf("not empty, rd_ptr: %d\n", *rd_ptr);
	                elt_ft_queue_t input = pop_cap(pc, 1, scq_seg, *rd_ptr);
 80113ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80113de:	2201      	movs	r2, #1
 80113e0:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80113e4:	f000 fb9e 	bl	8011b24 <pop_cap>
	                //printf("input.v_q: %d, t_q: %d\n", input.v_q, input.t_q);
	                ft_sync_queues[pc].desired_time_stamp += 1;
 80113e8:	4a5c      	ldr	r2, [pc, #368]	; (801155c <TL_update_ft+0xae8>)
 80113ea:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80113ee:	015b      	lsls	r3, r3, #5
 80113f0:	4413      	add	r3, r2
 80113f2:	331c      	adds	r3, #28
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	1c5a      	adds	r2, r3, #1
 80113f8:	4958      	ldr	r1, [pc, #352]	; (801155c <TL_update_ft+0xae8>)
 80113fa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80113fe:	015b      	lsls	r3, r3, #5
 8011400:	440b      	add	r3, r1
 8011402:	331c      	adds	r3, #28
 8011404:	601a      	str	r2, [r3, #0]
	                // If the verdict is true and we have not seen a previously false verdict
	                if(input.v_q && !ft_sync_queues[pc].pre.v_q) {
 8011406:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d01b      	beq.n	8011448 <TL_update_ft+0x9d4>
 8011410:	4a52      	ldr	r2, [pc, #328]	; (801155c <TL_update_ft+0xae8>)
 8011412:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011416:	015b      	lsls	r3, r3, #5
 8011418:	4413      	add	r3, r2
 801141a:	3310      	adds	r3, #16
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	f083 0301 	eor.w	r3, r3, #1
 8011422:	b2db      	uxtb	r3, r3
 8011424:	2b00      	cmp	r3, #0
 8011426:	d00f      	beq.n	8011448 <TL_update_ft+0x9d4>
	                    // Increment the time-step for synchronizing the queues
	                    ft_sync_queues[pc].m_edge = ft_sync_queues[pc].pre.t_q + 1; // rising edge
 8011428:	4a4c      	ldr	r2, [pc, #304]	; (801155c <TL_update_ft+0xae8>)
 801142a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801142e:	015b      	lsls	r3, r3, #5
 8011430:	4413      	add	r3, r2
 8011432:	3314      	adds	r3, #20
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	3301      	adds	r3, #1
 8011438:	4619      	mov	r1, r3
 801143a:	4a48      	ldr	r2, [pc, #288]	; (801155c <TL_update_ft+0xae8>)
 801143c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011440:	015b      	lsls	r3, r3, #5
 8011442:	4413      	add	r3, r2
 8011444:	330c      	adds	r3, #12
 8011446:	6019      	str	r1, [r3, #0]
	                }
	                // If the verdict is true,
	                if(input.v_q) {
 8011448:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801144c:	781b      	ldrb	r3, [r3, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d043      	beq.n	80114da <TL_update_ft+0xa66>
	                    //printf("has true\n");
	                    // and if the time is within the time upper and lower bounds,
	                    if((signed)input.t_q-ft_sync_queues[pc].m_edge >= ub-lb && (signed)input.t_q-ub >= 0) {
 8011452:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011456:	685b      	ldr	r3, [r3, #4]
 8011458:	4619      	mov	r1, r3
 801145a:	4a40      	ldr	r2, [pc, #256]	; (801155c <TL_update_ft+0xae8>)
 801145c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011460:	015b      	lsls	r3, r3, #5
 8011462:	4413      	add	r3, r2
 8011464:	330c      	adds	r3, #12
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	1aca      	subs	r2, r1, r3
 801146a:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 801146e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011472:	1acb      	subs	r3, r1, r3
 8011474:	429a      	cmp	r2, r3
 8011476:	db60      	blt.n	801153a <TL_update_ft+0xac6>
 8011478:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	461a      	mov	r2, r3
 8011480:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011484:	1ad3      	subs	r3, r2, r3
 8011486:	2b00      	cmp	r3, #0
 8011488:	db57      	blt.n	801153a <TL_update_ft+0xac6>
	                        // Set res to a true verdict and the time stamp of the input time minus the upper bound
	                        elt_ft_queue_t res = (elt_ft_queue_t){true, input.t_q-ub};
 801148a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801148e:	2201      	movs	r2, #1
 8011490:	701a      	strb	r2, [r3, #0]
 8011492:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011496:	685a      	ldr	r2, [r3, #4]
 8011498:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801149c:	1ad2      	subs	r2, r2, r3
 801149e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80114a2:	605a      	str	r2, [r3, #4]
	                        // And add asynchrounous results to the shared connection queue
	                        add(&SCQ[addr_SCQ_map_ft[pc].start_addr], scq_size_wr, res, &(ft_sync_queues[pc].wr_ptr));
 80114a4:	4a2b      	ldr	r2, [pc, #172]	; (8011554 <TL_update_ft+0xae0>)
 80114a6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80114aa:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80114ae:	00db      	lsls	r3, r3, #3
 80114b0:	4a29      	ldr	r2, [pc, #164]	; (8011558 <TL_update_ft+0xae4>)
 80114b2:	1898      	adds	r0, r3, r2
 80114b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80114b8:	015b      	lsls	r3, r3, #5
 80114ba:	4a28      	ldr	r2, [pc, #160]	; (801155c <TL_update_ft+0xae8>)
 80114bc:	441a      	add	r2, r3
 80114be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80114c2:	9200      	str	r2, [sp, #0]
 80114c4:	cb0c      	ldmia	r3, {r2, r3}
 80114c6:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80114ca:	f7ff fa08 	bl	80108de <add>
	                        loop_progress += 1;
 80114ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80114d2:	3301      	adds	r3, #1
 80114d4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80114d8:	e02f      	b.n	801153a <TL_update_ft+0xac6>
	                    }
	                }
	                // If the verdict is false and the time stamp is after the lower bound,
	                else if((signed)input.t_q-lb >= 0) {
 80114da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	461a      	mov	r2, r3
 80114e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80114e6:	1ad3      	subs	r3, r2, r3
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	db26      	blt.n	801153a <TL_update_ft+0xac6>
	                    // Set res to a false verdict with a timestamp of the input time minus the lower bound,
	                    elt_ft_queue_t res = (elt_ft_queue_t){false, input.t_q-lb};
 80114ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80114f0:	2200      	movs	r2, #0
 80114f2:	701a      	strb	r2, [r3, #0]
 80114f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80114f8:	685a      	ldr	r2, [r3, #4]
 80114fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80114fe:	1ad2      	subs	r2, r2, r3
 8011500:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011504:	605a      	str	r2, [r3, #4]
	                    // And add asynchrounous results to the shared connection queue
	                    add(&SCQ[addr_SCQ_map_ft[pc].start_addr], scq_size_wr, res, &(ft_sync_queues[pc].wr_ptr));
 8011506:	4a13      	ldr	r2, [pc, #76]	; (8011554 <TL_update_ft+0xae0>)
 8011508:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801150c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8011510:	00db      	lsls	r3, r3, #3
 8011512:	4a11      	ldr	r2, [pc, #68]	; (8011558 <TL_update_ft+0xae4>)
 8011514:	1898      	adds	r0, r3, r2
 8011516:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801151a:	015b      	lsls	r3, r3, #5
 801151c:	4a0f      	ldr	r2, [pc, #60]	; (801155c <TL_update_ft+0xae8>)
 801151e:	441a      	add	r2, r3
 8011520:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011524:	9200      	str	r2, [sp, #0]
 8011526:	cb0c      	ldmia	r3, {r2, r3}
 8011528:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801152c:	f7ff f9d7 	bl	80108de <add>
	                    loop_progress += 1;
 8011530:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8011534:	3301      	adds	r3, #1
 8011536:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	                }
	                ft_sync_queues[pc].pre = input;
 801153a:	4a08      	ldr	r2, [pc, #32]	; (801155c <TL_update_ft+0xae8>)
 801153c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011540:	015b      	lsls	r3, r3, #5
 8011542:	4413      	add	r3, r2
 8011544:	3310      	adds	r3, #16
 8011546:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801154a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801154e:	e883 0003 	stmia.w	r3, {r0, r1}
	            }
	            break;
 8011552:	e1ef      	b.n	8011934 <TL_update_ft+0xec0>
 8011554:	20009eb0 	.word	0x20009eb0
 8011558:	2000b6b0 	.word	0x2000b6b0
 801155c:	2000d6b0 	.word	0x2000d6b0
 8011560:	200201b4 	.word	0x200201b4
	        // OP_FT_UJ (until, interval:  U[t1,t2])
	        //----------------------------------------------------
	        case OP_FT_UNTIL_INTERVAL:
	        {
	            //
	            int op1=0, op2=0, scq_size_rd_1=0, scq_size_rd_2=0, input_wr_ptr_1=0, input_wr_ptr_2=0;
 8011564:	2300      	movs	r3, #0
 8011566:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 801156a:	2300      	movs	r3, #0
 801156c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8011570:	2300      	movs	r3, #0
 8011572:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8011576:	2300      	movs	r3, #0
 8011578:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 801157c:	2300      	movs	r3, #0
 801157e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8011582:	2300      	movs	r3, #0
 8011584:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

	            // Initialize the scq_sec pointers
	            elt_ft_queue_t *scq_seg_1 = NULL, *scq_seg_2 = NULL;
 8011588:	2300      	movs	r3, #0
 801158a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 801158e:	2300      	movs	r3, #0
 8011590:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

	            // If the first operand's opcode is a subformula
	            if(instruction_mem_ft[pc].op1.opnd_type == subformula) {
 8011594:	49ae      	ldr	r1, [pc, #696]	; (8011850 <TL_update_ft+0xddc>)
 8011596:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801159a:	4613      	mov	r3, r2
 801159c:	00db      	lsls	r3, r3, #3
 801159e:	1a9b      	subs	r3, r3, r2
 80115a0:	440b      	add	r3, r1
 80115a2:	3301      	adds	r3, #1
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	2b02      	cmp	r3, #2
 80115a8:	d12b      	bne.n	8011602 <TL_update_ft+0xb8e>
	                // Grab the op1 value from the instruction memory
	                op1 = instruction_mem_ft[pc].op1.value;
 80115aa:	49a9      	ldr	r1, [pc, #676]	; (8011850 <TL_update_ft+0xddc>)
 80115ac:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80115b0:	4613      	mov	r3, r2
 80115b2:	00db      	lsls	r3, r3, #3
 80115b4:	1a9b      	subs	r3, r3, r2
 80115b6:	440b      	add	r3, r1
 80115b8:	3302      	adds	r3, #2
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	                // Set the SCQ's read pointer for the first operand
	                scq_size_rd_1 = addr_SCQ_map_ft[op1].end_addr-addr_SCQ_map_ft[op1].start_addr;
 80115c0:	4aa4      	ldr	r2, [pc, #656]	; (8011854 <TL_update_ft+0xde0>)
 80115c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80115c6:	009b      	lsls	r3, r3, #2
 80115c8:	4413      	add	r3, r2
 80115ca:	885b      	ldrh	r3, [r3, #2]
 80115cc:	4619      	mov	r1, r3
 80115ce:	4aa1      	ldr	r2, [pc, #644]	; (8011854 <TL_update_ft+0xde0>)
 80115d0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80115d4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80115d8:	1acb      	subs	r3, r1, r3
 80115da:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	                // Grab the values within the SCQ at the start address
	                scq_seg_1 = &SCQ[addr_SCQ_map_ft[op1].start_addr];
 80115de:	4a9d      	ldr	r2, [pc, #628]	; (8011854 <TL_update_ft+0xde0>)
 80115e0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80115e4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80115e8:	00db      	lsls	r3, r3, #3
 80115ea:	4a9b      	ldr	r2, [pc, #620]	; (8011858 <TL_update_ft+0xde4>)
 80115ec:	4413      	add	r3, r2
 80115ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	                // Set the input's write pointer (old queue structure)
	                input_wr_ptr_1 = ft_sync_queues[op1].wr_ptr;
 80115f2:	4a9a      	ldr	r2, [pc, #616]	; (801185c <TL_update_ft+0xde8>)
 80115f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80115f8:	015b      	lsls	r3, r3, #5
 80115fa:	4413      	add	r3, r2
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	            }
	            // If the second operand's opcode is a subformula
	            if(instruction_mem_ft[pc].op2.opnd_type == subformula) {
 8011602:	4993      	ldr	r1, [pc, #588]	; (8011850 <TL_update_ft+0xddc>)
 8011604:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8011608:	4613      	mov	r3, r2
 801160a:	00db      	lsls	r3, r3, #3
 801160c:	1a9b      	subs	r3, r3, r2
 801160e:	440b      	add	r3, r1
 8011610:	3303      	adds	r3, #3
 8011612:	781b      	ldrb	r3, [r3, #0]
 8011614:	2b02      	cmp	r3, #2
 8011616:	d12b      	bne.n	8011670 <TL_update_ft+0xbfc>
	                // Grab the op2 value from the instruction memory
	                op2 = instruction_mem_ft[pc].op2.value;
 8011618:	498d      	ldr	r1, [pc, #564]	; (8011850 <TL_update_ft+0xddc>)
 801161a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801161e:	4613      	mov	r3, r2
 8011620:	00db      	lsls	r3, r3, #3
 8011622:	1a9b      	subs	r3, r3, r2
 8011624:	440b      	add	r3, r1
 8011626:	3304      	adds	r3, #4
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	                // Set the SCQ's read pointer for the second operand
	                scq_size_rd_2 = addr_SCQ_map_ft[op2].end_addr - addr_SCQ_map_ft[op2].start_addr;
 801162e:	4a89      	ldr	r2, [pc, #548]	; (8011854 <TL_update_ft+0xde0>)
 8011630:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011634:	009b      	lsls	r3, r3, #2
 8011636:	4413      	add	r3, r2
 8011638:	885b      	ldrh	r3, [r3, #2]
 801163a:	4619      	mov	r1, r3
 801163c:	4a85      	ldr	r2, [pc, #532]	; (8011854 <TL_update_ft+0xde0>)
 801163e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011642:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8011646:	1acb      	subs	r3, r1, r3
 8011648:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	                // Grab the values within the SCQ at the start address
	                scq_seg_2 = &SCQ[addr_SCQ_map_ft[op2].start_addr];
 801164c:	4a81      	ldr	r2, [pc, #516]	; (8011854 <TL_update_ft+0xde0>)
 801164e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011652:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8011656:	00db      	lsls	r3, r3, #3
 8011658:	4a7f      	ldr	r2, [pc, #508]	; (8011858 <TL_update_ft+0xde4>)
 801165a:	4413      	add	r3, r2
 801165c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	                // Set the input's write pointer (old queue structure)
	                input_wr_ptr_2 = ft_sync_queues[op2].wr_ptr;
 8011660:	4a7e      	ldr	r2, [pc, #504]	; (801185c <TL_update_ft+0xde8>)
 8011662:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011666:	015b      	lsls	r3, r3, #5
 8011668:	4413      	add	r3, r2
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	            }

	            int scq_size_wr = addr_SCQ_map_ft[pc].end_addr-addr_SCQ_map_ft[pc].start_addr;
 8011670:	4a78      	ldr	r2, [pc, #480]	; (8011854 <TL_update_ft+0xde0>)
 8011672:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	4413      	add	r3, r2
 801167a:	885b      	ldrh	r3, [r3, #2]
 801167c:	4619      	mov	r1, r3
 801167e:	4a75      	ldr	r2, [pc, #468]	; (8011854 <TL_update_ft+0xde0>)
 8011680:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011684:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8011688:	1acb      	subs	r3, r1, r3
 801168a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

	            int* rd_ptr_1 = &(ft_sync_queues[pc].rd_ptr);
 801168e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011692:	015b      	lsls	r3, r3, #5
 8011694:	4a71      	ldr	r2, [pc, #452]	; (801185c <TL_update_ft+0xde8>)
 8011696:	4413      	add	r3, r2
 8011698:	3304      	adds	r3, #4
 801169a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	            int* rd_ptr_2 = &(ft_sync_queues[pc].rd_ptr2);
 801169e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80116a2:	015b      	lsls	r3, r3, #5
 80116a4:	3308      	adds	r3, #8
 80116a6:	4a6d      	ldr	r2, [pc, #436]	; (801185c <TL_update_ft+0xde8>)
 80116a8:	4413      	add	r3, r2
 80116aa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	            int lb = get_interval_lb_ft(pc);
 80116ae:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80116b2:	f000 f991 	bl	80119d8 <get_interval_lb_ft>
 80116b6:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
	            int ub = get_interval_ub_ft(pc);
 80116ba:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80116be:	f000 f9a7 	bl	8011a10 <get_interval_ub_ft>
 80116c2:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140

	            // Initialize the loop conditions
	            bool isEmpty_1 = isEmpty_cap(pc, 1, scq_seg_1, scq_size_rd_1, input_wr_ptr_1, rd_ptr_1, ft_sync_queues[pc].desired_time_stamp);
 80116c6:	4a65      	ldr	r2, [pc, #404]	; (801185c <TL_update_ft+0xde8>)
 80116c8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80116cc:	015b      	lsls	r3, r3, #5
 80116ce:	4413      	add	r3, r2
 80116d0:	331c      	adds	r3, #28
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	9302      	str	r3, [sp, #8]
 80116d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80116da:	9301      	str	r3, [sp, #4]
 80116dc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80116e0:	9300      	str	r3, [sp, #0]
 80116e2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80116e6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80116ea:	2101      	movs	r1, #1
 80116ec:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80116f0:	f000 f9aa 	bl	8011a48 <isEmpty_cap>
 80116f4:	4603      	mov	r3, r0
 80116f6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	            bool isEmpty_2 = isEmpty_cap(pc, 2, scq_seg_2, scq_size_rd_2, input_wr_ptr_2, rd_ptr_2, ft_sync_queues[pc].desired_time_stamp);
 80116fa:	4a58      	ldr	r2, [pc, #352]	; (801185c <TL_update_ft+0xde8>)
 80116fc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011700:	015b      	lsls	r3, r3, #5
 8011702:	4413      	add	r3, r2
 8011704:	331c      	adds	r3, #28
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	9302      	str	r3, [sp, #8]
 801170a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801170e:	9301      	str	r3, [sp, #4]
 8011710:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8011714:	9300      	str	r3, [sp, #0]
 8011716:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801171a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801171e:	2102      	movs	r1, #2
 8011720:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8011724:	f000 f990 	bl	8011a48 <isEmpty_cap>
 8011728:	4603      	mov	r3, r0
 801172a:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e

	            // While the formula is not complete, i.e., one of the operands within the SCQ is non-empty
	            if(!isEmpty_1 && !isEmpty_2) {
 801172e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8011732:	f083 0301 	eor.w	r3, r3, #1
 8011736:	b2db      	uxtb	r3, r3
 8011738:	2b00      	cmp	r3, #0
 801173a:	f000 80fd 	beq.w	8011938 <TL_update_ft+0xec4>
 801173e:	f897 313e 	ldrb.w	r3, [r7, #318]	; 0x13e
 8011742:	f083 0301 	eor.w	r3, r3, #1
 8011746:	b2db      	uxtb	r3, r3
 8011748:	2b00      	cmp	r3, #0
 801174a:	f000 80f5 	beq.w	8011938 <TL_update_ft+0xec4>
	                // Initialize the result as false and with a negative time stamp
	                elt_ft_queue_t res = (elt_ft_queue_t){false, -1};
 801174e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011752:	2200      	movs	r2, #0
 8011754:	701a      	strb	r2, [r3, #0]
 8011756:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801175a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801175e:	605a      	str	r2, [r3, #4]
	                // Pop the first operands's verdict and time stamp from its SCQ
	                elt_ft_queue_t input_1 =  pop_cap(pc, 1, scq_seg_1, *rd_ptr_1);
 8011760:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801176a:	9300      	str	r3, [sp, #0]
 801176c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011770:	2201      	movs	r2, #1
 8011772:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8011776:	f000 f9d5 	bl	8011b24 <pop_cap>
	                // Pop the second operands's verdict and time stamp from its SCQ
	                elt_ft_queue_t input_2 =  pop_cap(pc, 2, scq_seg_2, *rd_ptr_2);
 801177a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011784:	9300      	str	r3, [sp, #0]
 8011786:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801178a:	2202      	movs	r2, #2
 801178c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8011790:	f000 f9c8 	bl	8011b24 <pop_cap>
	                // Determine which operand has the lower time stamp
	                int tau = min(input_1.t_q, input_2.t_q);
 8011794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011798:	685a      	ldr	r2, [r3, #4]
 801179a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	4293      	cmp	r3, r2
 80117a2:	bf28      	it	cs
 80117a4:	4613      	movcs	r3, r2
 80117a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	                // Snychronize the queues with the lower time stamp
	                ft_sync_queues[pc].desired_time_stamp = tau+1;
 80117aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80117ae:	1c5a      	adds	r2, r3, #1
 80117b0:	492a      	ldr	r1, [pc, #168]	; (801185c <TL_update_ft+0xde8>)
 80117b2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80117b6:	015b      	lsls	r3, r3, #5
 80117b8:	440b      	add	r3, r1
 80117ba:	331c      	adds	r3, #28
 80117bc:	601a      	str	r2, [r3, #0]
	                // If there is a true verdict from the synchronization and the other operand's verict is false,
	                if(ft_sync_queues[pc].pre.v_q && !input_2.v_q) {
 80117be:	4a27      	ldr	r2, [pc, #156]	; (801185c <TL_update_ft+0xde8>)
 80117c0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80117c4:	015b      	lsls	r3, r3, #5
 80117c6:	4413      	add	r3, r2
 80117c8:	3310      	adds	r3, #16
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d016      	beq.n	80117fe <TL_update_ft+0xd8a>
 80117d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	f083 0301 	eor.w	r3, r3, #1
 80117da:	b2db      	uxtb	r3, r3
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d00e      	beq.n	80117fe <TL_update_ft+0xd8a>
	                    //
	                    ft_sync_queues[pc].m_edge = ft_sync_queues[pc].pre.t_q;
 80117e0:	4a1e      	ldr	r2, [pc, #120]	; (801185c <TL_update_ft+0xde8>)
 80117e2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80117e6:	015b      	lsls	r3, r3, #5
 80117e8:	4413      	add	r3, r2
 80117ea:	3314      	adds	r3, #20
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	4619      	mov	r1, r3
 80117f0:	4a1a      	ldr	r2, [pc, #104]	; (801185c <TL_update_ft+0xde8>)
 80117f2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80117f6:	015b      	lsls	r3, r3, #5
 80117f8:	4413      	add	r3, r2
 80117fa:	330c      	adds	r3, #12
 80117fc:	6019      	str	r1, [r3, #0]
	                }
	                // If the second operand is true,
	                if(input_2.v_q) {
 80117fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d00d      	beq.n	8011824 <TL_update_ft+0xdb0>
	                    // Set res to true and the time stamp to the minimum timestamp minus the lower bound
	                    res = (elt_ft_queue_t){true, tau-lb};
 8011808:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801180c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	461a      	mov	r2, r3
 8011814:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011818:	2101      	movs	r1, #1
 801181a:	7019      	strb	r1, [r3, #0]
 801181c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011820:	605a      	str	r2, [r3, #4]
 8011822:	e03b      	b.n	801189c <TL_update_ft+0xe28>
	                }
	                // Else, if the first operand is false,
	                else if(!input_1.v_q) {
 8011824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	f083 0301 	eor.w	r3, r3, #1
 801182e:	b2db      	uxtb	r3, r3
 8011830:	2b00      	cmp	r3, #0
 8011832:	d015      	beq.n	8011860 <TL_update_ft+0xdec>
	                    // Set res to false and the time stamp to the minimum timestamp minus the lower bound
	                    res = (elt_ft_queue_t){false, tau-lb};
 8011834:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011838:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801183c:	1ad3      	subs	r3, r2, r3
 801183e:	461a      	mov	r2, r3
 8011840:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011844:	2100      	movs	r1, #0
 8011846:	7019      	strb	r1, [r3, #0]
 8011848:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801184c:	605a      	str	r2, [r3, #4]
 801184e:	e025      	b.n	801189c <TL_update_ft+0xe28>
 8011850:	200201b4 	.word	0x200201b4
 8011854:	20009eb0 	.word	0x20009eb0
 8011858:	2000b6b0 	.word	0x2000b6b0
 801185c:	2000d6b0 	.word	0x2000d6b0
	                }
	                // Else, if the minimum timestamp is greater than the difference b/w the upper and lower bounds plus the queue's synch edge
	                else if(tau>=ub-lb+ft_sync_queues[pc].m_edge) {
 8011860:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8011864:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8011868:	1ad2      	subs	r2, r2, r3
 801186a:	4943      	ldr	r1, [pc, #268]	; (8011978 <TL_update_ft+0xf04>)
 801186c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011870:	015b      	lsls	r3, r3, #5
 8011872:	440b      	add	r3, r1
 8011874:	330c      	adds	r3, #12
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4413      	add	r3, r2
 801187a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801187e:	429a      	cmp	r2, r3
 8011880:	db0c      	blt.n	801189c <TL_update_ft+0xe28>
	                    // Set res to false and the time stamp to be the minimum timestamp minus the upper bound
	                    res = (elt_ft_queue_t){false, tau-ub};
 8011882:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011886:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801188a:	1ad3      	subs	r3, r2, r3
 801188c:	461a      	mov	r2, r3
 801188e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011892:	2100      	movs	r1, #0
 8011894:	7019      	strb	r1, [r3, #0]
 8011896:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801189a:	605a      	str	r2, [r3, #4]
	                }
	                // If the result's time stamp is larger than the previously synch'd result
	                if((signed)res.t_q >= (signed)ft_sync_queues[pc].preResult) {
 801189c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	4619      	mov	r1, r3
 80118a4:	4a34      	ldr	r2, [pc, #208]	; (8011978 <TL_update_ft+0xf04>)
 80118a6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80118aa:	015b      	lsls	r3, r3, #5
 80118ac:	4413      	add	r3, r2
 80118ae:	3318      	adds	r3, #24
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	4299      	cmp	r1, r3
 80118b4:	db25      	blt.n	8011902 <TL_update_ft+0xe8e>
	                    // And add asynchrounous result to the shared connection queue
	                    add(&SCQ[addr_SCQ_map_ft[pc].start_addr], scq_size_wr, res, &(ft_sync_queues[pc].wr_ptr));
 80118b6:	4a31      	ldr	r2, [pc, #196]	; (801197c <TL_update_ft+0xf08>)
 80118b8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80118bc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80118c0:	00db      	lsls	r3, r3, #3
 80118c2:	4a2f      	ldr	r2, [pc, #188]	; (8011980 <TL_update_ft+0xf0c>)
 80118c4:	1898      	adds	r0, r3, r2
 80118c6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80118ca:	015b      	lsls	r3, r3, #5
 80118cc:	4a2a      	ldr	r2, [pc, #168]	; (8011978 <TL_update_ft+0xf04>)
 80118ce:	441a      	add	r2, r3
 80118d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80118d4:	9200      	str	r2, [sp, #0]
 80118d6:	cb0c      	ldmia	r3, {r2, r3}
 80118d8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80118dc:	f7fe ffff 	bl	80108de <add>
					    loop_progress += 1;
 80118e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80118e4:	3301      	adds	r3, #1
 80118e6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	                    // Update the previous synch result
	                    ft_sync_queues[pc].preResult = res.t_q + 1;
 80118ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	3301      	adds	r3, #1
 80118f2:	4619      	mov	r1, r3
 80118f4:	4a20      	ldr	r2, [pc, #128]	; (8011978 <TL_update_ft+0xf04>)
 80118f6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80118fa:	015b      	lsls	r3, r3, #5
 80118fc:	4413      	add	r3, r2
 80118fe:	3318      	adds	r3, #24
 8011900:	6019      	str	r1, [r3, #0]
	                }
	                // Update the synchronous queues with the second operand
	                ft_sync_queues[pc].pre = input_2;
 8011902:	4a1d      	ldr	r2, [pc, #116]	; (8011978 <TL_update_ft+0xf04>)
 8011904:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011908:	015b      	lsls	r3, r3, #5
 801190a:	4413      	add	r3, r2
 801190c:	3310      	adds	r3, #16
 801190e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011912:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011916:	e883 0003 	stmia.w	r3, {r0, r1}
	            }
	            break;
 801191a:	e00d      	b.n	8011938 <TL_update_ft+0xec4>
	        // Equivalent
	        case OP_EQUIVALENT:
	        // OR = !(!a0 AND !a1)
	        case OP_OR:
	        default:
	            r2u2_errno = 1;
 801191c:	4b19      	ldr	r3, [pc, #100]	; (8011984 <TL_update_ft+0xf10>)
 801191e:	2201      	movs	r2, #1
 8011920:	601a      	str	r2, [r3, #0]
	            break;
 8011922:	e00a      	b.n	801193a <TL_update_ft+0xec6>
				break;
 8011924:	bf00      	nop
 8011926:	e008      	b.n	801193a <TL_update_ft+0xec6>
	            break;
 8011928:	bf00      	nop
 801192a:	e006      	b.n	801193a <TL_update_ft+0xec6>
	            break;
 801192c:	bf00      	nop
 801192e:	e004      	b.n	801193a <TL_update_ft+0xec6>
	            break;
 8011930:	bf00      	nop
 8011932:	e002      	b.n	801193a <TL_update_ft+0xec6>
	            break;
 8011934:	bf00      	nop
 8011936:	e000      	b.n	801193a <TL_update_ft+0xec6>
	            break;
 8011938:	bf00      	nop
		for(pc = 0; pc < N_INSTRUCTIONS; pc++) {
 801193a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801193e:	3301      	adds	r3, #1
 8011940:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8011944:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8011948:	2bff      	cmp	r3, #255	; 0xff
 801194a:	f77f a8af 	ble.w	8010aac <TL_update_ft+0x38>
 801194e:	e000      	b.n	8011952 <TL_update_ft+0xede>
                break; // Break PC for loop
 8011950:	bf00      	nop
	        } // End Op Code Switch
	    } // End PC For Loop
	    total_progress += loop_progress;
 8011952:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8011956:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801195a:	4413      	add	r3, r2
 801195c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	} while (loop_progress > 0);
 8011960:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8011964:	2b00      	cmp	r3, #0
 8011966:	f73f a899 	bgt.w	8010a9c <TL_update_ft+0x28>
    return 0;
 801196a:	2300      	movs	r3, #0
}
 801196c:	4618      	mov	r0, r3
 801196e:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}
 8011976:	bf00      	nop
 8011978:	2000d6b0 	.word	0x2000d6b0
 801197c:	20009eb0 	.word	0x20009eb0
 8011980:	2000b6b0 	.word	0x2000b6b0
 8011984:	20007c64 	.word	0x20007c64

08011988 <read_atomic>:
//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
void read_atomic(int pc, bool* v, unsigned int* t_e) {
 8011988:	b480      	push	{r7}
 801198a:	b087      	sub	sp, #28
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	607a      	str	r2, [r7, #4]
    //OPERAND TYPES: (op/opnd_type)
    //direct        = 0b01,  atomic     = 0b00,
    //subformula    = 0b10,  not_set    = 0b11
    operand_t op = instruction_mem_ft[pc].op1;
 8011994:	490d      	ldr	r1, [pc, #52]	; (80119cc <read_atomic+0x44>)
 8011996:	68fa      	ldr	r2, [r7, #12]
 8011998:	4613      	mov	r3, r2
 801199a:	00db      	lsls	r3, r3, #3
 801199c:	1a9b      	subs	r3, r3, r2
 801199e:	18ca      	adds	r2, r1, r3
 80119a0:	f107 0314 	add.w	r3, r7, #20
 80119a4:	3201      	adds	r2, #1
 80119a6:	8812      	ldrh	r2, [r2, #0]
 80119a8:	801a      	strh	r2, [r3, #0]
    *v = atomics_vector[op.value];
 80119aa:	7d7b      	ldrb	r3, [r7, #21]
 80119ac:	461a      	mov	r2, r3
 80119ae:	4b08      	ldr	r3, [pc, #32]	; (80119d0 <read_atomic+0x48>)
 80119b0:	5c9a      	ldrb	r2, [r3, r2]
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	701a      	strb	r2, [r3, #0]
    *t_e = t_now;
 80119b6:	4b07      	ldr	r3, [pc, #28]	; (80119d4 <read_atomic+0x4c>)
 80119b8:	681a      	ldr	r2, [r3, #0]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	601a      	str	r2, [r3, #0]
}
 80119be:	bf00      	nop
 80119c0:	371c      	adds	r7, #28
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr
 80119ca:	bf00      	nop
 80119cc:	200201b4 	.word	0x200201b4
 80119d0:	2001ffb0 	.word	0x2001ffb0
 80119d4:	200200b0 	.word	0x200200b0

080119d8 <get_interval_lb_ft>:

//-------------------------------------------------------------------
//
//--------------------------------------------------------------------
int get_interval_lb_ft(int pc){
 80119d8:	b480      	push	{r7}
 80119da:	b085      	sub	sp, #20
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
    int adr = instruction_mem_ft[pc].adr_interval;
 80119e0:	4909      	ldr	r1, [pc, #36]	; (8011a08 <get_interval_lb_ft+0x30>)
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	4613      	mov	r3, r2
 80119e6:	00db      	lsls	r3, r3, #3
 80119e8:	1a9b      	subs	r3, r3, r2
 80119ea:	440b      	add	r3, r1
 80119ec:	3305      	adds	r3, #5
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	60fb      	str	r3, [r7, #12]
    return interval_mem_ft[adr].lb;
 80119f2:	4a06      	ldr	r2, [pc, #24]	; (8011a0c <get_interval_lb_ft+0x34>)
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	3714      	adds	r7, #20
 80119fe:	46bd      	mov	sp, r7
 8011a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a04:	4770      	bx	lr
 8011a06:	bf00      	nop
 8011a08:	200201b4 	.word	0x200201b4
 8011a0c:	2001f6b0 	.word	0x2001f6b0

08011a10 <get_interval_ub_ft>:

//-------------------------------------------------------------------
//
//--------------------------------------------------------------------
int get_interval_ub_ft(int pc){
 8011a10:	b480      	push	{r7}
 8011a12:	b085      	sub	sp, #20
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
    int adr = instruction_mem_ft[pc].adr_interval;
 8011a18:	4909      	ldr	r1, [pc, #36]	; (8011a40 <get_interval_ub_ft+0x30>)
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	00db      	lsls	r3, r3, #3
 8011a20:	1a9b      	subs	r3, r3, r2
 8011a22:	440b      	add	r3, r1
 8011a24:	3305      	adds	r3, #5
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	60fb      	str	r3, [r7, #12]
    return interval_mem_ft[adr].ub;
 8011a2a:	4a06      	ldr	r2, [pc, #24]	; (8011a44 <get_interval_ub_ft+0x34>)
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	009b      	lsls	r3, r3, #2
 8011a30:	4413      	add	r3, r2
 8011a32:	885b      	ldrh	r3, [r3, #2]
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3714      	adds	r7, #20
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3e:	4770      	bx	lr
 8011a40:	200201b4 	.word	0x200201b4
 8011a44:	2001f6b0 	.word	0x2001f6b0

08011a48 <isEmpty_cap>:

//-------------------------------------------------------------------
// Function that determines if the SCQ is empty. If it is, then it
//
//-------------------------------------------------------------------
bool isEmpty_cap(int pc, int obNum, elt_ft_queue_t* const scq, int size, const int wr_ptr, int* rd_ptr, int desired_time_stamp) {
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b086      	sub	sp, #24
 8011a4c:	af02      	add	r7, sp, #8
 8011a4e:	60f8      	str	r0, [r7, #12]
 8011a50:	60b9      	str	r1, [r7, #8]
 8011a52:	607a      	str	r2, [r7, #4]
 8011a54:	603b      	str	r3, [r7, #0]
    // If unitary operator
    if(obNum==1) {
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	2b01      	cmp	r3, #1
 8011a5a:	d129      	bne.n	8011ab0 <isEmpty_cap+0x68>
        switch(instruction_mem_ft[pc].op1.opnd_type) {
 8011a5c:	492e      	ldr	r1, [pc, #184]	; (8011b18 <isEmpty_cap+0xd0>)
 8011a5e:	68fa      	ldr	r2, [r7, #12]
 8011a60:	4613      	mov	r3, r2
 8011a62:	00db      	lsls	r3, r3, #3
 8011a64:	1a9b      	subs	r3, r3, r2
 8011a66:	440b      	add	r3, r1
 8011a68:	3301      	adds	r3, #1
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	2b03      	cmp	r3, #3
 8011a6e:	d81b      	bhi.n	8011aa8 <isEmpty_cap+0x60>
 8011a70:	a201      	add	r2, pc, #4	; (adr r2, 8011a78 <isEmpty_cap+0x30>)
 8011a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a76:	bf00      	nop
 8011a78:	08011a89 	.word	0x08011a89
 8011a7c:	08011aa1 	.word	0x08011aa1
 8011a80:	08011a8d 	.word	0x08011a8d
 8011a84:	08011aa5 	.word	0x08011aa5
            case atomic:
                return false;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	e041      	b.n	8011b10 <isEmpty_cap+0xc8>
            case subformula:
                return isEmpty(scq, size, wr_ptr, rd_ptr, desired_time_stamp);
 8011a8c:	6a3b      	ldr	r3, [r7, #32]
 8011a8e:	9300      	str	r3, [sp, #0]
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	69ba      	ldr	r2, [r7, #24]
 8011a94:	6839      	ldr	r1, [r7, #0]
 8011a96:	6878      	ldr	r0, [r7, #4]
 8011a98:	f7fe ff8b 	bl	80109b2 <isEmpty>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	e037      	b.n	8011b10 <isEmpty_cap+0xc8>
            case direct:
                return false;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	e035      	b.n	8011b10 <isEmpty_cap+0xc8>
            case not_set:
                return true;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e033      	b.n	8011b10 <isEmpty_cap+0xc8>
            default:
                printf("operand Error\n");
 8011aa8:	481c      	ldr	r0, [pc, #112]	; (8011b1c <isEmpty_cap+0xd4>)
 8011aaa:	f002 f8c3 	bl	8013c34 <puts>
 8011aae:	e02e      	b.n	8011b0e <isEmpty_cap+0xc6>
        }
    }
    // If binary operator
    else if(obNum==2) {
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	2b02      	cmp	r3, #2
 8011ab4:	d128      	bne.n	8011b08 <isEmpty_cap+0xc0>
        switch(instruction_mem_ft[pc].op2.opnd_type)
 8011ab6:	4918      	ldr	r1, [pc, #96]	; (8011b18 <isEmpty_cap+0xd0>)
 8011ab8:	68fa      	ldr	r2, [r7, #12]
 8011aba:	4613      	mov	r3, r2
 8011abc:	00db      	lsls	r3, r3, #3
 8011abe:	1a9b      	subs	r3, r3, r2
 8011ac0:	440b      	add	r3, r1
 8011ac2:	3303      	adds	r3, #3
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	2b03      	cmp	r3, #3
 8011ac8:	d81a      	bhi.n	8011b00 <isEmpty_cap+0xb8>
 8011aca:	a201      	add	r2, pc, #4	; (adr r2, 8011ad0 <isEmpty_cap+0x88>)
 8011acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ad0:	08011ae1 	.word	0x08011ae1
 8011ad4:	08011af9 	.word	0x08011af9
 8011ad8:	08011ae5 	.word	0x08011ae5
 8011adc:	08011afd 	.word	0x08011afd
        {
            case atomic:
                return false;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	e015      	b.n	8011b10 <isEmpty_cap+0xc8>
            case subformula:
                return isEmpty(scq, size, wr_ptr, rd_ptr, desired_time_stamp);
 8011ae4:	6a3b      	ldr	r3, [r7, #32]
 8011ae6:	9300      	str	r3, [sp, #0]
 8011ae8:	69fb      	ldr	r3, [r7, #28]
 8011aea:	69ba      	ldr	r2, [r7, #24]
 8011aec:	6839      	ldr	r1, [r7, #0]
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f7fe ff5f 	bl	80109b2 <isEmpty>
 8011af4:	4603      	mov	r3, r0
 8011af6:	e00b      	b.n	8011b10 <isEmpty_cap+0xc8>
            case direct:
                return false;
 8011af8:	2300      	movs	r3, #0
 8011afa:	e009      	b.n	8011b10 <isEmpty_cap+0xc8>
            case not_set:
                return true;
 8011afc:	2301      	movs	r3, #1
 8011afe:	e007      	b.n	8011b10 <isEmpty_cap+0xc8>
            default:
                printf("operand Error\n");
 8011b00:	4806      	ldr	r0, [pc, #24]	; (8011b1c <isEmpty_cap+0xd4>)
 8011b02:	f002 f897 	bl	8013c34 <puts>
 8011b06:	e002      	b.n	8011b0e <isEmpty_cap+0xc6>
        }
    }
    else {
        printf("obNum Error\n");
 8011b08:	4805      	ldr	r0, [pc, #20]	; (8011b20 <isEmpty_cap+0xd8>)
 8011b0a:	f002 f893 	bl	8013c34 <puts>
    }
    return true;
 8011b0e:	2301      	movs	r3, #1
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3710      	adds	r7, #16
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	200201b4 	.word	0x200201b4
 8011b1c:	08018018 	.word	0x08018018
 8011b20:	08018028 	.word	0x08018028

08011b24 <pop_cap>:

//-------------------------------------------------------------------
//
//-------------------------------------------------------------------
elt_ft_queue_t pop_cap(int pc, int obNum, elt_ft_queue_t* scq, int rd_ptr) {
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b08a      	sub	sp, #40	; 0x28
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	60f8      	str	r0, [r7, #12]
 8011b2c:	60b9      	str	r1, [r7, #8]
 8011b2e:	607a      	str	r2, [r7, #4]
 8011b30:	603b      	str	r3, [r7, #0]
    // If unary operator
    if(obNum==1) {
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d134      	bne.n	8011ba2 <pop_cap+0x7e>
        switch(instruction_mem_ft[pc].op1.opnd_type)
 8011b38:	493f      	ldr	r1, [pc, #252]	; (8011c38 <pop_cap+0x114>)
 8011b3a:	68ba      	ldr	r2, [r7, #8]
 8011b3c:	4613      	mov	r3, r2
 8011b3e:	00db      	lsls	r3, r3, #3
 8011b40:	1a9b      	subs	r3, r3, r2
 8011b42:	440b      	add	r3, r1
 8011b44:	3301      	adds	r3, #1
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	2b03      	cmp	r3, #3
 8011b4a:	d826      	bhi.n	8011b9a <pop_cap+0x76>
 8011b4c:	a201      	add	r2, pc, #4	; (adr r2, 8011b54 <pop_cap+0x30>)
 8011b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b52:	bf00      	nop
 8011b54:	08011c1b 	.word	0x08011c1b
 8011b58:	08011b73 	.word	0x08011b73
 8011b5c:	08011b65 	.word	0x08011b65
 8011b60:	08011c1b 	.word	0x08011c1b
        {
            case atomic:// return anything you want
                break;
            case subformula:
                //printf("pop: rd_ptr: %d, v_q: %d\n", rd_ptr, scq[rd_ptr].v_q);
                return pop(scq, rd_ptr);
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b68:	6839      	ldr	r1, [r7, #0]
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fe ff6c 	bl	8010a48 <pop>
 8011b70:	e05d      	b.n	8011c2e <pop_cap+0x10a>
            case direct:
                return (elt_ft_queue_t){instruction_mem_ft[pc].op1.value, t_now};
 8011b72:	4931      	ldr	r1, [pc, #196]	; (8011c38 <pop_cap+0x114>)
 8011b74:	68ba      	ldr	r2, [r7, #8]
 8011b76:	4613      	mov	r3, r2
 8011b78:	00db      	lsls	r3, r3, #3
 8011b7a:	1a9b      	subs	r3, r3, r2
 8011b7c:	440b      	add	r3, r1
 8011b7e:	3302      	adds	r3, #2
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	bf14      	ite	ne
 8011b86:	2301      	movne	r3, #1
 8011b88:	2300      	moveq	r3, #0
 8011b8a:	b2d9      	uxtb	r1, r3
 8011b8c:	4b2b      	ldr	r3, [pc, #172]	; (8011c3c <pop_cap+0x118>)
 8011b8e:	681a      	ldr	r2, [r3, #0]
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	7019      	strb	r1, [r3, #0]
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	605a      	str	r2, [r3, #4]
 8011b98:	e049      	b.n	8011c2e <pop_cap+0x10a>
            case not_set:// return anything you want
                break;
            default:
                printf("operand Error\n");
 8011b9a:	4829      	ldr	r0, [pc, #164]	; (8011c40 <pop_cap+0x11c>)
 8011b9c:	f002 f84a 	bl	8013c34 <puts>
 8011ba0:	e03e      	b.n	8011c20 <pop_cap+0xfc>
        }
    }
    // If binary operator
    else if(obNum==2) {
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2b02      	cmp	r3, #2
 8011ba6:	d134      	bne.n	8011c12 <pop_cap+0xee>
        switch(instruction_mem_ft[pc].op2.opnd_type)
 8011ba8:	4923      	ldr	r1, [pc, #140]	; (8011c38 <pop_cap+0x114>)
 8011baa:	68ba      	ldr	r2, [r7, #8]
 8011bac:	4613      	mov	r3, r2
 8011bae:	00db      	lsls	r3, r3, #3
 8011bb0:	1a9b      	subs	r3, r3, r2
 8011bb2:	440b      	add	r3, r1
 8011bb4:	3303      	adds	r3, #3
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	2b03      	cmp	r3, #3
 8011bba:	d826      	bhi.n	8011c0a <pop_cap+0xe6>
 8011bbc:	a201      	add	r2, pc, #4	; (adr r2, 8011bc4 <pop_cap+0xa0>)
 8011bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc2:	bf00      	nop
 8011bc4:	08011c1f 	.word	0x08011c1f
 8011bc8:	08011be3 	.word	0x08011be3
 8011bcc:	08011bd5 	.word	0x08011bd5
 8011bd0:	08011c1f 	.word	0x08011c1f
        {
            case atomic:// return anything you want
                break;
            case subformula:
                return pop(scq, rd_ptr);
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bd8:	6839      	ldr	r1, [r7, #0]
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7fe ff34 	bl	8010a48 <pop>
 8011be0:	e025      	b.n	8011c2e <pop_cap+0x10a>
            case direct:
                return (elt_ft_queue_t){instruction_mem_ft[pc].op2.value, t_now};
 8011be2:	4915      	ldr	r1, [pc, #84]	; (8011c38 <pop_cap+0x114>)
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	4613      	mov	r3, r2
 8011be8:	00db      	lsls	r3, r3, #3
 8011bea:	1a9b      	subs	r3, r3, r2
 8011bec:	440b      	add	r3, r1
 8011bee:	3304      	adds	r3, #4
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	bf14      	ite	ne
 8011bf6:	2301      	movne	r3, #1
 8011bf8:	2300      	moveq	r3, #0
 8011bfa:	b2d9      	uxtb	r1, r3
 8011bfc:	4b0f      	ldr	r3, [pc, #60]	; (8011c3c <pop_cap+0x118>)
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	7019      	strb	r1, [r3, #0]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	605a      	str	r2, [r3, #4]
 8011c08:	e011      	b.n	8011c2e <pop_cap+0x10a>
            case not_set:// return anything you want
                break;
            default:
                printf("operand Error\n");
 8011c0a:	480d      	ldr	r0, [pc, #52]	; (8011c40 <pop_cap+0x11c>)
 8011c0c:	f002 f812 	bl	8013c34 <puts>
 8011c10:	e006      	b.n	8011c20 <pop_cap+0xfc>
        }
    }
    else{
        printf("obNum Error\n");
 8011c12:	480c      	ldr	r0, [pc, #48]	; (8011c44 <pop_cap+0x120>)
 8011c14:	f002 f80e 	bl	8013c34 <puts>
 8011c18:	e002      	b.n	8011c20 <pop_cap+0xfc>
                break;
 8011c1a:	bf00      	nop
 8011c1c:	e000      	b.n	8011c20 <pop_cap+0xfc>
                break;
 8011c1e:	bf00      	nop
    }
    return (elt_ft_queue_t){false, -1};
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2200      	movs	r2, #0
 8011c24:	701a      	strb	r2, [r3, #0]
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c2c:	605a      	str	r2, [r3, #4]
}
 8011c2e:	68f8      	ldr	r0, [r7, #12]
 8011c30:	3728      	adds	r7, #40	; 0x28
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}
 8011c36:	bf00      	nop
 8011c38:	200201b4 	.word	0x200201b4
 8011c3c:	200200b0 	.word	0x200200b0
 8011c40:	08018018 	.word	0x08018018
 8011c44:	08018028 	.word	0x08018028

08011c48 <string2Int>:
#if R2U2_AT_Extra_Filters
#include "extra_filters/filter_rate.h"
#include "extra_filters/filter_movavg.h"
#endif

static inline int string2Int(char** char_vec, int len) {
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	6039      	str	r1, [r7, #0]
	int op = 0;
 8011c52:	2300      	movs	r3, #0
 8011c54:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<len;i++) {
 8011c56:	2300      	movs	r3, #0
 8011c58:	60bb      	str	r3, [r7, #8]
 8011c5a:	e00c      	b.n	8011c76 <string2Int+0x2e>
		op = op<<1 | (*(*char_vec+i)-'0');
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	005a      	lsls	r2, r3, #1
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6819      	ldr	r1, [r3, #0]
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	440b      	add	r3, r1
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	3b30      	subs	r3, #48	; 0x30
 8011c6c:	4313      	orrs	r3, r2
 8011c6e:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<len;i++) {
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	3301      	adds	r3, #1
 8011c74:	60bb      	str	r3, [r7, #8]
 8011c76:	68ba      	ldr	r2, [r7, #8]
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	dbee      	blt.n	8011c5c <string2Int+0x14>
	}
	*char_vec += len; //skip the data that has been read
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681a      	ldr	r2, [r3, #0]
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	441a      	add	r2, r3
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	601a      	str	r2, [r3, #0]
	return op;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3714      	adds	r7, #20
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <decode_inst>:

static void decode_inst(char* s, instruction_t* inst) {
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b082      	sub	sp, #8
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
	//1. operant code, 5 bits
	inst->opcode = string2Int(&s,L_OPC);
 8011ca2:	1d3b      	adds	r3, r7, #4
 8011ca4:	2105      	movs	r1, #5
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f7ff ffce 	bl	8011c48 <string2Int>
 8011cac:	4603      	mov	r3, r0
 8011cae:	b2da      	uxtb	r2, r3
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	701a      	strb	r2, [r3, #0]

	//2. op1, 10 bits. First 2 bit is the input type
	inst->op1.opnd_type = string2Int(&s,2);
 8011cb4:	1d3b      	adds	r3, r7, #4
 8011cb6:	2102      	movs	r1, #2
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7ff ffc5 	bl	8011c48 <string2Int>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	b2da      	uxtb	r2, r3
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	705a      	strb	r2, [r3, #1]
	inst->op1.value = (uint8_t)string2Int(&s,L_OP-2);
 8011cc6:	1d3b      	adds	r3, r7, #4
 8011cc8:	2108      	movs	r1, #8
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7ff ffbc 	bl	8011c48 <string2Int>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	b2da      	uxtb	r2, r3
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	709a      	strb	r2, [r3, #2]

	//3. op2, 10 bits. First 2 bit is the input type
	inst->op2.opnd_type = string2Int(&s,2);
 8011cd8:	1d3b      	adds	r3, r7, #4
 8011cda:	2102      	movs	r1, #2
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7ff ffb3 	bl	8011c48 <string2Int>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	b2da      	uxtb	r2, r3
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	70da      	strb	r2, [r3, #3]
	inst->op2.value = (uint8_t)string2Int(&s,L_OP-2);
 8011cea:	1d3b      	adds	r3, r7, #4
 8011cec:	2108      	movs	r1, #8
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7ff ffaa 	bl	8011c48 <string2Int>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	b2da      	uxtb	r2, r3
 8011cf8:	683b      	ldr	r3, [r7, #0]
 8011cfa:	711a      	strb	r2, [r3, #4]

	//4. time stamp  address, 8 bits
	inst->adr_interval = (uint8_t)string2Int(&s,L_INTVL);
 8011cfc:	1d3b      	adds	r3, r7, #4
 8011cfe:	2108      	movs	r1, #8
 8011d00:	4618      	mov	r0, r3
 8011d02:	f7ff ffa1 	bl	8011c48 <string2Int>
 8011d06:	4603      	mov	r3, r0
 8011d08:	b2da      	uxtb	r2, r3
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	715a      	strb	r2, [r3, #5]

	//5. scratch? 7 bits (seems for Bayesian network)
	inst->scratch = (uint8_t)string2Int(&s,L_SCRATCH);
 8011d0e:	1d3b      	adds	r3, r7, #4
 8011d10:	2107      	movs	r1, #7
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7ff ff98 	bl	8011c48 <string2Int>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	b2da      	uxtb	r2, r3
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	719a      	strb	r2, [r3, #6]
}
 8011d20:	bf00      	nop
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <decode_interval>:

static void decode_interval(char* s, interval_t* interval) {
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	6039      	str	r1, [r7, #0]
	//1. lower bound, time stamp bits
	interval->lb = (interval_bound_t)string2Int(&s,L_INTERVAL);
 8011d32:	1d3b      	adds	r3, r7, #4
 8011d34:	2120      	movs	r1, #32
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7ff ff86 	bl	8011c48 <string2Int>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	b29a      	uxth	r2, r3
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	801a      	strh	r2, [r3, #0]

	//2. upper bound, time stamp bits
	interval->ub = (interval_bound_t)string2Int(&s,L_INTERVAL);
 8011d44:	1d3b      	adds	r3, r7, #4
 8011d46:	2120      	movs	r1, #32
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7ff ff7d 	bl	8011c48 <string2Int>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	b29a      	uxth	r2, r3
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	805a      	strh	r2, [r3, #2]
}
 8011d56:	bf00      	nop
 8011d58:	3708      	adds	r7, #8
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}

08011d5e <decode_scq_size>:

static void decode_scq_size(char* s, addr_SCQ_t* addr) {
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b082      	sub	sp, #8
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
 8011d66:	6039      	str	r1, [r7, #0]
	//1. start address
	addr->start_addr = (uint16_t)string2Int(&s,L_SCQ_ADDRESS);
 8011d68:	1d3b      	adds	r3, r7, #4
 8011d6a:	2110      	movs	r1, #16
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7ff ff6b 	bl	8011c48 <string2Int>
 8011d72:	4603      	mov	r3, r0
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	801a      	strh	r2, [r3, #0]

	//2. end address
	addr->end_addr = (uint16_t)string2Int(&s,L_SCQ_ADDRESS);
 8011d7a:	1d3b      	adds	r3, r7, #4
 8011d7c:	2110      	movs	r1, #16
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7ff ff62 	bl	8011c48 <string2Int>
 8011d84:	4603      	mov	r3, r0
 8011d86:	b29a      	uxth	r2, r3
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	805a      	strh	r2, [r3, #2]
}
 8011d8c:	bf00      	nop
 8011d8e:	3708      	adds	r7, #8
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <decode_at_instr>:

static void decode_at_instr(char* s, at_instruction_t* inst) {
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b084      	sub	sp, #16
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
    // 1. index to place final atomic value
    inst->atom_addr = (uint8_t)string2Int(&s,L_ATOMIC_ADDR);
 8011d9e:	1d3b      	adds	r3, r7, #4
 8011da0:	2108      	movs	r1, #8
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7ff ff50 	bl	8011c48 <string2Int>
 8011da8:	4603      	mov	r3, r0
 8011daa:	b2da      	uxtb	r2, r3
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	70da      	strb	r2, [r3, #3]

    // 2. type of filter to apply to signal
    inst->filter = string2Int(&s,L_FILTER);
 8011db0:	1d3b      	adds	r3, r7, #4
 8011db2:	2104      	movs	r1, #4
 8011db4:	4618      	mov	r0, r3
 8011db6:	f7ff ff47 	bl	8011c48 <string2Int>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	b2da      	uxtb	r2, r3
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	705a      	strb	r2, [r3, #1]

    // 3. type of comparison operator to apply
    inst->cond = string2Int(&s,L_COMP);
 8011dc2:	1d3b      	adds	r3, r7, #4
 8011dc4:	2103      	movs	r1, #3
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7ff ff3e 	bl	8011c48 <string2Int>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	b2da      	uxtb	r2, r3
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	701a      	strb	r2, [r3, #0]

    // 4. is the comparison value a signal?
    inst->comp_is_sig = string2Int(&s,1);
 8011dd4:	1d3b      	adds	r3, r7, #4
 8011dd6:	2101      	movs	r1, #1
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7ff ff35 	bl	8011c48 <string2Int>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	bf14      	ite	ne
 8011de4:	2301      	movne	r3, #1
 8011de6:	2300      	moveq	r3, #0
 8011de8:	b2da      	uxtb	r2, r3
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	711a      	strb	r2, [r3, #4]

    // 5. value of constant/signal to compare to filtered signal
    int comp = string2Int(&s,L_NUM);
 8011dee:	1d3b      	adds	r3, r7, #4
 8011df0:	2120      	movs	r1, #32
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7ff ff28 	bl	8011c48 <string2Int>
 8011df8:	60f8      	str	r0, [r7, #12]

    // 6. signal we're considering
    inst->sig_addr = (uint8_t)string2Int(&s,L_SIG_ADDR);
 8011dfa:	1d3b      	adds	r3, r7, #4
 8011dfc:	2108      	movs	r1, #8
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7ff ff22 	bl	8011c48 <string2Int>
 8011e04:	4603      	mov	r3, r0
 8011e06:	b2da      	uxtb	r2, r3
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	709a      	strb	r2, [r3, #2]

    // 7. extra filter argument
    int arg = string2Int(&s,L_NUM);
 8011e0c:	1d3b      	adds	r3, r7, #4
 8011e0e:	2120      	movs	r1, #32
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7ff ff19 	bl	8011c48 <string2Int>
 8011e16:	60b8      	str	r0, [r7, #8]

    if(inst->comp_is_sig)
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	791b      	ldrb	r3, [r3, #4]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d003      	beq.n	8011e28 <decode_at_instr+0x94>
        inst->comp.s = (uint8_t) comp;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	b25a      	sxtb	r2, r3
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	721a      	strb	r2, [r3, #8]

    switch(inst->filter) {
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	785b      	ldrb	r3, [r3, #1]
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	2b05      	cmp	r3, #5
 8011e30:	f200 8082 	bhi.w	8011f38 <decode_at_instr+0x1a4>
 8011e34:	a201      	add	r2, pc, #4	; (adr r2, 8011e3c <decode_at_instr+0xa8>)
 8011e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e3a:	bf00      	nop
 8011e3c:	08011e55 	.word	0x08011e55
 8011e40:	08011e75 	.word	0x08011e75
 8011e44:	08011e8b 	.word	0x08011e8b
 8011e48:	08011eab 	.word	0x08011eab
 8011e4c:	08011ed9 	.word	0x08011ed9
 8011e50:	08011f09 	.word	0x08011f09
        case OP_BOOL:
        {
            if(!inst->comp_is_sig)
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	791b      	ldrb	r3, [r3, #4]
 8011e58:	f083 0301 	eor.w	r3, r3, #1
 8011e5c:	b2db      	uxtb	r3, r3
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d06c      	beq.n	8011f3c <decode_at_instr+0x1a8>
                inst->comp.b = (bool) comp;
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	bf14      	ite	ne
 8011e68:	2301      	movne	r3, #1
 8011e6a:	2300      	moveq	r3, #0
 8011e6c:	b2da      	uxtb	r2, r3
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	721a      	strb	r2, [r3, #8]
            break;
 8011e72:	e063      	b.n	8011f3c <decode_at_instr+0x1a8>
        }
        case OP_INT:
        {
            if(!inst->comp_is_sig)
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	791b      	ldrb	r3, [r3, #4]
 8011e78:	f083 0301 	eor.w	r3, r3, #1
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d05e      	beq.n	8011f40 <decode_at_instr+0x1ac>
                inst->comp.i = (int32_t) comp;
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	68fa      	ldr	r2, [r7, #12]
 8011e86:	609a      	str	r2, [r3, #8]
            break;
 8011e88:	e05a      	b.n	8011f40 <decode_at_instr+0x1ac>
        }
        case OP_DOUBLE:
        {
            if(!inst->comp_is_sig)
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	791b      	ldrb	r3, [r3, #4]
 8011e8e:	f083 0301 	eor.w	r3, r3, #1
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d055      	beq.n	8011f44 <decode_at_instr+0x1b0>
                inst->comp.d = (double) comp;
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	f7ee fb53 	bl	8000544 <__aeabi_i2d>
 8011e9e:	4602      	mov	r2, r0
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	6839      	ldr	r1, [r7, #0]
 8011ea4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            break;
 8011ea8:	e04c      	b.n	8011f44 <decode_at_instr+0x1b0>
        }
        #if R2U2_AT_Extra_Filters
        case OP_RATE:
        {
            if(!inst->comp_is_sig)
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	791b      	ldrb	r3, [r3, #4]
 8011eae:	f083 0301 	eor.w	r3, r3, #1
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d007      	beq.n	8011ec8 <decode_at_instr+0x134>
                inst->comp.d = (double) comp;
 8011eb8:	68f8      	ldr	r0, [r7, #12]
 8011eba:	f7ee fb43 	bl	8000544 <__aeabi_i2d>
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	460b      	mov	r3, r1
 8011ec2:	6839      	ldr	r1, [r7, #0]
 8011ec4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            inst->filt_data_struct.prev = 0;
 8011ec8:	6839      	ldr	r1, [r7, #0]
 8011eca:	f04f 0200 	mov.w	r2, #0
 8011ece:	f04f 0300 	mov.w	r3, #0
 8011ed2:	e9c1 2304 	strd	r2, r3, [r1, #16]
            break;
 8011ed6:	e036      	b.n	8011f46 <decode_at_instr+0x1b2>
        }
        case OP_ABS_DIFF_ANGLE:
        {
            if(!inst->comp_is_sig)
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	791b      	ldrb	r3, [r3, #4]
 8011edc:	f083 0301 	eor.w	r3, r3, #1
 8011ee0:	b2db      	uxtb	r3, r3
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d007      	beq.n	8011ef6 <decode_at_instr+0x162>
                inst->comp.d = (double) comp;
 8011ee6:	68f8      	ldr	r0, [r7, #12]
 8011ee8:	f7ee fb2c 	bl	8000544 <__aeabi_i2d>
 8011eec:	4602      	mov	r2, r0
 8011eee:	460b      	mov	r3, r1
 8011ef0:	6839      	ldr	r1, [r7, #0]
 8011ef2:	e9c1 2302 	strd	r2, r3, [r1, #8]
            inst->filt_data_struct.diff_angle = (double) arg;
 8011ef6:	68b8      	ldr	r0, [r7, #8]
 8011ef8:	f7ee fb24 	bl	8000544 <__aeabi_i2d>
 8011efc:	4602      	mov	r2, r0
 8011efe:	460b      	mov	r3, r1
 8011f00:	6839      	ldr	r1, [r7, #0]
 8011f02:	e9c1 2304 	strd	r2, r3, [r1, #16]
            break;
 8011f06:	e01e      	b.n	8011f46 <decode_at_instr+0x1b2>
        }
        case OP_MOVAVG:
        {
            if(!inst->comp_is_sig)
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	791b      	ldrb	r3, [r3, #4]
 8011f0c:	f083 0301 	eor.w	r3, r3, #1
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d007      	beq.n	8011f26 <decode_at_instr+0x192>
                inst->comp.d = (double) comp;
 8011f16:	68f8      	ldr	r0, [r7, #12]
 8011f18:	f7ee fb14 	bl	8000544 <__aeabi_i2d>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	460b      	mov	r3, r1
 8011f20:	6839      	ldr	r1, [r7, #0]
 8011f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
            inst->filt_data_struct.movavg = filter_movavg_init((uint16_t)arg);
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7fe fad4 	bl	80104d8 <filter_movavg_init>
 8011f30:	4602      	mov	r2, r0
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	611a      	str	r2, [r3, #16]
            break;
 8011f36:	e006      	b.n	8011f46 <decode_at_instr+0x1b2>
            if(!inst->comp_is_sig)
                inst->comp.b = (bool) comp;
            break;
        }
        #endif
        default: break;
 8011f38:	bf00      	nop
 8011f3a:	e004      	b.n	8011f46 <decode_at_instr+0x1b2>
            break;
 8011f3c:	bf00      	nop
 8011f3e:	e002      	b.n	8011f46 <decode_at_instr+0x1b2>
            break;
 8011f40:	bf00      	nop
 8011f42:	e000      	b.n	8011f46 <decode_at_instr+0x1b2>
            break;
 8011f44:	bf00      	nop
    }
}
 8011f46:	bf00      	nop
 8011f48:	3710      	adds	r7, #16
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop

08011f50 <parse_inst_ft_file>:

//------------------------------------------------------------------------------
// Future Time Instruction Parser
//------------------------------------------------------------------------------
void parse_inst_ft_file(const char* filename) {
 8011f50:	b580      	push	{r7, lr}
 8011f52:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
 8011f56:	af00      	add	r7, sp, #0
 8011f58:	1d3b      	adds	r3, r7, #4
 8011f5a:	6018      	str	r0, [r3, #0]
	int PC = 0;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
	char line[MAX_LINE];
	FIL file; //File handle
	FRESULT fres; //Result after operations

	fres = f_open ( &file, filename, FA_READ | FA_OPEN_EXISTING );
 8011f62:	1d3b      	adds	r3, r7, #4
 8011f64:	f107 000c 	add.w	r0, r7, #12
 8011f68:	2201      	movs	r2, #1
 8011f6a:	6819      	ldr	r1, [r3, #0]
 8011f6c:	f7fa f97e 	bl	800c26c <f_open>
 8011f70:	4603      	mov	r3, r0
 8011f72:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
	if ( fres == FR_OK ) {
 8011f76:	f897 32bb 	ldrb.w	r3, [r7, #699]	; 0x2bb
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d130      	bne.n	8011fe0 <parse_inst_ft_file+0x90>
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) { /* read a line */
 8011f7e:	e01e      	b.n	8011fbe <parse_inst_ft_file+0x6e>
			line[strcspn(line,"\n\r")] = 0; //remove ending special symbol
 8011f80:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8011f84:	491b      	ldr	r1, [pc, #108]	; (8011ff4 <parse_inst_ft_file+0xa4>)
 8011f86:	4618      	mov	r0, r3
 8011f88:	f001 ff03 	bl	8013d92 <strcspn>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8011f92:	4413      	add	r3, r2
 8011f94:	2200      	movs	r2, #0
 8011f96:	f803 2c88 	strb.w	r2, [r3, #-136]
			decode_inst(line, &instruction_mem_ft[PC]);
 8011f9a:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	00db      	lsls	r3, r3, #3
 8011fa2:	1a9b      	subs	r3, r3, r2
 8011fa4:	4a14      	ldr	r2, [pc, #80]	; (8011ff8 <parse_inst_ft_file+0xa8>)
 8011fa6:	441a      	add	r2, r3
 8011fa8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8011fac:	4611      	mov	r1, r2
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7ff fe72 	bl	8011c98 <decode_inst>
			PC++;
 8011fb4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8011fb8:	3301      	adds	r3, #1
 8011fba:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) { /* read a line */
 8011fbe:	f107 020c 	add.w	r2, r7, #12
 8011fc2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8011fc6:	2180      	movs	r1, #128	; 0x80
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7fa fe12 	bl	800cbf2 <f_gets>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d1d5      	bne.n	8011f80 <parse_inst_ft_file+0x30>
		}
		f_close ( &file );
 8011fd4:	f107 030c 	add.w	r3, r7, #12
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7fa fdda 	bl	800cb92 <f_close>
	} else {
		perror ( filename ); /* why didn't the file open? */
	}

}
 8011fde:	e003      	b.n	8011fe8 <parse_inst_ft_file+0x98>
		perror ( filename ); /* why didn't the file open? */
 8011fe0:	1d3b      	adds	r3, r7, #4
 8011fe2:	6818      	ldr	r0, [r3, #0]
 8011fe4:	f001 fd98 	bl	8013b18 <perror>
}
 8011fe8:	bf00      	nop
 8011fea:	f507 7730 	add.w	r7, r7, #704	; 0x2c0
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
 8011ff2:	bf00      	nop
 8011ff4:	08018034 	.word	0x08018034
 8011ff8:	200201b4 	.word	0x200201b4

08011ffc <parse_inst_pt_file>:
	}
}
//------------------------------------------------------------------------------
// Past Time Instruction Parser
//------------------------------------------------------------------------------
void parse_inst_pt_file(const char* filename) {
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
 8012002:	af00      	add	r7, sp, #0
 8012004:	1d3b      	adds	r3, r7, #4
 8012006:	6018      	str	r0, [r3, #0]
	int PC = 0;
 8012008:	2300      	movs	r3, #0
 801200a:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
	char line[MAX_LINE];
    FIL file; //File handle
    FRESULT fres; //Result after operations

    fres = f_open ( &file, filename, FA_READ | FA_OPEN_EXISTING );
 801200e:	1d3b      	adds	r3, r7, #4
 8012010:	f107 000c 	add.w	r0, r7, #12
 8012014:	2201      	movs	r2, #1
 8012016:	6819      	ldr	r1, [r3, #0]
 8012018:	f7fa f928 	bl	800c26c <f_open>
 801201c:	4603      	mov	r3, r0
 801201e:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
	if ( fres == FR_OK ) {
 8012022:	f897 32bb 	ldrb.w	r3, [r7, #699]	; 0x2bb
 8012026:	2b00      	cmp	r3, #0
 8012028:	d130      	bne.n	801208c <parse_inst_pt_file+0x90>
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) {/* read a line */
 801202a:	e01e      	b.n	801206a <parse_inst_pt_file+0x6e>
			line[strcspn(line,"\n\r")] = 0; //remove ending special symbol
 801202c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8012030:	491b      	ldr	r1, [pc, #108]	; (80120a0 <parse_inst_pt_file+0xa4>)
 8012032:	4618      	mov	r0, r3
 8012034:	f001 fead 	bl	8013d92 <strcspn>
 8012038:	4603      	mov	r3, r0
 801203a:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 801203e:	4413      	add	r3, r2
 8012040:	2200      	movs	r2, #0
 8012042:	f803 2c88 	strb.w	r2, [r3, #-136]
			decode_inst(line, &instruction_mem_pt[PC]);
 8012046:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 801204a:	4613      	mov	r3, r2
 801204c:	00db      	lsls	r3, r3, #3
 801204e:	1a9b      	subs	r3, r3, r2
 8012050:	4a14      	ldr	r2, [pc, #80]	; (80120a4 <parse_inst_pt_file+0xa8>)
 8012052:	441a      	add	r2, r3
 8012054:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8012058:	4611      	mov	r1, r2
 801205a:	4618      	mov	r0, r3
 801205c:	f7ff fe1c 	bl	8011c98 <decode_inst>
			PC++;
 8012060:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8012064:	3301      	adds	r3, #1
 8012066:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) {/* read a line */
 801206a:	f107 020c 	add.w	r2, r7, #12
 801206e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8012072:	2180      	movs	r1, #128	; 0x80
 8012074:	4618      	mov	r0, r3
 8012076:	f7fa fdbc 	bl	800cbf2 <f_gets>
 801207a:	4603      	mov	r3, r0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d1d5      	bne.n	801202c <parse_inst_pt_file+0x30>
		}
		f_close ( &file );
 8012080:	f107 030c 	add.w	r3, r7, #12
 8012084:	4618      	mov	r0, r3
 8012086:	f7fa fd84 	bl	800cb92 <f_close>
	} else {
		perror ( filename ); /* why didn't the file open? */
	}
}
 801208a:	e003      	b.n	8012094 <parse_inst_pt_file+0x98>
		perror ( filename ); /* why didn't the file open? */
 801208c:	1d3b      	adds	r3, r7, #4
 801208e:	6818      	ldr	r0, [r3, #0]
 8012090:	f001 fd42 	bl	8013b18 <perror>
}
 8012094:	bf00      	nop
 8012096:	f507 7730 	add.w	r7, r7, #704	; 0x2c0
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	08018034 	.word	0x08018034
 80120a4:	2000afb0 	.word	0x2000afb0

080120a8 <parse_interval_ft_file>:
	}
}
//------------------------------------------------------------------------------
// Future-Time Interval Parser
//------------------------------------------------------------------------------
void parse_interval_ft_file(const char* filename) {
 80120a8:	b580      	push	{r7, lr}
 80120aa:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	1d3b      	adds	r3, r7, #4
 80120b2:	6018      	str	r0, [r3, #0]
	int PC = 0;
 80120b4:	2300      	movs	r3, #0
 80120b6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
	char line[MAX_LINE];
    FIL file; //File handle
    FRESULT fres; //Result after operations

    fres = f_open ( &file, filename, FA_READ | FA_OPEN_EXISTING );
 80120ba:	1d3b      	adds	r3, r7, #4
 80120bc:	f107 000c 	add.w	r0, r7, #12
 80120c0:	2201      	movs	r2, #1
 80120c2:	6819      	ldr	r1, [r3, #0]
 80120c4:	f7fa f8d2 	bl	800c26c <f_open>
 80120c8:	4603      	mov	r3, r0
 80120ca:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
	if ( fres == FR_OK ) {
 80120ce:	f897 32bb 	ldrb.w	r3, [r7, #699]	; 0x2bb
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d12e      	bne.n	8012134 <parse_interval_ft_file+0x8c>
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) {/* read a line */
 80120d6:	e01c      	b.n	8012112 <parse_interval_ft_file+0x6a>
			line[strcspn(line,"\n\r")] = 0; //remove ending special symbol
 80120d8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80120dc:	491a      	ldr	r1, [pc, #104]	; (8012148 <parse_interval_ft_file+0xa0>)
 80120de:	4618      	mov	r0, r3
 80120e0:	f001 fe57 	bl	8013d92 <strcspn>
 80120e4:	4603      	mov	r3, r0
 80120e6:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 80120ea:	4413      	add	r3, r2
 80120ec:	2200      	movs	r2, #0
 80120ee:	f803 2c88 	strb.w	r2, [r3, #-136]
			decode_interval(line, &interval_mem_ft[PC]);
 80120f2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80120f6:	009b      	lsls	r3, r3, #2
 80120f8:	4a14      	ldr	r2, [pc, #80]	; (801214c <parse_interval_ft_file+0xa4>)
 80120fa:	441a      	add	r2, r3
 80120fc:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8012100:	4611      	mov	r1, r2
 8012102:	4618      	mov	r0, r3
 8012104:	f7ff fe10 	bl	8011d28 <decode_interval>
			PC++;
 8012108:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 801210c:	3301      	adds	r3, #1
 801210e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) {/* read a line */
 8012112:	f107 020c 	add.w	r2, r7, #12
 8012116:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801211a:	2180      	movs	r1, #128	; 0x80
 801211c:	4618      	mov	r0, r3
 801211e:	f7fa fd68 	bl	800cbf2 <f_gets>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d1d7      	bne.n	80120d8 <parse_interval_ft_file+0x30>
		}
		f_close ( &file );
 8012128:	f107 030c 	add.w	r3, r7, #12
 801212c:	4618      	mov	r0, r3
 801212e:	f7fa fd30 	bl	800cb92 <f_close>
	} else {
		perror ( filename ); /* why didn't the file open? */
	}
}
 8012132:	e003      	b.n	801213c <parse_interval_ft_file+0x94>
		perror ( filename ); /* why didn't the file open? */
 8012134:	1d3b      	adds	r3, r7, #4
 8012136:	6818      	ldr	r0, [r3, #0]
 8012138:	f001 fcee 	bl	8013b18 <perror>
}
 801213c:	bf00      	nop
 801213e:	f507 7730 	add.w	r7, r7, #704	; 0x2c0
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop
 8012148:	08018034 	.word	0x08018034
 801214c:	2001f6b0 	.word	0x2001f6b0

08012150 <parse_interval_pt_file>:
	}
}
//------------------------------------------------------------------------------
// Past-Time Interval Parser
//------------------------------------------------------------------------------
void parse_interval_pt_file(const char* filename) {
 8012150:	b580      	push	{r7, lr}
 8012152:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
 8012156:	af00      	add	r7, sp, #0
 8012158:	1d3b      	adds	r3, r7, #4
 801215a:	6018      	str	r0, [r3, #0]
	int PC = 0;
 801215c:	2300      	movs	r3, #0
 801215e:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
	char line[MAX_LINE];
    FIL file; //File handle
    FRESULT fres; //Result after operations

    fres = f_open ( &file, filename, FA_READ | FA_OPEN_EXISTING );
 8012162:	1d3b      	adds	r3, r7, #4
 8012164:	f107 000c 	add.w	r0, r7, #12
 8012168:	2201      	movs	r2, #1
 801216a:	6819      	ldr	r1, [r3, #0]
 801216c:	f7fa f87e 	bl	800c26c <f_open>
 8012170:	4603      	mov	r3, r0
 8012172:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
	if ( fres == FR_OK ) {
 8012176:	f897 32bb 	ldrb.w	r3, [r7, #699]	; 0x2bb
 801217a:	2b00      	cmp	r3, #0
 801217c:	d12e      	bne.n	80121dc <parse_interval_pt_file+0x8c>
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) {/* read a line */
 801217e:	e01c      	b.n	80121ba <parse_interval_pt_file+0x6a>
			line[strcspn(line,"\n\r")] = 0; //remove ending special symbol
 8012180:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8012184:	491a      	ldr	r1, [pc, #104]	; (80121f0 <parse_interval_pt_file+0xa0>)
 8012186:	4618      	mov	r0, r3
 8012188:	f001 fe03 	bl	8013d92 <strcspn>
 801218c:	4603      	mov	r3, r0
 801218e:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8012192:	4413      	add	r3, r2
 8012194:	2200      	movs	r2, #0
 8012196:	f803 2c88 	strb.w	r2, [r3, #-136]
			decode_interval(line, &interval_mem_pt[PC]);
 801219a:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 801219e:	009b      	lsls	r3, r3, #2
 80121a0:	4a14      	ldr	r2, [pc, #80]	; (80121f4 <parse_interval_pt_file+0xa4>)
 80121a2:	441a      	add	r2, r3
 80121a4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80121a8:	4611      	mov	r1, r2
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7ff fdbc 	bl	8011d28 <decode_interval>
			PC++;
 80121b0:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80121b4:	3301      	adds	r3, #1
 80121b6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) {/* read a line */
 80121ba:	f107 020c 	add.w	r2, r7, #12
 80121be:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80121c2:	2180      	movs	r1, #128	; 0x80
 80121c4:	4618      	mov	r0, r3
 80121c6:	f7fa fd14 	bl	800cbf2 <f_gets>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d1d7      	bne.n	8012180 <parse_interval_pt_file+0x30>
		}
		f_close ( &file );
 80121d0:	f107 030c 	add.w	r3, r7, #12
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7fa fcdc 	bl	800cb92 <f_close>
	} else {
		perror ( filename ); /* why didn't the file open? */
	}
}
 80121da:	e003      	b.n	80121e4 <parse_interval_pt_file+0x94>
		perror ( filename ); /* why didn't the file open? */
 80121dc:	1d3b      	adds	r3, r7, #4
 80121de:	6818      	ldr	r0, [r3, #0]
 80121e0:	f001 fc9a 	bl	8013b18 <perror>
}
 80121e4:	bf00      	nop
 80121e6:	f507 7730 	add.w	r7, r7, #704	; 0x2c0
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}
 80121ee:	bf00      	nop
 80121f0:	08018034 	.word	0x08018034
 80121f4:	2001fbb0 	.word	0x2001fbb0

080121f8 <parse_scq_size_file>:
	}
}
//------------------------------------------------------------------------------
// SCQ Parser (only Future-Time; Past-Time doesn't use SCQs)
//------------------------------------------------------------------------------
void parse_scq_size_file(const char* filename) {
 80121f8:	b580      	push	{r7, lr}
 80121fa:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
 80121fe:	af00      	add	r7, sp, #0
 8012200:	1d3b      	adds	r3, r7, #4
 8012202:	6018      	str	r0, [r3, #0]
	int PC = 0;
 8012204:	2300      	movs	r3, #0
 8012206:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
	char line[MAX_LINE];
    FIL file; //File handle
    FRESULT fres; //Result after operations

    fres = f_open ( &file, filename, FA_READ | FA_OPEN_EXISTING );
 801220a:	1d3b      	adds	r3, r7, #4
 801220c:	f107 000c 	add.w	r0, r7, #12
 8012210:	2201      	movs	r2, #1
 8012212:	6819      	ldr	r1, [r3, #0]
 8012214:	f7fa f82a 	bl	800c26c <f_open>
 8012218:	4603      	mov	r3, r0
 801221a:	f887 32bb 	strb.w	r3, [r7, #699]	; 0x2bb
	if ( fres == FR_OK ) {
 801221e:	f897 32bb 	ldrb.w	r3, [r7, #699]	; 0x2bb
 8012222:	2b00      	cmp	r3, #0
 8012224:	d139      	bne.n	801229a <parse_scq_size_file+0xa2>
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) {/* read a line */
 8012226:	e027      	b.n	8012278 <parse_scq_size_file+0x80>
			line[strcspn(line,"\n\r")] = 0; //remove ending special symbol
 8012228:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801222c:	491f      	ldr	r1, [pc, #124]	; (80122ac <parse_scq_size_file+0xb4>)
 801222e:	4618      	mov	r0, r3
 8012230:	f001 fdaf 	bl	8013d92 <strcspn>
 8012234:	4603      	mov	r3, r0
 8012236:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 801223a:	4413      	add	r3, r2
 801223c:	2200      	movs	r2, #0
 801223e:	f803 2c88 	strb.w	r2, [r3, #-136]
			decode_scq_size(line, &addr_SCQ_map_ft[PC]);
 8012242:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	4a19      	ldr	r2, [pc, #100]	; (80122b0 <parse_scq_size_file+0xb8>)
 801224a:	441a      	add	r2, r3
 801224c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8012250:	4611      	mov	r1, r2
 8012252:	4618      	mov	r0, r3
 8012254:	f7ff fd83 	bl	8011d5e <decode_scq_size>
			(SCQ+(addr_SCQ_map_ft[PC].start_addr))->t_q = -1; // initialize timestamp of the first elelment to -1
 8012258:	4a15      	ldr	r2, [pc, #84]	; (80122b0 <parse_scq_size_file+0xb8>)
 801225a:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 801225e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8012262:	00db      	lsls	r3, r3, #3
 8012264:	4a13      	ldr	r2, [pc, #76]	; (80122b4 <parse_scq_size_file+0xbc>)
 8012266:	4413      	add	r3, r2
 8012268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801226c:	605a      	str	r2, [r3, #4]
			PC++;
 801226e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8012272:	3301      	adds	r3, #1
 8012274:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) {/* read a line */
 8012278:	f107 020c 	add.w	r2, r7, #12
 801227c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8012280:	2180      	movs	r1, #128	; 0x80
 8012282:	4618      	mov	r0, r3
 8012284:	f7fa fcb5 	bl	800cbf2 <f_gets>
 8012288:	4603      	mov	r3, r0
 801228a:	2b00      	cmp	r3, #0
 801228c:	d1cc      	bne.n	8012228 <parse_scq_size_file+0x30>
		}
		f_close ( &file );
 801228e:	f107 030c 	add.w	r3, r7, #12
 8012292:	4618      	mov	r0, r3
 8012294:	f7fa fc7d 	bl	800cb92 <f_close>
	} else {
		perror ( filename ); /* why didn't the file open? */
	}
}
 8012298:	e003      	b.n	80122a2 <parse_scq_size_file+0xaa>
		perror ( filename ); /* why didn't the file open? */
 801229a:	1d3b      	adds	r3, r7, #4
 801229c:	6818      	ldr	r0, [r3, #0]
 801229e:	f001 fc3b 	bl	8013b18 <perror>
}
 80122a2:	bf00      	nop
 80122a4:	f507 7730 	add.w	r7, r7, #704	; 0x2c0
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	08018034 	.word	0x08018034
 80122b0:	20009eb0 	.word	0x20009eb0
 80122b4:	2000b6b0 	.word	0x2000b6b0

080122b8 <parse_at_file>:

//------------------------------------------------------------------------------
// AT Parser
//------------------------------------------------------------------------------
void parse_at_file(const char *filename)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
 80122be:	af00      	add	r7, sp, #0
 80122c0:	1d3b      	adds	r3, r7, #4
 80122c2:	6018      	str	r0, [r3, #0]
	uint8_t PC = 0;
 80122c4:	2300      	movs	r3, #0
 80122c6:	f887 32b7 	strb.w	r3, [r7, #695]	; 0x2b7
	char line[MAX_LINE];
    FIL file; //File handle
    FRESULT fres; //Result after operations

    fres = f_open ( &file, filename, FA_READ | FA_OPEN_EXISTING );
 80122ca:	1d3b      	adds	r3, r7, #4
 80122cc:	f107 0008 	add.w	r0, r7, #8
 80122d0:	2201      	movs	r2, #1
 80122d2:	6819      	ldr	r1, [r3, #0]
 80122d4:	f7f9 ffca 	bl	800c26c <f_open>
 80122d8:	4603      	mov	r3, r0
 80122da:	f887 32b6 	strb.w	r3, [r7, #694]	; 0x2b6
	if ( fres == FR_OK) {
 80122de:	f897 32b6 	ldrb.w	r3, [r7, #694]	; 0x2b6
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d131      	bne.n	801234a <parse_at_file+0x92>
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) {/* read a line */
 80122e6:	e01f      	b.n	8012328 <parse_at_file+0x70>
			line[strcspn(line,"\n\r")] = 0; //remove ending special symbol
 80122e8:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80122ec:	491d      	ldr	r1, [pc, #116]	; (8012364 <parse_at_file+0xac>)
 80122ee:	4618      	mov	r0, r3
 80122f0:	f001 fd4f 	bl	8013d92 <strcspn>
 80122f4:	4603      	mov	r3, r0
 80122f6:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80122fa:	4413      	add	r3, r2
 80122fc:	2200      	movs	r2, #0
 80122fe:	f803 2c84 	strb.w	r2, [r3, #-132]
			decode_at_instr(line, &at_instructions[PC]);
 8012302:	f897 22b7 	ldrb.w	r2, [r7, #695]	; 0x2b7
 8012306:	4613      	mov	r3, r2
 8012308:	005b      	lsls	r3, r3, #1
 801230a:	4413      	add	r3, r2
 801230c:	00db      	lsls	r3, r3, #3
 801230e:	4a16      	ldr	r2, [pc, #88]	; (8012368 <parse_at_file+0xb0>)
 8012310:	441a      	add	r2, r3
 8012312:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8012316:	4611      	mov	r1, r2
 8012318:	4618      	mov	r0, r3
 801231a:	f7ff fd3b 	bl	8011d94 <decode_at_instr>
			PC++;
 801231e:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8012322:	3301      	adds	r3, #1
 8012324:	f887 32b7 	strb.w	r3, [r7, #695]	; 0x2b7
		while ( f_gets ( line, sizeof(line), &file ) != NULL ) {/* read a line */
 8012328:	f107 0208 	add.w	r2, r7, #8
 801232c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8012330:	2180      	movs	r1, #128	; 0x80
 8012332:	4618      	mov	r0, r3
 8012334:	f7fa fc5d 	bl	800cbf2 <f_gets>
 8012338:	4603      	mov	r3, r0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d1d4      	bne.n	80122e8 <parse_at_file+0x30>
		}
		f_close ( &file );
 801233e:	f107 0308 	add.w	r3, r7, #8
 8012342:	4618      	mov	r0, r3
 8012344:	f7fa fc25 	bl	800cb92 <f_close>
 8012348:	e003      	b.n	8012352 <parse_at_file+0x9a>
	} else {
		perror ( filename ); /* why didn't the file open? */
 801234a:	1d3b      	adds	r3, r7, #4
 801234c:	6818      	ldr	r0, [r3, #0]
 801234e:	f001 fbe3 	bl	8013b18 <perror>
	}

	num_instr = PC; // set number of AT instructions
 8012352:	f897 32b7 	ldrb.w	r3, [r7, #695]	; 0x2b7
 8012356:	4a05      	ldr	r2, [pc, #20]	; (801236c <parse_at_file+0xb4>)
 8012358:	6013      	str	r3, [r2, #0]
}
 801235a:	bf00      	nop
 801235c:	f507 772e 	add.w	r7, r7, #696	; 0x2b8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}
 8012364:	08018034 	.word	0x08018034
 8012368:	200086b0 	.word	0x200086b0
 801236c:	20007c60 	.word	0x20007c60

08012370 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8012370:	f8df d034 	ldr.w	sp, [pc, #52]	; 80123a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012374:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8012376:	e003      	b.n	8012380 <LoopCopyDataInit>

08012378 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012378:	4b0c      	ldr	r3, [pc, #48]	; (80123ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801237a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801237c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801237e:	3104      	adds	r1, #4

08012380 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012380:	480b      	ldr	r0, [pc, #44]	; (80123b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8012382:	4b0c      	ldr	r3, [pc, #48]	; (80123b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8012384:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8012386:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012388:	d3f6      	bcc.n	8012378 <CopyDataInit>
  ldr  r2, =_sbss
 801238a:	4a0b      	ldr	r2, [pc, #44]	; (80123b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801238c:	e002      	b.n	8012394 <LoopFillZerobss>

0801238e <FillZerobss>:

/* Zero fill the bss segment. */  
 FillZerobss:
  movs  r3, #0
 801238e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012390:	f842 3b04 	str.w	r3, [r2], #4

08012394 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012394:	4b09      	ldr	r3, [pc, #36]	; (80123bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8012396:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012398:	d3f9      	bcc.n	801238e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801239a:	f7f7 fff1 	bl	800a380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801239e:	f000 f9e1 	bl	8012764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80123a2:	f7f1 f997 	bl	80036d4 <main>
  bx  lr    
 80123a6:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80123a8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80123ac:	08018bac 	.word	0x08018bac
  ldr  r0, =_sdata
 80123b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80123b4:	20000240 	.word	0x20000240
  ldr  r2, =_sbss
 80123b8:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 80123bc:	200208c4 	.word	0x200208c4

080123c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80123c0:	e7fe      	b.n	80123c0 <ADC_IRQHandler>
	...

080123c4 <__errno>:
 80123c4:	4b01      	ldr	r3, [pc, #4]	; (80123cc <__errno+0x8>)
 80123c6:	6818      	ldr	r0, [r3, #0]
 80123c8:	4770      	bx	lr
 80123ca:	bf00      	nop
 80123cc:	2000006c 	.word	0x2000006c

080123d0 <__sflush_r>:
 80123d0:	898a      	ldrh	r2, [r1, #12]
 80123d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123d6:	4605      	mov	r5, r0
 80123d8:	0710      	lsls	r0, r2, #28
 80123da:	460c      	mov	r4, r1
 80123dc:	d458      	bmi.n	8012490 <__sflush_r+0xc0>
 80123de:	684b      	ldr	r3, [r1, #4]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	dc05      	bgt.n	80123f0 <__sflush_r+0x20>
 80123e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	dc02      	bgt.n	80123f0 <__sflush_r+0x20>
 80123ea:	2000      	movs	r0, #0
 80123ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123f2:	2e00      	cmp	r6, #0
 80123f4:	d0f9      	beq.n	80123ea <__sflush_r+0x1a>
 80123f6:	2300      	movs	r3, #0
 80123f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80123fc:	682f      	ldr	r7, [r5, #0]
 80123fe:	602b      	str	r3, [r5, #0]
 8012400:	d032      	beq.n	8012468 <__sflush_r+0x98>
 8012402:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012404:	89a3      	ldrh	r3, [r4, #12]
 8012406:	075a      	lsls	r2, r3, #29
 8012408:	d505      	bpl.n	8012416 <__sflush_r+0x46>
 801240a:	6863      	ldr	r3, [r4, #4]
 801240c:	1ac0      	subs	r0, r0, r3
 801240e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012410:	b10b      	cbz	r3, 8012416 <__sflush_r+0x46>
 8012412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012414:	1ac0      	subs	r0, r0, r3
 8012416:	2300      	movs	r3, #0
 8012418:	4602      	mov	r2, r0
 801241a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801241c:	6a21      	ldr	r1, [r4, #32]
 801241e:	4628      	mov	r0, r5
 8012420:	47b0      	blx	r6
 8012422:	1c43      	adds	r3, r0, #1
 8012424:	89a3      	ldrh	r3, [r4, #12]
 8012426:	d106      	bne.n	8012436 <__sflush_r+0x66>
 8012428:	6829      	ldr	r1, [r5, #0]
 801242a:	291d      	cmp	r1, #29
 801242c:	d82c      	bhi.n	8012488 <__sflush_r+0xb8>
 801242e:	4a2a      	ldr	r2, [pc, #168]	; (80124d8 <__sflush_r+0x108>)
 8012430:	40ca      	lsrs	r2, r1
 8012432:	07d6      	lsls	r6, r2, #31
 8012434:	d528      	bpl.n	8012488 <__sflush_r+0xb8>
 8012436:	2200      	movs	r2, #0
 8012438:	6062      	str	r2, [r4, #4]
 801243a:	04d9      	lsls	r1, r3, #19
 801243c:	6922      	ldr	r2, [r4, #16]
 801243e:	6022      	str	r2, [r4, #0]
 8012440:	d504      	bpl.n	801244c <__sflush_r+0x7c>
 8012442:	1c42      	adds	r2, r0, #1
 8012444:	d101      	bne.n	801244a <__sflush_r+0x7a>
 8012446:	682b      	ldr	r3, [r5, #0]
 8012448:	b903      	cbnz	r3, 801244c <__sflush_r+0x7c>
 801244a:	6560      	str	r0, [r4, #84]	; 0x54
 801244c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801244e:	602f      	str	r7, [r5, #0]
 8012450:	2900      	cmp	r1, #0
 8012452:	d0ca      	beq.n	80123ea <__sflush_r+0x1a>
 8012454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012458:	4299      	cmp	r1, r3
 801245a:	d002      	beq.n	8012462 <__sflush_r+0x92>
 801245c:	4628      	mov	r0, r5
 801245e:	f000 fa43 	bl	80128e8 <_free_r>
 8012462:	2000      	movs	r0, #0
 8012464:	6360      	str	r0, [r4, #52]	; 0x34
 8012466:	e7c1      	b.n	80123ec <__sflush_r+0x1c>
 8012468:	6a21      	ldr	r1, [r4, #32]
 801246a:	2301      	movs	r3, #1
 801246c:	4628      	mov	r0, r5
 801246e:	47b0      	blx	r6
 8012470:	1c41      	adds	r1, r0, #1
 8012472:	d1c7      	bne.n	8012404 <__sflush_r+0x34>
 8012474:	682b      	ldr	r3, [r5, #0]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d0c4      	beq.n	8012404 <__sflush_r+0x34>
 801247a:	2b1d      	cmp	r3, #29
 801247c:	d001      	beq.n	8012482 <__sflush_r+0xb2>
 801247e:	2b16      	cmp	r3, #22
 8012480:	d101      	bne.n	8012486 <__sflush_r+0xb6>
 8012482:	602f      	str	r7, [r5, #0]
 8012484:	e7b1      	b.n	80123ea <__sflush_r+0x1a>
 8012486:	89a3      	ldrh	r3, [r4, #12]
 8012488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801248c:	81a3      	strh	r3, [r4, #12]
 801248e:	e7ad      	b.n	80123ec <__sflush_r+0x1c>
 8012490:	690f      	ldr	r7, [r1, #16]
 8012492:	2f00      	cmp	r7, #0
 8012494:	d0a9      	beq.n	80123ea <__sflush_r+0x1a>
 8012496:	0793      	lsls	r3, r2, #30
 8012498:	680e      	ldr	r6, [r1, #0]
 801249a:	bf08      	it	eq
 801249c:	694b      	ldreq	r3, [r1, #20]
 801249e:	600f      	str	r7, [r1, #0]
 80124a0:	bf18      	it	ne
 80124a2:	2300      	movne	r3, #0
 80124a4:	eba6 0807 	sub.w	r8, r6, r7
 80124a8:	608b      	str	r3, [r1, #8]
 80124aa:	f1b8 0f00 	cmp.w	r8, #0
 80124ae:	dd9c      	ble.n	80123ea <__sflush_r+0x1a>
 80124b0:	6a21      	ldr	r1, [r4, #32]
 80124b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80124b4:	4643      	mov	r3, r8
 80124b6:	463a      	mov	r2, r7
 80124b8:	4628      	mov	r0, r5
 80124ba:	47b0      	blx	r6
 80124bc:	2800      	cmp	r0, #0
 80124be:	dc06      	bgt.n	80124ce <__sflush_r+0xfe>
 80124c0:	89a3      	ldrh	r3, [r4, #12]
 80124c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124c6:	81a3      	strh	r3, [r4, #12]
 80124c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124cc:	e78e      	b.n	80123ec <__sflush_r+0x1c>
 80124ce:	4407      	add	r7, r0
 80124d0:	eba8 0800 	sub.w	r8, r8, r0
 80124d4:	e7e9      	b.n	80124aa <__sflush_r+0xda>
 80124d6:	bf00      	nop
 80124d8:	20400001 	.word	0x20400001

080124dc <_fflush_r>:
 80124dc:	b538      	push	{r3, r4, r5, lr}
 80124de:	690b      	ldr	r3, [r1, #16]
 80124e0:	4605      	mov	r5, r0
 80124e2:	460c      	mov	r4, r1
 80124e4:	b913      	cbnz	r3, 80124ec <_fflush_r+0x10>
 80124e6:	2500      	movs	r5, #0
 80124e8:	4628      	mov	r0, r5
 80124ea:	bd38      	pop	{r3, r4, r5, pc}
 80124ec:	b118      	cbz	r0, 80124f6 <_fflush_r+0x1a>
 80124ee:	6983      	ldr	r3, [r0, #24]
 80124f0:	b90b      	cbnz	r3, 80124f6 <_fflush_r+0x1a>
 80124f2:	f000 f887 	bl	8012604 <__sinit>
 80124f6:	4b14      	ldr	r3, [pc, #80]	; (8012548 <_fflush_r+0x6c>)
 80124f8:	429c      	cmp	r4, r3
 80124fa:	d11b      	bne.n	8012534 <_fflush_r+0x58>
 80124fc:	686c      	ldr	r4, [r5, #4]
 80124fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d0ef      	beq.n	80124e6 <_fflush_r+0xa>
 8012506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012508:	07d0      	lsls	r0, r2, #31
 801250a:	d404      	bmi.n	8012516 <_fflush_r+0x3a>
 801250c:	0599      	lsls	r1, r3, #22
 801250e:	d402      	bmi.n	8012516 <_fflush_r+0x3a>
 8012510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012512:	f000 f94c 	bl	80127ae <__retarget_lock_acquire_recursive>
 8012516:	4628      	mov	r0, r5
 8012518:	4621      	mov	r1, r4
 801251a:	f7ff ff59 	bl	80123d0 <__sflush_r>
 801251e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012520:	07da      	lsls	r2, r3, #31
 8012522:	4605      	mov	r5, r0
 8012524:	d4e0      	bmi.n	80124e8 <_fflush_r+0xc>
 8012526:	89a3      	ldrh	r3, [r4, #12]
 8012528:	059b      	lsls	r3, r3, #22
 801252a:	d4dd      	bmi.n	80124e8 <_fflush_r+0xc>
 801252c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801252e:	f000 f93f 	bl	80127b0 <__retarget_lock_release_recursive>
 8012532:	e7d9      	b.n	80124e8 <_fflush_r+0xc>
 8012534:	4b05      	ldr	r3, [pc, #20]	; (801254c <_fflush_r+0x70>)
 8012536:	429c      	cmp	r4, r3
 8012538:	d101      	bne.n	801253e <_fflush_r+0x62>
 801253a:	68ac      	ldr	r4, [r5, #8]
 801253c:	e7df      	b.n	80124fe <_fflush_r+0x22>
 801253e:	4b04      	ldr	r3, [pc, #16]	; (8012550 <_fflush_r+0x74>)
 8012540:	429c      	cmp	r4, r3
 8012542:	bf08      	it	eq
 8012544:	68ec      	ldreq	r4, [r5, #12]
 8012546:	e7da      	b.n	80124fe <_fflush_r+0x22>
 8012548:	08018064 	.word	0x08018064
 801254c:	08018084 	.word	0x08018084
 8012550:	08018044 	.word	0x08018044

08012554 <std>:
 8012554:	2300      	movs	r3, #0
 8012556:	b510      	push	{r4, lr}
 8012558:	4604      	mov	r4, r0
 801255a:	e9c0 3300 	strd	r3, r3, [r0]
 801255e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012562:	6083      	str	r3, [r0, #8]
 8012564:	8181      	strh	r1, [r0, #12]
 8012566:	6643      	str	r3, [r0, #100]	; 0x64
 8012568:	81c2      	strh	r2, [r0, #14]
 801256a:	6183      	str	r3, [r0, #24]
 801256c:	4619      	mov	r1, r3
 801256e:	2208      	movs	r2, #8
 8012570:	305c      	adds	r0, #92	; 0x5c
 8012572:	f000 f9a1 	bl	80128b8 <memset>
 8012576:	4b05      	ldr	r3, [pc, #20]	; (801258c <std+0x38>)
 8012578:	6263      	str	r3, [r4, #36]	; 0x24
 801257a:	4b05      	ldr	r3, [pc, #20]	; (8012590 <std+0x3c>)
 801257c:	62a3      	str	r3, [r4, #40]	; 0x28
 801257e:	4b05      	ldr	r3, [pc, #20]	; (8012594 <std+0x40>)
 8012580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012582:	4b05      	ldr	r3, [pc, #20]	; (8012598 <std+0x44>)
 8012584:	6224      	str	r4, [r4, #32]
 8012586:	6323      	str	r3, [r4, #48]	; 0x30
 8012588:	bd10      	pop	{r4, pc}
 801258a:	bf00      	nop
 801258c:	08013d09 	.word	0x08013d09
 8012590:	08013d2f 	.word	0x08013d2f
 8012594:	08013d67 	.word	0x08013d67
 8012598:	08013d8b 	.word	0x08013d8b

0801259c <_cleanup_r>:
 801259c:	4901      	ldr	r1, [pc, #4]	; (80125a4 <_cleanup_r+0x8>)
 801259e:	f000 b8c1 	b.w	8012724 <_fwalk_reent>
 80125a2:	bf00      	nop
 80125a4:	080124dd 	.word	0x080124dd

080125a8 <__sfmoreglue>:
 80125a8:	b570      	push	{r4, r5, r6, lr}
 80125aa:	1e4a      	subs	r2, r1, #1
 80125ac:	2568      	movs	r5, #104	; 0x68
 80125ae:	4355      	muls	r5, r2
 80125b0:	460e      	mov	r6, r1
 80125b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80125b6:	f000 f9e7 	bl	8012988 <_malloc_r>
 80125ba:	4604      	mov	r4, r0
 80125bc:	b140      	cbz	r0, 80125d0 <__sfmoreglue+0x28>
 80125be:	2100      	movs	r1, #0
 80125c0:	e9c0 1600 	strd	r1, r6, [r0]
 80125c4:	300c      	adds	r0, #12
 80125c6:	60a0      	str	r0, [r4, #8]
 80125c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80125cc:	f000 f974 	bl	80128b8 <memset>
 80125d0:	4620      	mov	r0, r4
 80125d2:	bd70      	pop	{r4, r5, r6, pc}

080125d4 <__sfp_lock_acquire>:
 80125d4:	4801      	ldr	r0, [pc, #4]	; (80125dc <__sfp_lock_acquire+0x8>)
 80125d6:	f000 b8ea 	b.w	80127ae <__retarget_lock_acquire_recursive>
 80125da:	bf00      	nop
 80125dc:	200208bc 	.word	0x200208bc

080125e0 <__sfp_lock_release>:
 80125e0:	4801      	ldr	r0, [pc, #4]	; (80125e8 <__sfp_lock_release+0x8>)
 80125e2:	f000 b8e5 	b.w	80127b0 <__retarget_lock_release_recursive>
 80125e6:	bf00      	nop
 80125e8:	200208bc 	.word	0x200208bc

080125ec <__sinit_lock_acquire>:
 80125ec:	4801      	ldr	r0, [pc, #4]	; (80125f4 <__sinit_lock_acquire+0x8>)
 80125ee:	f000 b8de 	b.w	80127ae <__retarget_lock_acquire_recursive>
 80125f2:	bf00      	nop
 80125f4:	200208b7 	.word	0x200208b7

080125f8 <__sinit_lock_release>:
 80125f8:	4801      	ldr	r0, [pc, #4]	; (8012600 <__sinit_lock_release+0x8>)
 80125fa:	f000 b8d9 	b.w	80127b0 <__retarget_lock_release_recursive>
 80125fe:	bf00      	nop
 8012600:	200208b7 	.word	0x200208b7

08012604 <__sinit>:
 8012604:	b510      	push	{r4, lr}
 8012606:	4604      	mov	r4, r0
 8012608:	f7ff fff0 	bl	80125ec <__sinit_lock_acquire>
 801260c:	69a3      	ldr	r3, [r4, #24]
 801260e:	b11b      	cbz	r3, 8012618 <__sinit+0x14>
 8012610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012614:	f7ff bff0 	b.w	80125f8 <__sinit_lock_release>
 8012618:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801261c:	6523      	str	r3, [r4, #80]	; 0x50
 801261e:	4b13      	ldr	r3, [pc, #76]	; (801266c <__sinit+0x68>)
 8012620:	4a13      	ldr	r2, [pc, #76]	; (8012670 <__sinit+0x6c>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	62a2      	str	r2, [r4, #40]	; 0x28
 8012626:	42a3      	cmp	r3, r4
 8012628:	bf04      	itt	eq
 801262a:	2301      	moveq	r3, #1
 801262c:	61a3      	streq	r3, [r4, #24]
 801262e:	4620      	mov	r0, r4
 8012630:	f000 f820 	bl	8012674 <__sfp>
 8012634:	6060      	str	r0, [r4, #4]
 8012636:	4620      	mov	r0, r4
 8012638:	f000 f81c 	bl	8012674 <__sfp>
 801263c:	60a0      	str	r0, [r4, #8]
 801263e:	4620      	mov	r0, r4
 8012640:	f000 f818 	bl	8012674 <__sfp>
 8012644:	2200      	movs	r2, #0
 8012646:	60e0      	str	r0, [r4, #12]
 8012648:	2104      	movs	r1, #4
 801264a:	6860      	ldr	r0, [r4, #4]
 801264c:	f7ff ff82 	bl	8012554 <std>
 8012650:	68a0      	ldr	r0, [r4, #8]
 8012652:	2201      	movs	r2, #1
 8012654:	2109      	movs	r1, #9
 8012656:	f7ff ff7d 	bl	8012554 <std>
 801265a:	68e0      	ldr	r0, [r4, #12]
 801265c:	2202      	movs	r2, #2
 801265e:	2112      	movs	r1, #18
 8012660:	f7ff ff78 	bl	8012554 <std>
 8012664:	2301      	movs	r3, #1
 8012666:	61a3      	str	r3, [r4, #24]
 8012668:	e7d2      	b.n	8012610 <__sinit+0xc>
 801266a:	bf00      	nop
 801266c:	080180a4 	.word	0x080180a4
 8012670:	0801259d 	.word	0x0801259d

08012674 <__sfp>:
 8012674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012676:	4607      	mov	r7, r0
 8012678:	f7ff ffac 	bl	80125d4 <__sfp_lock_acquire>
 801267c:	4b1e      	ldr	r3, [pc, #120]	; (80126f8 <__sfp+0x84>)
 801267e:	681e      	ldr	r6, [r3, #0]
 8012680:	69b3      	ldr	r3, [r6, #24]
 8012682:	b913      	cbnz	r3, 801268a <__sfp+0x16>
 8012684:	4630      	mov	r0, r6
 8012686:	f7ff ffbd 	bl	8012604 <__sinit>
 801268a:	3648      	adds	r6, #72	; 0x48
 801268c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012690:	3b01      	subs	r3, #1
 8012692:	d503      	bpl.n	801269c <__sfp+0x28>
 8012694:	6833      	ldr	r3, [r6, #0]
 8012696:	b30b      	cbz	r3, 80126dc <__sfp+0x68>
 8012698:	6836      	ldr	r6, [r6, #0]
 801269a:	e7f7      	b.n	801268c <__sfp+0x18>
 801269c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80126a0:	b9d5      	cbnz	r5, 80126d8 <__sfp+0x64>
 80126a2:	4b16      	ldr	r3, [pc, #88]	; (80126fc <__sfp+0x88>)
 80126a4:	60e3      	str	r3, [r4, #12]
 80126a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80126aa:	6665      	str	r5, [r4, #100]	; 0x64
 80126ac:	f000 f87e 	bl	80127ac <__retarget_lock_init_recursive>
 80126b0:	f7ff ff96 	bl	80125e0 <__sfp_lock_release>
 80126b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80126b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80126bc:	6025      	str	r5, [r4, #0]
 80126be:	61a5      	str	r5, [r4, #24]
 80126c0:	2208      	movs	r2, #8
 80126c2:	4629      	mov	r1, r5
 80126c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80126c8:	f000 f8f6 	bl	80128b8 <memset>
 80126cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80126d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80126d4:	4620      	mov	r0, r4
 80126d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126d8:	3468      	adds	r4, #104	; 0x68
 80126da:	e7d9      	b.n	8012690 <__sfp+0x1c>
 80126dc:	2104      	movs	r1, #4
 80126de:	4638      	mov	r0, r7
 80126e0:	f7ff ff62 	bl	80125a8 <__sfmoreglue>
 80126e4:	4604      	mov	r4, r0
 80126e6:	6030      	str	r0, [r6, #0]
 80126e8:	2800      	cmp	r0, #0
 80126ea:	d1d5      	bne.n	8012698 <__sfp+0x24>
 80126ec:	f7ff ff78 	bl	80125e0 <__sfp_lock_release>
 80126f0:	230c      	movs	r3, #12
 80126f2:	603b      	str	r3, [r7, #0]
 80126f4:	e7ee      	b.n	80126d4 <__sfp+0x60>
 80126f6:	bf00      	nop
 80126f8:	080180a4 	.word	0x080180a4
 80126fc:	ffff0001 	.word	0xffff0001

08012700 <fiprintf>:
 8012700:	b40e      	push	{r1, r2, r3}
 8012702:	b503      	push	{r0, r1, lr}
 8012704:	4601      	mov	r1, r0
 8012706:	ab03      	add	r3, sp, #12
 8012708:	4805      	ldr	r0, [pc, #20]	; (8012720 <fiprintf+0x20>)
 801270a:	f853 2b04 	ldr.w	r2, [r3], #4
 801270e:	6800      	ldr	r0, [r0, #0]
 8012710:	9301      	str	r3, [sp, #4]
 8012712:	f000 f9bd 	bl	8012a90 <_vfiprintf_r>
 8012716:	b002      	add	sp, #8
 8012718:	f85d eb04 	ldr.w	lr, [sp], #4
 801271c:	b003      	add	sp, #12
 801271e:	4770      	bx	lr
 8012720:	2000006c 	.word	0x2000006c

08012724 <_fwalk_reent>:
 8012724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012728:	4606      	mov	r6, r0
 801272a:	4688      	mov	r8, r1
 801272c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012730:	2700      	movs	r7, #0
 8012732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012736:	f1b9 0901 	subs.w	r9, r9, #1
 801273a:	d505      	bpl.n	8012748 <_fwalk_reent+0x24>
 801273c:	6824      	ldr	r4, [r4, #0]
 801273e:	2c00      	cmp	r4, #0
 8012740:	d1f7      	bne.n	8012732 <_fwalk_reent+0xe>
 8012742:	4638      	mov	r0, r7
 8012744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012748:	89ab      	ldrh	r3, [r5, #12]
 801274a:	2b01      	cmp	r3, #1
 801274c:	d907      	bls.n	801275e <_fwalk_reent+0x3a>
 801274e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012752:	3301      	adds	r3, #1
 8012754:	d003      	beq.n	801275e <_fwalk_reent+0x3a>
 8012756:	4629      	mov	r1, r5
 8012758:	4630      	mov	r0, r6
 801275a:	47c0      	blx	r8
 801275c:	4307      	orrs	r7, r0
 801275e:	3568      	adds	r5, #104	; 0x68
 8012760:	e7e9      	b.n	8012736 <_fwalk_reent+0x12>
	...

08012764 <__libc_init_array>:
 8012764:	b570      	push	{r4, r5, r6, lr}
 8012766:	4d0d      	ldr	r5, [pc, #52]	; (801279c <__libc_init_array+0x38>)
 8012768:	4c0d      	ldr	r4, [pc, #52]	; (80127a0 <__libc_init_array+0x3c>)
 801276a:	1b64      	subs	r4, r4, r5
 801276c:	10a4      	asrs	r4, r4, #2
 801276e:	2600      	movs	r6, #0
 8012770:	42a6      	cmp	r6, r4
 8012772:	d109      	bne.n	8012788 <__libc_init_array+0x24>
 8012774:	4d0b      	ldr	r5, [pc, #44]	; (80127a4 <__libc_init_array+0x40>)
 8012776:	4c0c      	ldr	r4, [pc, #48]	; (80127a8 <__libc_init_array+0x44>)
 8012778:	f005 faaa 	bl	8017cd0 <_init>
 801277c:	1b64      	subs	r4, r4, r5
 801277e:	10a4      	asrs	r4, r4, #2
 8012780:	2600      	movs	r6, #0
 8012782:	42a6      	cmp	r6, r4
 8012784:	d105      	bne.n	8012792 <__libc_init_array+0x2e>
 8012786:	bd70      	pop	{r4, r5, r6, pc}
 8012788:	f855 3b04 	ldr.w	r3, [r5], #4
 801278c:	4798      	blx	r3
 801278e:	3601      	adds	r6, #1
 8012790:	e7ee      	b.n	8012770 <__libc_init_array+0xc>
 8012792:	f855 3b04 	ldr.w	r3, [r5], #4
 8012796:	4798      	blx	r3
 8012798:	3601      	adds	r6, #1
 801279a:	e7f2      	b.n	8012782 <__libc_init_array+0x1e>
 801279c:	08018ba4 	.word	0x08018ba4
 80127a0:	08018ba4 	.word	0x08018ba4
 80127a4:	08018ba4 	.word	0x08018ba4
 80127a8:	08018ba8 	.word	0x08018ba8

080127ac <__retarget_lock_init_recursive>:
 80127ac:	4770      	bx	lr

080127ae <__retarget_lock_acquire_recursive>:
 80127ae:	4770      	bx	lr

080127b0 <__retarget_lock_release_recursive>:
 80127b0:	4770      	bx	lr

080127b2 <__swhatbuf_r>:
 80127b2:	b570      	push	{r4, r5, r6, lr}
 80127b4:	460e      	mov	r6, r1
 80127b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127ba:	2900      	cmp	r1, #0
 80127bc:	b096      	sub	sp, #88	; 0x58
 80127be:	4614      	mov	r4, r2
 80127c0:	461d      	mov	r5, r3
 80127c2:	da07      	bge.n	80127d4 <__swhatbuf_r+0x22>
 80127c4:	2300      	movs	r3, #0
 80127c6:	602b      	str	r3, [r5, #0]
 80127c8:	89b3      	ldrh	r3, [r6, #12]
 80127ca:	061a      	lsls	r2, r3, #24
 80127cc:	d410      	bmi.n	80127f0 <__swhatbuf_r+0x3e>
 80127ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80127d2:	e00e      	b.n	80127f2 <__swhatbuf_r+0x40>
 80127d4:	466a      	mov	r2, sp
 80127d6:	f003 fb59 	bl	8015e8c <_fstat_r>
 80127da:	2800      	cmp	r0, #0
 80127dc:	dbf2      	blt.n	80127c4 <__swhatbuf_r+0x12>
 80127de:	9a01      	ldr	r2, [sp, #4]
 80127e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80127e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80127e8:	425a      	negs	r2, r3
 80127ea:	415a      	adcs	r2, r3
 80127ec:	602a      	str	r2, [r5, #0]
 80127ee:	e7ee      	b.n	80127ce <__swhatbuf_r+0x1c>
 80127f0:	2340      	movs	r3, #64	; 0x40
 80127f2:	2000      	movs	r0, #0
 80127f4:	6023      	str	r3, [r4, #0]
 80127f6:	b016      	add	sp, #88	; 0x58
 80127f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080127fc <__smakebuf_r>:
 80127fc:	898b      	ldrh	r3, [r1, #12]
 80127fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012800:	079d      	lsls	r5, r3, #30
 8012802:	4606      	mov	r6, r0
 8012804:	460c      	mov	r4, r1
 8012806:	d507      	bpl.n	8012818 <__smakebuf_r+0x1c>
 8012808:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801280c:	6023      	str	r3, [r4, #0]
 801280e:	6123      	str	r3, [r4, #16]
 8012810:	2301      	movs	r3, #1
 8012812:	6163      	str	r3, [r4, #20]
 8012814:	b002      	add	sp, #8
 8012816:	bd70      	pop	{r4, r5, r6, pc}
 8012818:	ab01      	add	r3, sp, #4
 801281a:	466a      	mov	r2, sp
 801281c:	f7ff ffc9 	bl	80127b2 <__swhatbuf_r>
 8012820:	9900      	ldr	r1, [sp, #0]
 8012822:	4605      	mov	r5, r0
 8012824:	4630      	mov	r0, r6
 8012826:	f000 f8af 	bl	8012988 <_malloc_r>
 801282a:	b948      	cbnz	r0, 8012840 <__smakebuf_r+0x44>
 801282c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012830:	059a      	lsls	r2, r3, #22
 8012832:	d4ef      	bmi.n	8012814 <__smakebuf_r+0x18>
 8012834:	f023 0303 	bic.w	r3, r3, #3
 8012838:	f043 0302 	orr.w	r3, r3, #2
 801283c:	81a3      	strh	r3, [r4, #12]
 801283e:	e7e3      	b.n	8012808 <__smakebuf_r+0xc>
 8012840:	4b0d      	ldr	r3, [pc, #52]	; (8012878 <__smakebuf_r+0x7c>)
 8012842:	62b3      	str	r3, [r6, #40]	; 0x28
 8012844:	89a3      	ldrh	r3, [r4, #12]
 8012846:	6020      	str	r0, [r4, #0]
 8012848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801284c:	81a3      	strh	r3, [r4, #12]
 801284e:	9b00      	ldr	r3, [sp, #0]
 8012850:	6163      	str	r3, [r4, #20]
 8012852:	9b01      	ldr	r3, [sp, #4]
 8012854:	6120      	str	r0, [r4, #16]
 8012856:	b15b      	cbz	r3, 8012870 <__smakebuf_r+0x74>
 8012858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801285c:	4630      	mov	r0, r6
 801285e:	f003 fe97 	bl	8016590 <_isatty_r>
 8012862:	b128      	cbz	r0, 8012870 <__smakebuf_r+0x74>
 8012864:	89a3      	ldrh	r3, [r4, #12]
 8012866:	f023 0303 	bic.w	r3, r3, #3
 801286a:	f043 0301 	orr.w	r3, r3, #1
 801286e:	81a3      	strh	r3, [r4, #12]
 8012870:	89a0      	ldrh	r0, [r4, #12]
 8012872:	4305      	orrs	r5, r0
 8012874:	81a5      	strh	r5, [r4, #12]
 8012876:	e7cd      	b.n	8012814 <__smakebuf_r+0x18>
 8012878:	0801259d 	.word	0x0801259d

0801287c <malloc>:
 801287c:	4b02      	ldr	r3, [pc, #8]	; (8012888 <malloc+0xc>)
 801287e:	4601      	mov	r1, r0
 8012880:	6818      	ldr	r0, [r3, #0]
 8012882:	f000 b881 	b.w	8012988 <_malloc_r>
 8012886:	bf00      	nop
 8012888:	2000006c 	.word	0x2000006c

0801288c <free>:
 801288c:	4b02      	ldr	r3, [pc, #8]	; (8012898 <free+0xc>)
 801288e:	4601      	mov	r1, r0
 8012890:	6818      	ldr	r0, [r3, #0]
 8012892:	f000 b829 	b.w	80128e8 <_free_r>
 8012896:	bf00      	nop
 8012898:	2000006c 	.word	0x2000006c

0801289c <memcpy>:
 801289c:	440a      	add	r2, r1
 801289e:	4291      	cmp	r1, r2
 80128a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80128a4:	d100      	bne.n	80128a8 <memcpy+0xc>
 80128a6:	4770      	bx	lr
 80128a8:	b510      	push	{r4, lr}
 80128aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80128b2:	4291      	cmp	r1, r2
 80128b4:	d1f9      	bne.n	80128aa <memcpy+0xe>
 80128b6:	bd10      	pop	{r4, pc}

080128b8 <memset>:
 80128b8:	4402      	add	r2, r0
 80128ba:	4603      	mov	r3, r0
 80128bc:	4293      	cmp	r3, r2
 80128be:	d100      	bne.n	80128c2 <memset+0xa>
 80128c0:	4770      	bx	lr
 80128c2:	f803 1b01 	strb.w	r1, [r3], #1
 80128c6:	e7f9      	b.n	80128bc <memset+0x4>

080128c8 <_calloc_r>:
 80128c8:	b513      	push	{r0, r1, r4, lr}
 80128ca:	434a      	muls	r2, r1
 80128cc:	4611      	mov	r1, r2
 80128ce:	9201      	str	r2, [sp, #4]
 80128d0:	f000 f85a 	bl	8012988 <_malloc_r>
 80128d4:	4604      	mov	r4, r0
 80128d6:	b118      	cbz	r0, 80128e0 <_calloc_r+0x18>
 80128d8:	9a01      	ldr	r2, [sp, #4]
 80128da:	2100      	movs	r1, #0
 80128dc:	f7ff ffec 	bl	80128b8 <memset>
 80128e0:	4620      	mov	r0, r4
 80128e2:	b002      	add	sp, #8
 80128e4:	bd10      	pop	{r4, pc}
	...

080128e8 <_free_r>:
 80128e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80128ea:	2900      	cmp	r1, #0
 80128ec:	d048      	beq.n	8012980 <_free_r+0x98>
 80128ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128f2:	9001      	str	r0, [sp, #4]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	f1a1 0404 	sub.w	r4, r1, #4
 80128fa:	bfb8      	it	lt
 80128fc:	18e4      	addlt	r4, r4, r3
 80128fe:	f003 fe99 	bl	8016634 <__malloc_lock>
 8012902:	4a20      	ldr	r2, [pc, #128]	; (8012984 <_free_r+0x9c>)
 8012904:	9801      	ldr	r0, [sp, #4]
 8012906:	6813      	ldr	r3, [r2, #0]
 8012908:	4615      	mov	r5, r2
 801290a:	b933      	cbnz	r3, 801291a <_free_r+0x32>
 801290c:	6063      	str	r3, [r4, #4]
 801290e:	6014      	str	r4, [r2, #0]
 8012910:	b003      	add	sp, #12
 8012912:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012916:	f003 be93 	b.w	8016640 <__malloc_unlock>
 801291a:	42a3      	cmp	r3, r4
 801291c:	d90b      	bls.n	8012936 <_free_r+0x4e>
 801291e:	6821      	ldr	r1, [r4, #0]
 8012920:	1862      	adds	r2, r4, r1
 8012922:	4293      	cmp	r3, r2
 8012924:	bf04      	itt	eq
 8012926:	681a      	ldreq	r2, [r3, #0]
 8012928:	685b      	ldreq	r3, [r3, #4]
 801292a:	6063      	str	r3, [r4, #4]
 801292c:	bf04      	itt	eq
 801292e:	1852      	addeq	r2, r2, r1
 8012930:	6022      	streq	r2, [r4, #0]
 8012932:	602c      	str	r4, [r5, #0]
 8012934:	e7ec      	b.n	8012910 <_free_r+0x28>
 8012936:	461a      	mov	r2, r3
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	b10b      	cbz	r3, 8012940 <_free_r+0x58>
 801293c:	42a3      	cmp	r3, r4
 801293e:	d9fa      	bls.n	8012936 <_free_r+0x4e>
 8012940:	6811      	ldr	r1, [r2, #0]
 8012942:	1855      	adds	r5, r2, r1
 8012944:	42a5      	cmp	r5, r4
 8012946:	d10b      	bne.n	8012960 <_free_r+0x78>
 8012948:	6824      	ldr	r4, [r4, #0]
 801294a:	4421      	add	r1, r4
 801294c:	1854      	adds	r4, r2, r1
 801294e:	42a3      	cmp	r3, r4
 8012950:	6011      	str	r1, [r2, #0]
 8012952:	d1dd      	bne.n	8012910 <_free_r+0x28>
 8012954:	681c      	ldr	r4, [r3, #0]
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	6053      	str	r3, [r2, #4]
 801295a:	4421      	add	r1, r4
 801295c:	6011      	str	r1, [r2, #0]
 801295e:	e7d7      	b.n	8012910 <_free_r+0x28>
 8012960:	d902      	bls.n	8012968 <_free_r+0x80>
 8012962:	230c      	movs	r3, #12
 8012964:	6003      	str	r3, [r0, #0]
 8012966:	e7d3      	b.n	8012910 <_free_r+0x28>
 8012968:	6825      	ldr	r5, [r4, #0]
 801296a:	1961      	adds	r1, r4, r5
 801296c:	428b      	cmp	r3, r1
 801296e:	bf04      	itt	eq
 8012970:	6819      	ldreq	r1, [r3, #0]
 8012972:	685b      	ldreq	r3, [r3, #4]
 8012974:	6063      	str	r3, [r4, #4]
 8012976:	bf04      	itt	eq
 8012978:	1949      	addeq	r1, r1, r5
 801297a:	6021      	streq	r1, [r4, #0]
 801297c:	6054      	str	r4, [r2, #4]
 801297e:	e7c7      	b.n	8012910 <_free_r+0x28>
 8012980:	b003      	add	sp, #12
 8012982:	bd30      	pop	{r4, r5, pc}
 8012984:	20007c68 	.word	0x20007c68

08012988 <_malloc_r>:
 8012988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801298a:	1ccd      	adds	r5, r1, #3
 801298c:	f025 0503 	bic.w	r5, r5, #3
 8012990:	3508      	adds	r5, #8
 8012992:	2d0c      	cmp	r5, #12
 8012994:	bf38      	it	cc
 8012996:	250c      	movcc	r5, #12
 8012998:	2d00      	cmp	r5, #0
 801299a:	4606      	mov	r6, r0
 801299c:	db01      	blt.n	80129a2 <_malloc_r+0x1a>
 801299e:	42a9      	cmp	r1, r5
 80129a0:	d903      	bls.n	80129aa <_malloc_r+0x22>
 80129a2:	230c      	movs	r3, #12
 80129a4:	6033      	str	r3, [r6, #0]
 80129a6:	2000      	movs	r0, #0
 80129a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80129aa:	f003 fe43 	bl	8016634 <__malloc_lock>
 80129ae:	4921      	ldr	r1, [pc, #132]	; (8012a34 <_malloc_r+0xac>)
 80129b0:	680a      	ldr	r2, [r1, #0]
 80129b2:	4614      	mov	r4, r2
 80129b4:	b99c      	cbnz	r4, 80129de <_malloc_r+0x56>
 80129b6:	4f20      	ldr	r7, [pc, #128]	; (8012a38 <_malloc_r+0xb0>)
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	b923      	cbnz	r3, 80129c6 <_malloc_r+0x3e>
 80129bc:	4621      	mov	r1, r4
 80129be:	4630      	mov	r0, r6
 80129c0:	f001 f940 	bl	8013c44 <_sbrk_r>
 80129c4:	6038      	str	r0, [r7, #0]
 80129c6:	4629      	mov	r1, r5
 80129c8:	4630      	mov	r0, r6
 80129ca:	f001 f93b 	bl	8013c44 <_sbrk_r>
 80129ce:	1c43      	adds	r3, r0, #1
 80129d0:	d123      	bne.n	8012a1a <_malloc_r+0x92>
 80129d2:	230c      	movs	r3, #12
 80129d4:	6033      	str	r3, [r6, #0]
 80129d6:	4630      	mov	r0, r6
 80129d8:	f003 fe32 	bl	8016640 <__malloc_unlock>
 80129dc:	e7e3      	b.n	80129a6 <_malloc_r+0x1e>
 80129de:	6823      	ldr	r3, [r4, #0]
 80129e0:	1b5b      	subs	r3, r3, r5
 80129e2:	d417      	bmi.n	8012a14 <_malloc_r+0x8c>
 80129e4:	2b0b      	cmp	r3, #11
 80129e6:	d903      	bls.n	80129f0 <_malloc_r+0x68>
 80129e8:	6023      	str	r3, [r4, #0]
 80129ea:	441c      	add	r4, r3
 80129ec:	6025      	str	r5, [r4, #0]
 80129ee:	e004      	b.n	80129fa <_malloc_r+0x72>
 80129f0:	6863      	ldr	r3, [r4, #4]
 80129f2:	42a2      	cmp	r2, r4
 80129f4:	bf0c      	ite	eq
 80129f6:	600b      	streq	r3, [r1, #0]
 80129f8:	6053      	strne	r3, [r2, #4]
 80129fa:	4630      	mov	r0, r6
 80129fc:	f003 fe20 	bl	8016640 <__malloc_unlock>
 8012a00:	f104 000b 	add.w	r0, r4, #11
 8012a04:	1d23      	adds	r3, r4, #4
 8012a06:	f020 0007 	bic.w	r0, r0, #7
 8012a0a:	1ac2      	subs	r2, r0, r3
 8012a0c:	d0cc      	beq.n	80129a8 <_malloc_r+0x20>
 8012a0e:	1a1b      	subs	r3, r3, r0
 8012a10:	50a3      	str	r3, [r4, r2]
 8012a12:	e7c9      	b.n	80129a8 <_malloc_r+0x20>
 8012a14:	4622      	mov	r2, r4
 8012a16:	6864      	ldr	r4, [r4, #4]
 8012a18:	e7cc      	b.n	80129b4 <_malloc_r+0x2c>
 8012a1a:	1cc4      	adds	r4, r0, #3
 8012a1c:	f024 0403 	bic.w	r4, r4, #3
 8012a20:	42a0      	cmp	r0, r4
 8012a22:	d0e3      	beq.n	80129ec <_malloc_r+0x64>
 8012a24:	1a21      	subs	r1, r4, r0
 8012a26:	4630      	mov	r0, r6
 8012a28:	f001 f90c 	bl	8013c44 <_sbrk_r>
 8012a2c:	3001      	adds	r0, #1
 8012a2e:	d1dd      	bne.n	80129ec <_malloc_r+0x64>
 8012a30:	e7cf      	b.n	80129d2 <_malloc_r+0x4a>
 8012a32:	bf00      	nop
 8012a34:	20007c68 	.word	0x20007c68
 8012a38:	20007c6c 	.word	0x20007c6c

08012a3c <__sfputc_r>:
 8012a3c:	6893      	ldr	r3, [r2, #8]
 8012a3e:	3b01      	subs	r3, #1
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	b410      	push	{r4}
 8012a44:	6093      	str	r3, [r2, #8]
 8012a46:	da08      	bge.n	8012a5a <__sfputc_r+0x1e>
 8012a48:	6994      	ldr	r4, [r2, #24]
 8012a4a:	42a3      	cmp	r3, r4
 8012a4c:	db01      	blt.n	8012a52 <__sfputc_r+0x16>
 8012a4e:	290a      	cmp	r1, #10
 8012a50:	d103      	bne.n	8012a5a <__sfputc_r+0x1e>
 8012a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a56:	f002 ba81 	b.w	8014f5c <__swbuf_r>
 8012a5a:	6813      	ldr	r3, [r2, #0]
 8012a5c:	1c58      	adds	r0, r3, #1
 8012a5e:	6010      	str	r0, [r2, #0]
 8012a60:	7019      	strb	r1, [r3, #0]
 8012a62:	4608      	mov	r0, r1
 8012a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a68:	4770      	bx	lr

08012a6a <__sfputs_r>:
 8012a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a6c:	4606      	mov	r6, r0
 8012a6e:	460f      	mov	r7, r1
 8012a70:	4614      	mov	r4, r2
 8012a72:	18d5      	adds	r5, r2, r3
 8012a74:	42ac      	cmp	r4, r5
 8012a76:	d101      	bne.n	8012a7c <__sfputs_r+0x12>
 8012a78:	2000      	movs	r0, #0
 8012a7a:	e007      	b.n	8012a8c <__sfputs_r+0x22>
 8012a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a80:	463a      	mov	r2, r7
 8012a82:	4630      	mov	r0, r6
 8012a84:	f7ff ffda 	bl	8012a3c <__sfputc_r>
 8012a88:	1c43      	adds	r3, r0, #1
 8012a8a:	d1f3      	bne.n	8012a74 <__sfputs_r+0xa>
 8012a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a90 <_vfiprintf_r>:
 8012a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a94:	460d      	mov	r5, r1
 8012a96:	b09d      	sub	sp, #116	; 0x74
 8012a98:	4614      	mov	r4, r2
 8012a9a:	4698      	mov	r8, r3
 8012a9c:	4606      	mov	r6, r0
 8012a9e:	b118      	cbz	r0, 8012aa8 <_vfiprintf_r+0x18>
 8012aa0:	6983      	ldr	r3, [r0, #24]
 8012aa2:	b90b      	cbnz	r3, 8012aa8 <_vfiprintf_r+0x18>
 8012aa4:	f7ff fdae 	bl	8012604 <__sinit>
 8012aa8:	4b89      	ldr	r3, [pc, #548]	; (8012cd0 <_vfiprintf_r+0x240>)
 8012aaa:	429d      	cmp	r5, r3
 8012aac:	d11b      	bne.n	8012ae6 <_vfiprintf_r+0x56>
 8012aae:	6875      	ldr	r5, [r6, #4]
 8012ab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ab2:	07d9      	lsls	r1, r3, #31
 8012ab4:	d405      	bmi.n	8012ac2 <_vfiprintf_r+0x32>
 8012ab6:	89ab      	ldrh	r3, [r5, #12]
 8012ab8:	059a      	lsls	r2, r3, #22
 8012aba:	d402      	bmi.n	8012ac2 <_vfiprintf_r+0x32>
 8012abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012abe:	f7ff fe76 	bl	80127ae <__retarget_lock_acquire_recursive>
 8012ac2:	89ab      	ldrh	r3, [r5, #12]
 8012ac4:	071b      	lsls	r3, r3, #28
 8012ac6:	d501      	bpl.n	8012acc <_vfiprintf_r+0x3c>
 8012ac8:	692b      	ldr	r3, [r5, #16]
 8012aca:	b9eb      	cbnz	r3, 8012b08 <_vfiprintf_r+0x78>
 8012acc:	4629      	mov	r1, r5
 8012ace:	4630      	mov	r0, r6
 8012ad0:	f002 faa8 	bl	8015024 <__swsetup_r>
 8012ad4:	b1c0      	cbz	r0, 8012b08 <_vfiprintf_r+0x78>
 8012ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ad8:	07dc      	lsls	r4, r3, #31
 8012ada:	d50e      	bpl.n	8012afa <_vfiprintf_r+0x6a>
 8012adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ae0:	b01d      	add	sp, #116	; 0x74
 8012ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ae6:	4b7b      	ldr	r3, [pc, #492]	; (8012cd4 <_vfiprintf_r+0x244>)
 8012ae8:	429d      	cmp	r5, r3
 8012aea:	d101      	bne.n	8012af0 <_vfiprintf_r+0x60>
 8012aec:	68b5      	ldr	r5, [r6, #8]
 8012aee:	e7df      	b.n	8012ab0 <_vfiprintf_r+0x20>
 8012af0:	4b79      	ldr	r3, [pc, #484]	; (8012cd8 <_vfiprintf_r+0x248>)
 8012af2:	429d      	cmp	r5, r3
 8012af4:	bf08      	it	eq
 8012af6:	68f5      	ldreq	r5, [r6, #12]
 8012af8:	e7da      	b.n	8012ab0 <_vfiprintf_r+0x20>
 8012afa:	89ab      	ldrh	r3, [r5, #12]
 8012afc:	0598      	lsls	r0, r3, #22
 8012afe:	d4ed      	bmi.n	8012adc <_vfiprintf_r+0x4c>
 8012b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b02:	f7ff fe55 	bl	80127b0 <__retarget_lock_release_recursive>
 8012b06:	e7e9      	b.n	8012adc <_vfiprintf_r+0x4c>
 8012b08:	2300      	movs	r3, #0
 8012b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8012b0c:	2320      	movs	r3, #32
 8012b0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b16:	2330      	movs	r3, #48	; 0x30
 8012b18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012cdc <_vfiprintf_r+0x24c>
 8012b1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b20:	f04f 0901 	mov.w	r9, #1
 8012b24:	4623      	mov	r3, r4
 8012b26:	469a      	mov	sl, r3
 8012b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b2c:	b10a      	cbz	r2, 8012b32 <_vfiprintf_r+0xa2>
 8012b2e:	2a25      	cmp	r2, #37	; 0x25
 8012b30:	d1f9      	bne.n	8012b26 <_vfiprintf_r+0x96>
 8012b32:	ebba 0b04 	subs.w	fp, sl, r4
 8012b36:	d00b      	beq.n	8012b50 <_vfiprintf_r+0xc0>
 8012b38:	465b      	mov	r3, fp
 8012b3a:	4622      	mov	r2, r4
 8012b3c:	4629      	mov	r1, r5
 8012b3e:	4630      	mov	r0, r6
 8012b40:	f7ff ff93 	bl	8012a6a <__sfputs_r>
 8012b44:	3001      	adds	r0, #1
 8012b46:	f000 80aa 	beq.w	8012c9e <_vfiprintf_r+0x20e>
 8012b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b4c:	445a      	add	r2, fp
 8012b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8012b50:	f89a 3000 	ldrb.w	r3, [sl]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	f000 80a2 	beq.w	8012c9e <_vfiprintf_r+0x20e>
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b64:	f10a 0a01 	add.w	sl, sl, #1
 8012b68:	9304      	str	r3, [sp, #16]
 8012b6a:	9307      	str	r3, [sp, #28]
 8012b6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b70:	931a      	str	r3, [sp, #104]	; 0x68
 8012b72:	4654      	mov	r4, sl
 8012b74:	2205      	movs	r2, #5
 8012b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b7a:	4858      	ldr	r0, [pc, #352]	; (8012cdc <_vfiprintf_r+0x24c>)
 8012b7c:	f7ed fb38 	bl	80001f0 <memchr>
 8012b80:	9a04      	ldr	r2, [sp, #16]
 8012b82:	b9d8      	cbnz	r0, 8012bbc <_vfiprintf_r+0x12c>
 8012b84:	06d1      	lsls	r1, r2, #27
 8012b86:	bf44      	itt	mi
 8012b88:	2320      	movmi	r3, #32
 8012b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b8e:	0713      	lsls	r3, r2, #28
 8012b90:	bf44      	itt	mi
 8012b92:	232b      	movmi	r3, #43	; 0x2b
 8012b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b98:	f89a 3000 	ldrb.w	r3, [sl]
 8012b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8012b9e:	d015      	beq.n	8012bcc <_vfiprintf_r+0x13c>
 8012ba0:	9a07      	ldr	r2, [sp, #28]
 8012ba2:	4654      	mov	r4, sl
 8012ba4:	2000      	movs	r0, #0
 8012ba6:	f04f 0c0a 	mov.w	ip, #10
 8012baa:	4621      	mov	r1, r4
 8012bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012bb0:	3b30      	subs	r3, #48	; 0x30
 8012bb2:	2b09      	cmp	r3, #9
 8012bb4:	d94e      	bls.n	8012c54 <_vfiprintf_r+0x1c4>
 8012bb6:	b1b0      	cbz	r0, 8012be6 <_vfiprintf_r+0x156>
 8012bb8:	9207      	str	r2, [sp, #28]
 8012bba:	e014      	b.n	8012be6 <_vfiprintf_r+0x156>
 8012bbc:	eba0 0308 	sub.w	r3, r0, r8
 8012bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8012bc4:	4313      	orrs	r3, r2
 8012bc6:	9304      	str	r3, [sp, #16]
 8012bc8:	46a2      	mov	sl, r4
 8012bca:	e7d2      	b.n	8012b72 <_vfiprintf_r+0xe2>
 8012bcc:	9b03      	ldr	r3, [sp, #12]
 8012bce:	1d19      	adds	r1, r3, #4
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	9103      	str	r1, [sp, #12]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	bfbb      	ittet	lt
 8012bd8:	425b      	neglt	r3, r3
 8012bda:	f042 0202 	orrlt.w	r2, r2, #2
 8012bde:	9307      	strge	r3, [sp, #28]
 8012be0:	9307      	strlt	r3, [sp, #28]
 8012be2:	bfb8      	it	lt
 8012be4:	9204      	strlt	r2, [sp, #16]
 8012be6:	7823      	ldrb	r3, [r4, #0]
 8012be8:	2b2e      	cmp	r3, #46	; 0x2e
 8012bea:	d10c      	bne.n	8012c06 <_vfiprintf_r+0x176>
 8012bec:	7863      	ldrb	r3, [r4, #1]
 8012bee:	2b2a      	cmp	r3, #42	; 0x2a
 8012bf0:	d135      	bne.n	8012c5e <_vfiprintf_r+0x1ce>
 8012bf2:	9b03      	ldr	r3, [sp, #12]
 8012bf4:	1d1a      	adds	r2, r3, #4
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	9203      	str	r2, [sp, #12]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	bfb8      	it	lt
 8012bfe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012c02:	3402      	adds	r4, #2
 8012c04:	9305      	str	r3, [sp, #20]
 8012c06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012cec <_vfiprintf_r+0x25c>
 8012c0a:	7821      	ldrb	r1, [r4, #0]
 8012c0c:	2203      	movs	r2, #3
 8012c0e:	4650      	mov	r0, sl
 8012c10:	f7ed faee 	bl	80001f0 <memchr>
 8012c14:	b140      	cbz	r0, 8012c28 <_vfiprintf_r+0x198>
 8012c16:	2340      	movs	r3, #64	; 0x40
 8012c18:	eba0 000a 	sub.w	r0, r0, sl
 8012c1c:	fa03 f000 	lsl.w	r0, r3, r0
 8012c20:	9b04      	ldr	r3, [sp, #16]
 8012c22:	4303      	orrs	r3, r0
 8012c24:	3401      	adds	r4, #1
 8012c26:	9304      	str	r3, [sp, #16]
 8012c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c2c:	482c      	ldr	r0, [pc, #176]	; (8012ce0 <_vfiprintf_r+0x250>)
 8012c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c32:	2206      	movs	r2, #6
 8012c34:	f7ed fadc 	bl	80001f0 <memchr>
 8012c38:	2800      	cmp	r0, #0
 8012c3a:	d03f      	beq.n	8012cbc <_vfiprintf_r+0x22c>
 8012c3c:	4b29      	ldr	r3, [pc, #164]	; (8012ce4 <_vfiprintf_r+0x254>)
 8012c3e:	bb1b      	cbnz	r3, 8012c88 <_vfiprintf_r+0x1f8>
 8012c40:	9b03      	ldr	r3, [sp, #12]
 8012c42:	3307      	adds	r3, #7
 8012c44:	f023 0307 	bic.w	r3, r3, #7
 8012c48:	3308      	adds	r3, #8
 8012c4a:	9303      	str	r3, [sp, #12]
 8012c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c4e:	443b      	add	r3, r7
 8012c50:	9309      	str	r3, [sp, #36]	; 0x24
 8012c52:	e767      	b.n	8012b24 <_vfiprintf_r+0x94>
 8012c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c58:	460c      	mov	r4, r1
 8012c5a:	2001      	movs	r0, #1
 8012c5c:	e7a5      	b.n	8012baa <_vfiprintf_r+0x11a>
 8012c5e:	2300      	movs	r3, #0
 8012c60:	3401      	adds	r4, #1
 8012c62:	9305      	str	r3, [sp, #20]
 8012c64:	4619      	mov	r1, r3
 8012c66:	f04f 0c0a 	mov.w	ip, #10
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c70:	3a30      	subs	r2, #48	; 0x30
 8012c72:	2a09      	cmp	r2, #9
 8012c74:	d903      	bls.n	8012c7e <_vfiprintf_r+0x1ee>
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d0c5      	beq.n	8012c06 <_vfiprintf_r+0x176>
 8012c7a:	9105      	str	r1, [sp, #20]
 8012c7c:	e7c3      	b.n	8012c06 <_vfiprintf_r+0x176>
 8012c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c82:	4604      	mov	r4, r0
 8012c84:	2301      	movs	r3, #1
 8012c86:	e7f0      	b.n	8012c6a <_vfiprintf_r+0x1da>
 8012c88:	ab03      	add	r3, sp, #12
 8012c8a:	9300      	str	r3, [sp, #0]
 8012c8c:	462a      	mov	r2, r5
 8012c8e:	4b16      	ldr	r3, [pc, #88]	; (8012ce8 <_vfiprintf_r+0x258>)
 8012c90:	a904      	add	r1, sp, #16
 8012c92:	4630      	mov	r0, r6
 8012c94:	f000 f8cc 	bl	8012e30 <_printf_float>
 8012c98:	4607      	mov	r7, r0
 8012c9a:	1c78      	adds	r0, r7, #1
 8012c9c:	d1d6      	bne.n	8012c4c <_vfiprintf_r+0x1bc>
 8012c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ca0:	07d9      	lsls	r1, r3, #31
 8012ca2:	d405      	bmi.n	8012cb0 <_vfiprintf_r+0x220>
 8012ca4:	89ab      	ldrh	r3, [r5, #12]
 8012ca6:	059a      	lsls	r2, r3, #22
 8012ca8:	d402      	bmi.n	8012cb0 <_vfiprintf_r+0x220>
 8012caa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012cac:	f7ff fd80 	bl	80127b0 <__retarget_lock_release_recursive>
 8012cb0:	89ab      	ldrh	r3, [r5, #12]
 8012cb2:	065b      	lsls	r3, r3, #25
 8012cb4:	f53f af12 	bmi.w	8012adc <_vfiprintf_r+0x4c>
 8012cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cba:	e711      	b.n	8012ae0 <_vfiprintf_r+0x50>
 8012cbc:	ab03      	add	r3, sp, #12
 8012cbe:	9300      	str	r3, [sp, #0]
 8012cc0:	462a      	mov	r2, r5
 8012cc2:	4b09      	ldr	r3, [pc, #36]	; (8012ce8 <_vfiprintf_r+0x258>)
 8012cc4:	a904      	add	r1, sp, #16
 8012cc6:	4630      	mov	r0, r6
 8012cc8:	f000 fb56 	bl	8013378 <_printf_i>
 8012ccc:	e7e4      	b.n	8012c98 <_vfiprintf_r+0x208>
 8012cce:	bf00      	nop
 8012cd0:	08018064 	.word	0x08018064
 8012cd4:	08018084 	.word	0x08018084
 8012cd8:	08018044 	.word	0x08018044
 8012cdc:	080180a8 	.word	0x080180a8
 8012ce0:	080180b2 	.word	0x080180b2
 8012ce4:	08012e31 	.word	0x08012e31
 8012ce8:	08012a6b 	.word	0x08012a6b
 8012cec:	080180ae 	.word	0x080180ae

08012cf0 <__cvt>:
 8012cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012cf4:	ec55 4b10 	vmov	r4, r5, d0
 8012cf8:	2d00      	cmp	r5, #0
 8012cfa:	460e      	mov	r6, r1
 8012cfc:	4619      	mov	r1, r3
 8012cfe:	462b      	mov	r3, r5
 8012d00:	bfbb      	ittet	lt
 8012d02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012d06:	461d      	movlt	r5, r3
 8012d08:	2300      	movge	r3, #0
 8012d0a:	232d      	movlt	r3, #45	; 0x2d
 8012d0c:	700b      	strb	r3, [r1, #0]
 8012d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012d14:	4691      	mov	r9, r2
 8012d16:	f023 0820 	bic.w	r8, r3, #32
 8012d1a:	bfbc      	itt	lt
 8012d1c:	4622      	movlt	r2, r4
 8012d1e:	4614      	movlt	r4, r2
 8012d20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012d24:	d005      	beq.n	8012d32 <__cvt+0x42>
 8012d26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012d2a:	d100      	bne.n	8012d2e <__cvt+0x3e>
 8012d2c:	3601      	adds	r6, #1
 8012d2e:	2102      	movs	r1, #2
 8012d30:	e000      	b.n	8012d34 <__cvt+0x44>
 8012d32:	2103      	movs	r1, #3
 8012d34:	ab03      	add	r3, sp, #12
 8012d36:	9301      	str	r3, [sp, #4]
 8012d38:	ab02      	add	r3, sp, #8
 8012d3a:	9300      	str	r3, [sp, #0]
 8012d3c:	ec45 4b10 	vmov	d0, r4, r5
 8012d40:	4653      	mov	r3, sl
 8012d42:	4632      	mov	r2, r6
 8012d44:	f002 fa78 	bl	8015238 <_dtoa_r>
 8012d48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012d4c:	4607      	mov	r7, r0
 8012d4e:	d102      	bne.n	8012d56 <__cvt+0x66>
 8012d50:	f019 0f01 	tst.w	r9, #1
 8012d54:	d022      	beq.n	8012d9c <__cvt+0xac>
 8012d56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012d5a:	eb07 0906 	add.w	r9, r7, r6
 8012d5e:	d110      	bne.n	8012d82 <__cvt+0x92>
 8012d60:	783b      	ldrb	r3, [r7, #0]
 8012d62:	2b30      	cmp	r3, #48	; 0x30
 8012d64:	d10a      	bne.n	8012d7c <__cvt+0x8c>
 8012d66:	2200      	movs	r2, #0
 8012d68:	2300      	movs	r3, #0
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	4629      	mov	r1, r5
 8012d6e:	f7ed febb 	bl	8000ae8 <__aeabi_dcmpeq>
 8012d72:	b918      	cbnz	r0, 8012d7c <__cvt+0x8c>
 8012d74:	f1c6 0601 	rsb	r6, r6, #1
 8012d78:	f8ca 6000 	str.w	r6, [sl]
 8012d7c:	f8da 3000 	ldr.w	r3, [sl]
 8012d80:	4499      	add	r9, r3
 8012d82:	2200      	movs	r2, #0
 8012d84:	2300      	movs	r3, #0
 8012d86:	4620      	mov	r0, r4
 8012d88:	4629      	mov	r1, r5
 8012d8a:	f7ed fead 	bl	8000ae8 <__aeabi_dcmpeq>
 8012d8e:	b108      	cbz	r0, 8012d94 <__cvt+0xa4>
 8012d90:	f8cd 900c 	str.w	r9, [sp, #12]
 8012d94:	2230      	movs	r2, #48	; 0x30
 8012d96:	9b03      	ldr	r3, [sp, #12]
 8012d98:	454b      	cmp	r3, r9
 8012d9a:	d307      	bcc.n	8012dac <__cvt+0xbc>
 8012d9c:	9b03      	ldr	r3, [sp, #12]
 8012d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012da0:	1bdb      	subs	r3, r3, r7
 8012da2:	4638      	mov	r0, r7
 8012da4:	6013      	str	r3, [r2, #0]
 8012da6:	b004      	add	sp, #16
 8012da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dac:	1c59      	adds	r1, r3, #1
 8012dae:	9103      	str	r1, [sp, #12]
 8012db0:	701a      	strb	r2, [r3, #0]
 8012db2:	e7f0      	b.n	8012d96 <__cvt+0xa6>

08012db4 <__exponent>:
 8012db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012db6:	4603      	mov	r3, r0
 8012db8:	2900      	cmp	r1, #0
 8012dba:	bfb8      	it	lt
 8012dbc:	4249      	neglt	r1, r1
 8012dbe:	f803 2b02 	strb.w	r2, [r3], #2
 8012dc2:	bfb4      	ite	lt
 8012dc4:	222d      	movlt	r2, #45	; 0x2d
 8012dc6:	222b      	movge	r2, #43	; 0x2b
 8012dc8:	2909      	cmp	r1, #9
 8012dca:	7042      	strb	r2, [r0, #1]
 8012dcc:	dd2a      	ble.n	8012e24 <__exponent+0x70>
 8012dce:	f10d 0407 	add.w	r4, sp, #7
 8012dd2:	46a4      	mov	ip, r4
 8012dd4:	270a      	movs	r7, #10
 8012dd6:	46a6      	mov	lr, r4
 8012dd8:	460a      	mov	r2, r1
 8012dda:	fb91 f6f7 	sdiv	r6, r1, r7
 8012dde:	fb07 1516 	mls	r5, r7, r6, r1
 8012de2:	3530      	adds	r5, #48	; 0x30
 8012de4:	2a63      	cmp	r2, #99	; 0x63
 8012de6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8012dea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012dee:	4631      	mov	r1, r6
 8012df0:	dcf1      	bgt.n	8012dd6 <__exponent+0x22>
 8012df2:	3130      	adds	r1, #48	; 0x30
 8012df4:	f1ae 0502 	sub.w	r5, lr, #2
 8012df8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012dfc:	1c44      	adds	r4, r0, #1
 8012dfe:	4629      	mov	r1, r5
 8012e00:	4561      	cmp	r1, ip
 8012e02:	d30a      	bcc.n	8012e1a <__exponent+0x66>
 8012e04:	f10d 0209 	add.w	r2, sp, #9
 8012e08:	eba2 020e 	sub.w	r2, r2, lr
 8012e0c:	4565      	cmp	r5, ip
 8012e0e:	bf88      	it	hi
 8012e10:	2200      	movhi	r2, #0
 8012e12:	4413      	add	r3, r2
 8012e14:	1a18      	subs	r0, r3, r0
 8012e16:	b003      	add	sp, #12
 8012e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012e22:	e7ed      	b.n	8012e00 <__exponent+0x4c>
 8012e24:	2330      	movs	r3, #48	; 0x30
 8012e26:	3130      	adds	r1, #48	; 0x30
 8012e28:	7083      	strb	r3, [r0, #2]
 8012e2a:	70c1      	strb	r1, [r0, #3]
 8012e2c:	1d03      	adds	r3, r0, #4
 8012e2e:	e7f1      	b.n	8012e14 <__exponent+0x60>

08012e30 <_printf_float>:
 8012e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e34:	ed2d 8b02 	vpush	{d8}
 8012e38:	b08d      	sub	sp, #52	; 0x34
 8012e3a:	460c      	mov	r4, r1
 8012e3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012e40:	4616      	mov	r6, r2
 8012e42:	461f      	mov	r7, r3
 8012e44:	4605      	mov	r5, r0
 8012e46:	f003 fbb3 	bl	80165b0 <_localeconv_r>
 8012e4a:	f8d0 a000 	ldr.w	sl, [r0]
 8012e4e:	4650      	mov	r0, sl
 8012e50:	f7ed fa1e 	bl	8000290 <strlen>
 8012e54:	2300      	movs	r3, #0
 8012e56:	930a      	str	r3, [sp, #40]	; 0x28
 8012e58:	6823      	ldr	r3, [r4, #0]
 8012e5a:	9305      	str	r3, [sp, #20]
 8012e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8012e60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012e64:	3307      	adds	r3, #7
 8012e66:	f023 0307 	bic.w	r3, r3, #7
 8012e6a:	f103 0208 	add.w	r2, r3, #8
 8012e6e:	f8c8 2000 	str.w	r2, [r8]
 8012e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012e7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012e7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012e82:	9307      	str	r3, [sp, #28]
 8012e84:	f8cd 8018 	str.w	r8, [sp, #24]
 8012e88:	ee08 0a10 	vmov	s16, r0
 8012e8c:	4b9f      	ldr	r3, [pc, #636]	; (801310c <_printf_float+0x2dc>)
 8012e8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e96:	f7ed fe59 	bl	8000b4c <__aeabi_dcmpun>
 8012e9a:	bb88      	cbnz	r0, 8012f00 <_printf_float+0xd0>
 8012e9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ea0:	4b9a      	ldr	r3, [pc, #616]	; (801310c <_printf_float+0x2dc>)
 8012ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ea6:	f7ed fe33 	bl	8000b10 <__aeabi_dcmple>
 8012eaa:	bb48      	cbnz	r0, 8012f00 <_printf_float+0xd0>
 8012eac:	2200      	movs	r2, #0
 8012eae:	2300      	movs	r3, #0
 8012eb0:	4640      	mov	r0, r8
 8012eb2:	4649      	mov	r1, r9
 8012eb4:	f7ed fe22 	bl	8000afc <__aeabi_dcmplt>
 8012eb8:	b110      	cbz	r0, 8012ec0 <_printf_float+0x90>
 8012eba:	232d      	movs	r3, #45	; 0x2d
 8012ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ec0:	4b93      	ldr	r3, [pc, #588]	; (8013110 <_printf_float+0x2e0>)
 8012ec2:	4894      	ldr	r0, [pc, #592]	; (8013114 <_printf_float+0x2e4>)
 8012ec4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012ec8:	bf94      	ite	ls
 8012eca:	4698      	movls	r8, r3
 8012ecc:	4680      	movhi	r8, r0
 8012ece:	2303      	movs	r3, #3
 8012ed0:	6123      	str	r3, [r4, #16]
 8012ed2:	9b05      	ldr	r3, [sp, #20]
 8012ed4:	f023 0204 	bic.w	r2, r3, #4
 8012ed8:	6022      	str	r2, [r4, #0]
 8012eda:	f04f 0900 	mov.w	r9, #0
 8012ede:	9700      	str	r7, [sp, #0]
 8012ee0:	4633      	mov	r3, r6
 8012ee2:	aa0b      	add	r2, sp, #44	; 0x2c
 8012ee4:	4621      	mov	r1, r4
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	f000 f9d8 	bl	801329c <_printf_common>
 8012eec:	3001      	adds	r0, #1
 8012eee:	f040 8090 	bne.w	8013012 <_printf_float+0x1e2>
 8012ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ef6:	b00d      	add	sp, #52	; 0x34
 8012ef8:	ecbd 8b02 	vpop	{d8}
 8012efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f00:	4642      	mov	r2, r8
 8012f02:	464b      	mov	r3, r9
 8012f04:	4640      	mov	r0, r8
 8012f06:	4649      	mov	r1, r9
 8012f08:	f7ed fe20 	bl	8000b4c <__aeabi_dcmpun>
 8012f0c:	b140      	cbz	r0, 8012f20 <_printf_float+0xf0>
 8012f0e:	464b      	mov	r3, r9
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	bfbc      	itt	lt
 8012f14:	232d      	movlt	r3, #45	; 0x2d
 8012f16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012f1a:	487f      	ldr	r0, [pc, #508]	; (8013118 <_printf_float+0x2e8>)
 8012f1c:	4b7f      	ldr	r3, [pc, #508]	; (801311c <_printf_float+0x2ec>)
 8012f1e:	e7d1      	b.n	8012ec4 <_printf_float+0x94>
 8012f20:	6863      	ldr	r3, [r4, #4]
 8012f22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012f26:	9206      	str	r2, [sp, #24]
 8012f28:	1c5a      	adds	r2, r3, #1
 8012f2a:	d13f      	bne.n	8012fac <_printf_float+0x17c>
 8012f2c:	2306      	movs	r3, #6
 8012f2e:	6063      	str	r3, [r4, #4]
 8012f30:	9b05      	ldr	r3, [sp, #20]
 8012f32:	6861      	ldr	r1, [r4, #4]
 8012f34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012f38:	2300      	movs	r3, #0
 8012f3a:	9303      	str	r3, [sp, #12]
 8012f3c:	ab0a      	add	r3, sp, #40	; 0x28
 8012f3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012f42:	ab09      	add	r3, sp, #36	; 0x24
 8012f44:	ec49 8b10 	vmov	d0, r8, r9
 8012f48:	9300      	str	r3, [sp, #0]
 8012f4a:	6022      	str	r2, [r4, #0]
 8012f4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012f50:	4628      	mov	r0, r5
 8012f52:	f7ff fecd 	bl	8012cf0 <__cvt>
 8012f56:	9b06      	ldr	r3, [sp, #24]
 8012f58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f5a:	2b47      	cmp	r3, #71	; 0x47
 8012f5c:	4680      	mov	r8, r0
 8012f5e:	d108      	bne.n	8012f72 <_printf_float+0x142>
 8012f60:	1cc8      	adds	r0, r1, #3
 8012f62:	db02      	blt.n	8012f6a <_printf_float+0x13a>
 8012f64:	6863      	ldr	r3, [r4, #4]
 8012f66:	4299      	cmp	r1, r3
 8012f68:	dd41      	ble.n	8012fee <_printf_float+0x1be>
 8012f6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8012f6e:	fa5f fb8b 	uxtb.w	fp, fp
 8012f72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012f76:	d820      	bhi.n	8012fba <_printf_float+0x18a>
 8012f78:	3901      	subs	r1, #1
 8012f7a:	465a      	mov	r2, fp
 8012f7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012f80:	9109      	str	r1, [sp, #36]	; 0x24
 8012f82:	f7ff ff17 	bl	8012db4 <__exponent>
 8012f86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f88:	1813      	adds	r3, r2, r0
 8012f8a:	2a01      	cmp	r2, #1
 8012f8c:	4681      	mov	r9, r0
 8012f8e:	6123      	str	r3, [r4, #16]
 8012f90:	dc02      	bgt.n	8012f98 <_printf_float+0x168>
 8012f92:	6822      	ldr	r2, [r4, #0]
 8012f94:	07d2      	lsls	r2, r2, #31
 8012f96:	d501      	bpl.n	8012f9c <_printf_float+0x16c>
 8012f98:	3301      	adds	r3, #1
 8012f9a:	6123      	str	r3, [r4, #16]
 8012f9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d09c      	beq.n	8012ede <_printf_float+0xae>
 8012fa4:	232d      	movs	r3, #45	; 0x2d
 8012fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012faa:	e798      	b.n	8012ede <_printf_float+0xae>
 8012fac:	9a06      	ldr	r2, [sp, #24]
 8012fae:	2a47      	cmp	r2, #71	; 0x47
 8012fb0:	d1be      	bne.n	8012f30 <_printf_float+0x100>
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d1bc      	bne.n	8012f30 <_printf_float+0x100>
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	e7b9      	b.n	8012f2e <_printf_float+0xfe>
 8012fba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012fbe:	d118      	bne.n	8012ff2 <_printf_float+0x1c2>
 8012fc0:	2900      	cmp	r1, #0
 8012fc2:	6863      	ldr	r3, [r4, #4]
 8012fc4:	dd0b      	ble.n	8012fde <_printf_float+0x1ae>
 8012fc6:	6121      	str	r1, [r4, #16]
 8012fc8:	b913      	cbnz	r3, 8012fd0 <_printf_float+0x1a0>
 8012fca:	6822      	ldr	r2, [r4, #0]
 8012fcc:	07d0      	lsls	r0, r2, #31
 8012fce:	d502      	bpl.n	8012fd6 <_printf_float+0x1a6>
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	440b      	add	r3, r1
 8012fd4:	6123      	str	r3, [r4, #16]
 8012fd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8012fd8:	f04f 0900 	mov.w	r9, #0
 8012fdc:	e7de      	b.n	8012f9c <_printf_float+0x16c>
 8012fde:	b913      	cbnz	r3, 8012fe6 <_printf_float+0x1b6>
 8012fe0:	6822      	ldr	r2, [r4, #0]
 8012fe2:	07d2      	lsls	r2, r2, #31
 8012fe4:	d501      	bpl.n	8012fea <_printf_float+0x1ba>
 8012fe6:	3302      	adds	r3, #2
 8012fe8:	e7f4      	b.n	8012fd4 <_printf_float+0x1a4>
 8012fea:	2301      	movs	r3, #1
 8012fec:	e7f2      	b.n	8012fd4 <_printf_float+0x1a4>
 8012fee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ff4:	4299      	cmp	r1, r3
 8012ff6:	db05      	blt.n	8013004 <_printf_float+0x1d4>
 8012ff8:	6823      	ldr	r3, [r4, #0]
 8012ffa:	6121      	str	r1, [r4, #16]
 8012ffc:	07d8      	lsls	r0, r3, #31
 8012ffe:	d5ea      	bpl.n	8012fd6 <_printf_float+0x1a6>
 8013000:	1c4b      	adds	r3, r1, #1
 8013002:	e7e7      	b.n	8012fd4 <_printf_float+0x1a4>
 8013004:	2900      	cmp	r1, #0
 8013006:	bfd4      	ite	le
 8013008:	f1c1 0202 	rsble	r2, r1, #2
 801300c:	2201      	movgt	r2, #1
 801300e:	4413      	add	r3, r2
 8013010:	e7e0      	b.n	8012fd4 <_printf_float+0x1a4>
 8013012:	6823      	ldr	r3, [r4, #0]
 8013014:	055a      	lsls	r2, r3, #21
 8013016:	d407      	bmi.n	8013028 <_printf_float+0x1f8>
 8013018:	6923      	ldr	r3, [r4, #16]
 801301a:	4642      	mov	r2, r8
 801301c:	4631      	mov	r1, r6
 801301e:	4628      	mov	r0, r5
 8013020:	47b8      	blx	r7
 8013022:	3001      	adds	r0, #1
 8013024:	d12c      	bne.n	8013080 <_printf_float+0x250>
 8013026:	e764      	b.n	8012ef2 <_printf_float+0xc2>
 8013028:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801302c:	f240 80e0 	bls.w	80131f0 <_printf_float+0x3c0>
 8013030:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013034:	2200      	movs	r2, #0
 8013036:	2300      	movs	r3, #0
 8013038:	f7ed fd56 	bl	8000ae8 <__aeabi_dcmpeq>
 801303c:	2800      	cmp	r0, #0
 801303e:	d034      	beq.n	80130aa <_printf_float+0x27a>
 8013040:	4a37      	ldr	r2, [pc, #220]	; (8013120 <_printf_float+0x2f0>)
 8013042:	2301      	movs	r3, #1
 8013044:	4631      	mov	r1, r6
 8013046:	4628      	mov	r0, r5
 8013048:	47b8      	blx	r7
 801304a:	3001      	adds	r0, #1
 801304c:	f43f af51 	beq.w	8012ef2 <_printf_float+0xc2>
 8013050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013054:	429a      	cmp	r2, r3
 8013056:	db02      	blt.n	801305e <_printf_float+0x22e>
 8013058:	6823      	ldr	r3, [r4, #0]
 801305a:	07d8      	lsls	r0, r3, #31
 801305c:	d510      	bpl.n	8013080 <_printf_float+0x250>
 801305e:	ee18 3a10 	vmov	r3, s16
 8013062:	4652      	mov	r2, sl
 8013064:	4631      	mov	r1, r6
 8013066:	4628      	mov	r0, r5
 8013068:	47b8      	blx	r7
 801306a:	3001      	adds	r0, #1
 801306c:	f43f af41 	beq.w	8012ef2 <_printf_float+0xc2>
 8013070:	f04f 0800 	mov.w	r8, #0
 8013074:	f104 091a 	add.w	r9, r4, #26
 8013078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801307a:	3b01      	subs	r3, #1
 801307c:	4543      	cmp	r3, r8
 801307e:	dc09      	bgt.n	8013094 <_printf_float+0x264>
 8013080:	6823      	ldr	r3, [r4, #0]
 8013082:	079b      	lsls	r3, r3, #30
 8013084:	f100 8105 	bmi.w	8013292 <_printf_float+0x462>
 8013088:	68e0      	ldr	r0, [r4, #12]
 801308a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801308c:	4298      	cmp	r0, r3
 801308e:	bfb8      	it	lt
 8013090:	4618      	movlt	r0, r3
 8013092:	e730      	b.n	8012ef6 <_printf_float+0xc6>
 8013094:	2301      	movs	r3, #1
 8013096:	464a      	mov	r2, r9
 8013098:	4631      	mov	r1, r6
 801309a:	4628      	mov	r0, r5
 801309c:	47b8      	blx	r7
 801309e:	3001      	adds	r0, #1
 80130a0:	f43f af27 	beq.w	8012ef2 <_printf_float+0xc2>
 80130a4:	f108 0801 	add.w	r8, r8, #1
 80130a8:	e7e6      	b.n	8013078 <_printf_float+0x248>
 80130aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	dc39      	bgt.n	8013124 <_printf_float+0x2f4>
 80130b0:	4a1b      	ldr	r2, [pc, #108]	; (8013120 <_printf_float+0x2f0>)
 80130b2:	2301      	movs	r3, #1
 80130b4:	4631      	mov	r1, r6
 80130b6:	4628      	mov	r0, r5
 80130b8:	47b8      	blx	r7
 80130ba:	3001      	adds	r0, #1
 80130bc:	f43f af19 	beq.w	8012ef2 <_printf_float+0xc2>
 80130c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80130c4:	4313      	orrs	r3, r2
 80130c6:	d102      	bne.n	80130ce <_printf_float+0x29e>
 80130c8:	6823      	ldr	r3, [r4, #0]
 80130ca:	07d9      	lsls	r1, r3, #31
 80130cc:	d5d8      	bpl.n	8013080 <_printf_float+0x250>
 80130ce:	ee18 3a10 	vmov	r3, s16
 80130d2:	4652      	mov	r2, sl
 80130d4:	4631      	mov	r1, r6
 80130d6:	4628      	mov	r0, r5
 80130d8:	47b8      	blx	r7
 80130da:	3001      	adds	r0, #1
 80130dc:	f43f af09 	beq.w	8012ef2 <_printf_float+0xc2>
 80130e0:	f04f 0900 	mov.w	r9, #0
 80130e4:	f104 0a1a 	add.w	sl, r4, #26
 80130e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130ea:	425b      	negs	r3, r3
 80130ec:	454b      	cmp	r3, r9
 80130ee:	dc01      	bgt.n	80130f4 <_printf_float+0x2c4>
 80130f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130f2:	e792      	b.n	801301a <_printf_float+0x1ea>
 80130f4:	2301      	movs	r3, #1
 80130f6:	4652      	mov	r2, sl
 80130f8:	4631      	mov	r1, r6
 80130fa:	4628      	mov	r0, r5
 80130fc:	47b8      	blx	r7
 80130fe:	3001      	adds	r0, #1
 8013100:	f43f aef7 	beq.w	8012ef2 <_printf_float+0xc2>
 8013104:	f109 0901 	add.w	r9, r9, #1
 8013108:	e7ee      	b.n	80130e8 <_printf_float+0x2b8>
 801310a:	bf00      	nop
 801310c:	7fefffff 	.word	0x7fefffff
 8013110:	080180b9 	.word	0x080180b9
 8013114:	080180bd 	.word	0x080180bd
 8013118:	080180c5 	.word	0x080180c5
 801311c:	080180c1 	.word	0x080180c1
 8013120:	08018b50 	.word	0x08018b50
 8013124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013126:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013128:	429a      	cmp	r2, r3
 801312a:	bfa8      	it	ge
 801312c:	461a      	movge	r2, r3
 801312e:	2a00      	cmp	r2, #0
 8013130:	4691      	mov	r9, r2
 8013132:	dc37      	bgt.n	80131a4 <_printf_float+0x374>
 8013134:	f04f 0b00 	mov.w	fp, #0
 8013138:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801313c:	f104 021a 	add.w	r2, r4, #26
 8013140:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013142:	9305      	str	r3, [sp, #20]
 8013144:	eba3 0309 	sub.w	r3, r3, r9
 8013148:	455b      	cmp	r3, fp
 801314a:	dc33      	bgt.n	80131b4 <_printf_float+0x384>
 801314c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013150:	429a      	cmp	r2, r3
 8013152:	db3b      	blt.n	80131cc <_printf_float+0x39c>
 8013154:	6823      	ldr	r3, [r4, #0]
 8013156:	07da      	lsls	r2, r3, #31
 8013158:	d438      	bmi.n	80131cc <_printf_float+0x39c>
 801315a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801315c:	9b05      	ldr	r3, [sp, #20]
 801315e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013160:	1ad3      	subs	r3, r2, r3
 8013162:	eba2 0901 	sub.w	r9, r2, r1
 8013166:	4599      	cmp	r9, r3
 8013168:	bfa8      	it	ge
 801316a:	4699      	movge	r9, r3
 801316c:	f1b9 0f00 	cmp.w	r9, #0
 8013170:	dc35      	bgt.n	80131de <_printf_float+0x3ae>
 8013172:	f04f 0800 	mov.w	r8, #0
 8013176:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801317a:	f104 0a1a 	add.w	sl, r4, #26
 801317e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013182:	1a9b      	subs	r3, r3, r2
 8013184:	eba3 0309 	sub.w	r3, r3, r9
 8013188:	4543      	cmp	r3, r8
 801318a:	f77f af79 	ble.w	8013080 <_printf_float+0x250>
 801318e:	2301      	movs	r3, #1
 8013190:	4652      	mov	r2, sl
 8013192:	4631      	mov	r1, r6
 8013194:	4628      	mov	r0, r5
 8013196:	47b8      	blx	r7
 8013198:	3001      	adds	r0, #1
 801319a:	f43f aeaa 	beq.w	8012ef2 <_printf_float+0xc2>
 801319e:	f108 0801 	add.w	r8, r8, #1
 80131a2:	e7ec      	b.n	801317e <_printf_float+0x34e>
 80131a4:	4613      	mov	r3, r2
 80131a6:	4631      	mov	r1, r6
 80131a8:	4642      	mov	r2, r8
 80131aa:	4628      	mov	r0, r5
 80131ac:	47b8      	blx	r7
 80131ae:	3001      	adds	r0, #1
 80131b0:	d1c0      	bne.n	8013134 <_printf_float+0x304>
 80131b2:	e69e      	b.n	8012ef2 <_printf_float+0xc2>
 80131b4:	2301      	movs	r3, #1
 80131b6:	4631      	mov	r1, r6
 80131b8:	4628      	mov	r0, r5
 80131ba:	9205      	str	r2, [sp, #20]
 80131bc:	47b8      	blx	r7
 80131be:	3001      	adds	r0, #1
 80131c0:	f43f ae97 	beq.w	8012ef2 <_printf_float+0xc2>
 80131c4:	9a05      	ldr	r2, [sp, #20]
 80131c6:	f10b 0b01 	add.w	fp, fp, #1
 80131ca:	e7b9      	b.n	8013140 <_printf_float+0x310>
 80131cc:	ee18 3a10 	vmov	r3, s16
 80131d0:	4652      	mov	r2, sl
 80131d2:	4631      	mov	r1, r6
 80131d4:	4628      	mov	r0, r5
 80131d6:	47b8      	blx	r7
 80131d8:	3001      	adds	r0, #1
 80131da:	d1be      	bne.n	801315a <_printf_float+0x32a>
 80131dc:	e689      	b.n	8012ef2 <_printf_float+0xc2>
 80131de:	9a05      	ldr	r2, [sp, #20]
 80131e0:	464b      	mov	r3, r9
 80131e2:	4442      	add	r2, r8
 80131e4:	4631      	mov	r1, r6
 80131e6:	4628      	mov	r0, r5
 80131e8:	47b8      	blx	r7
 80131ea:	3001      	adds	r0, #1
 80131ec:	d1c1      	bne.n	8013172 <_printf_float+0x342>
 80131ee:	e680      	b.n	8012ef2 <_printf_float+0xc2>
 80131f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131f2:	2a01      	cmp	r2, #1
 80131f4:	dc01      	bgt.n	80131fa <_printf_float+0x3ca>
 80131f6:	07db      	lsls	r3, r3, #31
 80131f8:	d538      	bpl.n	801326c <_printf_float+0x43c>
 80131fa:	2301      	movs	r3, #1
 80131fc:	4642      	mov	r2, r8
 80131fe:	4631      	mov	r1, r6
 8013200:	4628      	mov	r0, r5
 8013202:	47b8      	blx	r7
 8013204:	3001      	adds	r0, #1
 8013206:	f43f ae74 	beq.w	8012ef2 <_printf_float+0xc2>
 801320a:	ee18 3a10 	vmov	r3, s16
 801320e:	4652      	mov	r2, sl
 8013210:	4631      	mov	r1, r6
 8013212:	4628      	mov	r0, r5
 8013214:	47b8      	blx	r7
 8013216:	3001      	adds	r0, #1
 8013218:	f43f ae6b 	beq.w	8012ef2 <_printf_float+0xc2>
 801321c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013220:	2200      	movs	r2, #0
 8013222:	2300      	movs	r3, #0
 8013224:	f7ed fc60 	bl	8000ae8 <__aeabi_dcmpeq>
 8013228:	b9d8      	cbnz	r0, 8013262 <_printf_float+0x432>
 801322a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801322c:	f108 0201 	add.w	r2, r8, #1
 8013230:	3b01      	subs	r3, #1
 8013232:	4631      	mov	r1, r6
 8013234:	4628      	mov	r0, r5
 8013236:	47b8      	blx	r7
 8013238:	3001      	adds	r0, #1
 801323a:	d10e      	bne.n	801325a <_printf_float+0x42a>
 801323c:	e659      	b.n	8012ef2 <_printf_float+0xc2>
 801323e:	2301      	movs	r3, #1
 8013240:	4652      	mov	r2, sl
 8013242:	4631      	mov	r1, r6
 8013244:	4628      	mov	r0, r5
 8013246:	47b8      	blx	r7
 8013248:	3001      	adds	r0, #1
 801324a:	f43f ae52 	beq.w	8012ef2 <_printf_float+0xc2>
 801324e:	f108 0801 	add.w	r8, r8, #1
 8013252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013254:	3b01      	subs	r3, #1
 8013256:	4543      	cmp	r3, r8
 8013258:	dcf1      	bgt.n	801323e <_printf_float+0x40e>
 801325a:	464b      	mov	r3, r9
 801325c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013260:	e6dc      	b.n	801301c <_printf_float+0x1ec>
 8013262:	f04f 0800 	mov.w	r8, #0
 8013266:	f104 0a1a 	add.w	sl, r4, #26
 801326a:	e7f2      	b.n	8013252 <_printf_float+0x422>
 801326c:	2301      	movs	r3, #1
 801326e:	4642      	mov	r2, r8
 8013270:	e7df      	b.n	8013232 <_printf_float+0x402>
 8013272:	2301      	movs	r3, #1
 8013274:	464a      	mov	r2, r9
 8013276:	4631      	mov	r1, r6
 8013278:	4628      	mov	r0, r5
 801327a:	47b8      	blx	r7
 801327c:	3001      	adds	r0, #1
 801327e:	f43f ae38 	beq.w	8012ef2 <_printf_float+0xc2>
 8013282:	f108 0801 	add.w	r8, r8, #1
 8013286:	68e3      	ldr	r3, [r4, #12]
 8013288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801328a:	1a5b      	subs	r3, r3, r1
 801328c:	4543      	cmp	r3, r8
 801328e:	dcf0      	bgt.n	8013272 <_printf_float+0x442>
 8013290:	e6fa      	b.n	8013088 <_printf_float+0x258>
 8013292:	f04f 0800 	mov.w	r8, #0
 8013296:	f104 0919 	add.w	r9, r4, #25
 801329a:	e7f4      	b.n	8013286 <_printf_float+0x456>

0801329c <_printf_common>:
 801329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132a0:	4616      	mov	r6, r2
 80132a2:	4699      	mov	r9, r3
 80132a4:	688a      	ldr	r2, [r1, #8]
 80132a6:	690b      	ldr	r3, [r1, #16]
 80132a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80132ac:	4293      	cmp	r3, r2
 80132ae:	bfb8      	it	lt
 80132b0:	4613      	movlt	r3, r2
 80132b2:	6033      	str	r3, [r6, #0]
 80132b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80132b8:	4607      	mov	r7, r0
 80132ba:	460c      	mov	r4, r1
 80132bc:	b10a      	cbz	r2, 80132c2 <_printf_common+0x26>
 80132be:	3301      	adds	r3, #1
 80132c0:	6033      	str	r3, [r6, #0]
 80132c2:	6823      	ldr	r3, [r4, #0]
 80132c4:	0699      	lsls	r1, r3, #26
 80132c6:	bf42      	ittt	mi
 80132c8:	6833      	ldrmi	r3, [r6, #0]
 80132ca:	3302      	addmi	r3, #2
 80132cc:	6033      	strmi	r3, [r6, #0]
 80132ce:	6825      	ldr	r5, [r4, #0]
 80132d0:	f015 0506 	ands.w	r5, r5, #6
 80132d4:	d106      	bne.n	80132e4 <_printf_common+0x48>
 80132d6:	f104 0a19 	add.w	sl, r4, #25
 80132da:	68e3      	ldr	r3, [r4, #12]
 80132dc:	6832      	ldr	r2, [r6, #0]
 80132de:	1a9b      	subs	r3, r3, r2
 80132e0:	42ab      	cmp	r3, r5
 80132e2:	dc26      	bgt.n	8013332 <_printf_common+0x96>
 80132e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80132e8:	1e13      	subs	r3, r2, #0
 80132ea:	6822      	ldr	r2, [r4, #0]
 80132ec:	bf18      	it	ne
 80132ee:	2301      	movne	r3, #1
 80132f0:	0692      	lsls	r2, r2, #26
 80132f2:	d42b      	bmi.n	801334c <_printf_common+0xb0>
 80132f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80132f8:	4649      	mov	r1, r9
 80132fa:	4638      	mov	r0, r7
 80132fc:	47c0      	blx	r8
 80132fe:	3001      	adds	r0, #1
 8013300:	d01e      	beq.n	8013340 <_printf_common+0xa4>
 8013302:	6823      	ldr	r3, [r4, #0]
 8013304:	68e5      	ldr	r5, [r4, #12]
 8013306:	6832      	ldr	r2, [r6, #0]
 8013308:	f003 0306 	and.w	r3, r3, #6
 801330c:	2b04      	cmp	r3, #4
 801330e:	bf08      	it	eq
 8013310:	1aad      	subeq	r5, r5, r2
 8013312:	68a3      	ldr	r3, [r4, #8]
 8013314:	6922      	ldr	r2, [r4, #16]
 8013316:	bf0c      	ite	eq
 8013318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801331c:	2500      	movne	r5, #0
 801331e:	4293      	cmp	r3, r2
 8013320:	bfc4      	itt	gt
 8013322:	1a9b      	subgt	r3, r3, r2
 8013324:	18ed      	addgt	r5, r5, r3
 8013326:	2600      	movs	r6, #0
 8013328:	341a      	adds	r4, #26
 801332a:	42b5      	cmp	r5, r6
 801332c:	d11a      	bne.n	8013364 <_printf_common+0xc8>
 801332e:	2000      	movs	r0, #0
 8013330:	e008      	b.n	8013344 <_printf_common+0xa8>
 8013332:	2301      	movs	r3, #1
 8013334:	4652      	mov	r2, sl
 8013336:	4649      	mov	r1, r9
 8013338:	4638      	mov	r0, r7
 801333a:	47c0      	blx	r8
 801333c:	3001      	adds	r0, #1
 801333e:	d103      	bne.n	8013348 <_printf_common+0xac>
 8013340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013348:	3501      	adds	r5, #1
 801334a:	e7c6      	b.n	80132da <_printf_common+0x3e>
 801334c:	18e1      	adds	r1, r4, r3
 801334e:	1c5a      	adds	r2, r3, #1
 8013350:	2030      	movs	r0, #48	; 0x30
 8013352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013356:	4422      	add	r2, r4
 8013358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801335c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013360:	3302      	adds	r3, #2
 8013362:	e7c7      	b.n	80132f4 <_printf_common+0x58>
 8013364:	2301      	movs	r3, #1
 8013366:	4622      	mov	r2, r4
 8013368:	4649      	mov	r1, r9
 801336a:	4638      	mov	r0, r7
 801336c:	47c0      	blx	r8
 801336e:	3001      	adds	r0, #1
 8013370:	d0e6      	beq.n	8013340 <_printf_common+0xa4>
 8013372:	3601      	adds	r6, #1
 8013374:	e7d9      	b.n	801332a <_printf_common+0x8e>
	...

08013378 <_printf_i>:
 8013378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801337c:	460c      	mov	r4, r1
 801337e:	4691      	mov	r9, r2
 8013380:	7e27      	ldrb	r7, [r4, #24]
 8013382:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013384:	2f78      	cmp	r7, #120	; 0x78
 8013386:	4680      	mov	r8, r0
 8013388:	469a      	mov	sl, r3
 801338a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801338e:	d807      	bhi.n	80133a0 <_printf_i+0x28>
 8013390:	2f62      	cmp	r7, #98	; 0x62
 8013392:	d80a      	bhi.n	80133aa <_printf_i+0x32>
 8013394:	2f00      	cmp	r7, #0
 8013396:	f000 80d8 	beq.w	801354a <_printf_i+0x1d2>
 801339a:	2f58      	cmp	r7, #88	; 0x58
 801339c:	f000 80a3 	beq.w	80134e6 <_printf_i+0x16e>
 80133a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80133a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80133a8:	e03a      	b.n	8013420 <_printf_i+0xa8>
 80133aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80133ae:	2b15      	cmp	r3, #21
 80133b0:	d8f6      	bhi.n	80133a0 <_printf_i+0x28>
 80133b2:	a001      	add	r0, pc, #4	; (adr r0, 80133b8 <_printf_i+0x40>)
 80133b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80133b8:	08013411 	.word	0x08013411
 80133bc:	08013425 	.word	0x08013425
 80133c0:	080133a1 	.word	0x080133a1
 80133c4:	080133a1 	.word	0x080133a1
 80133c8:	080133a1 	.word	0x080133a1
 80133cc:	080133a1 	.word	0x080133a1
 80133d0:	08013425 	.word	0x08013425
 80133d4:	080133a1 	.word	0x080133a1
 80133d8:	080133a1 	.word	0x080133a1
 80133dc:	080133a1 	.word	0x080133a1
 80133e0:	080133a1 	.word	0x080133a1
 80133e4:	08013531 	.word	0x08013531
 80133e8:	08013455 	.word	0x08013455
 80133ec:	08013513 	.word	0x08013513
 80133f0:	080133a1 	.word	0x080133a1
 80133f4:	080133a1 	.word	0x080133a1
 80133f8:	08013553 	.word	0x08013553
 80133fc:	080133a1 	.word	0x080133a1
 8013400:	08013455 	.word	0x08013455
 8013404:	080133a1 	.word	0x080133a1
 8013408:	080133a1 	.word	0x080133a1
 801340c:	0801351b 	.word	0x0801351b
 8013410:	680b      	ldr	r3, [r1, #0]
 8013412:	1d1a      	adds	r2, r3, #4
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	600a      	str	r2, [r1, #0]
 8013418:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801341c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013420:	2301      	movs	r3, #1
 8013422:	e0a3      	b.n	801356c <_printf_i+0x1f4>
 8013424:	6825      	ldr	r5, [r4, #0]
 8013426:	6808      	ldr	r0, [r1, #0]
 8013428:	062e      	lsls	r6, r5, #24
 801342a:	f100 0304 	add.w	r3, r0, #4
 801342e:	d50a      	bpl.n	8013446 <_printf_i+0xce>
 8013430:	6805      	ldr	r5, [r0, #0]
 8013432:	600b      	str	r3, [r1, #0]
 8013434:	2d00      	cmp	r5, #0
 8013436:	da03      	bge.n	8013440 <_printf_i+0xc8>
 8013438:	232d      	movs	r3, #45	; 0x2d
 801343a:	426d      	negs	r5, r5
 801343c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013440:	485e      	ldr	r0, [pc, #376]	; (80135bc <_printf_i+0x244>)
 8013442:	230a      	movs	r3, #10
 8013444:	e019      	b.n	801347a <_printf_i+0x102>
 8013446:	f015 0f40 	tst.w	r5, #64	; 0x40
 801344a:	6805      	ldr	r5, [r0, #0]
 801344c:	600b      	str	r3, [r1, #0]
 801344e:	bf18      	it	ne
 8013450:	b22d      	sxthne	r5, r5
 8013452:	e7ef      	b.n	8013434 <_printf_i+0xbc>
 8013454:	680b      	ldr	r3, [r1, #0]
 8013456:	6825      	ldr	r5, [r4, #0]
 8013458:	1d18      	adds	r0, r3, #4
 801345a:	6008      	str	r0, [r1, #0]
 801345c:	0628      	lsls	r0, r5, #24
 801345e:	d501      	bpl.n	8013464 <_printf_i+0xec>
 8013460:	681d      	ldr	r5, [r3, #0]
 8013462:	e002      	b.n	801346a <_printf_i+0xf2>
 8013464:	0669      	lsls	r1, r5, #25
 8013466:	d5fb      	bpl.n	8013460 <_printf_i+0xe8>
 8013468:	881d      	ldrh	r5, [r3, #0]
 801346a:	4854      	ldr	r0, [pc, #336]	; (80135bc <_printf_i+0x244>)
 801346c:	2f6f      	cmp	r7, #111	; 0x6f
 801346e:	bf0c      	ite	eq
 8013470:	2308      	moveq	r3, #8
 8013472:	230a      	movne	r3, #10
 8013474:	2100      	movs	r1, #0
 8013476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801347a:	6866      	ldr	r6, [r4, #4]
 801347c:	60a6      	str	r6, [r4, #8]
 801347e:	2e00      	cmp	r6, #0
 8013480:	bfa2      	ittt	ge
 8013482:	6821      	ldrge	r1, [r4, #0]
 8013484:	f021 0104 	bicge.w	r1, r1, #4
 8013488:	6021      	strge	r1, [r4, #0]
 801348a:	b90d      	cbnz	r5, 8013490 <_printf_i+0x118>
 801348c:	2e00      	cmp	r6, #0
 801348e:	d04d      	beq.n	801352c <_printf_i+0x1b4>
 8013490:	4616      	mov	r6, r2
 8013492:	fbb5 f1f3 	udiv	r1, r5, r3
 8013496:	fb03 5711 	mls	r7, r3, r1, r5
 801349a:	5dc7      	ldrb	r7, [r0, r7]
 801349c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80134a0:	462f      	mov	r7, r5
 80134a2:	42bb      	cmp	r3, r7
 80134a4:	460d      	mov	r5, r1
 80134a6:	d9f4      	bls.n	8013492 <_printf_i+0x11a>
 80134a8:	2b08      	cmp	r3, #8
 80134aa:	d10b      	bne.n	80134c4 <_printf_i+0x14c>
 80134ac:	6823      	ldr	r3, [r4, #0]
 80134ae:	07df      	lsls	r7, r3, #31
 80134b0:	d508      	bpl.n	80134c4 <_printf_i+0x14c>
 80134b2:	6923      	ldr	r3, [r4, #16]
 80134b4:	6861      	ldr	r1, [r4, #4]
 80134b6:	4299      	cmp	r1, r3
 80134b8:	bfde      	ittt	le
 80134ba:	2330      	movle	r3, #48	; 0x30
 80134bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80134c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80134c4:	1b92      	subs	r2, r2, r6
 80134c6:	6122      	str	r2, [r4, #16]
 80134c8:	f8cd a000 	str.w	sl, [sp]
 80134cc:	464b      	mov	r3, r9
 80134ce:	aa03      	add	r2, sp, #12
 80134d0:	4621      	mov	r1, r4
 80134d2:	4640      	mov	r0, r8
 80134d4:	f7ff fee2 	bl	801329c <_printf_common>
 80134d8:	3001      	adds	r0, #1
 80134da:	d14c      	bne.n	8013576 <_printf_i+0x1fe>
 80134dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80134e0:	b004      	add	sp, #16
 80134e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134e6:	4835      	ldr	r0, [pc, #212]	; (80135bc <_printf_i+0x244>)
 80134e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80134ec:	6823      	ldr	r3, [r4, #0]
 80134ee:	680e      	ldr	r6, [r1, #0]
 80134f0:	061f      	lsls	r7, r3, #24
 80134f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80134f6:	600e      	str	r6, [r1, #0]
 80134f8:	d514      	bpl.n	8013524 <_printf_i+0x1ac>
 80134fa:	07d9      	lsls	r1, r3, #31
 80134fc:	bf44      	itt	mi
 80134fe:	f043 0320 	orrmi.w	r3, r3, #32
 8013502:	6023      	strmi	r3, [r4, #0]
 8013504:	b91d      	cbnz	r5, 801350e <_printf_i+0x196>
 8013506:	6823      	ldr	r3, [r4, #0]
 8013508:	f023 0320 	bic.w	r3, r3, #32
 801350c:	6023      	str	r3, [r4, #0]
 801350e:	2310      	movs	r3, #16
 8013510:	e7b0      	b.n	8013474 <_printf_i+0xfc>
 8013512:	6823      	ldr	r3, [r4, #0]
 8013514:	f043 0320 	orr.w	r3, r3, #32
 8013518:	6023      	str	r3, [r4, #0]
 801351a:	2378      	movs	r3, #120	; 0x78
 801351c:	4828      	ldr	r0, [pc, #160]	; (80135c0 <_printf_i+0x248>)
 801351e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013522:	e7e3      	b.n	80134ec <_printf_i+0x174>
 8013524:	065e      	lsls	r6, r3, #25
 8013526:	bf48      	it	mi
 8013528:	b2ad      	uxthmi	r5, r5
 801352a:	e7e6      	b.n	80134fa <_printf_i+0x182>
 801352c:	4616      	mov	r6, r2
 801352e:	e7bb      	b.n	80134a8 <_printf_i+0x130>
 8013530:	680b      	ldr	r3, [r1, #0]
 8013532:	6826      	ldr	r6, [r4, #0]
 8013534:	6960      	ldr	r0, [r4, #20]
 8013536:	1d1d      	adds	r5, r3, #4
 8013538:	600d      	str	r5, [r1, #0]
 801353a:	0635      	lsls	r5, r6, #24
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	d501      	bpl.n	8013544 <_printf_i+0x1cc>
 8013540:	6018      	str	r0, [r3, #0]
 8013542:	e002      	b.n	801354a <_printf_i+0x1d2>
 8013544:	0671      	lsls	r1, r6, #25
 8013546:	d5fb      	bpl.n	8013540 <_printf_i+0x1c8>
 8013548:	8018      	strh	r0, [r3, #0]
 801354a:	2300      	movs	r3, #0
 801354c:	6123      	str	r3, [r4, #16]
 801354e:	4616      	mov	r6, r2
 8013550:	e7ba      	b.n	80134c8 <_printf_i+0x150>
 8013552:	680b      	ldr	r3, [r1, #0]
 8013554:	1d1a      	adds	r2, r3, #4
 8013556:	600a      	str	r2, [r1, #0]
 8013558:	681e      	ldr	r6, [r3, #0]
 801355a:	6862      	ldr	r2, [r4, #4]
 801355c:	2100      	movs	r1, #0
 801355e:	4630      	mov	r0, r6
 8013560:	f7ec fe46 	bl	80001f0 <memchr>
 8013564:	b108      	cbz	r0, 801356a <_printf_i+0x1f2>
 8013566:	1b80      	subs	r0, r0, r6
 8013568:	6060      	str	r0, [r4, #4]
 801356a:	6863      	ldr	r3, [r4, #4]
 801356c:	6123      	str	r3, [r4, #16]
 801356e:	2300      	movs	r3, #0
 8013570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013574:	e7a8      	b.n	80134c8 <_printf_i+0x150>
 8013576:	6923      	ldr	r3, [r4, #16]
 8013578:	4632      	mov	r2, r6
 801357a:	4649      	mov	r1, r9
 801357c:	4640      	mov	r0, r8
 801357e:	47d0      	blx	sl
 8013580:	3001      	adds	r0, #1
 8013582:	d0ab      	beq.n	80134dc <_printf_i+0x164>
 8013584:	6823      	ldr	r3, [r4, #0]
 8013586:	079b      	lsls	r3, r3, #30
 8013588:	d413      	bmi.n	80135b2 <_printf_i+0x23a>
 801358a:	68e0      	ldr	r0, [r4, #12]
 801358c:	9b03      	ldr	r3, [sp, #12]
 801358e:	4298      	cmp	r0, r3
 8013590:	bfb8      	it	lt
 8013592:	4618      	movlt	r0, r3
 8013594:	e7a4      	b.n	80134e0 <_printf_i+0x168>
 8013596:	2301      	movs	r3, #1
 8013598:	4632      	mov	r2, r6
 801359a:	4649      	mov	r1, r9
 801359c:	4640      	mov	r0, r8
 801359e:	47d0      	blx	sl
 80135a0:	3001      	adds	r0, #1
 80135a2:	d09b      	beq.n	80134dc <_printf_i+0x164>
 80135a4:	3501      	adds	r5, #1
 80135a6:	68e3      	ldr	r3, [r4, #12]
 80135a8:	9903      	ldr	r1, [sp, #12]
 80135aa:	1a5b      	subs	r3, r3, r1
 80135ac:	42ab      	cmp	r3, r5
 80135ae:	dcf2      	bgt.n	8013596 <_printf_i+0x21e>
 80135b0:	e7eb      	b.n	801358a <_printf_i+0x212>
 80135b2:	2500      	movs	r5, #0
 80135b4:	f104 0619 	add.w	r6, r4, #25
 80135b8:	e7f5      	b.n	80135a6 <_printf_i+0x22e>
 80135ba:	bf00      	nop
 80135bc:	080180c9 	.word	0x080180c9
 80135c0:	080180da 	.word	0x080180da

080135c4 <_scanf_float>:
 80135c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135c8:	b087      	sub	sp, #28
 80135ca:	4617      	mov	r7, r2
 80135cc:	9303      	str	r3, [sp, #12]
 80135ce:	688b      	ldr	r3, [r1, #8]
 80135d0:	1e5a      	subs	r2, r3, #1
 80135d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80135d6:	bf83      	ittte	hi
 80135d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80135dc:	195b      	addhi	r3, r3, r5
 80135de:	9302      	strhi	r3, [sp, #8]
 80135e0:	2300      	movls	r3, #0
 80135e2:	bf86      	itte	hi
 80135e4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80135e8:	608b      	strhi	r3, [r1, #8]
 80135ea:	9302      	strls	r3, [sp, #8]
 80135ec:	680b      	ldr	r3, [r1, #0]
 80135ee:	468b      	mov	fp, r1
 80135f0:	2500      	movs	r5, #0
 80135f2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80135f6:	f84b 3b1c 	str.w	r3, [fp], #28
 80135fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80135fe:	4680      	mov	r8, r0
 8013600:	460c      	mov	r4, r1
 8013602:	465e      	mov	r6, fp
 8013604:	46aa      	mov	sl, r5
 8013606:	46a9      	mov	r9, r5
 8013608:	9501      	str	r5, [sp, #4]
 801360a:	68a2      	ldr	r2, [r4, #8]
 801360c:	b152      	cbz	r2, 8013624 <_scanf_float+0x60>
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	781b      	ldrb	r3, [r3, #0]
 8013612:	2b4e      	cmp	r3, #78	; 0x4e
 8013614:	d864      	bhi.n	80136e0 <_scanf_float+0x11c>
 8013616:	2b40      	cmp	r3, #64	; 0x40
 8013618:	d83c      	bhi.n	8013694 <_scanf_float+0xd0>
 801361a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801361e:	b2c8      	uxtb	r0, r1
 8013620:	280e      	cmp	r0, #14
 8013622:	d93a      	bls.n	801369a <_scanf_float+0xd6>
 8013624:	f1b9 0f00 	cmp.w	r9, #0
 8013628:	d003      	beq.n	8013632 <_scanf_float+0x6e>
 801362a:	6823      	ldr	r3, [r4, #0]
 801362c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013630:	6023      	str	r3, [r4, #0]
 8013632:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013636:	f1ba 0f01 	cmp.w	sl, #1
 801363a:	f200 8113 	bhi.w	8013864 <_scanf_float+0x2a0>
 801363e:	455e      	cmp	r6, fp
 8013640:	f200 8105 	bhi.w	801384e <_scanf_float+0x28a>
 8013644:	2501      	movs	r5, #1
 8013646:	4628      	mov	r0, r5
 8013648:	b007      	add	sp, #28
 801364a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801364e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013652:	2a0d      	cmp	r2, #13
 8013654:	d8e6      	bhi.n	8013624 <_scanf_float+0x60>
 8013656:	a101      	add	r1, pc, #4	; (adr r1, 801365c <_scanf_float+0x98>)
 8013658:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801365c:	0801379b 	.word	0x0801379b
 8013660:	08013625 	.word	0x08013625
 8013664:	08013625 	.word	0x08013625
 8013668:	08013625 	.word	0x08013625
 801366c:	080137fb 	.word	0x080137fb
 8013670:	080137d3 	.word	0x080137d3
 8013674:	08013625 	.word	0x08013625
 8013678:	08013625 	.word	0x08013625
 801367c:	080137a9 	.word	0x080137a9
 8013680:	08013625 	.word	0x08013625
 8013684:	08013625 	.word	0x08013625
 8013688:	08013625 	.word	0x08013625
 801368c:	08013625 	.word	0x08013625
 8013690:	08013761 	.word	0x08013761
 8013694:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013698:	e7db      	b.n	8013652 <_scanf_float+0x8e>
 801369a:	290e      	cmp	r1, #14
 801369c:	d8c2      	bhi.n	8013624 <_scanf_float+0x60>
 801369e:	a001      	add	r0, pc, #4	; (adr r0, 80136a4 <_scanf_float+0xe0>)
 80136a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80136a4:	08013753 	.word	0x08013753
 80136a8:	08013625 	.word	0x08013625
 80136ac:	08013753 	.word	0x08013753
 80136b0:	080137e7 	.word	0x080137e7
 80136b4:	08013625 	.word	0x08013625
 80136b8:	08013701 	.word	0x08013701
 80136bc:	0801373d 	.word	0x0801373d
 80136c0:	0801373d 	.word	0x0801373d
 80136c4:	0801373d 	.word	0x0801373d
 80136c8:	0801373d 	.word	0x0801373d
 80136cc:	0801373d 	.word	0x0801373d
 80136d0:	0801373d 	.word	0x0801373d
 80136d4:	0801373d 	.word	0x0801373d
 80136d8:	0801373d 	.word	0x0801373d
 80136dc:	0801373d 	.word	0x0801373d
 80136e0:	2b6e      	cmp	r3, #110	; 0x6e
 80136e2:	d809      	bhi.n	80136f8 <_scanf_float+0x134>
 80136e4:	2b60      	cmp	r3, #96	; 0x60
 80136e6:	d8b2      	bhi.n	801364e <_scanf_float+0x8a>
 80136e8:	2b54      	cmp	r3, #84	; 0x54
 80136ea:	d077      	beq.n	80137dc <_scanf_float+0x218>
 80136ec:	2b59      	cmp	r3, #89	; 0x59
 80136ee:	d199      	bne.n	8013624 <_scanf_float+0x60>
 80136f0:	2d07      	cmp	r5, #7
 80136f2:	d197      	bne.n	8013624 <_scanf_float+0x60>
 80136f4:	2508      	movs	r5, #8
 80136f6:	e029      	b.n	801374c <_scanf_float+0x188>
 80136f8:	2b74      	cmp	r3, #116	; 0x74
 80136fa:	d06f      	beq.n	80137dc <_scanf_float+0x218>
 80136fc:	2b79      	cmp	r3, #121	; 0x79
 80136fe:	e7f6      	b.n	80136ee <_scanf_float+0x12a>
 8013700:	6821      	ldr	r1, [r4, #0]
 8013702:	05c8      	lsls	r0, r1, #23
 8013704:	d51a      	bpl.n	801373c <_scanf_float+0x178>
 8013706:	9b02      	ldr	r3, [sp, #8]
 8013708:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801370c:	6021      	str	r1, [r4, #0]
 801370e:	f109 0901 	add.w	r9, r9, #1
 8013712:	b11b      	cbz	r3, 801371c <_scanf_float+0x158>
 8013714:	3b01      	subs	r3, #1
 8013716:	3201      	adds	r2, #1
 8013718:	9302      	str	r3, [sp, #8]
 801371a:	60a2      	str	r2, [r4, #8]
 801371c:	68a3      	ldr	r3, [r4, #8]
 801371e:	3b01      	subs	r3, #1
 8013720:	60a3      	str	r3, [r4, #8]
 8013722:	6923      	ldr	r3, [r4, #16]
 8013724:	3301      	adds	r3, #1
 8013726:	6123      	str	r3, [r4, #16]
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	3b01      	subs	r3, #1
 801372c:	2b00      	cmp	r3, #0
 801372e:	607b      	str	r3, [r7, #4]
 8013730:	f340 8084 	ble.w	801383c <_scanf_float+0x278>
 8013734:	683b      	ldr	r3, [r7, #0]
 8013736:	3301      	adds	r3, #1
 8013738:	603b      	str	r3, [r7, #0]
 801373a:	e766      	b.n	801360a <_scanf_float+0x46>
 801373c:	eb1a 0f05 	cmn.w	sl, r5
 8013740:	f47f af70 	bne.w	8013624 <_scanf_float+0x60>
 8013744:	6822      	ldr	r2, [r4, #0]
 8013746:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801374a:	6022      	str	r2, [r4, #0]
 801374c:	f806 3b01 	strb.w	r3, [r6], #1
 8013750:	e7e4      	b.n	801371c <_scanf_float+0x158>
 8013752:	6822      	ldr	r2, [r4, #0]
 8013754:	0610      	lsls	r0, r2, #24
 8013756:	f57f af65 	bpl.w	8013624 <_scanf_float+0x60>
 801375a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801375e:	e7f4      	b.n	801374a <_scanf_float+0x186>
 8013760:	f1ba 0f00 	cmp.w	sl, #0
 8013764:	d10e      	bne.n	8013784 <_scanf_float+0x1c0>
 8013766:	f1b9 0f00 	cmp.w	r9, #0
 801376a:	d10e      	bne.n	801378a <_scanf_float+0x1c6>
 801376c:	6822      	ldr	r2, [r4, #0]
 801376e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013772:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013776:	d108      	bne.n	801378a <_scanf_float+0x1c6>
 8013778:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801377c:	6022      	str	r2, [r4, #0]
 801377e:	f04f 0a01 	mov.w	sl, #1
 8013782:	e7e3      	b.n	801374c <_scanf_float+0x188>
 8013784:	f1ba 0f02 	cmp.w	sl, #2
 8013788:	d055      	beq.n	8013836 <_scanf_float+0x272>
 801378a:	2d01      	cmp	r5, #1
 801378c:	d002      	beq.n	8013794 <_scanf_float+0x1d0>
 801378e:	2d04      	cmp	r5, #4
 8013790:	f47f af48 	bne.w	8013624 <_scanf_float+0x60>
 8013794:	3501      	adds	r5, #1
 8013796:	b2ed      	uxtb	r5, r5
 8013798:	e7d8      	b.n	801374c <_scanf_float+0x188>
 801379a:	f1ba 0f01 	cmp.w	sl, #1
 801379e:	f47f af41 	bne.w	8013624 <_scanf_float+0x60>
 80137a2:	f04f 0a02 	mov.w	sl, #2
 80137a6:	e7d1      	b.n	801374c <_scanf_float+0x188>
 80137a8:	b97d      	cbnz	r5, 80137ca <_scanf_float+0x206>
 80137aa:	f1b9 0f00 	cmp.w	r9, #0
 80137ae:	f47f af3c 	bne.w	801362a <_scanf_float+0x66>
 80137b2:	6822      	ldr	r2, [r4, #0]
 80137b4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80137b8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80137bc:	f47f af39 	bne.w	8013632 <_scanf_float+0x6e>
 80137c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80137c4:	6022      	str	r2, [r4, #0]
 80137c6:	2501      	movs	r5, #1
 80137c8:	e7c0      	b.n	801374c <_scanf_float+0x188>
 80137ca:	2d03      	cmp	r5, #3
 80137cc:	d0e2      	beq.n	8013794 <_scanf_float+0x1d0>
 80137ce:	2d05      	cmp	r5, #5
 80137d0:	e7de      	b.n	8013790 <_scanf_float+0x1cc>
 80137d2:	2d02      	cmp	r5, #2
 80137d4:	f47f af26 	bne.w	8013624 <_scanf_float+0x60>
 80137d8:	2503      	movs	r5, #3
 80137da:	e7b7      	b.n	801374c <_scanf_float+0x188>
 80137dc:	2d06      	cmp	r5, #6
 80137de:	f47f af21 	bne.w	8013624 <_scanf_float+0x60>
 80137e2:	2507      	movs	r5, #7
 80137e4:	e7b2      	b.n	801374c <_scanf_float+0x188>
 80137e6:	6822      	ldr	r2, [r4, #0]
 80137e8:	0591      	lsls	r1, r2, #22
 80137ea:	f57f af1b 	bpl.w	8013624 <_scanf_float+0x60>
 80137ee:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80137f2:	6022      	str	r2, [r4, #0]
 80137f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80137f8:	e7a8      	b.n	801374c <_scanf_float+0x188>
 80137fa:	6822      	ldr	r2, [r4, #0]
 80137fc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013800:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013804:	d006      	beq.n	8013814 <_scanf_float+0x250>
 8013806:	0550      	lsls	r0, r2, #21
 8013808:	f57f af0c 	bpl.w	8013624 <_scanf_float+0x60>
 801380c:	f1b9 0f00 	cmp.w	r9, #0
 8013810:	f43f af0f 	beq.w	8013632 <_scanf_float+0x6e>
 8013814:	0591      	lsls	r1, r2, #22
 8013816:	bf58      	it	pl
 8013818:	9901      	ldrpl	r1, [sp, #4]
 801381a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801381e:	bf58      	it	pl
 8013820:	eba9 0101 	subpl.w	r1, r9, r1
 8013824:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013828:	bf58      	it	pl
 801382a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801382e:	6022      	str	r2, [r4, #0]
 8013830:	f04f 0900 	mov.w	r9, #0
 8013834:	e78a      	b.n	801374c <_scanf_float+0x188>
 8013836:	f04f 0a03 	mov.w	sl, #3
 801383a:	e787      	b.n	801374c <_scanf_float+0x188>
 801383c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013840:	4639      	mov	r1, r7
 8013842:	4640      	mov	r0, r8
 8013844:	4798      	blx	r3
 8013846:	2800      	cmp	r0, #0
 8013848:	f43f aedf 	beq.w	801360a <_scanf_float+0x46>
 801384c:	e6ea      	b.n	8013624 <_scanf_float+0x60>
 801384e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013852:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013856:	463a      	mov	r2, r7
 8013858:	4640      	mov	r0, r8
 801385a:	4798      	blx	r3
 801385c:	6923      	ldr	r3, [r4, #16]
 801385e:	3b01      	subs	r3, #1
 8013860:	6123      	str	r3, [r4, #16]
 8013862:	e6ec      	b.n	801363e <_scanf_float+0x7a>
 8013864:	1e6b      	subs	r3, r5, #1
 8013866:	2b06      	cmp	r3, #6
 8013868:	d825      	bhi.n	80138b6 <_scanf_float+0x2f2>
 801386a:	2d02      	cmp	r5, #2
 801386c:	d836      	bhi.n	80138dc <_scanf_float+0x318>
 801386e:	455e      	cmp	r6, fp
 8013870:	f67f aee8 	bls.w	8013644 <_scanf_float+0x80>
 8013874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013878:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801387c:	463a      	mov	r2, r7
 801387e:	4640      	mov	r0, r8
 8013880:	4798      	blx	r3
 8013882:	6923      	ldr	r3, [r4, #16]
 8013884:	3b01      	subs	r3, #1
 8013886:	6123      	str	r3, [r4, #16]
 8013888:	e7f1      	b.n	801386e <_scanf_float+0x2aa>
 801388a:	9802      	ldr	r0, [sp, #8]
 801388c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013890:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013894:	9002      	str	r0, [sp, #8]
 8013896:	463a      	mov	r2, r7
 8013898:	4640      	mov	r0, r8
 801389a:	4798      	blx	r3
 801389c:	6923      	ldr	r3, [r4, #16]
 801389e:	3b01      	subs	r3, #1
 80138a0:	6123      	str	r3, [r4, #16]
 80138a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80138a6:	fa5f fa8a 	uxtb.w	sl, sl
 80138aa:	f1ba 0f02 	cmp.w	sl, #2
 80138ae:	d1ec      	bne.n	801388a <_scanf_float+0x2c6>
 80138b0:	3d03      	subs	r5, #3
 80138b2:	b2ed      	uxtb	r5, r5
 80138b4:	1b76      	subs	r6, r6, r5
 80138b6:	6823      	ldr	r3, [r4, #0]
 80138b8:	05da      	lsls	r2, r3, #23
 80138ba:	d52f      	bpl.n	801391c <_scanf_float+0x358>
 80138bc:	055b      	lsls	r3, r3, #21
 80138be:	d510      	bpl.n	80138e2 <_scanf_float+0x31e>
 80138c0:	455e      	cmp	r6, fp
 80138c2:	f67f aebf 	bls.w	8013644 <_scanf_float+0x80>
 80138c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80138ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80138ce:	463a      	mov	r2, r7
 80138d0:	4640      	mov	r0, r8
 80138d2:	4798      	blx	r3
 80138d4:	6923      	ldr	r3, [r4, #16]
 80138d6:	3b01      	subs	r3, #1
 80138d8:	6123      	str	r3, [r4, #16]
 80138da:	e7f1      	b.n	80138c0 <_scanf_float+0x2fc>
 80138dc:	46aa      	mov	sl, r5
 80138de:	9602      	str	r6, [sp, #8]
 80138e0:	e7df      	b.n	80138a2 <_scanf_float+0x2de>
 80138e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80138e6:	6923      	ldr	r3, [r4, #16]
 80138e8:	2965      	cmp	r1, #101	; 0x65
 80138ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80138ee:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80138f2:	6123      	str	r3, [r4, #16]
 80138f4:	d00c      	beq.n	8013910 <_scanf_float+0x34c>
 80138f6:	2945      	cmp	r1, #69	; 0x45
 80138f8:	d00a      	beq.n	8013910 <_scanf_float+0x34c>
 80138fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80138fe:	463a      	mov	r2, r7
 8013900:	4640      	mov	r0, r8
 8013902:	4798      	blx	r3
 8013904:	6923      	ldr	r3, [r4, #16]
 8013906:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801390a:	3b01      	subs	r3, #1
 801390c:	1eb5      	subs	r5, r6, #2
 801390e:	6123      	str	r3, [r4, #16]
 8013910:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013914:	463a      	mov	r2, r7
 8013916:	4640      	mov	r0, r8
 8013918:	4798      	blx	r3
 801391a:	462e      	mov	r6, r5
 801391c:	6825      	ldr	r5, [r4, #0]
 801391e:	f015 0510 	ands.w	r5, r5, #16
 8013922:	d158      	bne.n	80139d6 <_scanf_float+0x412>
 8013924:	7035      	strb	r5, [r6, #0]
 8013926:	6823      	ldr	r3, [r4, #0]
 8013928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801392c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013930:	d11c      	bne.n	801396c <_scanf_float+0x3a8>
 8013932:	9b01      	ldr	r3, [sp, #4]
 8013934:	454b      	cmp	r3, r9
 8013936:	eba3 0209 	sub.w	r2, r3, r9
 801393a:	d124      	bne.n	8013986 <_scanf_float+0x3c2>
 801393c:	2200      	movs	r2, #0
 801393e:	4659      	mov	r1, fp
 8013940:	4640      	mov	r0, r8
 8013942:	f001 fa43 	bl	8014dcc <_strtod_r>
 8013946:	9b03      	ldr	r3, [sp, #12]
 8013948:	6821      	ldr	r1, [r4, #0]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f011 0f02 	tst.w	r1, #2
 8013950:	ec57 6b10 	vmov	r6, r7, d0
 8013954:	f103 0204 	add.w	r2, r3, #4
 8013958:	d020      	beq.n	801399c <_scanf_float+0x3d8>
 801395a:	9903      	ldr	r1, [sp, #12]
 801395c:	600a      	str	r2, [r1, #0]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	e9c3 6700 	strd	r6, r7, [r3]
 8013964:	68e3      	ldr	r3, [r4, #12]
 8013966:	3301      	adds	r3, #1
 8013968:	60e3      	str	r3, [r4, #12]
 801396a:	e66c      	b.n	8013646 <_scanf_float+0x82>
 801396c:	9b04      	ldr	r3, [sp, #16]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d0e4      	beq.n	801393c <_scanf_float+0x378>
 8013972:	9905      	ldr	r1, [sp, #20]
 8013974:	230a      	movs	r3, #10
 8013976:	462a      	mov	r2, r5
 8013978:	3101      	adds	r1, #1
 801397a:	4640      	mov	r0, r8
 801397c:	f001 fab0 	bl	8014ee0 <_strtol_r>
 8013980:	9b04      	ldr	r3, [sp, #16]
 8013982:	9e05      	ldr	r6, [sp, #20]
 8013984:	1ac2      	subs	r2, r0, r3
 8013986:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801398a:	429e      	cmp	r6, r3
 801398c:	bf28      	it	cs
 801398e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013992:	4912      	ldr	r1, [pc, #72]	; (80139dc <_scanf_float+0x418>)
 8013994:	4630      	mov	r0, r6
 8013996:	f000 f96b 	bl	8013c70 <siprintf>
 801399a:	e7cf      	b.n	801393c <_scanf_float+0x378>
 801399c:	f011 0f04 	tst.w	r1, #4
 80139a0:	9903      	ldr	r1, [sp, #12]
 80139a2:	600a      	str	r2, [r1, #0]
 80139a4:	d1db      	bne.n	801395e <_scanf_float+0x39a>
 80139a6:	f8d3 8000 	ldr.w	r8, [r3]
 80139aa:	ee10 2a10 	vmov	r2, s0
 80139ae:	ee10 0a10 	vmov	r0, s0
 80139b2:	463b      	mov	r3, r7
 80139b4:	4639      	mov	r1, r7
 80139b6:	f7ed f8c9 	bl	8000b4c <__aeabi_dcmpun>
 80139ba:	b128      	cbz	r0, 80139c8 <_scanf_float+0x404>
 80139bc:	4808      	ldr	r0, [pc, #32]	; (80139e0 <_scanf_float+0x41c>)
 80139be:	f000 f951 	bl	8013c64 <nanf>
 80139c2:	ed88 0a00 	vstr	s0, [r8]
 80139c6:	e7cd      	b.n	8013964 <_scanf_float+0x3a0>
 80139c8:	4630      	mov	r0, r6
 80139ca:	4639      	mov	r1, r7
 80139cc:	f7ed f91c 	bl	8000c08 <__aeabi_d2f>
 80139d0:	f8c8 0000 	str.w	r0, [r8]
 80139d4:	e7c6      	b.n	8013964 <_scanf_float+0x3a0>
 80139d6:	2500      	movs	r5, #0
 80139d8:	e635      	b.n	8013646 <_scanf_float+0x82>
 80139da:	bf00      	nop
 80139dc:	080180eb 	.word	0x080180eb
 80139e0:	08018ba2 	.word	0x08018ba2

080139e4 <_perror_r>:
 80139e4:	6983      	ldr	r3, [r0, #24]
 80139e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139e8:	68c4      	ldr	r4, [r0, #12]
 80139ea:	4605      	mov	r5, r0
 80139ec:	460e      	mov	r6, r1
 80139ee:	b90b      	cbnz	r3, 80139f4 <_perror_r+0x10>
 80139f0:	f7fe fe08 	bl	8012604 <__sinit>
 80139f4:	4b43      	ldr	r3, [pc, #268]	; (8013b04 <_perror_r+0x120>)
 80139f6:	429c      	cmp	r4, r3
 80139f8:	d132      	bne.n	8013a60 <_perror_r+0x7c>
 80139fa:	686c      	ldr	r4, [r5, #4]
 80139fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80139fe:	07d8      	lsls	r0, r3, #31
 8013a00:	d405      	bmi.n	8013a0e <_perror_r+0x2a>
 8013a02:	89a3      	ldrh	r3, [r4, #12]
 8013a04:	0599      	lsls	r1, r3, #22
 8013a06:	d402      	bmi.n	8013a0e <_perror_r+0x2a>
 8013a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a0a:	f7fe fed0 	bl	80127ae <__retarget_lock_acquire_recursive>
 8013a0e:	4621      	mov	r1, r4
 8013a10:	4628      	mov	r0, r5
 8013a12:	f7fe fd63 	bl	80124dc <_fflush_r>
 8013a16:	bb6e      	cbnz	r6, 8013a74 <_perror_r+0x90>
 8013a18:	6829      	ldr	r1, [r5, #0]
 8013a1a:	ab01      	add	r3, sp, #4
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	4628      	mov	r0, r5
 8013a20:	f000 f9c8 	bl	8013db4 <_strerror_r>
 8013a24:	4607      	mov	r7, r0
 8013a26:	2800      	cmp	r0, #0
 8013a28:	d14f      	bne.n	8013aca <_perror_r+0xe6>
 8013a2a:	4837      	ldr	r0, [pc, #220]	; (8013b08 <_perror_r+0x124>)
 8013a2c:	4f36      	ldr	r7, [pc, #216]	; (8013b08 <_perror_r+0x124>)
 8013a2e:	f7ec fc2f 	bl	8000290 <strlen>
 8013a32:	4606      	mov	r6, r0
 8013a34:	b156      	cbz	r6, 8013a4c <_perror_r+0x68>
 8013a36:	4620      	mov	r0, r4
 8013a38:	f002 f9ea 	bl	8015e10 <fileno>
 8013a3c:	4633      	mov	r3, r6
 8013a3e:	4601      	mov	r1, r0
 8013a40:	463a      	mov	r2, r7
 8013a42:	4628      	mov	r0, r5
 8013a44:	f001 fadc 	bl	8015000 <_write_r>
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	da51      	bge.n	8013af0 <_perror_r+0x10c>
 8013a4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a50:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a56:	07d2      	lsls	r2, r2, #31
 8013a58:	81a3      	strh	r3, [r4, #12]
 8013a5a:	d54c      	bpl.n	8013af6 <_perror_r+0x112>
 8013a5c:	b003      	add	sp, #12
 8013a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a60:	4b2a      	ldr	r3, [pc, #168]	; (8013b0c <_perror_r+0x128>)
 8013a62:	429c      	cmp	r4, r3
 8013a64:	d101      	bne.n	8013a6a <_perror_r+0x86>
 8013a66:	68ac      	ldr	r4, [r5, #8]
 8013a68:	e7c8      	b.n	80139fc <_perror_r+0x18>
 8013a6a:	4b29      	ldr	r3, [pc, #164]	; (8013b10 <_perror_r+0x12c>)
 8013a6c:	429c      	cmp	r4, r3
 8013a6e:	bf08      	it	eq
 8013a70:	68ec      	ldreq	r4, [r5, #12]
 8013a72:	e7c3      	b.n	80139fc <_perror_r+0x18>
 8013a74:	7833      	ldrb	r3, [r6, #0]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d0ce      	beq.n	8013a18 <_perror_r+0x34>
 8013a7a:	4630      	mov	r0, r6
 8013a7c:	f7ec fc08 	bl	8000290 <strlen>
 8013a80:	4607      	mov	r7, r0
 8013a82:	b157      	cbz	r7, 8013a9a <_perror_r+0xb6>
 8013a84:	4620      	mov	r0, r4
 8013a86:	f002 f9c3 	bl	8015e10 <fileno>
 8013a8a:	463b      	mov	r3, r7
 8013a8c:	4601      	mov	r1, r0
 8013a8e:	4632      	mov	r2, r6
 8013a90:	4628      	mov	r0, r5
 8013a92:	f001 fab5 	bl	8015000 <_write_r>
 8013a96:	2800      	cmp	r0, #0
 8013a98:	da14      	bge.n	8013ac4 <_perror_r+0xe0>
 8013a9a:	481e      	ldr	r0, [pc, #120]	; (8013b14 <_perror_r+0x130>)
 8013a9c:	4f1d      	ldr	r7, [pc, #116]	; (8013b14 <_perror_r+0x130>)
 8013a9e:	f7ec fbf7 	bl	8000290 <strlen>
 8013aa2:	4606      	mov	r6, r0
 8013aa4:	2e00      	cmp	r6, #0
 8013aa6:	d0b7      	beq.n	8013a18 <_perror_r+0x34>
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	f002 f9b1 	bl	8015e10 <fileno>
 8013aae:	4633      	mov	r3, r6
 8013ab0:	4601      	mov	r1, r0
 8013ab2:	463a      	mov	r2, r7
 8013ab4:	4628      	mov	r0, r5
 8013ab6:	f001 faa3 	bl	8015000 <_write_r>
 8013aba:	2800      	cmp	r0, #0
 8013abc:	dbac      	blt.n	8013a18 <_perror_r+0x34>
 8013abe:	1a36      	subs	r6, r6, r0
 8013ac0:	4407      	add	r7, r0
 8013ac2:	e7ef      	b.n	8013aa4 <_perror_r+0xc0>
 8013ac4:	1a3f      	subs	r7, r7, r0
 8013ac6:	4406      	add	r6, r0
 8013ac8:	e7db      	b.n	8013a82 <_perror_r+0x9e>
 8013aca:	f7ec fbe1 	bl	8000290 <strlen>
 8013ace:	4606      	mov	r6, r0
 8013ad0:	2e00      	cmp	r6, #0
 8013ad2:	d0aa      	beq.n	8013a2a <_perror_r+0x46>
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	f002 f99b 	bl	8015e10 <fileno>
 8013ada:	4633      	mov	r3, r6
 8013adc:	4601      	mov	r1, r0
 8013ade:	463a      	mov	r2, r7
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	f001 fa8d 	bl	8015000 <_write_r>
 8013ae6:	2800      	cmp	r0, #0
 8013ae8:	db9f      	blt.n	8013a2a <_perror_r+0x46>
 8013aea:	1a36      	subs	r6, r6, r0
 8013aec:	4407      	add	r7, r0
 8013aee:	e7ef      	b.n	8013ad0 <_perror_r+0xec>
 8013af0:	1a36      	subs	r6, r6, r0
 8013af2:	4407      	add	r7, r0
 8013af4:	e79e      	b.n	8013a34 <_perror_r+0x50>
 8013af6:	059b      	lsls	r3, r3, #22
 8013af8:	d4b0      	bmi.n	8013a5c <_perror_r+0x78>
 8013afa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013afc:	f7fe fe58 	bl	80127b0 <__retarget_lock_release_recursive>
 8013b00:	e7ac      	b.n	8013a5c <_perror_r+0x78>
 8013b02:	bf00      	nop
 8013b04:	08018064 	.word	0x08018064
 8013b08:	08018ba1 	.word	0x08018ba1
 8013b0c:	08018084 	.word	0x08018084
 8013b10:	08018044 	.word	0x08018044
 8013b14:	08018b71 	.word	0x08018b71

08013b18 <perror>:
 8013b18:	4b02      	ldr	r3, [pc, #8]	; (8013b24 <perror+0xc>)
 8013b1a:	4601      	mov	r1, r0
 8013b1c:	6818      	ldr	r0, [r3, #0]
 8013b1e:	f7ff bf61 	b.w	80139e4 <_perror_r>
 8013b22:	bf00      	nop
 8013b24:	2000006c 	.word	0x2000006c

08013b28 <iprintf>:
 8013b28:	b40f      	push	{r0, r1, r2, r3}
 8013b2a:	4b0a      	ldr	r3, [pc, #40]	; (8013b54 <iprintf+0x2c>)
 8013b2c:	b513      	push	{r0, r1, r4, lr}
 8013b2e:	681c      	ldr	r4, [r3, #0]
 8013b30:	b124      	cbz	r4, 8013b3c <iprintf+0x14>
 8013b32:	69a3      	ldr	r3, [r4, #24]
 8013b34:	b913      	cbnz	r3, 8013b3c <iprintf+0x14>
 8013b36:	4620      	mov	r0, r4
 8013b38:	f7fe fd64 	bl	8012604 <__sinit>
 8013b3c:	ab05      	add	r3, sp, #20
 8013b3e:	9a04      	ldr	r2, [sp, #16]
 8013b40:	68a1      	ldr	r1, [r4, #8]
 8013b42:	9301      	str	r3, [sp, #4]
 8013b44:	4620      	mov	r0, r4
 8013b46:	f7fe ffa3 	bl	8012a90 <_vfiprintf_r>
 8013b4a:	b002      	add	sp, #8
 8013b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b50:	b004      	add	sp, #16
 8013b52:	4770      	bx	lr
 8013b54:	2000006c 	.word	0x2000006c

08013b58 <_puts_r>:
 8013b58:	b570      	push	{r4, r5, r6, lr}
 8013b5a:	460e      	mov	r6, r1
 8013b5c:	4605      	mov	r5, r0
 8013b5e:	b118      	cbz	r0, 8013b68 <_puts_r+0x10>
 8013b60:	6983      	ldr	r3, [r0, #24]
 8013b62:	b90b      	cbnz	r3, 8013b68 <_puts_r+0x10>
 8013b64:	f7fe fd4e 	bl	8012604 <__sinit>
 8013b68:	69ab      	ldr	r3, [r5, #24]
 8013b6a:	68ac      	ldr	r4, [r5, #8]
 8013b6c:	b913      	cbnz	r3, 8013b74 <_puts_r+0x1c>
 8013b6e:	4628      	mov	r0, r5
 8013b70:	f7fe fd48 	bl	8012604 <__sinit>
 8013b74:	4b2c      	ldr	r3, [pc, #176]	; (8013c28 <_puts_r+0xd0>)
 8013b76:	429c      	cmp	r4, r3
 8013b78:	d120      	bne.n	8013bbc <_puts_r+0x64>
 8013b7a:	686c      	ldr	r4, [r5, #4]
 8013b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b7e:	07db      	lsls	r3, r3, #31
 8013b80:	d405      	bmi.n	8013b8e <_puts_r+0x36>
 8013b82:	89a3      	ldrh	r3, [r4, #12]
 8013b84:	0598      	lsls	r0, r3, #22
 8013b86:	d402      	bmi.n	8013b8e <_puts_r+0x36>
 8013b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b8a:	f7fe fe10 	bl	80127ae <__retarget_lock_acquire_recursive>
 8013b8e:	89a3      	ldrh	r3, [r4, #12]
 8013b90:	0719      	lsls	r1, r3, #28
 8013b92:	d51d      	bpl.n	8013bd0 <_puts_r+0x78>
 8013b94:	6923      	ldr	r3, [r4, #16]
 8013b96:	b1db      	cbz	r3, 8013bd0 <_puts_r+0x78>
 8013b98:	3e01      	subs	r6, #1
 8013b9a:	68a3      	ldr	r3, [r4, #8]
 8013b9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013ba0:	3b01      	subs	r3, #1
 8013ba2:	60a3      	str	r3, [r4, #8]
 8013ba4:	bb39      	cbnz	r1, 8013bf6 <_puts_r+0x9e>
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	da38      	bge.n	8013c1c <_puts_r+0xc4>
 8013baa:	4622      	mov	r2, r4
 8013bac:	210a      	movs	r1, #10
 8013bae:	4628      	mov	r0, r5
 8013bb0:	f001 f9d4 	bl	8014f5c <__swbuf_r>
 8013bb4:	3001      	adds	r0, #1
 8013bb6:	d011      	beq.n	8013bdc <_puts_r+0x84>
 8013bb8:	250a      	movs	r5, #10
 8013bba:	e011      	b.n	8013be0 <_puts_r+0x88>
 8013bbc:	4b1b      	ldr	r3, [pc, #108]	; (8013c2c <_puts_r+0xd4>)
 8013bbe:	429c      	cmp	r4, r3
 8013bc0:	d101      	bne.n	8013bc6 <_puts_r+0x6e>
 8013bc2:	68ac      	ldr	r4, [r5, #8]
 8013bc4:	e7da      	b.n	8013b7c <_puts_r+0x24>
 8013bc6:	4b1a      	ldr	r3, [pc, #104]	; (8013c30 <_puts_r+0xd8>)
 8013bc8:	429c      	cmp	r4, r3
 8013bca:	bf08      	it	eq
 8013bcc:	68ec      	ldreq	r4, [r5, #12]
 8013bce:	e7d5      	b.n	8013b7c <_puts_r+0x24>
 8013bd0:	4621      	mov	r1, r4
 8013bd2:	4628      	mov	r0, r5
 8013bd4:	f001 fa26 	bl	8015024 <__swsetup_r>
 8013bd8:	2800      	cmp	r0, #0
 8013bda:	d0dd      	beq.n	8013b98 <_puts_r+0x40>
 8013bdc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013be2:	07da      	lsls	r2, r3, #31
 8013be4:	d405      	bmi.n	8013bf2 <_puts_r+0x9a>
 8013be6:	89a3      	ldrh	r3, [r4, #12]
 8013be8:	059b      	lsls	r3, r3, #22
 8013bea:	d402      	bmi.n	8013bf2 <_puts_r+0x9a>
 8013bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013bee:	f7fe fddf 	bl	80127b0 <__retarget_lock_release_recursive>
 8013bf2:	4628      	mov	r0, r5
 8013bf4:	bd70      	pop	{r4, r5, r6, pc}
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	da04      	bge.n	8013c04 <_puts_r+0xac>
 8013bfa:	69a2      	ldr	r2, [r4, #24]
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	dc06      	bgt.n	8013c0e <_puts_r+0xb6>
 8013c00:	290a      	cmp	r1, #10
 8013c02:	d004      	beq.n	8013c0e <_puts_r+0xb6>
 8013c04:	6823      	ldr	r3, [r4, #0]
 8013c06:	1c5a      	adds	r2, r3, #1
 8013c08:	6022      	str	r2, [r4, #0]
 8013c0a:	7019      	strb	r1, [r3, #0]
 8013c0c:	e7c5      	b.n	8013b9a <_puts_r+0x42>
 8013c0e:	4622      	mov	r2, r4
 8013c10:	4628      	mov	r0, r5
 8013c12:	f001 f9a3 	bl	8014f5c <__swbuf_r>
 8013c16:	3001      	adds	r0, #1
 8013c18:	d1bf      	bne.n	8013b9a <_puts_r+0x42>
 8013c1a:	e7df      	b.n	8013bdc <_puts_r+0x84>
 8013c1c:	6823      	ldr	r3, [r4, #0]
 8013c1e:	250a      	movs	r5, #10
 8013c20:	1c5a      	adds	r2, r3, #1
 8013c22:	6022      	str	r2, [r4, #0]
 8013c24:	701d      	strb	r5, [r3, #0]
 8013c26:	e7db      	b.n	8013be0 <_puts_r+0x88>
 8013c28:	08018064 	.word	0x08018064
 8013c2c:	08018084 	.word	0x08018084
 8013c30:	08018044 	.word	0x08018044

08013c34 <puts>:
 8013c34:	4b02      	ldr	r3, [pc, #8]	; (8013c40 <puts+0xc>)
 8013c36:	4601      	mov	r1, r0
 8013c38:	6818      	ldr	r0, [r3, #0]
 8013c3a:	f7ff bf8d 	b.w	8013b58 <_puts_r>
 8013c3e:	bf00      	nop
 8013c40:	2000006c 	.word	0x2000006c

08013c44 <_sbrk_r>:
 8013c44:	b538      	push	{r3, r4, r5, lr}
 8013c46:	4d06      	ldr	r5, [pc, #24]	; (8013c60 <_sbrk_r+0x1c>)
 8013c48:	2300      	movs	r3, #0
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	4608      	mov	r0, r1
 8013c4e:	602b      	str	r3, [r5, #0]
 8013c50:	f004 f82e 	bl	8017cb0 <_sbrk>
 8013c54:	1c43      	adds	r3, r0, #1
 8013c56:	d102      	bne.n	8013c5e <_sbrk_r+0x1a>
 8013c58:	682b      	ldr	r3, [r5, #0]
 8013c5a:	b103      	cbz	r3, 8013c5e <_sbrk_r+0x1a>
 8013c5c:	6023      	str	r3, [r4, #0]
 8013c5e:	bd38      	pop	{r3, r4, r5, pc}
 8013c60:	200208c0 	.word	0x200208c0

08013c64 <nanf>:
 8013c64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013c6c <nanf+0x8>
 8013c68:	4770      	bx	lr
 8013c6a:	bf00      	nop
 8013c6c:	7fc00000 	.word	0x7fc00000

08013c70 <siprintf>:
 8013c70:	b40e      	push	{r1, r2, r3}
 8013c72:	b500      	push	{lr}
 8013c74:	b09c      	sub	sp, #112	; 0x70
 8013c76:	ab1d      	add	r3, sp, #116	; 0x74
 8013c78:	9002      	str	r0, [sp, #8]
 8013c7a:	9006      	str	r0, [sp, #24]
 8013c7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013c80:	4809      	ldr	r0, [pc, #36]	; (8013ca8 <siprintf+0x38>)
 8013c82:	9107      	str	r1, [sp, #28]
 8013c84:	9104      	str	r1, [sp, #16]
 8013c86:	4909      	ldr	r1, [pc, #36]	; (8013cac <siprintf+0x3c>)
 8013c88:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c8c:	9105      	str	r1, [sp, #20]
 8013c8e:	6800      	ldr	r0, [r0, #0]
 8013c90:	9301      	str	r3, [sp, #4]
 8013c92:	a902      	add	r1, sp, #8
 8013c94:	f003 fa16 	bl	80170c4 <_svfiprintf_r>
 8013c98:	9b02      	ldr	r3, [sp, #8]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	701a      	strb	r2, [r3, #0]
 8013c9e:	b01c      	add	sp, #112	; 0x70
 8013ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ca4:	b003      	add	sp, #12
 8013ca6:	4770      	bx	lr
 8013ca8:	2000006c 	.word	0x2000006c
 8013cac:	ffff0208 	.word	0xffff0208

08013cb0 <siscanf>:
 8013cb0:	b40e      	push	{r1, r2, r3}
 8013cb2:	b510      	push	{r4, lr}
 8013cb4:	b09f      	sub	sp, #124	; 0x7c
 8013cb6:	ac21      	add	r4, sp, #132	; 0x84
 8013cb8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013cbc:	f854 2b04 	ldr.w	r2, [r4], #4
 8013cc0:	9201      	str	r2, [sp, #4]
 8013cc2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013cc6:	9004      	str	r0, [sp, #16]
 8013cc8:	9008      	str	r0, [sp, #32]
 8013cca:	f7ec fae1 	bl	8000290 <strlen>
 8013cce:	4b0c      	ldr	r3, [pc, #48]	; (8013d00 <siscanf+0x50>)
 8013cd0:	9005      	str	r0, [sp, #20]
 8013cd2:	9009      	str	r0, [sp, #36]	; 0x24
 8013cd4:	930d      	str	r3, [sp, #52]	; 0x34
 8013cd6:	480b      	ldr	r0, [pc, #44]	; (8013d04 <siscanf+0x54>)
 8013cd8:	9a01      	ldr	r2, [sp, #4]
 8013cda:	6800      	ldr	r0, [r0, #0]
 8013cdc:	9403      	str	r4, [sp, #12]
 8013cde:	2300      	movs	r3, #0
 8013ce0:	9311      	str	r3, [sp, #68]	; 0x44
 8013ce2:	9316      	str	r3, [sp, #88]	; 0x58
 8013ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ce8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013cec:	a904      	add	r1, sp, #16
 8013cee:	4623      	mov	r3, r4
 8013cf0:	f003 fb42 	bl	8017378 <__ssvfiscanf_r>
 8013cf4:	b01f      	add	sp, #124	; 0x7c
 8013cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cfa:	b003      	add	sp, #12
 8013cfc:	4770      	bx	lr
 8013cfe:	bf00      	nop
 8013d00:	08013d2b 	.word	0x08013d2b
 8013d04:	2000006c 	.word	0x2000006c

08013d08 <__sread>:
 8013d08:	b510      	push	{r4, lr}
 8013d0a:	460c      	mov	r4, r1
 8013d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d10:	f003 fdf6 	bl	8017900 <_read_r>
 8013d14:	2800      	cmp	r0, #0
 8013d16:	bfab      	itete	ge
 8013d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8013d1c:	181b      	addge	r3, r3, r0
 8013d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d22:	bfac      	ite	ge
 8013d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d26:	81a3      	strhlt	r3, [r4, #12]
 8013d28:	bd10      	pop	{r4, pc}

08013d2a <__seofread>:
 8013d2a:	2000      	movs	r0, #0
 8013d2c:	4770      	bx	lr

08013d2e <__swrite>:
 8013d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d32:	461f      	mov	r7, r3
 8013d34:	898b      	ldrh	r3, [r1, #12]
 8013d36:	05db      	lsls	r3, r3, #23
 8013d38:	4605      	mov	r5, r0
 8013d3a:	460c      	mov	r4, r1
 8013d3c:	4616      	mov	r6, r2
 8013d3e:	d505      	bpl.n	8013d4c <__swrite+0x1e>
 8013d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d44:	2302      	movs	r3, #2
 8013d46:	2200      	movs	r2, #0
 8013d48:	f002 fc36 	bl	80165b8 <_lseek_r>
 8013d4c:	89a3      	ldrh	r3, [r4, #12]
 8013d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d56:	81a3      	strh	r3, [r4, #12]
 8013d58:	4632      	mov	r2, r6
 8013d5a:	463b      	mov	r3, r7
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d62:	f001 b94d 	b.w	8015000 <_write_r>

08013d66 <__sseek>:
 8013d66:	b510      	push	{r4, lr}
 8013d68:	460c      	mov	r4, r1
 8013d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d6e:	f002 fc23 	bl	80165b8 <_lseek_r>
 8013d72:	1c43      	adds	r3, r0, #1
 8013d74:	89a3      	ldrh	r3, [r4, #12]
 8013d76:	bf15      	itete	ne
 8013d78:	6560      	strne	r0, [r4, #84]	; 0x54
 8013d7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013d7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013d82:	81a3      	strheq	r3, [r4, #12]
 8013d84:	bf18      	it	ne
 8013d86:	81a3      	strhne	r3, [r4, #12]
 8013d88:	bd10      	pop	{r4, pc}

08013d8a <__sclose>:
 8013d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d8e:	f001 b9b7 	b.w	8015100 <_close_r>

08013d92 <strcspn>:
 8013d92:	b570      	push	{r4, r5, r6, lr}
 8013d94:	4603      	mov	r3, r0
 8013d96:	461e      	mov	r6, r3
 8013d98:	f813 4b01 	ldrb.w	r4, [r3], #1
 8013d9c:	b144      	cbz	r4, 8013db0 <strcspn+0x1e>
 8013d9e:	1e4a      	subs	r2, r1, #1
 8013da0:	e001      	b.n	8013da6 <strcspn+0x14>
 8013da2:	42a5      	cmp	r5, r4
 8013da4:	d004      	beq.n	8013db0 <strcspn+0x1e>
 8013da6:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8013daa:	2d00      	cmp	r5, #0
 8013dac:	d1f9      	bne.n	8013da2 <strcspn+0x10>
 8013dae:	e7f2      	b.n	8013d96 <strcspn+0x4>
 8013db0:	1a30      	subs	r0, r6, r0
 8013db2:	bd70      	pop	{r4, r5, r6, pc}

08013db4 <_strerror_r>:
 8013db4:	b510      	push	{r4, lr}
 8013db6:	4604      	mov	r4, r0
 8013db8:	4608      	mov	r0, r1
 8013dba:	4611      	mov	r1, r2
 8013dbc:	288e      	cmp	r0, #142	; 0x8e
 8013dbe:	f200 812f 	bhi.w	8014020 <_strerror_r+0x26c>
 8013dc2:	e8df f010 	tbh	[pc, r0, lsl #1]
 8013dc6:	0138      	.short	0x0138
 8013dc8:	0091008f 	.word	0x0091008f
 8013dcc:	00950093 	.word	0x00950093
 8013dd0:	00990097 	.word	0x00990097
 8013dd4:	009d009b 	.word	0x009d009b
 8013dd8:	00a300a1 	.word	0x00a300a1
 8013ddc:	00a900a7 	.word	0x00a900a7
 8013de0:	00ad00ab 	.word	0x00ad00ab
 8013de4:	00af012d 	.word	0x00af012d
 8013de8:	00b300b1 	.word	0x00b300b1
 8013dec:	00b700b5 	.word	0x00b700b5
 8013df0:	00bf00bd 	.word	0x00bf00bd
 8013df4:	00c700c5 	.word	0x00c700c5
 8013df8:	00cb00c9 	.word	0x00cb00c9
 8013dfc:	00d100cd 	.word	0x00d100cd
 8013e00:	00d700d5 	.word	0x00d700d5
 8013e04:	00db00d9 	.word	0x00db00d9
 8013e08:	00df00dd 	.word	0x00df00dd
 8013e0c:	00e300e1 	.word	0x00e300e1
 8013e10:	012d012d 	.word	0x012d012d
 8013e14:	012d012d 	.word	0x012d012d
 8013e18:	012d012d 	.word	0x012d012d
 8013e1c:	012d012d 	.word	0x012d012d
 8013e20:	00eb00e7 	.word	0x00eb00e7
 8013e24:	012d012d 	.word	0x012d012d
 8013e28:	012d012d 	.word	0x012d012d
 8013e2c:	012d012d 	.word	0x012d012d
 8013e30:	012d012d 	.word	0x012d012d
 8013e34:	012d012d 	.word	0x012d012d
 8013e38:	012d012d 	.word	0x012d012d
 8013e3c:	00ed012d 	.word	0x00ed012d
 8013e40:	00ef0107 	.word	0x00ef0107
 8013e44:	012d00f1 	.word	0x012d00f1
 8013e48:	012d012d 	.word	0x012d012d
 8013e4c:	012d00f3 	.word	0x012d00f3
 8013e50:	012d012d 	.word	0x012d012d
 8013e54:	012d00f5 	.word	0x012d00f5
 8013e58:	00f9012d 	.word	0x00f9012d
 8013e5c:	012d012d 	.word	0x012d012d
 8013e60:	012d00fb 	.word	0x012d00fb
 8013e64:	012d012d 	.word	0x012d012d
 8013e68:	012d012d 	.word	0x012d012d
 8013e6c:	012d012d 	.word	0x012d012d
 8013e70:	012d012d 	.word	0x012d012d
 8013e74:	00fd012d 	.word	0x00fd012d
 8013e78:	00ff012d 	.word	0x00ff012d
 8013e7c:	01030101 	.word	0x01030101
 8013e80:	012d012d 	.word	0x012d012d
 8013e84:	012d0125 	.word	0x012d0125
 8013e88:	012d012d 	.word	0x012d012d
 8013e8c:	012d012d 	.word	0x012d012d
 8013e90:	012d012d 	.word	0x012d012d
 8013e94:	0113012d 	.word	0x0113012d
 8013e98:	01090105 	.word	0x01090105
 8013e9c:	010d010b 	.word	0x010d010b
 8013ea0:	012d010f 	.word	0x012d010f
 8013ea4:	01150111 	.word	0x01150111
 8013ea8:	00e90119 	.word	0x00e90119
 8013eac:	012b00c1 	.word	0x012b00c1
 8013eb0:	00cf00b9 	.word	0x00cf00b9
 8013eb4:	009f00bb 	.word	0x009f00bb
 8013eb8:	012900a5 	.word	0x012900a5
 8013ebc:	012d00f7 	.word	0x012d00f7
 8013ec0:	00c30117 	.word	0x00c30117
 8013ec4:	011b011d 	.word	0x011b011d
 8013ec8:	012d012d 	.word	0x012d012d
 8013ecc:	012d012d 	.word	0x012d012d
 8013ed0:	00d3012d 	.word	0x00d3012d
 8013ed4:	012d012d 	.word	0x012d012d
 8013ed8:	00e5012d 	.word	0x00e5012d
 8013edc:	011f0127 	.word	0x011f0127
 8013ee0:	01230121 	.word	0x01230121
 8013ee4:	4855      	ldr	r0, [pc, #340]	; (801403c <_strerror_r+0x288>)
 8013ee6:	bd10      	pop	{r4, pc}
 8013ee8:	4855      	ldr	r0, [pc, #340]	; (8014040 <_strerror_r+0x28c>)
 8013eea:	e7fc      	b.n	8013ee6 <_strerror_r+0x132>
 8013eec:	4855      	ldr	r0, [pc, #340]	; (8014044 <_strerror_r+0x290>)
 8013eee:	e7fa      	b.n	8013ee6 <_strerror_r+0x132>
 8013ef0:	4855      	ldr	r0, [pc, #340]	; (8014048 <_strerror_r+0x294>)
 8013ef2:	e7f8      	b.n	8013ee6 <_strerror_r+0x132>
 8013ef4:	4855      	ldr	r0, [pc, #340]	; (801404c <_strerror_r+0x298>)
 8013ef6:	e7f6      	b.n	8013ee6 <_strerror_r+0x132>
 8013ef8:	4855      	ldr	r0, [pc, #340]	; (8014050 <_strerror_r+0x29c>)
 8013efa:	e7f4      	b.n	8013ee6 <_strerror_r+0x132>
 8013efc:	4855      	ldr	r0, [pc, #340]	; (8014054 <_strerror_r+0x2a0>)
 8013efe:	e7f2      	b.n	8013ee6 <_strerror_r+0x132>
 8013f00:	4855      	ldr	r0, [pc, #340]	; (8014058 <_strerror_r+0x2a4>)
 8013f02:	e7f0      	b.n	8013ee6 <_strerror_r+0x132>
 8013f04:	4855      	ldr	r0, [pc, #340]	; (801405c <_strerror_r+0x2a8>)
 8013f06:	e7ee      	b.n	8013ee6 <_strerror_r+0x132>
 8013f08:	4855      	ldr	r0, [pc, #340]	; (8014060 <_strerror_r+0x2ac>)
 8013f0a:	e7ec      	b.n	8013ee6 <_strerror_r+0x132>
 8013f0c:	4855      	ldr	r0, [pc, #340]	; (8014064 <_strerror_r+0x2b0>)
 8013f0e:	e7ea      	b.n	8013ee6 <_strerror_r+0x132>
 8013f10:	4855      	ldr	r0, [pc, #340]	; (8014068 <_strerror_r+0x2b4>)
 8013f12:	e7e8      	b.n	8013ee6 <_strerror_r+0x132>
 8013f14:	4855      	ldr	r0, [pc, #340]	; (801406c <_strerror_r+0x2b8>)
 8013f16:	e7e6      	b.n	8013ee6 <_strerror_r+0x132>
 8013f18:	4855      	ldr	r0, [pc, #340]	; (8014070 <_strerror_r+0x2bc>)
 8013f1a:	e7e4      	b.n	8013ee6 <_strerror_r+0x132>
 8013f1c:	4855      	ldr	r0, [pc, #340]	; (8014074 <_strerror_r+0x2c0>)
 8013f1e:	e7e2      	b.n	8013ee6 <_strerror_r+0x132>
 8013f20:	4855      	ldr	r0, [pc, #340]	; (8014078 <_strerror_r+0x2c4>)
 8013f22:	e7e0      	b.n	8013ee6 <_strerror_r+0x132>
 8013f24:	4855      	ldr	r0, [pc, #340]	; (801407c <_strerror_r+0x2c8>)
 8013f26:	e7de      	b.n	8013ee6 <_strerror_r+0x132>
 8013f28:	4855      	ldr	r0, [pc, #340]	; (8014080 <_strerror_r+0x2cc>)
 8013f2a:	e7dc      	b.n	8013ee6 <_strerror_r+0x132>
 8013f2c:	4855      	ldr	r0, [pc, #340]	; (8014084 <_strerror_r+0x2d0>)
 8013f2e:	e7da      	b.n	8013ee6 <_strerror_r+0x132>
 8013f30:	4855      	ldr	r0, [pc, #340]	; (8014088 <_strerror_r+0x2d4>)
 8013f32:	e7d8      	b.n	8013ee6 <_strerror_r+0x132>
 8013f34:	4855      	ldr	r0, [pc, #340]	; (801408c <_strerror_r+0x2d8>)
 8013f36:	e7d6      	b.n	8013ee6 <_strerror_r+0x132>
 8013f38:	4855      	ldr	r0, [pc, #340]	; (8014090 <_strerror_r+0x2dc>)
 8013f3a:	e7d4      	b.n	8013ee6 <_strerror_r+0x132>
 8013f3c:	4855      	ldr	r0, [pc, #340]	; (8014094 <_strerror_r+0x2e0>)
 8013f3e:	e7d2      	b.n	8013ee6 <_strerror_r+0x132>
 8013f40:	4855      	ldr	r0, [pc, #340]	; (8014098 <_strerror_r+0x2e4>)
 8013f42:	e7d0      	b.n	8013ee6 <_strerror_r+0x132>
 8013f44:	4855      	ldr	r0, [pc, #340]	; (801409c <_strerror_r+0x2e8>)
 8013f46:	e7ce      	b.n	8013ee6 <_strerror_r+0x132>
 8013f48:	4855      	ldr	r0, [pc, #340]	; (80140a0 <_strerror_r+0x2ec>)
 8013f4a:	e7cc      	b.n	8013ee6 <_strerror_r+0x132>
 8013f4c:	4855      	ldr	r0, [pc, #340]	; (80140a4 <_strerror_r+0x2f0>)
 8013f4e:	e7ca      	b.n	8013ee6 <_strerror_r+0x132>
 8013f50:	4855      	ldr	r0, [pc, #340]	; (80140a8 <_strerror_r+0x2f4>)
 8013f52:	e7c8      	b.n	8013ee6 <_strerror_r+0x132>
 8013f54:	4855      	ldr	r0, [pc, #340]	; (80140ac <_strerror_r+0x2f8>)
 8013f56:	e7c6      	b.n	8013ee6 <_strerror_r+0x132>
 8013f58:	4855      	ldr	r0, [pc, #340]	; (80140b0 <_strerror_r+0x2fc>)
 8013f5a:	e7c4      	b.n	8013ee6 <_strerror_r+0x132>
 8013f5c:	4855      	ldr	r0, [pc, #340]	; (80140b4 <_strerror_r+0x300>)
 8013f5e:	e7c2      	b.n	8013ee6 <_strerror_r+0x132>
 8013f60:	4855      	ldr	r0, [pc, #340]	; (80140b8 <_strerror_r+0x304>)
 8013f62:	e7c0      	b.n	8013ee6 <_strerror_r+0x132>
 8013f64:	4855      	ldr	r0, [pc, #340]	; (80140bc <_strerror_r+0x308>)
 8013f66:	e7be      	b.n	8013ee6 <_strerror_r+0x132>
 8013f68:	4855      	ldr	r0, [pc, #340]	; (80140c0 <_strerror_r+0x30c>)
 8013f6a:	e7bc      	b.n	8013ee6 <_strerror_r+0x132>
 8013f6c:	4855      	ldr	r0, [pc, #340]	; (80140c4 <_strerror_r+0x310>)
 8013f6e:	e7ba      	b.n	8013ee6 <_strerror_r+0x132>
 8013f70:	4855      	ldr	r0, [pc, #340]	; (80140c8 <_strerror_r+0x314>)
 8013f72:	e7b8      	b.n	8013ee6 <_strerror_r+0x132>
 8013f74:	4855      	ldr	r0, [pc, #340]	; (80140cc <_strerror_r+0x318>)
 8013f76:	e7b6      	b.n	8013ee6 <_strerror_r+0x132>
 8013f78:	4855      	ldr	r0, [pc, #340]	; (80140d0 <_strerror_r+0x31c>)
 8013f7a:	e7b4      	b.n	8013ee6 <_strerror_r+0x132>
 8013f7c:	4855      	ldr	r0, [pc, #340]	; (80140d4 <_strerror_r+0x320>)
 8013f7e:	e7b2      	b.n	8013ee6 <_strerror_r+0x132>
 8013f80:	4855      	ldr	r0, [pc, #340]	; (80140d8 <_strerror_r+0x324>)
 8013f82:	e7b0      	b.n	8013ee6 <_strerror_r+0x132>
 8013f84:	4855      	ldr	r0, [pc, #340]	; (80140dc <_strerror_r+0x328>)
 8013f86:	e7ae      	b.n	8013ee6 <_strerror_r+0x132>
 8013f88:	4855      	ldr	r0, [pc, #340]	; (80140e0 <_strerror_r+0x32c>)
 8013f8a:	e7ac      	b.n	8013ee6 <_strerror_r+0x132>
 8013f8c:	4855      	ldr	r0, [pc, #340]	; (80140e4 <_strerror_r+0x330>)
 8013f8e:	e7aa      	b.n	8013ee6 <_strerror_r+0x132>
 8013f90:	4855      	ldr	r0, [pc, #340]	; (80140e8 <_strerror_r+0x334>)
 8013f92:	e7a8      	b.n	8013ee6 <_strerror_r+0x132>
 8013f94:	4855      	ldr	r0, [pc, #340]	; (80140ec <_strerror_r+0x338>)
 8013f96:	e7a6      	b.n	8013ee6 <_strerror_r+0x132>
 8013f98:	4855      	ldr	r0, [pc, #340]	; (80140f0 <_strerror_r+0x33c>)
 8013f9a:	e7a4      	b.n	8013ee6 <_strerror_r+0x132>
 8013f9c:	4855      	ldr	r0, [pc, #340]	; (80140f4 <_strerror_r+0x340>)
 8013f9e:	e7a2      	b.n	8013ee6 <_strerror_r+0x132>
 8013fa0:	4855      	ldr	r0, [pc, #340]	; (80140f8 <_strerror_r+0x344>)
 8013fa2:	e7a0      	b.n	8013ee6 <_strerror_r+0x132>
 8013fa4:	4855      	ldr	r0, [pc, #340]	; (80140fc <_strerror_r+0x348>)
 8013fa6:	e79e      	b.n	8013ee6 <_strerror_r+0x132>
 8013fa8:	4855      	ldr	r0, [pc, #340]	; (8014100 <_strerror_r+0x34c>)
 8013faa:	e79c      	b.n	8013ee6 <_strerror_r+0x132>
 8013fac:	4855      	ldr	r0, [pc, #340]	; (8014104 <_strerror_r+0x350>)
 8013fae:	e79a      	b.n	8013ee6 <_strerror_r+0x132>
 8013fb0:	4855      	ldr	r0, [pc, #340]	; (8014108 <_strerror_r+0x354>)
 8013fb2:	e798      	b.n	8013ee6 <_strerror_r+0x132>
 8013fb4:	4855      	ldr	r0, [pc, #340]	; (801410c <_strerror_r+0x358>)
 8013fb6:	e796      	b.n	8013ee6 <_strerror_r+0x132>
 8013fb8:	4855      	ldr	r0, [pc, #340]	; (8014110 <_strerror_r+0x35c>)
 8013fba:	e794      	b.n	8013ee6 <_strerror_r+0x132>
 8013fbc:	4855      	ldr	r0, [pc, #340]	; (8014114 <_strerror_r+0x360>)
 8013fbe:	e792      	b.n	8013ee6 <_strerror_r+0x132>
 8013fc0:	4855      	ldr	r0, [pc, #340]	; (8014118 <_strerror_r+0x364>)
 8013fc2:	e790      	b.n	8013ee6 <_strerror_r+0x132>
 8013fc4:	4855      	ldr	r0, [pc, #340]	; (801411c <_strerror_r+0x368>)
 8013fc6:	e78e      	b.n	8013ee6 <_strerror_r+0x132>
 8013fc8:	4855      	ldr	r0, [pc, #340]	; (8014120 <_strerror_r+0x36c>)
 8013fca:	e78c      	b.n	8013ee6 <_strerror_r+0x132>
 8013fcc:	4855      	ldr	r0, [pc, #340]	; (8014124 <_strerror_r+0x370>)
 8013fce:	e78a      	b.n	8013ee6 <_strerror_r+0x132>
 8013fd0:	4855      	ldr	r0, [pc, #340]	; (8014128 <_strerror_r+0x374>)
 8013fd2:	e788      	b.n	8013ee6 <_strerror_r+0x132>
 8013fd4:	4855      	ldr	r0, [pc, #340]	; (801412c <_strerror_r+0x378>)
 8013fd6:	e786      	b.n	8013ee6 <_strerror_r+0x132>
 8013fd8:	4855      	ldr	r0, [pc, #340]	; (8014130 <_strerror_r+0x37c>)
 8013fda:	e784      	b.n	8013ee6 <_strerror_r+0x132>
 8013fdc:	4855      	ldr	r0, [pc, #340]	; (8014134 <_strerror_r+0x380>)
 8013fde:	e782      	b.n	8013ee6 <_strerror_r+0x132>
 8013fe0:	4855      	ldr	r0, [pc, #340]	; (8014138 <_strerror_r+0x384>)
 8013fe2:	e780      	b.n	8013ee6 <_strerror_r+0x132>
 8013fe4:	4855      	ldr	r0, [pc, #340]	; (801413c <_strerror_r+0x388>)
 8013fe6:	e77e      	b.n	8013ee6 <_strerror_r+0x132>
 8013fe8:	4855      	ldr	r0, [pc, #340]	; (8014140 <_strerror_r+0x38c>)
 8013fea:	e77c      	b.n	8013ee6 <_strerror_r+0x132>
 8013fec:	4855      	ldr	r0, [pc, #340]	; (8014144 <_strerror_r+0x390>)
 8013fee:	e77a      	b.n	8013ee6 <_strerror_r+0x132>
 8013ff0:	4855      	ldr	r0, [pc, #340]	; (8014148 <_strerror_r+0x394>)
 8013ff2:	e778      	b.n	8013ee6 <_strerror_r+0x132>
 8013ff4:	4855      	ldr	r0, [pc, #340]	; (801414c <_strerror_r+0x398>)
 8013ff6:	e776      	b.n	8013ee6 <_strerror_r+0x132>
 8013ff8:	4855      	ldr	r0, [pc, #340]	; (8014150 <_strerror_r+0x39c>)
 8013ffa:	e774      	b.n	8013ee6 <_strerror_r+0x132>
 8013ffc:	4855      	ldr	r0, [pc, #340]	; (8014154 <_strerror_r+0x3a0>)
 8013ffe:	e772      	b.n	8013ee6 <_strerror_r+0x132>
 8014000:	4855      	ldr	r0, [pc, #340]	; (8014158 <_strerror_r+0x3a4>)
 8014002:	e770      	b.n	8013ee6 <_strerror_r+0x132>
 8014004:	4855      	ldr	r0, [pc, #340]	; (801415c <_strerror_r+0x3a8>)
 8014006:	e76e      	b.n	8013ee6 <_strerror_r+0x132>
 8014008:	4855      	ldr	r0, [pc, #340]	; (8014160 <_strerror_r+0x3ac>)
 801400a:	e76c      	b.n	8013ee6 <_strerror_r+0x132>
 801400c:	4855      	ldr	r0, [pc, #340]	; (8014164 <_strerror_r+0x3b0>)
 801400e:	e76a      	b.n	8013ee6 <_strerror_r+0x132>
 8014010:	4855      	ldr	r0, [pc, #340]	; (8014168 <_strerror_r+0x3b4>)
 8014012:	e768      	b.n	8013ee6 <_strerror_r+0x132>
 8014014:	4855      	ldr	r0, [pc, #340]	; (801416c <_strerror_r+0x3b8>)
 8014016:	e766      	b.n	8013ee6 <_strerror_r+0x132>
 8014018:	4855      	ldr	r0, [pc, #340]	; (8014170 <_strerror_r+0x3bc>)
 801401a:	e764      	b.n	8013ee6 <_strerror_r+0x132>
 801401c:	4855      	ldr	r0, [pc, #340]	; (8014174 <_strerror_r+0x3c0>)
 801401e:	e762      	b.n	8013ee6 <_strerror_r+0x132>
 8014020:	2b00      	cmp	r3, #0
 8014022:	bf14      	ite	ne
 8014024:	461a      	movne	r2, r3
 8014026:	4622      	moveq	r2, r4
 8014028:	f000 ff5c 	bl	8014ee4 <_user_strerror>
 801402c:	4b52      	ldr	r3, [pc, #328]	; (8014178 <_strerror_r+0x3c4>)
 801402e:	2800      	cmp	r0, #0
 8014030:	bf08      	it	eq
 8014032:	4618      	moveq	r0, r3
 8014034:	e757      	b.n	8013ee6 <_strerror_r+0x132>
 8014036:	4851      	ldr	r0, [pc, #324]	; (801417c <_strerror_r+0x3c8>)
 8014038:	e755      	b.n	8013ee6 <_strerror_r+0x132>
 801403a:	bf00      	nop
 801403c:	080180f0 	.word	0x080180f0
 8014040:	080180fa 	.word	0x080180fa
 8014044:	08018114 	.word	0x08018114
 8014048:	08018124 	.word	0x08018124
 801404c:	0801813c 	.word	0x0801813c
 8014050:	08018146 	.word	0x08018146
 8014054:	08018160 	.word	0x08018160
 8014058:	08018172 	.word	0x08018172
 801405c:	08018184 	.word	0x08018184
 8014060:	0801819d 	.word	0x0801819d
 8014064:	080181ad 	.word	0x080181ad
 8014068:	080181b9 	.word	0x080181b9
 801406c:	080181d6 	.word	0x080181d6
 8014070:	080181e8 	.word	0x080181e8
 8014074:	080181f9 	.word	0x080181f9
 8014078:	0801820b 	.word	0x0801820b
 801407c:	08018217 	.word	0x08018217
 8014080:	0801822f 	.word	0x0801822f
 8014084:	0801823b 	.word	0x0801823b
 8014088:	0801824d 	.word	0x0801824d
 801408c:	0801825c 	.word	0x0801825c
 8014090:	0801826c 	.word	0x0801826c
 8014094:	08018279 	.word	0x08018279
 8014098:	08018298 	.word	0x08018298
 801409c:	080182a7 	.word	0x080182a7
 80140a0:	080182b8 	.word	0x080182b8
 80140a4:	080182dc 	.word	0x080182dc
 80140a8:	080182fa 	.word	0x080182fa
 80140ac:	08018318 	.word	0x08018318
 80140b0:	08018338 	.word	0x08018338
 80140b4:	0801834f 	.word	0x0801834f
 80140b8:	0801835e 	.word	0x0801835e
 80140bc:	0801836d 	.word	0x0801836d
 80140c0:	08018381 	.word	0x08018381
 80140c4:	08018399 	.word	0x08018399
 80140c8:	080183a7 	.word	0x080183a7
 80140cc:	080183b4 	.word	0x080183b4
 80140d0:	080183ca 	.word	0x080183ca
 80140d4:	080183d9 	.word	0x080183d9
 80140d8:	080183e5 	.word	0x080183e5
 80140dc:	08018414 	.word	0x08018414
 80140e0:	08018425 	.word	0x08018425
 80140e4:	08018440 	.word	0x08018440
 80140e8:	08018453 	.word	0x08018453
 80140ec:	08018469 	.word	0x08018469
 80140f0:	08018472 	.word	0x08018472
 80140f4:	08018489 	.word	0x08018489
 80140f8:	08018491 	.word	0x08018491
 80140fc:	0801849e 	.word	0x0801849e
 8014100:	080184b3 	.word	0x080184b3
 8014104:	080184c7 	.word	0x080184c7
 8014108:	080184df 	.word	0x080184df
 801410c:	080184ee 	.word	0x080184ee
 8014110:	080184ff 	.word	0x080184ff
 8014114:	08018512 	.word	0x08018512
 8014118:	0801851e 	.word	0x0801851e
 801411c:	08018537 	.word	0x08018537
 8014120:	0801854b 	.word	0x0801854b
 8014124:	08018566 	.word	0x08018566
 8014128:	0801857e 	.word	0x0801857e
 801412c:	08018598 	.word	0x08018598
 8014130:	080185a0 	.word	0x080185a0
 8014134:	080185d0 	.word	0x080185d0
 8014138:	080185ef 	.word	0x080185ef
 801413c:	0801860e 	.word	0x0801860e
 8014140:	08018625 	.word	0x08018625
 8014144:	08018638 	.word	0x08018638
 8014148:	08018651 	.word	0x08018651
 801414c:	08018668 	.word	0x08018668
 8014150:	0801867e 	.word	0x0801867e
 8014154:	0801869f 	.word	0x0801869f
 8014158:	080186b7 	.word	0x080186b7
 801415c:	080186d3 	.word	0x080186d3
 8014160:	080186e6 	.word	0x080186e6
 8014164:	080186fc 	.word	0x080186fc
 8014168:	08018710 	.word	0x08018710
 801416c:	08018732 	.word	0x08018732
 8014170:	08018758 	.word	0x08018758
 8014174:	08018769 	.word	0x08018769
 8014178:	08018ba2 	.word	0x08018ba2
 801417c:	0801877e 	.word	0x0801877e

08014180 <sulp>:
 8014180:	b570      	push	{r4, r5, r6, lr}
 8014182:	4604      	mov	r4, r0
 8014184:	460d      	mov	r5, r1
 8014186:	ec45 4b10 	vmov	d0, r4, r5
 801418a:	4616      	mov	r6, r2
 801418c:	f002 fdca 	bl	8016d24 <__ulp>
 8014190:	ec51 0b10 	vmov	r0, r1, d0
 8014194:	b17e      	cbz	r6, 80141b6 <sulp+0x36>
 8014196:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801419a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801419e:	2b00      	cmp	r3, #0
 80141a0:	dd09      	ble.n	80141b6 <sulp+0x36>
 80141a2:	051b      	lsls	r3, r3, #20
 80141a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80141a8:	2400      	movs	r4, #0
 80141aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80141ae:	4622      	mov	r2, r4
 80141b0:	462b      	mov	r3, r5
 80141b2:	f7ec fa31 	bl	8000618 <__aeabi_dmul>
 80141b6:	bd70      	pop	{r4, r5, r6, pc}

080141b8 <_strtod_l>:
 80141b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141bc:	b0a3      	sub	sp, #140	; 0x8c
 80141be:	461f      	mov	r7, r3
 80141c0:	2300      	movs	r3, #0
 80141c2:	931e      	str	r3, [sp, #120]	; 0x78
 80141c4:	4ba4      	ldr	r3, [pc, #656]	; (8014458 <_strtod_l+0x2a0>)
 80141c6:	9219      	str	r2, [sp, #100]	; 0x64
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	9307      	str	r3, [sp, #28]
 80141cc:	4604      	mov	r4, r0
 80141ce:	4618      	mov	r0, r3
 80141d0:	4688      	mov	r8, r1
 80141d2:	f7ec f85d 	bl	8000290 <strlen>
 80141d6:	f04f 0a00 	mov.w	sl, #0
 80141da:	4605      	mov	r5, r0
 80141dc:	f04f 0b00 	mov.w	fp, #0
 80141e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80141e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80141e6:	781a      	ldrb	r2, [r3, #0]
 80141e8:	2a2b      	cmp	r2, #43	; 0x2b
 80141ea:	d04c      	beq.n	8014286 <_strtod_l+0xce>
 80141ec:	d839      	bhi.n	8014262 <_strtod_l+0xaa>
 80141ee:	2a0d      	cmp	r2, #13
 80141f0:	d832      	bhi.n	8014258 <_strtod_l+0xa0>
 80141f2:	2a08      	cmp	r2, #8
 80141f4:	d832      	bhi.n	801425c <_strtod_l+0xa4>
 80141f6:	2a00      	cmp	r2, #0
 80141f8:	d03c      	beq.n	8014274 <_strtod_l+0xbc>
 80141fa:	2300      	movs	r3, #0
 80141fc:	930e      	str	r3, [sp, #56]	; 0x38
 80141fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014200:	7833      	ldrb	r3, [r6, #0]
 8014202:	2b30      	cmp	r3, #48	; 0x30
 8014204:	f040 80b4 	bne.w	8014370 <_strtod_l+0x1b8>
 8014208:	7873      	ldrb	r3, [r6, #1]
 801420a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801420e:	2b58      	cmp	r3, #88	; 0x58
 8014210:	d16c      	bne.n	80142ec <_strtod_l+0x134>
 8014212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014214:	9301      	str	r3, [sp, #4]
 8014216:	ab1e      	add	r3, sp, #120	; 0x78
 8014218:	9702      	str	r7, [sp, #8]
 801421a:	9300      	str	r3, [sp, #0]
 801421c:	4a8f      	ldr	r2, [pc, #572]	; (801445c <_strtod_l+0x2a4>)
 801421e:	ab1f      	add	r3, sp, #124	; 0x7c
 8014220:	a91d      	add	r1, sp, #116	; 0x74
 8014222:	4620      	mov	r0, r4
 8014224:	f001 feac 	bl	8015f80 <__gethex>
 8014228:	f010 0707 	ands.w	r7, r0, #7
 801422c:	4605      	mov	r5, r0
 801422e:	d005      	beq.n	801423c <_strtod_l+0x84>
 8014230:	2f06      	cmp	r7, #6
 8014232:	d12a      	bne.n	801428a <_strtod_l+0xd2>
 8014234:	3601      	adds	r6, #1
 8014236:	2300      	movs	r3, #0
 8014238:	961d      	str	r6, [sp, #116]	; 0x74
 801423a:	930e      	str	r3, [sp, #56]	; 0x38
 801423c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801423e:	2b00      	cmp	r3, #0
 8014240:	f040 8596 	bne.w	8014d70 <_strtod_l+0xbb8>
 8014244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014246:	b1db      	cbz	r3, 8014280 <_strtod_l+0xc8>
 8014248:	4652      	mov	r2, sl
 801424a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801424e:	ec43 2b10 	vmov	d0, r2, r3
 8014252:	b023      	add	sp, #140	; 0x8c
 8014254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014258:	2a20      	cmp	r2, #32
 801425a:	d1ce      	bne.n	80141fa <_strtod_l+0x42>
 801425c:	3301      	adds	r3, #1
 801425e:	931d      	str	r3, [sp, #116]	; 0x74
 8014260:	e7c0      	b.n	80141e4 <_strtod_l+0x2c>
 8014262:	2a2d      	cmp	r2, #45	; 0x2d
 8014264:	d1c9      	bne.n	80141fa <_strtod_l+0x42>
 8014266:	2201      	movs	r2, #1
 8014268:	920e      	str	r2, [sp, #56]	; 0x38
 801426a:	1c5a      	adds	r2, r3, #1
 801426c:	921d      	str	r2, [sp, #116]	; 0x74
 801426e:	785b      	ldrb	r3, [r3, #1]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d1c4      	bne.n	80141fe <_strtod_l+0x46>
 8014274:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014276:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801427a:	2b00      	cmp	r3, #0
 801427c:	f040 8576 	bne.w	8014d6c <_strtod_l+0xbb4>
 8014280:	4652      	mov	r2, sl
 8014282:	465b      	mov	r3, fp
 8014284:	e7e3      	b.n	801424e <_strtod_l+0x96>
 8014286:	2200      	movs	r2, #0
 8014288:	e7ee      	b.n	8014268 <_strtod_l+0xb0>
 801428a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801428c:	b13a      	cbz	r2, 801429e <_strtod_l+0xe6>
 801428e:	2135      	movs	r1, #53	; 0x35
 8014290:	a820      	add	r0, sp, #128	; 0x80
 8014292:	f002 fe52 	bl	8016f3a <__copybits>
 8014296:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014298:	4620      	mov	r0, r4
 801429a:	f002 fa17 	bl	80166cc <_Bfree>
 801429e:	3f01      	subs	r7, #1
 80142a0:	2f05      	cmp	r7, #5
 80142a2:	d807      	bhi.n	80142b4 <_strtod_l+0xfc>
 80142a4:	e8df f007 	tbb	[pc, r7]
 80142a8:	1d180b0e 	.word	0x1d180b0e
 80142ac:	030e      	.short	0x030e
 80142ae:	f04f 0b00 	mov.w	fp, #0
 80142b2:	46da      	mov	sl, fp
 80142b4:	0728      	lsls	r0, r5, #28
 80142b6:	d5c1      	bpl.n	801423c <_strtod_l+0x84>
 80142b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80142bc:	e7be      	b.n	801423c <_strtod_l+0x84>
 80142be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80142c2:	e7f7      	b.n	80142b4 <_strtod_l+0xfc>
 80142c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80142c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80142ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80142ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80142d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80142d6:	e7ed      	b.n	80142b4 <_strtod_l+0xfc>
 80142d8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8014460 <_strtod_l+0x2a8>
 80142dc:	f04f 0a00 	mov.w	sl, #0
 80142e0:	e7e8      	b.n	80142b4 <_strtod_l+0xfc>
 80142e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80142e6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80142ea:	e7e3      	b.n	80142b4 <_strtod_l+0xfc>
 80142ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80142ee:	1c5a      	adds	r2, r3, #1
 80142f0:	921d      	str	r2, [sp, #116]	; 0x74
 80142f2:	785b      	ldrb	r3, [r3, #1]
 80142f4:	2b30      	cmp	r3, #48	; 0x30
 80142f6:	d0f9      	beq.n	80142ec <_strtod_l+0x134>
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d09f      	beq.n	801423c <_strtod_l+0x84>
 80142fc:	2301      	movs	r3, #1
 80142fe:	f04f 0900 	mov.w	r9, #0
 8014302:	9304      	str	r3, [sp, #16]
 8014304:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014306:	930a      	str	r3, [sp, #40]	; 0x28
 8014308:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801430c:	464f      	mov	r7, r9
 801430e:	220a      	movs	r2, #10
 8014310:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014312:	7806      	ldrb	r6, [r0, #0]
 8014314:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014318:	b2d9      	uxtb	r1, r3
 801431a:	2909      	cmp	r1, #9
 801431c:	d92a      	bls.n	8014374 <_strtod_l+0x1bc>
 801431e:	9907      	ldr	r1, [sp, #28]
 8014320:	462a      	mov	r2, r5
 8014322:	f003 fb43 	bl	80179ac <strncmp>
 8014326:	b398      	cbz	r0, 8014390 <_strtod_l+0x1d8>
 8014328:	2000      	movs	r0, #0
 801432a:	4633      	mov	r3, r6
 801432c:	463d      	mov	r5, r7
 801432e:	9007      	str	r0, [sp, #28]
 8014330:	4602      	mov	r2, r0
 8014332:	2b65      	cmp	r3, #101	; 0x65
 8014334:	d001      	beq.n	801433a <_strtod_l+0x182>
 8014336:	2b45      	cmp	r3, #69	; 0x45
 8014338:	d118      	bne.n	801436c <_strtod_l+0x1b4>
 801433a:	b91d      	cbnz	r5, 8014344 <_strtod_l+0x18c>
 801433c:	9b04      	ldr	r3, [sp, #16]
 801433e:	4303      	orrs	r3, r0
 8014340:	d098      	beq.n	8014274 <_strtod_l+0xbc>
 8014342:	2500      	movs	r5, #0
 8014344:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8014348:	f108 0301 	add.w	r3, r8, #1
 801434c:	931d      	str	r3, [sp, #116]	; 0x74
 801434e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014352:	2b2b      	cmp	r3, #43	; 0x2b
 8014354:	d075      	beq.n	8014442 <_strtod_l+0x28a>
 8014356:	2b2d      	cmp	r3, #45	; 0x2d
 8014358:	d07b      	beq.n	8014452 <_strtod_l+0x29a>
 801435a:	f04f 0c00 	mov.w	ip, #0
 801435e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014362:	2909      	cmp	r1, #9
 8014364:	f240 8082 	bls.w	801446c <_strtod_l+0x2b4>
 8014368:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801436c:	2600      	movs	r6, #0
 801436e:	e09d      	b.n	80144ac <_strtod_l+0x2f4>
 8014370:	2300      	movs	r3, #0
 8014372:	e7c4      	b.n	80142fe <_strtod_l+0x146>
 8014374:	2f08      	cmp	r7, #8
 8014376:	bfd8      	it	le
 8014378:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801437a:	f100 0001 	add.w	r0, r0, #1
 801437e:	bfda      	itte	le
 8014380:	fb02 3301 	mlale	r3, r2, r1, r3
 8014384:	9309      	strle	r3, [sp, #36]	; 0x24
 8014386:	fb02 3909 	mlagt	r9, r2, r9, r3
 801438a:	3701      	adds	r7, #1
 801438c:	901d      	str	r0, [sp, #116]	; 0x74
 801438e:	e7bf      	b.n	8014310 <_strtod_l+0x158>
 8014390:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014392:	195a      	adds	r2, r3, r5
 8014394:	921d      	str	r2, [sp, #116]	; 0x74
 8014396:	5d5b      	ldrb	r3, [r3, r5]
 8014398:	2f00      	cmp	r7, #0
 801439a:	d037      	beq.n	801440c <_strtod_l+0x254>
 801439c:	9007      	str	r0, [sp, #28]
 801439e:	463d      	mov	r5, r7
 80143a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80143a4:	2a09      	cmp	r2, #9
 80143a6:	d912      	bls.n	80143ce <_strtod_l+0x216>
 80143a8:	2201      	movs	r2, #1
 80143aa:	e7c2      	b.n	8014332 <_strtod_l+0x17a>
 80143ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80143ae:	1c5a      	adds	r2, r3, #1
 80143b0:	921d      	str	r2, [sp, #116]	; 0x74
 80143b2:	785b      	ldrb	r3, [r3, #1]
 80143b4:	3001      	adds	r0, #1
 80143b6:	2b30      	cmp	r3, #48	; 0x30
 80143b8:	d0f8      	beq.n	80143ac <_strtod_l+0x1f4>
 80143ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80143be:	2a08      	cmp	r2, #8
 80143c0:	f200 84db 	bhi.w	8014d7a <_strtod_l+0xbc2>
 80143c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80143c6:	9007      	str	r0, [sp, #28]
 80143c8:	2000      	movs	r0, #0
 80143ca:	920a      	str	r2, [sp, #40]	; 0x28
 80143cc:	4605      	mov	r5, r0
 80143ce:	3b30      	subs	r3, #48	; 0x30
 80143d0:	f100 0201 	add.w	r2, r0, #1
 80143d4:	d014      	beq.n	8014400 <_strtod_l+0x248>
 80143d6:	9907      	ldr	r1, [sp, #28]
 80143d8:	4411      	add	r1, r2
 80143da:	9107      	str	r1, [sp, #28]
 80143dc:	462a      	mov	r2, r5
 80143de:	eb00 0e05 	add.w	lr, r0, r5
 80143e2:	210a      	movs	r1, #10
 80143e4:	4572      	cmp	r2, lr
 80143e6:	d113      	bne.n	8014410 <_strtod_l+0x258>
 80143e8:	182a      	adds	r2, r5, r0
 80143ea:	2a08      	cmp	r2, #8
 80143ec:	f105 0501 	add.w	r5, r5, #1
 80143f0:	4405      	add	r5, r0
 80143f2:	dc1c      	bgt.n	801442e <_strtod_l+0x276>
 80143f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80143f6:	220a      	movs	r2, #10
 80143f8:	fb02 3301 	mla	r3, r2, r1, r3
 80143fc:	9309      	str	r3, [sp, #36]	; 0x24
 80143fe:	2200      	movs	r2, #0
 8014400:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014402:	1c59      	adds	r1, r3, #1
 8014404:	911d      	str	r1, [sp, #116]	; 0x74
 8014406:	785b      	ldrb	r3, [r3, #1]
 8014408:	4610      	mov	r0, r2
 801440a:	e7c9      	b.n	80143a0 <_strtod_l+0x1e8>
 801440c:	4638      	mov	r0, r7
 801440e:	e7d2      	b.n	80143b6 <_strtod_l+0x1fe>
 8014410:	2a08      	cmp	r2, #8
 8014412:	dc04      	bgt.n	801441e <_strtod_l+0x266>
 8014414:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014416:	434e      	muls	r6, r1
 8014418:	9609      	str	r6, [sp, #36]	; 0x24
 801441a:	3201      	adds	r2, #1
 801441c:	e7e2      	b.n	80143e4 <_strtod_l+0x22c>
 801441e:	f102 0c01 	add.w	ip, r2, #1
 8014422:	f1bc 0f10 	cmp.w	ip, #16
 8014426:	bfd8      	it	le
 8014428:	fb01 f909 	mulle.w	r9, r1, r9
 801442c:	e7f5      	b.n	801441a <_strtod_l+0x262>
 801442e:	2d10      	cmp	r5, #16
 8014430:	bfdc      	itt	le
 8014432:	220a      	movle	r2, #10
 8014434:	fb02 3909 	mlale	r9, r2, r9, r3
 8014438:	e7e1      	b.n	80143fe <_strtod_l+0x246>
 801443a:	2300      	movs	r3, #0
 801443c:	9307      	str	r3, [sp, #28]
 801443e:	2201      	movs	r2, #1
 8014440:	e77c      	b.n	801433c <_strtod_l+0x184>
 8014442:	f04f 0c00 	mov.w	ip, #0
 8014446:	f108 0302 	add.w	r3, r8, #2
 801444a:	931d      	str	r3, [sp, #116]	; 0x74
 801444c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014450:	e785      	b.n	801435e <_strtod_l+0x1a6>
 8014452:	f04f 0c01 	mov.w	ip, #1
 8014456:	e7f6      	b.n	8014446 <_strtod_l+0x28e>
 8014458:	080189d8 	.word	0x080189d8
 801445c:	08018788 	.word	0x08018788
 8014460:	7ff00000 	.word	0x7ff00000
 8014464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014466:	1c59      	adds	r1, r3, #1
 8014468:	911d      	str	r1, [sp, #116]	; 0x74
 801446a:	785b      	ldrb	r3, [r3, #1]
 801446c:	2b30      	cmp	r3, #48	; 0x30
 801446e:	d0f9      	beq.n	8014464 <_strtod_l+0x2ac>
 8014470:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8014474:	2908      	cmp	r1, #8
 8014476:	f63f af79 	bhi.w	801436c <_strtod_l+0x1b4>
 801447a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801447e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014480:	9308      	str	r3, [sp, #32]
 8014482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014484:	1c59      	adds	r1, r3, #1
 8014486:	911d      	str	r1, [sp, #116]	; 0x74
 8014488:	785b      	ldrb	r3, [r3, #1]
 801448a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801448e:	2e09      	cmp	r6, #9
 8014490:	d937      	bls.n	8014502 <_strtod_l+0x34a>
 8014492:	9e08      	ldr	r6, [sp, #32]
 8014494:	1b89      	subs	r1, r1, r6
 8014496:	2908      	cmp	r1, #8
 8014498:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801449c:	dc02      	bgt.n	80144a4 <_strtod_l+0x2ec>
 801449e:	4576      	cmp	r6, lr
 80144a0:	bfa8      	it	ge
 80144a2:	4676      	movge	r6, lr
 80144a4:	f1bc 0f00 	cmp.w	ip, #0
 80144a8:	d000      	beq.n	80144ac <_strtod_l+0x2f4>
 80144aa:	4276      	negs	r6, r6
 80144ac:	2d00      	cmp	r5, #0
 80144ae:	d14f      	bne.n	8014550 <_strtod_l+0x398>
 80144b0:	9904      	ldr	r1, [sp, #16]
 80144b2:	4301      	orrs	r1, r0
 80144b4:	f47f aec2 	bne.w	801423c <_strtod_l+0x84>
 80144b8:	2a00      	cmp	r2, #0
 80144ba:	f47f aedb 	bne.w	8014274 <_strtod_l+0xbc>
 80144be:	2b69      	cmp	r3, #105	; 0x69
 80144c0:	d027      	beq.n	8014512 <_strtod_l+0x35a>
 80144c2:	dc24      	bgt.n	801450e <_strtod_l+0x356>
 80144c4:	2b49      	cmp	r3, #73	; 0x49
 80144c6:	d024      	beq.n	8014512 <_strtod_l+0x35a>
 80144c8:	2b4e      	cmp	r3, #78	; 0x4e
 80144ca:	f47f aed3 	bne.w	8014274 <_strtod_l+0xbc>
 80144ce:	499e      	ldr	r1, [pc, #632]	; (8014748 <_strtod_l+0x590>)
 80144d0:	a81d      	add	r0, sp, #116	; 0x74
 80144d2:	f001 ffad 	bl	8016430 <__match>
 80144d6:	2800      	cmp	r0, #0
 80144d8:	f43f aecc 	beq.w	8014274 <_strtod_l+0xbc>
 80144dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144de:	781b      	ldrb	r3, [r3, #0]
 80144e0:	2b28      	cmp	r3, #40	; 0x28
 80144e2:	d12d      	bne.n	8014540 <_strtod_l+0x388>
 80144e4:	4999      	ldr	r1, [pc, #612]	; (801474c <_strtod_l+0x594>)
 80144e6:	aa20      	add	r2, sp, #128	; 0x80
 80144e8:	a81d      	add	r0, sp, #116	; 0x74
 80144ea:	f001 ffb5 	bl	8016458 <__hexnan>
 80144ee:	2805      	cmp	r0, #5
 80144f0:	d126      	bne.n	8014540 <_strtod_l+0x388>
 80144f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80144f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80144fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014500:	e69c      	b.n	801423c <_strtod_l+0x84>
 8014502:	210a      	movs	r1, #10
 8014504:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014508:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801450c:	e7b9      	b.n	8014482 <_strtod_l+0x2ca>
 801450e:	2b6e      	cmp	r3, #110	; 0x6e
 8014510:	e7db      	b.n	80144ca <_strtod_l+0x312>
 8014512:	498f      	ldr	r1, [pc, #572]	; (8014750 <_strtod_l+0x598>)
 8014514:	a81d      	add	r0, sp, #116	; 0x74
 8014516:	f001 ff8b 	bl	8016430 <__match>
 801451a:	2800      	cmp	r0, #0
 801451c:	f43f aeaa 	beq.w	8014274 <_strtod_l+0xbc>
 8014520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014522:	498c      	ldr	r1, [pc, #560]	; (8014754 <_strtod_l+0x59c>)
 8014524:	3b01      	subs	r3, #1
 8014526:	a81d      	add	r0, sp, #116	; 0x74
 8014528:	931d      	str	r3, [sp, #116]	; 0x74
 801452a:	f001 ff81 	bl	8016430 <__match>
 801452e:	b910      	cbnz	r0, 8014536 <_strtod_l+0x37e>
 8014530:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014532:	3301      	adds	r3, #1
 8014534:	931d      	str	r3, [sp, #116]	; 0x74
 8014536:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8014764 <_strtod_l+0x5ac>
 801453a:	f04f 0a00 	mov.w	sl, #0
 801453e:	e67d      	b.n	801423c <_strtod_l+0x84>
 8014540:	4885      	ldr	r0, [pc, #532]	; (8014758 <_strtod_l+0x5a0>)
 8014542:	f003 f9f1 	bl	8017928 <nan>
 8014546:	ed8d 0b04 	vstr	d0, [sp, #16]
 801454a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801454e:	e675      	b.n	801423c <_strtod_l+0x84>
 8014550:	9b07      	ldr	r3, [sp, #28]
 8014552:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014554:	1af3      	subs	r3, r6, r3
 8014556:	2f00      	cmp	r7, #0
 8014558:	bf08      	it	eq
 801455a:	462f      	moveq	r7, r5
 801455c:	2d10      	cmp	r5, #16
 801455e:	9308      	str	r3, [sp, #32]
 8014560:	46a8      	mov	r8, r5
 8014562:	bfa8      	it	ge
 8014564:	f04f 0810 	movge.w	r8, #16
 8014568:	f7eb ffdc 	bl	8000524 <__aeabi_ui2d>
 801456c:	2d09      	cmp	r5, #9
 801456e:	4682      	mov	sl, r0
 8014570:	468b      	mov	fp, r1
 8014572:	dd13      	ble.n	801459c <_strtod_l+0x3e4>
 8014574:	4b79      	ldr	r3, [pc, #484]	; (801475c <_strtod_l+0x5a4>)
 8014576:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801457a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801457e:	f7ec f84b 	bl	8000618 <__aeabi_dmul>
 8014582:	4682      	mov	sl, r0
 8014584:	4648      	mov	r0, r9
 8014586:	468b      	mov	fp, r1
 8014588:	f7eb ffcc 	bl	8000524 <__aeabi_ui2d>
 801458c:	4602      	mov	r2, r0
 801458e:	460b      	mov	r3, r1
 8014590:	4650      	mov	r0, sl
 8014592:	4659      	mov	r1, fp
 8014594:	f7eb fe8a 	bl	80002ac <__adddf3>
 8014598:	4682      	mov	sl, r0
 801459a:	468b      	mov	fp, r1
 801459c:	2d0f      	cmp	r5, #15
 801459e:	dc38      	bgt.n	8014612 <_strtod_l+0x45a>
 80145a0:	9b08      	ldr	r3, [sp, #32]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	f43f ae4a 	beq.w	801423c <_strtod_l+0x84>
 80145a8:	dd24      	ble.n	80145f4 <_strtod_l+0x43c>
 80145aa:	2b16      	cmp	r3, #22
 80145ac:	dc0b      	bgt.n	80145c6 <_strtod_l+0x40e>
 80145ae:	4d6b      	ldr	r5, [pc, #428]	; (801475c <_strtod_l+0x5a4>)
 80145b0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80145b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80145b8:	4652      	mov	r2, sl
 80145ba:	465b      	mov	r3, fp
 80145bc:	f7ec f82c 	bl	8000618 <__aeabi_dmul>
 80145c0:	4682      	mov	sl, r0
 80145c2:	468b      	mov	fp, r1
 80145c4:	e63a      	b.n	801423c <_strtod_l+0x84>
 80145c6:	9a08      	ldr	r2, [sp, #32]
 80145c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80145cc:	4293      	cmp	r3, r2
 80145ce:	db20      	blt.n	8014612 <_strtod_l+0x45a>
 80145d0:	4c62      	ldr	r4, [pc, #392]	; (801475c <_strtod_l+0x5a4>)
 80145d2:	f1c5 050f 	rsb	r5, r5, #15
 80145d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80145da:	4652      	mov	r2, sl
 80145dc:	465b      	mov	r3, fp
 80145de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145e2:	f7ec f819 	bl	8000618 <__aeabi_dmul>
 80145e6:	9b08      	ldr	r3, [sp, #32]
 80145e8:	1b5d      	subs	r5, r3, r5
 80145ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80145ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80145f2:	e7e3      	b.n	80145bc <_strtod_l+0x404>
 80145f4:	9b08      	ldr	r3, [sp, #32]
 80145f6:	3316      	adds	r3, #22
 80145f8:	db0b      	blt.n	8014612 <_strtod_l+0x45a>
 80145fa:	9b07      	ldr	r3, [sp, #28]
 80145fc:	4a57      	ldr	r2, [pc, #348]	; (801475c <_strtod_l+0x5a4>)
 80145fe:	1b9e      	subs	r6, r3, r6
 8014600:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8014604:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014608:	4650      	mov	r0, sl
 801460a:	4659      	mov	r1, fp
 801460c:	f7ec f92e 	bl	800086c <__aeabi_ddiv>
 8014610:	e7d6      	b.n	80145c0 <_strtod_l+0x408>
 8014612:	9b08      	ldr	r3, [sp, #32]
 8014614:	eba5 0808 	sub.w	r8, r5, r8
 8014618:	4498      	add	r8, r3
 801461a:	f1b8 0f00 	cmp.w	r8, #0
 801461e:	dd71      	ble.n	8014704 <_strtod_l+0x54c>
 8014620:	f018 030f 	ands.w	r3, r8, #15
 8014624:	d00a      	beq.n	801463c <_strtod_l+0x484>
 8014626:	494d      	ldr	r1, [pc, #308]	; (801475c <_strtod_l+0x5a4>)
 8014628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801462c:	4652      	mov	r2, sl
 801462e:	465b      	mov	r3, fp
 8014630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014634:	f7eb fff0 	bl	8000618 <__aeabi_dmul>
 8014638:	4682      	mov	sl, r0
 801463a:	468b      	mov	fp, r1
 801463c:	f038 080f 	bics.w	r8, r8, #15
 8014640:	d04d      	beq.n	80146de <_strtod_l+0x526>
 8014642:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014646:	dd22      	ble.n	801468e <_strtod_l+0x4d6>
 8014648:	2500      	movs	r5, #0
 801464a:	462e      	mov	r6, r5
 801464c:	9509      	str	r5, [sp, #36]	; 0x24
 801464e:	9507      	str	r5, [sp, #28]
 8014650:	2322      	movs	r3, #34	; 0x22
 8014652:	f8df b110 	ldr.w	fp, [pc, #272]	; 8014764 <_strtod_l+0x5ac>
 8014656:	6023      	str	r3, [r4, #0]
 8014658:	f04f 0a00 	mov.w	sl, #0
 801465c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801465e:	2b00      	cmp	r3, #0
 8014660:	f43f adec 	beq.w	801423c <_strtod_l+0x84>
 8014664:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014666:	4620      	mov	r0, r4
 8014668:	f002 f830 	bl	80166cc <_Bfree>
 801466c:	9907      	ldr	r1, [sp, #28]
 801466e:	4620      	mov	r0, r4
 8014670:	f002 f82c 	bl	80166cc <_Bfree>
 8014674:	4631      	mov	r1, r6
 8014676:	4620      	mov	r0, r4
 8014678:	f002 f828 	bl	80166cc <_Bfree>
 801467c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801467e:	4620      	mov	r0, r4
 8014680:	f002 f824 	bl	80166cc <_Bfree>
 8014684:	4629      	mov	r1, r5
 8014686:	4620      	mov	r0, r4
 8014688:	f002 f820 	bl	80166cc <_Bfree>
 801468c:	e5d6      	b.n	801423c <_strtod_l+0x84>
 801468e:	2300      	movs	r3, #0
 8014690:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014694:	4650      	mov	r0, sl
 8014696:	4659      	mov	r1, fp
 8014698:	4699      	mov	r9, r3
 801469a:	f1b8 0f01 	cmp.w	r8, #1
 801469e:	dc21      	bgt.n	80146e4 <_strtod_l+0x52c>
 80146a0:	b10b      	cbz	r3, 80146a6 <_strtod_l+0x4ee>
 80146a2:	4682      	mov	sl, r0
 80146a4:	468b      	mov	fp, r1
 80146a6:	4b2e      	ldr	r3, [pc, #184]	; (8014760 <_strtod_l+0x5a8>)
 80146a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80146ac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80146b0:	4652      	mov	r2, sl
 80146b2:	465b      	mov	r3, fp
 80146b4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80146b8:	f7eb ffae 	bl	8000618 <__aeabi_dmul>
 80146bc:	4b29      	ldr	r3, [pc, #164]	; (8014764 <_strtod_l+0x5ac>)
 80146be:	460a      	mov	r2, r1
 80146c0:	400b      	ands	r3, r1
 80146c2:	4929      	ldr	r1, [pc, #164]	; (8014768 <_strtod_l+0x5b0>)
 80146c4:	428b      	cmp	r3, r1
 80146c6:	4682      	mov	sl, r0
 80146c8:	d8be      	bhi.n	8014648 <_strtod_l+0x490>
 80146ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80146ce:	428b      	cmp	r3, r1
 80146d0:	bf86      	itte	hi
 80146d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801476c <_strtod_l+0x5b4>
 80146d6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80146da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80146de:	2300      	movs	r3, #0
 80146e0:	9304      	str	r3, [sp, #16]
 80146e2:	e081      	b.n	80147e8 <_strtod_l+0x630>
 80146e4:	f018 0f01 	tst.w	r8, #1
 80146e8:	d007      	beq.n	80146fa <_strtod_l+0x542>
 80146ea:	4b1d      	ldr	r3, [pc, #116]	; (8014760 <_strtod_l+0x5a8>)
 80146ec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80146f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f4:	f7eb ff90 	bl	8000618 <__aeabi_dmul>
 80146f8:	2301      	movs	r3, #1
 80146fa:	f109 0901 	add.w	r9, r9, #1
 80146fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014702:	e7ca      	b.n	801469a <_strtod_l+0x4e2>
 8014704:	d0eb      	beq.n	80146de <_strtod_l+0x526>
 8014706:	f1c8 0800 	rsb	r8, r8, #0
 801470a:	f018 020f 	ands.w	r2, r8, #15
 801470e:	d00a      	beq.n	8014726 <_strtod_l+0x56e>
 8014710:	4b12      	ldr	r3, [pc, #72]	; (801475c <_strtod_l+0x5a4>)
 8014712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014716:	4650      	mov	r0, sl
 8014718:	4659      	mov	r1, fp
 801471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471e:	f7ec f8a5 	bl	800086c <__aeabi_ddiv>
 8014722:	4682      	mov	sl, r0
 8014724:	468b      	mov	fp, r1
 8014726:	ea5f 1828 	movs.w	r8, r8, asr #4
 801472a:	d0d8      	beq.n	80146de <_strtod_l+0x526>
 801472c:	f1b8 0f1f 	cmp.w	r8, #31
 8014730:	dd1e      	ble.n	8014770 <_strtod_l+0x5b8>
 8014732:	2500      	movs	r5, #0
 8014734:	462e      	mov	r6, r5
 8014736:	9509      	str	r5, [sp, #36]	; 0x24
 8014738:	9507      	str	r5, [sp, #28]
 801473a:	2322      	movs	r3, #34	; 0x22
 801473c:	f04f 0a00 	mov.w	sl, #0
 8014740:	f04f 0b00 	mov.w	fp, #0
 8014744:	6023      	str	r3, [r4, #0]
 8014746:	e789      	b.n	801465c <_strtod_l+0x4a4>
 8014748:	080180c6 	.word	0x080180c6
 801474c:	0801879c 	.word	0x0801879c
 8014750:	080180be 	.word	0x080180be
 8014754:	080188dc 	.word	0x080188dc
 8014758:	08018ba2 	.word	0x08018ba2
 801475c:	08018a78 	.word	0x08018a78
 8014760:	08018a50 	.word	0x08018a50
 8014764:	7ff00000 	.word	0x7ff00000
 8014768:	7ca00000 	.word	0x7ca00000
 801476c:	7fefffff 	.word	0x7fefffff
 8014770:	f018 0310 	ands.w	r3, r8, #16
 8014774:	bf18      	it	ne
 8014776:	236a      	movne	r3, #106	; 0x6a
 8014778:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8014b30 <_strtod_l+0x978>
 801477c:	9304      	str	r3, [sp, #16]
 801477e:	4650      	mov	r0, sl
 8014780:	4659      	mov	r1, fp
 8014782:	2300      	movs	r3, #0
 8014784:	f018 0f01 	tst.w	r8, #1
 8014788:	d004      	beq.n	8014794 <_strtod_l+0x5dc>
 801478a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801478e:	f7eb ff43 	bl	8000618 <__aeabi_dmul>
 8014792:	2301      	movs	r3, #1
 8014794:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014798:	f109 0908 	add.w	r9, r9, #8
 801479c:	d1f2      	bne.n	8014784 <_strtod_l+0x5cc>
 801479e:	b10b      	cbz	r3, 80147a4 <_strtod_l+0x5ec>
 80147a0:	4682      	mov	sl, r0
 80147a2:	468b      	mov	fp, r1
 80147a4:	9b04      	ldr	r3, [sp, #16]
 80147a6:	b1bb      	cbz	r3, 80147d8 <_strtod_l+0x620>
 80147a8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80147ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	4659      	mov	r1, fp
 80147b4:	dd10      	ble.n	80147d8 <_strtod_l+0x620>
 80147b6:	2b1f      	cmp	r3, #31
 80147b8:	f340 8128 	ble.w	8014a0c <_strtod_l+0x854>
 80147bc:	2b34      	cmp	r3, #52	; 0x34
 80147be:	bfde      	ittt	le
 80147c0:	3b20      	suble	r3, #32
 80147c2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80147c6:	fa02 f303 	lslle.w	r3, r2, r3
 80147ca:	f04f 0a00 	mov.w	sl, #0
 80147ce:	bfcc      	ite	gt
 80147d0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80147d4:	ea03 0b01 	andle.w	fp, r3, r1
 80147d8:	2200      	movs	r2, #0
 80147da:	2300      	movs	r3, #0
 80147dc:	4650      	mov	r0, sl
 80147de:	4659      	mov	r1, fp
 80147e0:	f7ec f982 	bl	8000ae8 <__aeabi_dcmpeq>
 80147e4:	2800      	cmp	r0, #0
 80147e6:	d1a4      	bne.n	8014732 <_strtod_l+0x57a>
 80147e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147ea:	9300      	str	r3, [sp, #0]
 80147ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80147ee:	462b      	mov	r3, r5
 80147f0:	463a      	mov	r2, r7
 80147f2:	4620      	mov	r0, r4
 80147f4:	f001 ffd6 	bl	80167a4 <__s2b>
 80147f8:	9009      	str	r0, [sp, #36]	; 0x24
 80147fa:	2800      	cmp	r0, #0
 80147fc:	f43f af24 	beq.w	8014648 <_strtod_l+0x490>
 8014800:	9b07      	ldr	r3, [sp, #28]
 8014802:	1b9e      	subs	r6, r3, r6
 8014804:	9b08      	ldr	r3, [sp, #32]
 8014806:	2b00      	cmp	r3, #0
 8014808:	bfb4      	ite	lt
 801480a:	4633      	movlt	r3, r6
 801480c:	2300      	movge	r3, #0
 801480e:	9310      	str	r3, [sp, #64]	; 0x40
 8014810:	9b08      	ldr	r3, [sp, #32]
 8014812:	2500      	movs	r5, #0
 8014814:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014818:	9318      	str	r3, [sp, #96]	; 0x60
 801481a:	462e      	mov	r6, r5
 801481c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801481e:	4620      	mov	r0, r4
 8014820:	6859      	ldr	r1, [r3, #4]
 8014822:	f001 ff13 	bl	801664c <_Balloc>
 8014826:	9007      	str	r0, [sp, #28]
 8014828:	2800      	cmp	r0, #0
 801482a:	f43f af11 	beq.w	8014650 <_strtod_l+0x498>
 801482e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014830:	691a      	ldr	r2, [r3, #16]
 8014832:	3202      	adds	r2, #2
 8014834:	f103 010c 	add.w	r1, r3, #12
 8014838:	0092      	lsls	r2, r2, #2
 801483a:	300c      	adds	r0, #12
 801483c:	f7fe f82e 	bl	801289c <memcpy>
 8014840:	ec4b ab10 	vmov	d0, sl, fp
 8014844:	aa20      	add	r2, sp, #128	; 0x80
 8014846:	a91f      	add	r1, sp, #124	; 0x7c
 8014848:	4620      	mov	r0, r4
 801484a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801484e:	f002 fae5 	bl	8016e1c <__d2b>
 8014852:	901e      	str	r0, [sp, #120]	; 0x78
 8014854:	2800      	cmp	r0, #0
 8014856:	f43f aefb 	beq.w	8014650 <_strtod_l+0x498>
 801485a:	2101      	movs	r1, #1
 801485c:	4620      	mov	r0, r4
 801485e:	f002 f83b 	bl	80168d8 <__i2b>
 8014862:	4606      	mov	r6, r0
 8014864:	2800      	cmp	r0, #0
 8014866:	f43f aef3 	beq.w	8014650 <_strtod_l+0x498>
 801486a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801486c:	9904      	ldr	r1, [sp, #16]
 801486e:	2b00      	cmp	r3, #0
 8014870:	bfab      	itete	ge
 8014872:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8014874:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8014876:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8014878:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801487c:	bfac      	ite	ge
 801487e:	eb03 0902 	addge.w	r9, r3, r2
 8014882:	1ad7      	sublt	r7, r2, r3
 8014884:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014886:	eba3 0801 	sub.w	r8, r3, r1
 801488a:	4490      	add	r8, r2
 801488c:	4ba3      	ldr	r3, [pc, #652]	; (8014b1c <_strtod_l+0x964>)
 801488e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8014892:	4598      	cmp	r8, r3
 8014894:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014898:	f280 80cc 	bge.w	8014a34 <_strtod_l+0x87c>
 801489c:	eba3 0308 	sub.w	r3, r3, r8
 80148a0:	2b1f      	cmp	r3, #31
 80148a2:	eba2 0203 	sub.w	r2, r2, r3
 80148a6:	f04f 0101 	mov.w	r1, #1
 80148aa:	f300 80b6 	bgt.w	8014a1a <_strtod_l+0x862>
 80148ae:	fa01 f303 	lsl.w	r3, r1, r3
 80148b2:	9311      	str	r3, [sp, #68]	; 0x44
 80148b4:	2300      	movs	r3, #0
 80148b6:	930c      	str	r3, [sp, #48]	; 0x30
 80148b8:	eb09 0802 	add.w	r8, r9, r2
 80148bc:	9b04      	ldr	r3, [sp, #16]
 80148be:	45c1      	cmp	r9, r8
 80148c0:	4417      	add	r7, r2
 80148c2:	441f      	add	r7, r3
 80148c4:	464b      	mov	r3, r9
 80148c6:	bfa8      	it	ge
 80148c8:	4643      	movge	r3, r8
 80148ca:	42bb      	cmp	r3, r7
 80148cc:	bfa8      	it	ge
 80148ce:	463b      	movge	r3, r7
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	bfc2      	ittt	gt
 80148d4:	eba8 0803 	subgt.w	r8, r8, r3
 80148d8:	1aff      	subgt	r7, r7, r3
 80148da:	eba9 0903 	subgt.w	r9, r9, r3
 80148de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	dd17      	ble.n	8014914 <_strtod_l+0x75c>
 80148e4:	4631      	mov	r1, r6
 80148e6:	461a      	mov	r2, r3
 80148e8:	4620      	mov	r0, r4
 80148ea:	f002 f8b1 	bl	8016a50 <__pow5mult>
 80148ee:	4606      	mov	r6, r0
 80148f0:	2800      	cmp	r0, #0
 80148f2:	f43f aead 	beq.w	8014650 <_strtod_l+0x498>
 80148f6:	4601      	mov	r1, r0
 80148f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80148fa:	4620      	mov	r0, r4
 80148fc:	f002 f802 	bl	8016904 <__multiply>
 8014900:	900f      	str	r0, [sp, #60]	; 0x3c
 8014902:	2800      	cmp	r0, #0
 8014904:	f43f aea4 	beq.w	8014650 <_strtod_l+0x498>
 8014908:	991e      	ldr	r1, [sp, #120]	; 0x78
 801490a:	4620      	mov	r0, r4
 801490c:	f001 fede 	bl	80166cc <_Bfree>
 8014910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014912:	931e      	str	r3, [sp, #120]	; 0x78
 8014914:	f1b8 0f00 	cmp.w	r8, #0
 8014918:	f300 8091 	bgt.w	8014a3e <_strtod_l+0x886>
 801491c:	9b08      	ldr	r3, [sp, #32]
 801491e:	2b00      	cmp	r3, #0
 8014920:	dd08      	ble.n	8014934 <_strtod_l+0x77c>
 8014922:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014924:	9907      	ldr	r1, [sp, #28]
 8014926:	4620      	mov	r0, r4
 8014928:	f002 f892 	bl	8016a50 <__pow5mult>
 801492c:	9007      	str	r0, [sp, #28]
 801492e:	2800      	cmp	r0, #0
 8014930:	f43f ae8e 	beq.w	8014650 <_strtod_l+0x498>
 8014934:	2f00      	cmp	r7, #0
 8014936:	dd08      	ble.n	801494a <_strtod_l+0x792>
 8014938:	9907      	ldr	r1, [sp, #28]
 801493a:	463a      	mov	r2, r7
 801493c:	4620      	mov	r0, r4
 801493e:	f002 f8e1 	bl	8016b04 <__lshift>
 8014942:	9007      	str	r0, [sp, #28]
 8014944:	2800      	cmp	r0, #0
 8014946:	f43f ae83 	beq.w	8014650 <_strtod_l+0x498>
 801494a:	f1b9 0f00 	cmp.w	r9, #0
 801494e:	dd08      	ble.n	8014962 <_strtod_l+0x7aa>
 8014950:	4631      	mov	r1, r6
 8014952:	464a      	mov	r2, r9
 8014954:	4620      	mov	r0, r4
 8014956:	f002 f8d5 	bl	8016b04 <__lshift>
 801495a:	4606      	mov	r6, r0
 801495c:	2800      	cmp	r0, #0
 801495e:	f43f ae77 	beq.w	8014650 <_strtod_l+0x498>
 8014962:	9a07      	ldr	r2, [sp, #28]
 8014964:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014966:	4620      	mov	r0, r4
 8014968:	f002 f954 	bl	8016c14 <__mdiff>
 801496c:	4605      	mov	r5, r0
 801496e:	2800      	cmp	r0, #0
 8014970:	f43f ae6e 	beq.w	8014650 <_strtod_l+0x498>
 8014974:	68c3      	ldr	r3, [r0, #12]
 8014976:	930f      	str	r3, [sp, #60]	; 0x3c
 8014978:	2300      	movs	r3, #0
 801497a:	60c3      	str	r3, [r0, #12]
 801497c:	4631      	mov	r1, r6
 801497e:	f002 f92d 	bl	8016bdc <__mcmp>
 8014982:	2800      	cmp	r0, #0
 8014984:	da65      	bge.n	8014a52 <_strtod_l+0x89a>
 8014986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014988:	ea53 030a 	orrs.w	r3, r3, sl
 801498c:	f040 8087 	bne.w	8014a9e <_strtod_l+0x8e6>
 8014990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014994:	2b00      	cmp	r3, #0
 8014996:	f040 8082 	bne.w	8014a9e <_strtod_l+0x8e6>
 801499a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801499e:	0d1b      	lsrs	r3, r3, #20
 80149a0:	051b      	lsls	r3, r3, #20
 80149a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80149a6:	d97a      	bls.n	8014a9e <_strtod_l+0x8e6>
 80149a8:	696b      	ldr	r3, [r5, #20]
 80149aa:	b913      	cbnz	r3, 80149b2 <_strtod_l+0x7fa>
 80149ac:	692b      	ldr	r3, [r5, #16]
 80149ae:	2b01      	cmp	r3, #1
 80149b0:	dd75      	ble.n	8014a9e <_strtod_l+0x8e6>
 80149b2:	4629      	mov	r1, r5
 80149b4:	2201      	movs	r2, #1
 80149b6:	4620      	mov	r0, r4
 80149b8:	f002 f8a4 	bl	8016b04 <__lshift>
 80149bc:	4631      	mov	r1, r6
 80149be:	4605      	mov	r5, r0
 80149c0:	f002 f90c 	bl	8016bdc <__mcmp>
 80149c4:	2800      	cmp	r0, #0
 80149c6:	dd6a      	ble.n	8014a9e <_strtod_l+0x8e6>
 80149c8:	9904      	ldr	r1, [sp, #16]
 80149ca:	4a55      	ldr	r2, [pc, #340]	; (8014b20 <_strtod_l+0x968>)
 80149cc:	465b      	mov	r3, fp
 80149ce:	2900      	cmp	r1, #0
 80149d0:	f000 8085 	beq.w	8014ade <_strtod_l+0x926>
 80149d4:	ea02 010b 	and.w	r1, r2, fp
 80149d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80149dc:	dc7f      	bgt.n	8014ade <_strtod_l+0x926>
 80149de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80149e2:	f77f aeaa 	ble.w	801473a <_strtod_l+0x582>
 80149e6:	4a4f      	ldr	r2, [pc, #316]	; (8014b24 <_strtod_l+0x96c>)
 80149e8:	2300      	movs	r3, #0
 80149ea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80149ee:	4650      	mov	r0, sl
 80149f0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80149f4:	4659      	mov	r1, fp
 80149f6:	f7eb fe0f 	bl	8000618 <__aeabi_dmul>
 80149fa:	460b      	mov	r3, r1
 80149fc:	4303      	orrs	r3, r0
 80149fe:	bf08      	it	eq
 8014a00:	2322      	moveq	r3, #34	; 0x22
 8014a02:	4682      	mov	sl, r0
 8014a04:	468b      	mov	fp, r1
 8014a06:	bf08      	it	eq
 8014a08:	6023      	streq	r3, [r4, #0]
 8014a0a:	e62b      	b.n	8014664 <_strtod_l+0x4ac>
 8014a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a10:	fa02 f303 	lsl.w	r3, r2, r3
 8014a14:	ea03 0a0a 	and.w	sl, r3, sl
 8014a18:	e6de      	b.n	80147d8 <_strtod_l+0x620>
 8014a1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8014a1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8014a22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8014a26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8014a2a:	fa01 f308 	lsl.w	r3, r1, r8
 8014a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8014a30:	9111      	str	r1, [sp, #68]	; 0x44
 8014a32:	e741      	b.n	80148b8 <_strtod_l+0x700>
 8014a34:	2300      	movs	r3, #0
 8014a36:	930c      	str	r3, [sp, #48]	; 0x30
 8014a38:	2301      	movs	r3, #1
 8014a3a:	9311      	str	r3, [sp, #68]	; 0x44
 8014a3c:	e73c      	b.n	80148b8 <_strtod_l+0x700>
 8014a3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014a40:	4642      	mov	r2, r8
 8014a42:	4620      	mov	r0, r4
 8014a44:	f002 f85e 	bl	8016b04 <__lshift>
 8014a48:	901e      	str	r0, [sp, #120]	; 0x78
 8014a4a:	2800      	cmp	r0, #0
 8014a4c:	f47f af66 	bne.w	801491c <_strtod_l+0x764>
 8014a50:	e5fe      	b.n	8014650 <_strtod_l+0x498>
 8014a52:	465f      	mov	r7, fp
 8014a54:	d16e      	bne.n	8014b34 <_strtod_l+0x97c>
 8014a56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014a58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014a5c:	b342      	cbz	r2, 8014ab0 <_strtod_l+0x8f8>
 8014a5e:	4a32      	ldr	r2, [pc, #200]	; (8014b28 <_strtod_l+0x970>)
 8014a60:	4293      	cmp	r3, r2
 8014a62:	d128      	bne.n	8014ab6 <_strtod_l+0x8fe>
 8014a64:	9b04      	ldr	r3, [sp, #16]
 8014a66:	4650      	mov	r0, sl
 8014a68:	b1eb      	cbz	r3, 8014aa6 <_strtod_l+0x8ee>
 8014a6a:	4a2d      	ldr	r2, [pc, #180]	; (8014b20 <_strtod_l+0x968>)
 8014a6c:	403a      	ands	r2, r7
 8014a6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014a72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014a76:	d819      	bhi.n	8014aac <_strtod_l+0x8f4>
 8014a78:	0d12      	lsrs	r2, r2, #20
 8014a7a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8014a82:	4298      	cmp	r0, r3
 8014a84:	d117      	bne.n	8014ab6 <_strtod_l+0x8fe>
 8014a86:	4b29      	ldr	r3, [pc, #164]	; (8014b2c <_strtod_l+0x974>)
 8014a88:	429f      	cmp	r7, r3
 8014a8a:	d102      	bne.n	8014a92 <_strtod_l+0x8da>
 8014a8c:	3001      	adds	r0, #1
 8014a8e:	f43f addf 	beq.w	8014650 <_strtod_l+0x498>
 8014a92:	4b23      	ldr	r3, [pc, #140]	; (8014b20 <_strtod_l+0x968>)
 8014a94:	403b      	ands	r3, r7
 8014a96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014a9a:	f04f 0a00 	mov.w	sl, #0
 8014a9e:	9b04      	ldr	r3, [sp, #16]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d1a0      	bne.n	80149e6 <_strtod_l+0x82e>
 8014aa4:	e5de      	b.n	8014664 <_strtod_l+0x4ac>
 8014aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014aaa:	e7ea      	b.n	8014a82 <_strtod_l+0x8ca>
 8014aac:	460b      	mov	r3, r1
 8014aae:	e7e8      	b.n	8014a82 <_strtod_l+0x8ca>
 8014ab0:	ea53 030a 	orrs.w	r3, r3, sl
 8014ab4:	d088      	beq.n	80149c8 <_strtod_l+0x810>
 8014ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ab8:	b1db      	cbz	r3, 8014af2 <_strtod_l+0x93a>
 8014aba:	423b      	tst	r3, r7
 8014abc:	d0ef      	beq.n	8014a9e <_strtod_l+0x8e6>
 8014abe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ac0:	9a04      	ldr	r2, [sp, #16]
 8014ac2:	4650      	mov	r0, sl
 8014ac4:	4659      	mov	r1, fp
 8014ac6:	b1c3      	cbz	r3, 8014afa <_strtod_l+0x942>
 8014ac8:	f7ff fb5a 	bl	8014180 <sulp>
 8014acc:	4602      	mov	r2, r0
 8014ace:	460b      	mov	r3, r1
 8014ad0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014ad4:	f7eb fbea 	bl	80002ac <__adddf3>
 8014ad8:	4682      	mov	sl, r0
 8014ada:	468b      	mov	fp, r1
 8014adc:	e7df      	b.n	8014a9e <_strtod_l+0x8e6>
 8014ade:	4013      	ands	r3, r2
 8014ae0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014ae4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014ae8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014aec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014af0:	e7d5      	b.n	8014a9e <_strtod_l+0x8e6>
 8014af2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014af4:	ea13 0f0a 	tst.w	r3, sl
 8014af8:	e7e0      	b.n	8014abc <_strtod_l+0x904>
 8014afa:	f7ff fb41 	bl	8014180 <sulp>
 8014afe:	4602      	mov	r2, r0
 8014b00:	460b      	mov	r3, r1
 8014b02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b06:	f7eb fbcf 	bl	80002a8 <__aeabi_dsub>
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	4682      	mov	sl, r0
 8014b10:	468b      	mov	fp, r1
 8014b12:	f7eb ffe9 	bl	8000ae8 <__aeabi_dcmpeq>
 8014b16:	2800      	cmp	r0, #0
 8014b18:	d0c1      	beq.n	8014a9e <_strtod_l+0x8e6>
 8014b1a:	e60e      	b.n	801473a <_strtod_l+0x582>
 8014b1c:	fffffc02 	.word	0xfffffc02
 8014b20:	7ff00000 	.word	0x7ff00000
 8014b24:	39500000 	.word	0x39500000
 8014b28:	000fffff 	.word	0x000fffff
 8014b2c:	7fefffff 	.word	0x7fefffff
 8014b30:	080187b0 	.word	0x080187b0
 8014b34:	4631      	mov	r1, r6
 8014b36:	4628      	mov	r0, r5
 8014b38:	f002 f9cc 	bl	8016ed4 <__ratio>
 8014b3c:	ec59 8b10 	vmov	r8, r9, d0
 8014b40:	ee10 0a10 	vmov	r0, s0
 8014b44:	2200      	movs	r2, #0
 8014b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b4a:	4649      	mov	r1, r9
 8014b4c:	f7eb ffe0 	bl	8000b10 <__aeabi_dcmple>
 8014b50:	2800      	cmp	r0, #0
 8014b52:	d07c      	beq.n	8014c4e <_strtod_l+0xa96>
 8014b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d04c      	beq.n	8014bf4 <_strtod_l+0xa3c>
 8014b5a:	4b95      	ldr	r3, [pc, #596]	; (8014db0 <_strtod_l+0xbf8>)
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014b62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014db0 <_strtod_l+0xbf8>
 8014b66:	f04f 0800 	mov.w	r8, #0
 8014b6a:	4b92      	ldr	r3, [pc, #584]	; (8014db4 <_strtod_l+0xbfc>)
 8014b6c:	403b      	ands	r3, r7
 8014b6e:	9311      	str	r3, [sp, #68]	; 0x44
 8014b70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014b72:	4b91      	ldr	r3, [pc, #580]	; (8014db8 <_strtod_l+0xc00>)
 8014b74:	429a      	cmp	r2, r3
 8014b76:	f040 80b2 	bne.w	8014cde <_strtod_l+0xb26>
 8014b7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014b7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014b82:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014b86:	ec4b ab10 	vmov	d0, sl, fp
 8014b8a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8014b8e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014b92:	f002 f8c7 	bl	8016d24 <__ulp>
 8014b96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014b9a:	ec53 2b10 	vmov	r2, r3, d0
 8014b9e:	f7eb fd3b 	bl	8000618 <__aeabi_dmul>
 8014ba2:	4652      	mov	r2, sl
 8014ba4:	465b      	mov	r3, fp
 8014ba6:	f7eb fb81 	bl	80002ac <__adddf3>
 8014baa:	460b      	mov	r3, r1
 8014bac:	4981      	ldr	r1, [pc, #516]	; (8014db4 <_strtod_l+0xbfc>)
 8014bae:	4a83      	ldr	r2, [pc, #524]	; (8014dbc <_strtod_l+0xc04>)
 8014bb0:	4019      	ands	r1, r3
 8014bb2:	4291      	cmp	r1, r2
 8014bb4:	4682      	mov	sl, r0
 8014bb6:	d95e      	bls.n	8014c76 <_strtod_l+0xabe>
 8014bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014bbe:	4293      	cmp	r3, r2
 8014bc0:	d103      	bne.n	8014bca <_strtod_l+0xa12>
 8014bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	f43f ad43 	beq.w	8014650 <_strtod_l+0x498>
 8014bca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014dc8 <_strtod_l+0xc10>
 8014bce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014bd2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014bd4:	4620      	mov	r0, r4
 8014bd6:	f001 fd79 	bl	80166cc <_Bfree>
 8014bda:	9907      	ldr	r1, [sp, #28]
 8014bdc:	4620      	mov	r0, r4
 8014bde:	f001 fd75 	bl	80166cc <_Bfree>
 8014be2:	4631      	mov	r1, r6
 8014be4:	4620      	mov	r0, r4
 8014be6:	f001 fd71 	bl	80166cc <_Bfree>
 8014bea:	4629      	mov	r1, r5
 8014bec:	4620      	mov	r0, r4
 8014bee:	f001 fd6d 	bl	80166cc <_Bfree>
 8014bf2:	e613      	b.n	801481c <_strtod_l+0x664>
 8014bf4:	f1ba 0f00 	cmp.w	sl, #0
 8014bf8:	d11b      	bne.n	8014c32 <_strtod_l+0xa7a>
 8014bfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014bfe:	b9f3      	cbnz	r3, 8014c3e <_strtod_l+0xa86>
 8014c00:	4b6b      	ldr	r3, [pc, #428]	; (8014db0 <_strtod_l+0xbf8>)
 8014c02:	2200      	movs	r2, #0
 8014c04:	4640      	mov	r0, r8
 8014c06:	4649      	mov	r1, r9
 8014c08:	f7eb ff78 	bl	8000afc <__aeabi_dcmplt>
 8014c0c:	b9d0      	cbnz	r0, 8014c44 <_strtod_l+0xa8c>
 8014c0e:	4640      	mov	r0, r8
 8014c10:	4649      	mov	r1, r9
 8014c12:	4b6b      	ldr	r3, [pc, #428]	; (8014dc0 <_strtod_l+0xc08>)
 8014c14:	2200      	movs	r2, #0
 8014c16:	f7eb fcff 	bl	8000618 <__aeabi_dmul>
 8014c1a:	4680      	mov	r8, r0
 8014c1c:	4689      	mov	r9, r1
 8014c1e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014c22:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8014c26:	931b      	str	r3, [sp, #108]	; 0x6c
 8014c28:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8014c2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014c30:	e79b      	b.n	8014b6a <_strtod_l+0x9b2>
 8014c32:	f1ba 0f01 	cmp.w	sl, #1
 8014c36:	d102      	bne.n	8014c3e <_strtod_l+0xa86>
 8014c38:	2f00      	cmp	r7, #0
 8014c3a:	f43f ad7e 	beq.w	801473a <_strtod_l+0x582>
 8014c3e:	4b61      	ldr	r3, [pc, #388]	; (8014dc4 <_strtod_l+0xc0c>)
 8014c40:	2200      	movs	r2, #0
 8014c42:	e78c      	b.n	8014b5e <_strtod_l+0x9a6>
 8014c44:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014dc0 <_strtod_l+0xc08>
 8014c48:	f04f 0800 	mov.w	r8, #0
 8014c4c:	e7e7      	b.n	8014c1e <_strtod_l+0xa66>
 8014c4e:	4b5c      	ldr	r3, [pc, #368]	; (8014dc0 <_strtod_l+0xc08>)
 8014c50:	4640      	mov	r0, r8
 8014c52:	4649      	mov	r1, r9
 8014c54:	2200      	movs	r2, #0
 8014c56:	f7eb fcdf 	bl	8000618 <__aeabi_dmul>
 8014c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c5c:	4680      	mov	r8, r0
 8014c5e:	4689      	mov	r9, r1
 8014c60:	b933      	cbnz	r3, 8014c70 <_strtod_l+0xab8>
 8014c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c66:	9012      	str	r0, [sp, #72]	; 0x48
 8014c68:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c6a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014c6e:	e7dd      	b.n	8014c2c <_strtod_l+0xa74>
 8014c70:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8014c74:	e7f9      	b.n	8014c6a <_strtod_l+0xab2>
 8014c76:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014c7a:	9b04      	ldr	r3, [sp, #16]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d1a8      	bne.n	8014bd2 <_strtod_l+0xa1a>
 8014c80:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014c84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014c86:	0d1b      	lsrs	r3, r3, #20
 8014c88:	051b      	lsls	r3, r3, #20
 8014c8a:	429a      	cmp	r2, r3
 8014c8c:	d1a1      	bne.n	8014bd2 <_strtod_l+0xa1a>
 8014c8e:	4640      	mov	r0, r8
 8014c90:	4649      	mov	r1, r9
 8014c92:	f7ec f809 	bl	8000ca8 <__aeabi_d2lz>
 8014c96:	f7eb fc91 	bl	80005bc <__aeabi_l2d>
 8014c9a:	4602      	mov	r2, r0
 8014c9c:	460b      	mov	r3, r1
 8014c9e:	4640      	mov	r0, r8
 8014ca0:	4649      	mov	r1, r9
 8014ca2:	f7eb fb01 	bl	80002a8 <__aeabi_dsub>
 8014ca6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014ca8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014cac:	ea43 030a 	orr.w	r3, r3, sl
 8014cb0:	4313      	orrs	r3, r2
 8014cb2:	4680      	mov	r8, r0
 8014cb4:	4689      	mov	r9, r1
 8014cb6:	d053      	beq.n	8014d60 <_strtod_l+0xba8>
 8014cb8:	a335      	add	r3, pc, #212	; (adr r3, 8014d90 <_strtod_l+0xbd8>)
 8014cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cbe:	f7eb ff1d 	bl	8000afc <__aeabi_dcmplt>
 8014cc2:	2800      	cmp	r0, #0
 8014cc4:	f47f acce 	bne.w	8014664 <_strtod_l+0x4ac>
 8014cc8:	a333      	add	r3, pc, #204	; (adr r3, 8014d98 <_strtod_l+0xbe0>)
 8014cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cce:	4640      	mov	r0, r8
 8014cd0:	4649      	mov	r1, r9
 8014cd2:	f7eb ff31 	bl	8000b38 <__aeabi_dcmpgt>
 8014cd6:	2800      	cmp	r0, #0
 8014cd8:	f43f af7b 	beq.w	8014bd2 <_strtod_l+0xa1a>
 8014cdc:	e4c2      	b.n	8014664 <_strtod_l+0x4ac>
 8014cde:	9b04      	ldr	r3, [sp, #16]
 8014ce0:	b333      	cbz	r3, 8014d30 <_strtod_l+0xb78>
 8014ce2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ce4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014ce8:	d822      	bhi.n	8014d30 <_strtod_l+0xb78>
 8014cea:	a32d      	add	r3, pc, #180	; (adr r3, 8014da0 <_strtod_l+0xbe8>)
 8014cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf0:	4640      	mov	r0, r8
 8014cf2:	4649      	mov	r1, r9
 8014cf4:	f7eb ff0c 	bl	8000b10 <__aeabi_dcmple>
 8014cf8:	b1a0      	cbz	r0, 8014d24 <_strtod_l+0xb6c>
 8014cfa:	4649      	mov	r1, r9
 8014cfc:	4640      	mov	r0, r8
 8014cfe:	f7eb ff63 	bl	8000bc8 <__aeabi_d2uiz>
 8014d02:	2801      	cmp	r0, #1
 8014d04:	bf38      	it	cc
 8014d06:	2001      	movcc	r0, #1
 8014d08:	f7eb fc0c 	bl	8000524 <__aeabi_ui2d>
 8014d0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d0e:	4680      	mov	r8, r0
 8014d10:	4689      	mov	r9, r1
 8014d12:	bb13      	cbnz	r3, 8014d5a <_strtod_l+0xba2>
 8014d14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d18:	9014      	str	r0, [sp, #80]	; 0x50
 8014d1a:	9315      	str	r3, [sp, #84]	; 0x54
 8014d1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014d20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014d26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014d28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014d2c:	1a9b      	subs	r3, r3, r2
 8014d2e:	930d      	str	r3, [sp, #52]	; 0x34
 8014d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014d34:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014d38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014d3c:	f001 fff2 	bl	8016d24 <__ulp>
 8014d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014d44:	ec53 2b10 	vmov	r2, r3, d0
 8014d48:	f7eb fc66 	bl	8000618 <__aeabi_dmul>
 8014d4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014d50:	f7eb faac 	bl	80002ac <__adddf3>
 8014d54:	4682      	mov	sl, r0
 8014d56:	468b      	mov	fp, r1
 8014d58:	e78f      	b.n	8014c7a <_strtod_l+0xac2>
 8014d5a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8014d5e:	e7dd      	b.n	8014d1c <_strtod_l+0xb64>
 8014d60:	a311      	add	r3, pc, #68	; (adr r3, 8014da8 <_strtod_l+0xbf0>)
 8014d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d66:	f7eb fec9 	bl	8000afc <__aeabi_dcmplt>
 8014d6a:	e7b4      	b.n	8014cd6 <_strtod_l+0xb1e>
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	930e      	str	r3, [sp, #56]	; 0x38
 8014d70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014d72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014d74:	6013      	str	r3, [r2, #0]
 8014d76:	f7ff ba65 	b.w	8014244 <_strtod_l+0x8c>
 8014d7a:	2b65      	cmp	r3, #101	; 0x65
 8014d7c:	f43f ab5d 	beq.w	801443a <_strtod_l+0x282>
 8014d80:	2b45      	cmp	r3, #69	; 0x45
 8014d82:	f43f ab5a 	beq.w	801443a <_strtod_l+0x282>
 8014d86:	2201      	movs	r2, #1
 8014d88:	f7ff bb92 	b.w	80144b0 <_strtod_l+0x2f8>
 8014d8c:	f3af 8000 	nop.w
 8014d90:	94a03595 	.word	0x94a03595
 8014d94:	3fdfffff 	.word	0x3fdfffff
 8014d98:	35afe535 	.word	0x35afe535
 8014d9c:	3fe00000 	.word	0x3fe00000
 8014da0:	ffc00000 	.word	0xffc00000
 8014da4:	41dfffff 	.word	0x41dfffff
 8014da8:	94a03595 	.word	0x94a03595
 8014dac:	3fcfffff 	.word	0x3fcfffff
 8014db0:	3ff00000 	.word	0x3ff00000
 8014db4:	7ff00000 	.word	0x7ff00000
 8014db8:	7fe00000 	.word	0x7fe00000
 8014dbc:	7c9fffff 	.word	0x7c9fffff
 8014dc0:	3fe00000 	.word	0x3fe00000
 8014dc4:	bff00000 	.word	0xbff00000
 8014dc8:	7fefffff 	.word	0x7fefffff

08014dcc <_strtod_r>:
 8014dcc:	4b01      	ldr	r3, [pc, #4]	; (8014dd4 <_strtod_r+0x8>)
 8014dce:	f7ff b9f3 	b.w	80141b8 <_strtod_l>
 8014dd2:	bf00      	nop
 8014dd4:	200000d4 	.word	0x200000d4

08014dd8 <_strtol_l.isra.0>:
 8014dd8:	2b01      	cmp	r3, #1
 8014dda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dde:	d001      	beq.n	8014de4 <_strtol_l.isra.0+0xc>
 8014de0:	2b24      	cmp	r3, #36	; 0x24
 8014de2:	d906      	bls.n	8014df2 <_strtol_l.isra.0+0x1a>
 8014de4:	f7fd faee 	bl	80123c4 <__errno>
 8014de8:	2316      	movs	r3, #22
 8014dea:	6003      	str	r3, [r0, #0]
 8014dec:	2000      	movs	r0, #0
 8014dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014df2:	4f3a      	ldr	r7, [pc, #232]	; (8014edc <_strtol_l.isra.0+0x104>)
 8014df4:	468e      	mov	lr, r1
 8014df6:	4676      	mov	r6, lr
 8014df8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014dfc:	5de5      	ldrb	r5, [r4, r7]
 8014dfe:	f015 0508 	ands.w	r5, r5, #8
 8014e02:	d1f8      	bne.n	8014df6 <_strtol_l.isra.0+0x1e>
 8014e04:	2c2d      	cmp	r4, #45	; 0x2d
 8014e06:	d134      	bne.n	8014e72 <_strtol_l.isra.0+0x9a>
 8014e08:	f89e 4000 	ldrb.w	r4, [lr]
 8014e0c:	f04f 0801 	mov.w	r8, #1
 8014e10:	f106 0e02 	add.w	lr, r6, #2
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d05c      	beq.n	8014ed2 <_strtol_l.isra.0+0xfa>
 8014e18:	2b10      	cmp	r3, #16
 8014e1a:	d10c      	bne.n	8014e36 <_strtol_l.isra.0+0x5e>
 8014e1c:	2c30      	cmp	r4, #48	; 0x30
 8014e1e:	d10a      	bne.n	8014e36 <_strtol_l.isra.0+0x5e>
 8014e20:	f89e 4000 	ldrb.w	r4, [lr]
 8014e24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014e28:	2c58      	cmp	r4, #88	; 0x58
 8014e2a:	d14d      	bne.n	8014ec8 <_strtol_l.isra.0+0xf0>
 8014e2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014e30:	2310      	movs	r3, #16
 8014e32:	f10e 0e02 	add.w	lr, lr, #2
 8014e36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8014e3a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8014e3e:	2600      	movs	r6, #0
 8014e40:	fbbc f9f3 	udiv	r9, ip, r3
 8014e44:	4635      	mov	r5, r6
 8014e46:	fb03 ca19 	mls	sl, r3, r9, ip
 8014e4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014e4e:	2f09      	cmp	r7, #9
 8014e50:	d818      	bhi.n	8014e84 <_strtol_l.isra.0+0xac>
 8014e52:	463c      	mov	r4, r7
 8014e54:	42a3      	cmp	r3, r4
 8014e56:	dd24      	ble.n	8014ea2 <_strtol_l.isra.0+0xca>
 8014e58:	2e00      	cmp	r6, #0
 8014e5a:	db1f      	blt.n	8014e9c <_strtol_l.isra.0+0xc4>
 8014e5c:	45a9      	cmp	r9, r5
 8014e5e:	d31d      	bcc.n	8014e9c <_strtol_l.isra.0+0xc4>
 8014e60:	d101      	bne.n	8014e66 <_strtol_l.isra.0+0x8e>
 8014e62:	45a2      	cmp	sl, r4
 8014e64:	db1a      	blt.n	8014e9c <_strtol_l.isra.0+0xc4>
 8014e66:	fb05 4503 	mla	r5, r5, r3, r4
 8014e6a:	2601      	movs	r6, #1
 8014e6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014e70:	e7eb      	b.n	8014e4a <_strtol_l.isra.0+0x72>
 8014e72:	2c2b      	cmp	r4, #43	; 0x2b
 8014e74:	bf08      	it	eq
 8014e76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8014e7a:	46a8      	mov	r8, r5
 8014e7c:	bf08      	it	eq
 8014e7e:	f106 0e02 	addeq.w	lr, r6, #2
 8014e82:	e7c7      	b.n	8014e14 <_strtol_l.isra.0+0x3c>
 8014e84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014e88:	2f19      	cmp	r7, #25
 8014e8a:	d801      	bhi.n	8014e90 <_strtol_l.isra.0+0xb8>
 8014e8c:	3c37      	subs	r4, #55	; 0x37
 8014e8e:	e7e1      	b.n	8014e54 <_strtol_l.isra.0+0x7c>
 8014e90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014e94:	2f19      	cmp	r7, #25
 8014e96:	d804      	bhi.n	8014ea2 <_strtol_l.isra.0+0xca>
 8014e98:	3c57      	subs	r4, #87	; 0x57
 8014e9a:	e7db      	b.n	8014e54 <_strtol_l.isra.0+0x7c>
 8014e9c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8014ea0:	e7e4      	b.n	8014e6c <_strtol_l.isra.0+0x94>
 8014ea2:	2e00      	cmp	r6, #0
 8014ea4:	da05      	bge.n	8014eb2 <_strtol_l.isra.0+0xda>
 8014ea6:	2322      	movs	r3, #34	; 0x22
 8014ea8:	6003      	str	r3, [r0, #0]
 8014eaa:	4665      	mov	r5, ip
 8014eac:	b942      	cbnz	r2, 8014ec0 <_strtol_l.isra.0+0xe8>
 8014eae:	4628      	mov	r0, r5
 8014eb0:	e79d      	b.n	8014dee <_strtol_l.isra.0+0x16>
 8014eb2:	f1b8 0f00 	cmp.w	r8, #0
 8014eb6:	d000      	beq.n	8014eba <_strtol_l.isra.0+0xe2>
 8014eb8:	426d      	negs	r5, r5
 8014eba:	2a00      	cmp	r2, #0
 8014ebc:	d0f7      	beq.n	8014eae <_strtol_l.isra.0+0xd6>
 8014ebe:	b10e      	cbz	r6, 8014ec4 <_strtol_l.isra.0+0xec>
 8014ec0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8014ec4:	6011      	str	r1, [r2, #0]
 8014ec6:	e7f2      	b.n	8014eae <_strtol_l.isra.0+0xd6>
 8014ec8:	2430      	movs	r4, #48	; 0x30
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d1b3      	bne.n	8014e36 <_strtol_l.isra.0+0x5e>
 8014ece:	2308      	movs	r3, #8
 8014ed0:	e7b1      	b.n	8014e36 <_strtol_l.isra.0+0x5e>
 8014ed2:	2c30      	cmp	r4, #48	; 0x30
 8014ed4:	d0a4      	beq.n	8014e20 <_strtol_l.isra.0+0x48>
 8014ed6:	230a      	movs	r3, #10
 8014ed8:	e7ad      	b.n	8014e36 <_strtol_l.isra.0+0x5e>
 8014eda:	bf00      	nop
 8014edc:	080187d9 	.word	0x080187d9

08014ee0 <_strtol_r>:
 8014ee0:	f7ff bf7a 	b.w	8014dd8 <_strtol_l.isra.0>

08014ee4 <_user_strerror>:
 8014ee4:	2000      	movs	r0, #0
 8014ee6:	4770      	bx	lr

08014ee8 <_vsniprintf_r>:
 8014ee8:	b530      	push	{r4, r5, lr}
 8014eea:	1e14      	subs	r4, r2, #0
 8014eec:	4605      	mov	r5, r0
 8014eee:	b09b      	sub	sp, #108	; 0x6c
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	da05      	bge.n	8014f00 <_vsniprintf_r+0x18>
 8014ef4:	238b      	movs	r3, #139	; 0x8b
 8014ef6:	602b      	str	r3, [r5, #0]
 8014ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014efc:	b01b      	add	sp, #108	; 0x6c
 8014efe:	bd30      	pop	{r4, r5, pc}
 8014f00:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014f04:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014f08:	bf14      	ite	ne
 8014f0a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8014f0e:	4623      	moveq	r3, r4
 8014f10:	9302      	str	r3, [sp, #8]
 8014f12:	9305      	str	r3, [sp, #20]
 8014f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f18:	9100      	str	r1, [sp, #0]
 8014f1a:	9104      	str	r1, [sp, #16]
 8014f1c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014f20:	4602      	mov	r2, r0
 8014f22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014f24:	4669      	mov	r1, sp
 8014f26:	4628      	mov	r0, r5
 8014f28:	f002 f8cc 	bl	80170c4 <_svfiprintf_r>
 8014f2c:	1c43      	adds	r3, r0, #1
 8014f2e:	bfbc      	itt	lt
 8014f30:	238b      	movlt	r3, #139	; 0x8b
 8014f32:	602b      	strlt	r3, [r5, #0]
 8014f34:	2c00      	cmp	r4, #0
 8014f36:	d0e1      	beq.n	8014efc <_vsniprintf_r+0x14>
 8014f38:	9b00      	ldr	r3, [sp, #0]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	701a      	strb	r2, [r3, #0]
 8014f3e:	e7dd      	b.n	8014efc <_vsniprintf_r+0x14>

08014f40 <vsniprintf>:
 8014f40:	b507      	push	{r0, r1, r2, lr}
 8014f42:	9300      	str	r3, [sp, #0]
 8014f44:	4613      	mov	r3, r2
 8014f46:	460a      	mov	r2, r1
 8014f48:	4601      	mov	r1, r0
 8014f4a:	4803      	ldr	r0, [pc, #12]	; (8014f58 <vsniprintf+0x18>)
 8014f4c:	6800      	ldr	r0, [r0, #0]
 8014f4e:	f7ff ffcb 	bl	8014ee8 <_vsniprintf_r>
 8014f52:	b003      	add	sp, #12
 8014f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f58:	2000006c 	.word	0x2000006c

08014f5c <__swbuf_r>:
 8014f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f5e:	460e      	mov	r6, r1
 8014f60:	4614      	mov	r4, r2
 8014f62:	4605      	mov	r5, r0
 8014f64:	b118      	cbz	r0, 8014f6e <__swbuf_r+0x12>
 8014f66:	6983      	ldr	r3, [r0, #24]
 8014f68:	b90b      	cbnz	r3, 8014f6e <__swbuf_r+0x12>
 8014f6a:	f7fd fb4b 	bl	8012604 <__sinit>
 8014f6e:	4b21      	ldr	r3, [pc, #132]	; (8014ff4 <__swbuf_r+0x98>)
 8014f70:	429c      	cmp	r4, r3
 8014f72:	d12b      	bne.n	8014fcc <__swbuf_r+0x70>
 8014f74:	686c      	ldr	r4, [r5, #4]
 8014f76:	69a3      	ldr	r3, [r4, #24]
 8014f78:	60a3      	str	r3, [r4, #8]
 8014f7a:	89a3      	ldrh	r3, [r4, #12]
 8014f7c:	071a      	lsls	r2, r3, #28
 8014f7e:	d52f      	bpl.n	8014fe0 <__swbuf_r+0x84>
 8014f80:	6923      	ldr	r3, [r4, #16]
 8014f82:	b36b      	cbz	r3, 8014fe0 <__swbuf_r+0x84>
 8014f84:	6923      	ldr	r3, [r4, #16]
 8014f86:	6820      	ldr	r0, [r4, #0]
 8014f88:	1ac0      	subs	r0, r0, r3
 8014f8a:	6963      	ldr	r3, [r4, #20]
 8014f8c:	b2f6      	uxtb	r6, r6
 8014f8e:	4283      	cmp	r3, r0
 8014f90:	4637      	mov	r7, r6
 8014f92:	dc04      	bgt.n	8014f9e <__swbuf_r+0x42>
 8014f94:	4621      	mov	r1, r4
 8014f96:	4628      	mov	r0, r5
 8014f98:	f7fd faa0 	bl	80124dc <_fflush_r>
 8014f9c:	bb30      	cbnz	r0, 8014fec <__swbuf_r+0x90>
 8014f9e:	68a3      	ldr	r3, [r4, #8]
 8014fa0:	3b01      	subs	r3, #1
 8014fa2:	60a3      	str	r3, [r4, #8]
 8014fa4:	6823      	ldr	r3, [r4, #0]
 8014fa6:	1c5a      	adds	r2, r3, #1
 8014fa8:	6022      	str	r2, [r4, #0]
 8014faa:	701e      	strb	r6, [r3, #0]
 8014fac:	6963      	ldr	r3, [r4, #20]
 8014fae:	3001      	adds	r0, #1
 8014fb0:	4283      	cmp	r3, r0
 8014fb2:	d004      	beq.n	8014fbe <__swbuf_r+0x62>
 8014fb4:	89a3      	ldrh	r3, [r4, #12]
 8014fb6:	07db      	lsls	r3, r3, #31
 8014fb8:	d506      	bpl.n	8014fc8 <__swbuf_r+0x6c>
 8014fba:	2e0a      	cmp	r6, #10
 8014fbc:	d104      	bne.n	8014fc8 <__swbuf_r+0x6c>
 8014fbe:	4621      	mov	r1, r4
 8014fc0:	4628      	mov	r0, r5
 8014fc2:	f7fd fa8b 	bl	80124dc <_fflush_r>
 8014fc6:	b988      	cbnz	r0, 8014fec <__swbuf_r+0x90>
 8014fc8:	4638      	mov	r0, r7
 8014fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fcc:	4b0a      	ldr	r3, [pc, #40]	; (8014ff8 <__swbuf_r+0x9c>)
 8014fce:	429c      	cmp	r4, r3
 8014fd0:	d101      	bne.n	8014fd6 <__swbuf_r+0x7a>
 8014fd2:	68ac      	ldr	r4, [r5, #8]
 8014fd4:	e7cf      	b.n	8014f76 <__swbuf_r+0x1a>
 8014fd6:	4b09      	ldr	r3, [pc, #36]	; (8014ffc <__swbuf_r+0xa0>)
 8014fd8:	429c      	cmp	r4, r3
 8014fda:	bf08      	it	eq
 8014fdc:	68ec      	ldreq	r4, [r5, #12]
 8014fde:	e7ca      	b.n	8014f76 <__swbuf_r+0x1a>
 8014fe0:	4621      	mov	r1, r4
 8014fe2:	4628      	mov	r0, r5
 8014fe4:	f000 f81e 	bl	8015024 <__swsetup_r>
 8014fe8:	2800      	cmp	r0, #0
 8014fea:	d0cb      	beq.n	8014f84 <__swbuf_r+0x28>
 8014fec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014ff0:	e7ea      	b.n	8014fc8 <__swbuf_r+0x6c>
 8014ff2:	bf00      	nop
 8014ff4:	08018064 	.word	0x08018064
 8014ff8:	08018084 	.word	0x08018084
 8014ffc:	08018044 	.word	0x08018044

08015000 <_write_r>:
 8015000:	b538      	push	{r3, r4, r5, lr}
 8015002:	4d07      	ldr	r5, [pc, #28]	; (8015020 <_write_r+0x20>)
 8015004:	4604      	mov	r4, r0
 8015006:	4608      	mov	r0, r1
 8015008:	4611      	mov	r1, r2
 801500a:	2200      	movs	r2, #0
 801500c:	602a      	str	r2, [r5, #0]
 801500e:	461a      	mov	r2, r3
 8015010:	f7f4 f9b6 	bl	8009380 <_write>
 8015014:	1c43      	adds	r3, r0, #1
 8015016:	d102      	bne.n	801501e <_write_r+0x1e>
 8015018:	682b      	ldr	r3, [r5, #0]
 801501a:	b103      	cbz	r3, 801501e <_write_r+0x1e>
 801501c:	6023      	str	r3, [r4, #0]
 801501e:	bd38      	pop	{r3, r4, r5, pc}
 8015020:	200208c0 	.word	0x200208c0

08015024 <__swsetup_r>:
 8015024:	4b32      	ldr	r3, [pc, #200]	; (80150f0 <__swsetup_r+0xcc>)
 8015026:	b570      	push	{r4, r5, r6, lr}
 8015028:	681d      	ldr	r5, [r3, #0]
 801502a:	4606      	mov	r6, r0
 801502c:	460c      	mov	r4, r1
 801502e:	b125      	cbz	r5, 801503a <__swsetup_r+0x16>
 8015030:	69ab      	ldr	r3, [r5, #24]
 8015032:	b913      	cbnz	r3, 801503a <__swsetup_r+0x16>
 8015034:	4628      	mov	r0, r5
 8015036:	f7fd fae5 	bl	8012604 <__sinit>
 801503a:	4b2e      	ldr	r3, [pc, #184]	; (80150f4 <__swsetup_r+0xd0>)
 801503c:	429c      	cmp	r4, r3
 801503e:	d10f      	bne.n	8015060 <__swsetup_r+0x3c>
 8015040:	686c      	ldr	r4, [r5, #4]
 8015042:	89a3      	ldrh	r3, [r4, #12]
 8015044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015048:	0719      	lsls	r1, r3, #28
 801504a:	d42c      	bmi.n	80150a6 <__swsetup_r+0x82>
 801504c:	06dd      	lsls	r5, r3, #27
 801504e:	d411      	bmi.n	8015074 <__swsetup_r+0x50>
 8015050:	2309      	movs	r3, #9
 8015052:	6033      	str	r3, [r6, #0]
 8015054:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015058:	81a3      	strh	r3, [r4, #12]
 801505a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801505e:	e03e      	b.n	80150de <__swsetup_r+0xba>
 8015060:	4b25      	ldr	r3, [pc, #148]	; (80150f8 <__swsetup_r+0xd4>)
 8015062:	429c      	cmp	r4, r3
 8015064:	d101      	bne.n	801506a <__swsetup_r+0x46>
 8015066:	68ac      	ldr	r4, [r5, #8]
 8015068:	e7eb      	b.n	8015042 <__swsetup_r+0x1e>
 801506a:	4b24      	ldr	r3, [pc, #144]	; (80150fc <__swsetup_r+0xd8>)
 801506c:	429c      	cmp	r4, r3
 801506e:	bf08      	it	eq
 8015070:	68ec      	ldreq	r4, [r5, #12]
 8015072:	e7e6      	b.n	8015042 <__swsetup_r+0x1e>
 8015074:	0758      	lsls	r0, r3, #29
 8015076:	d512      	bpl.n	801509e <__swsetup_r+0x7a>
 8015078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801507a:	b141      	cbz	r1, 801508e <__swsetup_r+0x6a>
 801507c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015080:	4299      	cmp	r1, r3
 8015082:	d002      	beq.n	801508a <__swsetup_r+0x66>
 8015084:	4630      	mov	r0, r6
 8015086:	f7fd fc2f 	bl	80128e8 <_free_r>
 801508a:	2300      	movs	r3, #0
 801508c:	6363      	str	r3, [r4, #52]	; 0x34
 801508e:	89a3      	ldrh	r3, [r4, #12]
 8015090:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015094:	81a3      	strh	r3, [r4, #12]
 8015096:	2300      	movs	r3, #0
 8015098:	6063      	str	r3, [r4, #4]
 801509a:	6923      	ldr	r3, [r4, #16]
 801509c:	6023      	str	r3, [r4, #0]
 801509e:	89a3      	ldrh	r3, [r4, #12]
 80150a0:	f043 0308 	orr.w	r3, r3, #8
 80150a4:	81a3      	strh	r3, [r4, #12]
 80150a6:	6923      	ldr	r3, [r4, #16]
 80150a8:	b94b      	cbnz	r3, 80150be <__swsetup_r+0x9a>
 80150aa:	89a3      	ldrh	r3, [r4, #12]
 80150ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80150b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80150b4:	d003      	beq.n	80150be <__swsetup_r+0x9a>
 80150b6:	4621      	mov	r1, r4
 80150b8:	4630      	mov	r0, r6
 80150ba:	f7fd fb9f 	bl	80127fc <__smakebuf_r>
 80150be:	89a0      	ldrh	r0, [r4, #12]
 80150c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80150c4:	f010 0301 	ands.w	r3, r0, #1
 80150c8:	d00a      	beq.n	80150e0 <__swsetup_r+0xbc>
 80150ca:	2300      	movs	r3, #0
 80150cc:	60a3      	str	r3, [r4, #8]
 80150ce:	6963      	ldr	r3, [r4, #20]
 80150d0:	425b      	negs	r3, r3
 80150d2:	61a3      	str	r3, [r4, #24]
 80150d4:	6923      	ldr	r3, [r4, #16]
 80150d6:	b943      	cbnz	r3, 80150ea <__swsetup_r+0xc6>
 80150d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80150dc:	d1ba      	bne.n	8015054 <__swsetup_r+0x30>
 80150de:	bd70      	pop	{r4, r5, r6, pc}
 80150e0:	0781      	lsls	r1, r0, #30
 80150e2:	bf58      	it	pl
 80150e4:	6963      	ldrpl	r3, [r4, #20]
 80150e6:	60a3      	str	r3, [r4, #8]
 80150e8:	e7f4      	b.n	80150d4 <__swsetup_r+0xb0>
 80150ea:	2000      	movs	r0, #0
 80150ec:	e7f7      	b.n	80150de <__swsetup_r+0xba>
 80150ee:	bf00      	nop
 80150f0:	2000006c 	.word	0x2000006c
 80150f4:	08018064 	.word	0x08018064
 80150f8:	08018084 	.word	0x08018084
 80150fc:	08018044 	.word	0x08018044

08015100 <_close_r>:
 8015100:	b538      	push	{r3, r4, r5, lr}
 8015102:	4d06      	ldr	r5, [pc, #24]	; (801511c <_close_r+0x1c>)
 8015104:	2300      	movs	r3, #0
 8015106:	4604      	mov	r4, r0
 8015108:	4608      	mov	r0, r1
 801510a:	602b      	str	r3, [r5, #0]
 801510c:	f002 fd98 	bl	8017c40 <_close>
 8015110:	1c43      	adds	r3, r0, #1
 8015112:	d102      	bne.n	801511a <_close_r+0x1a>
 8015114:	682b      	ldr	r3, [r5, #0]
 8015116:	b103      	cbz	r3, 801511a <_close_r+0x1a>
 8015118:	6023      	str	r3, [r4, #0]
 801511a:	bd38      	pop	{r3, r4, r5, pc}
 801511c:	200208c0 	.word	0x200208c0

08015120 <quorem>:
 8015120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015124:	6903      	ldr	r3, [r0, #16]
 8015126:	690c      	ldr	r4, [r1, #16]
 8015128:	42a3      	cmp	r3, r4
 801512a:	4607      	mov	r7, r0
 801512c:	f2c0 8081 	blt.w	8015232 <quorem+0x112>
 8015130:	3c01      	subs	r4, #1
 8015132:	f101 0814 	add.w	r8, r1, #20
 8015136:	f100 0514 	add.w	r5, r0, #20
 801513a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801513e:	9301      	str	r3, [sp, #4]
 8015140:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015144:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015148:	3301      	adds	r3, #1
 801514a:	429a      	cmp	r2, r3
 801514c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015150:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015154:	fbb2 f6f3 	udiv	r6, r2, r3
 8015158:	d331      	bcc.n	80151be <quorem+0x9e>
 801515a:	f04f 0e00 	mov.w	lr, #0
 801515e:	4640      	mov	r0, r8
 8015160:	46ac      	mov	ip, r5
 8015162:	46f2      	mov	sl, lr
 8015164:	f850 2b04 	ldr.w	r2, [r0], #4
 8015168:	b293      	uxth	r3, r2
 801516a:	fb06 e303 	mla	r3, r6, r3, lr
 801516e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015172:	b29b      	uxth	r3, r3
 8015174:	ebaa 0303 	sub.w	r3, sl, r3
 8015178:	0c12      	lsrs	r2, r2, #16
 801517a:	f8dc a000 	ldr.w	sl, [ip]
 801517e:	fb06 e202 	mla	r2, r6, r2, lr
 8015182:	fa13 f38a 	uxtah	r3, r3, sl
 8015186:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801518a:	fa1f fa82 	uxth.w	sl, r2
 801518e:	f8dc 2000 	ldr.w	r2, [ip]
 8015192:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8015196:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801519a:	b29b      	uxth	r3, r3
 801519c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80151a0:	4581      	cmp	r9, r0
 80151a2:	f84c 3b04 	str.w	r3, [ip], #4
 80151a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80151aa:	d2db      	bcs.n	8015164 <quorem+0x44>
 80151ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80151b0:	b92b      	cbnz	r3, 80151be <quorem+0x9e>
 80151b2:	9b01      	ldr	r3, [sp, #4]
 80151b4:	3b04      	subs	r3, #4
 80151b6:	429d      	cmp	r5, r3
 80151b8:	461a      	mov	r2, r3
 80151ba:	d32e      	bcc.n	801521a <quorem+0xfa>
 80151bc:	613c      	str	r4, [r7, #16]
 80151be:	4638      	mov	r0, r7
 80151c0:	f001 fd0c 	bl	8016bdc <__mcmp>
 80151c4:	2800      	cmp	r0, #0
 80151c6:	db24      	blt.n	8015212 <quorem+0xf2>
 80151c8:	3601      	adds	r6, #1
 80151ca:	4628      	mov	r0, r5
 80151cc:	f04f 0c00 	mov.w	ip, #0
 80151d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80151d4:	f8d0 e000 	ldr.w	lr, [r0]
 80151d8:	b293      	uxth	r3, r2
 80151da:	ebac 0303 	sub.w	r3, ip, r3
 80151de:	0c12      	lsrs	r2, r2, #16
 80151e0:	fa13 f38e 	uxtah	r3, r3, lr
 80151e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80151e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80151ec:	b29b      	uxth	r3, r3
 80151ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80151f2:	45c1      	cmp	r9, r8
 80151f4:	f840 3b04 	str.w	r3, [r0], #4
 80151f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80151fc:	d2e8      	bcs.n	80151d0 <quorem+0xb0>
 80151fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015206:	b922      	cbnz	r2, 8015212 <quorem+0xf2>
 8015208:	3b04      	subs	r3, #4
 801520a:	429d      	cmp	r5, r3
 801520c:	461a      	mov	r2, r3
 801520e:	d30a      	bcc.n	8015226 <quorem+0x106>
 8015210:	613c      	str	r4, [r7, #16]
 8015212:	4630      	mov	r0, r6
 8015214:	b003      	add	sp, #12
 8015216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801521a:	6812      	ldr	r2, [r2, #0]
 801521c:	3b04      	subs	r3, #4
 801521e:	2a00      	cmp	r2, #0
 8015220:	d1cc      	bne.n	80151bc <quorem+0x9c>
 8015222:	3c01      	subs	r4, #1
 8015224:	e7c7      	b.n	80151b6 <quorem+0x96>
 8015226:	6812      	ldr	r2, [r2, #0]
 8015228:	3b04      	subs	r3, #4
 801522a:	2a00      	cmp	r2, #0
 801522c:	d1f0      	bne.n	8015210 <quorem+0xf0>
 801522e:	3c01      	subs	r4, #1
 8015230:	e7eb      	b.n	801520a <quorem+0xea>
 8015232:	2000      	movs	r0, #0
 8015234:	e7ee      	b.n	8015214 <quorem+0xf4>
	...

08015238 <_dtoa_r>:
 8015238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801523c:	ed2d 8b02 	vpush	{d8}
 8015240:	ec57 6b10 	vmov	r6, r7, d0
 8015244:	b095      	sub	sp, #84	; 0x54
 8015246:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015248:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801524c:	9105      	str	r1, [sp, #20]
 801524e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8015252:	4604      	mov	r4, r0
 8015254:	9209      	str	r2, [sp, #36]	; 0x24
 8015256:	930f      	str	r3, [sp, #60]	; 0x3c
 8015258:	b975      	cbnz	r5, 8015278 <_dtoa_r+0x40>
 801525a:	2010      	movs	r0, #16
 801525c:	f7fd fb0e 	bl	801287c <malloc>
 8015260:	4602      	mov	r2, r0
 8015262:	6260      	str	r0, [r4, #36]	; 0x24
 8015264:	b920      	cbnz	r0, 8015270 <_dtoa_r+0x38>
 8015266:	4bb2      	ldr	r3, [pc, #712]	; (8015530 <_dtoa_r+0x2f8>)
 8015268:	21ea      	movs	r1, #234	; 0xea
 801526a:	48b2      	ldr	r0, [pc, #712]	; (8015534 <_dtoa_r+0x2fc>)
 801526c:	f002 fc76 	bl	8017b5c <__assert_func>
 8015270:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015274:	6005      	str	r5, [r0, #0]
 8015276:	60c5      	str	r5, [r0, #12]
 8015278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801527a:	6819      	ldr	r1, [r3, #0]
 801527c:	b151      	cbz	r1, 8015294 <_dtoa_r+0x5c>
 801527e:	685a      	ldr	r2, [r3, #4]
 8015280:	604a      	str	r2, [r1, #4]
 8015282:	2301      	movs	r3, #1
 8015284:	4093      	lsls	r3, r2
 8015286:	608b      	str	r3, [r1, #8]
 8015288:	4620      	mov	r0, r4
 801528a:	f001 fa1f 	bl	80166cc <_Bfree>
 801528e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015290:	2200      	movs	r2, #0
 8015292:	601a      	str	r2, [r3, #0]
 8015294:	1e3b      	subs	r3, r7, #0
 8015296:	bfb9      	ittee	lt
 8015298:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801529c:	9303      	strlt	r3, [sp, #12]
 801529e:	2300      	movge	r3, #0
 80152a0:	f8c8 3000 	strge.w	r3, [r8]
 80152a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80152a8:	4ba3      	ldr	r3, [pc, #652]	; (8015538 <_dtoa_r+0x300>)
 80152aa:	bfbc      	itt	lt
 80152ac:	2201      	movlt	r2, #1
 80152ae:	f8c8 2000 	strlt.w	r2, [r8]
 80152b2:	ea33 0309 	bics.w	r3, r3, r9
 80152b6:	d11b      	bne.n	80152f0 <_dtoa_r+0xb8>
 80152b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80152ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80152be:	6013      	str	r3, [r2, #0]
 80152c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80152c4:	4333      	orrs	r3, r6
 80152c6:	f000 857a 	beq.w	8015dbe <_dtoa_r+0xb86>
 80152ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152cc:	b963      	cbnz	r3, 80152e8 <_dtoa_r+0xb0>
 80152ce:	4b9b      	ldr	r3, [pc, #620]	; (801553c <_dtoa_r+0x304>)
 80152d0:	e024      	b.n	801531c <_dtoa_r+0xe4>
 80152d2:	4b9b      	ldr	r3, [pc, #620]	; (8015540 <_dtoa_r+0x308>)
 80152d4:	9300      	str	r3, [sp, #0]
 80152d6:	3308      	adds	r3, #8
 80152d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80152da:	6013      	str	r3, [r2, #0]
 80152dc:	9800      	ldr	r0, [sp, #0]
 80152de:	b015      	add	sp, #84	; 0x54
 80152e0:	ecbd 8b02 	vpop	{d8}
 80152e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e8:	4b94      	ldr	r3, [pc, #592]	; (801553c <_dtoa_r+0x304>)
 80152ea:	9300      	str	r3, [sp, #0]
 80152ec:	3303      	adds	r3, #3
 80152ee:	e7f3      	b.n	80152d8 <_dtoa_r+0xa0>
 80152f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80152f4:	2200      	movs	r2, #0
 80152f6:	ec51 0b17 	vmov	r0, r1, d7
 80152fa:	2300      	movs	r3, #0
 80152fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015300:	f7eb fbf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8015304:	4680      	mov	r8, r0
 8015306:	b158      	cbz	r0, 8015320 <_dtoa_r+0xe8>
 8015308:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801530a:	2301      	movs	r3, #1
 801530c:	6013      	str	r3, [r2, #0]
 801530e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015310:	2b00      	cmp	r3, #0
 8015312:	f000 8551 	beq.w	8015db8 <_dtoa_r+0xb80>
 8015316:	488b      	ldr	r0, [pc, #556]	; (8015544 <_dtoa_r+0x30c>)
 8015318:	6018      	str	r0, [r3, #0]
 801531a:	1e43      	subs	r3, r0, #1
 801531c:	9300      	str	r3, [sp, #0]
 801531e:	e7dd      	b.n	80152dc <_dtoa_r+0xa4>
 8015320:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015324:	aa12      	add	r2, sp, #72	; 0x48
 8015326:	a913      	add	r1, sp, #76	; 0x4c
 8015328:	4620      	mov	r0, r4
 801532a:	f001 fd77 	bl	8016e1c <__d2b>
 801532e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015332:	4683      	mov	fp, r0
 8015334:	2d00      	cmp	r5, #0
 8015336:	d07c      	beq.n	8015432 <_dtoa_r+0x1fa>
 8015338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801533a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801533e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015342:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8015346:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801534a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801534e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015352:	4b7d      	ldr	r3, [pc, #500]	; (8015548 <_dtoa_r+0x310>)
 8015354:	2200      	movs	r2, #0
 8015356:	4630      	mov	r0, r6
 8015358:	4639      	mov	r1, r7
 801535a:	f7ea ffa5 	bl	80002a8 <__aeabi_dsub>
 801535e:	a36e      	add	r3, pc, #440	; (adr r3, 8015518 <_dtoa_r+0x2e0>)
 8015360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015364:	f7eb f958 	bl	8000618 <__aeabi_dmul>
 8015368:	a36d      	add	r3, pc, #436	; (adr r3, 8015520 <_dtoa_r+0x2e8>)
 801536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536e:	f7ea ff9d 	bl	80002ac <__adddf3>
 8015372:	4606      	mov	r6, r0
 8015374:	4628      	mov	r0, r5
 8015376:	460f      	mov	r7, r1
 8015378:	f7eb f8e4 	bl	8000544 <__aeabi_i2d>
 801537c:	a36a      	add	r3, pc, #424	; (adr r3, 8015528 <_dtoa_r+0x2f0>)
 801537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015382:	f7eb f949 	bl	8000618 <__aeabi_dmul>
 8015386:	4602      	mov	r2, r0
 8015388:	460b      	mov	r3, r1
 801538a:	4630      	mov	r0, r6
 801538c:	4639      	mov	r1, r7
 801538e:	f7ea ff8d 	bl	80002ac <__adddf3>
 8015392:	4606      	mov	r6, r0
 8015394:	460f      	mov	r7, r1
 8015396:	f7eb fbef 	bl	8000b78 <__aeabi_d2iz>
 801539a:	2200      	movs	r2, #0
 801539c:	4682      	mov	sl, r0
 801539e:	2300      	movs	r3, #0
 80153a0:	4630      	mov	r0, r6
 80153a2:	4639      	mov	r1, r7
 80153a4:	f7eb fbaa 	bl	8000afc <__aeabi_dcmplt>
 80153a8:	b148      	cbz	r0, 80153be <_dtoa_r+0x186>
 80153aa:	4650      	mov	r0, sl
 80153ac:	f7eb f8ca 	bl	8000544 <__aeabi_i2d>
 80153b0:	4632      	mov	r2, r6
 80153b2:	463b      	mov	r3, r7
 80153b4:	f7eb fb98 	bl	8000ae8 <__aeabi_dcmpeq>
 80153b8:	b908      	cbnz	r0, 80153be <_dtoa_r+0x186>
 80153ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80153be:	f1ba 0f16 	cmp.w	sl, #22
 80153c2:	d854      	bhi.n	801546e <_dtoa_r+0x236>
 80153c4:	4b61      	ldr	r3, [pc, #388]	; (801554c <_dtoa_r+0x314>)
 80153c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80153ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80153d2:	f7eb fb93 	bl	8000afc <__aeabi_dcmplt>
 80153d6:	2800      	cmp	r0, #0
 80153d8:	d04b      	beq.n	8015472 <_dtoa_r+0x23a>
 80153da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80153de:	2300      	movs	r3, #0
 80153e0:	930e      	str	r3, [sp, #56]	; 0x38
 80153e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80153e4:	1b5d      	subs	r5, r3, r5
 80153e6:	1e6b      	subs	r3, r5, #1
 80153e8:	9304      	str	r3, [sp, #16]
 80153ea:	bf43      	ittte	mi
 80153ec:	2300      	movmi	r3, #0
 80153ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80153f2:	9304      	strmi	r3, [sp, #16]
 80153f4:	f04f 0800 	movpl.w	r8, #0
 80153f8:	f1ba 0f00 	cmp.w	sl, #0
 80153fc:	db3b      	blt.n	8015476 <_dtoa_r+0x23e>
 80153fe:	9b04      	ldr	r3, [sp, #16]
 8015400:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8015404:	4453      	add	r3, sl
 8015406:	9304      	str	r3, [sp, #16]
 8015408:	2300      	movs	r3, #0
 801540a:	9306      	str	r3, [sp, #24]
 801540c:	9b05      	ldr	r3, [sp, #20]
 801540e:	2b09      	cmp	r3, #9
 8015410:	d869      	bhi.n	80154e6 <_dtoa_r+0x2ae>
 8015412:	2b05      	cmp	r3, #5
 8015414:	bfc4      	itt	gt
 8015416:	3b04      	subgt	r3, #4
 8015418:	9305      	strgt	r3, [sp, #20]
 801541a:	9b05      	ldr	r3, [sp, #20]
 801541c:	f1a3 0302 	sub.w	r3, r3, #2
 8015420:	bfcc      	ite	gt
 8015422:	2500      	movgt	r5, #0
 8015424:	2501      	movle	r5, #1
 8015426:	2b03      	cmp	r3, #3
 8015428:	d869      	bhi.n	80154fe <_dtoa_r+0x2c6>
 801542a:	e8df f003 	tbb	[pc, r3]
 801542e:	4e2c      	.short	0x4e2c
 8015430:	5a4c      	.short	0x5a4c
 8015432:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8015436:	441d      	add	r5, r3
 8015438:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801543c:	2b20      	cmp	r3, #32
 801543e:	bfc1      	itttt	gt
 8015440:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015444:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015448:	fa09 f303 	lslgt.w	r3, r9, r3
 801544c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015450:	bfda      	itte	le
 8015452:	f1c3 0320 	rsble	r3, r3, #32
 8015456:	fa06 f003 	lslle.w	r0, r6, r3
 801545a:	4318      	orrgt	r0, r3
 801545c:	f7eb f862 	bl	8000524 <__aeabi_ui2d>
 8015460:	2301      	movs	r3, #1
 8015462:	4606      	mov	r6, r0
 8015464:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015468:	3d01      	subs	r5, #1
 801546a:	9310      	str	r3, [sp, #64]	; 0x40
 801546c:	e771      	b.n	8015352 <_dtoa_r+0x11a>
 801546e:	2301      	movs	r3, #1
 8015470:	e7b6      	b.n	80153e0 <_dtoa_r+0x1a8>
 8015472:	900e      	str	r0, [sp, #56]	; 0x38
 8015474:	e7b5      	b.n	80153e2 <_dtoa_r+0x1aa>
 8015476:	f1ca 0300 	rsb	r3, sl, #0
 801547a:	9306      	str	r3, [sp, #24]
 801547c:	2300      	movs	r3, #0
 801547e:	eba8 080a 	sub.w	r8, r8, sl
 8015482:	930d      	str	r3, [sp, #52]	; 0x34
 8015484:	e7c2      	b.n	801540c <_dtoa_r+0x1d4>
 8015486:	2300      	movs	r3, #0
 8015488:	9308      	str	r3, [sp, #32]
 801548a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801548c:	2b00      	cmp	r3, #0
 801548e:	dc39      	bgt.n	8015504 <_dtoa_r+0x2cc>
 8015490:	f04f 0901 	mov.w	r9, #1
 8015494:	f8cd 9004 	str.w	r9, [sp, #4]
 8015498:	464b      	mov	r3, r9
 801549a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801549e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80154a0:	2200      	movs	r2, #0
 80154a2:	6042      	str	r2, [r0, #4]
 80154a4:	2204      	movs	r2, #4
 80154a6:	f102 0614 	add.w	r6, r2, #20
 80154aa:	429e      	cmp	r6, r3
 80154ac:	6841      	ldr	r1, [r0, #4]
 80154ae:	d92f      	bls.n	8015510 <_dtoa_r+0x2d8>
 80154b0:	4620      	mov	r0, r4
 80154b2:	f001 f8cb 	bl	801664c <_Balloc>
 80154b6:	9000      	str	r0, [sp, #0]
 80154b8:	2800      	cmp	r0, #0
 80154ba:	d14b      	bne.n	8015554 <_dtoa_r+0x31c>
 80154bc:	4b24      	ldr	r3, [pc, #144]	; (8015550 <_dtoa_r+0x318>)
 80154be:	4602      	mov	r2, r0
 80154c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80154c4:	e6d1      	b.n	801526a <_dtoa_r+0x32>
 80154c6:	2301      	movs	r3, #1
 80154c8:	e7de      	b.n	8015488 <_dtoa_r+0x250>
 80154ca:	2300      	movs	r3, #0
 80154cc:	9308      	str	r3, [sp, #32]
 80154ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154d0:	eb0a 0903 	add.w	r9, sl, r3
 80154d4:	f109 0301 	add.w	r3, r9, #1
 80154d8:	2b01      	cmp	r3, #1
 80154da:	9301      	str	r3, [sp, #4]
 80154dc:	bfb8      	it	lt
 80154de:	2301      	movlt	r3, #1
 80154e0:	e7dd      	b.n	801549e <_dtoa_r+0x266>
 80154e2:	2301      	movs	r3, #1
 80154e4:	e7f2      	b.n	80154cc <_dtoa_r+0x294>
 80154e6:	2501      	movs	r5, #1
 80154e8:	2300      	movs	r3, #0
 80154ea:	9305      	str	r3, [sp, #20]
 80154ec:	9508      	str	r5, [sp, #32]
 80154ee:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80154f2:	2200      	movs	r2, #0
 80154f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80154f8:	2312      	movs	r3, #18
 80154fa:	9209      	str	r2, [sp, #36]	; 0x24
 80154fc:	e7cf      	b.n	801549e <_dtoa_r+0x266>
 80154fe:	2301      	movs	r3, #1
 8015500:	9308      	str	r3, [sp, #32]
 8015502:	e7f4      	b.n	80154ee <_dtoa_r+0x2b6>
 8015504:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015508:	f8cd 9004 	str.w	r9, [sp, #4]
 801550c:	464b      	mov	r3, r9
 801550e:	e7c6      	b.n	801549e <_dtoa_r+0x266>
 8015510:	3101      	adds	r1, #1
 8015512:	6041      	str	r1, [r0, #4]
 8015514:	0052      	lsls	r2, r2, #1
 8015516:	e7c6      	b.n	80154a6 <_dtoa_r+0x26e>
 8015518:	636f4361 	.word	0x636f4361
 801551c:	3fd287a7 	.word	0x3fd287a7
 8015520:	8b60c8b3 	.word	0x8b60c8b3
 8015524:	3fc68a28 	.word	0x3fc68a28
 8015528:	509f79fb 	.word	0x509f79fb
 801552c:	3fd34413 	.word	0x3fd34413
 8015530:	080188e6 	.word	0x080188e6
 8015534:	080188fd 	.word	0x080188fd
 8015538:	7ff00000 	.word	0x7ff00000
 801553c:	080188e2 	.word	0x080188e2
 8015540:	080188d9 	.word	0x080188d9
 8015544:	08018b51 	.word	0x08018b51
 8015548:	3ff80000 	.word	0x3ff80000
 801554c:	08018a78 	.word	0x08018a78
 8015550:	0801895c 	.word	0x0801895c
 8015554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015556:	9a00      	ldr	r2, [sp, #0]
 8015558:	601a      	str	r2, [r3, #0]
 801555a:	9b01      	ldr	r3, [sp, #4]
 801555c:	2b0e      	cmp	r3, #14
 801555e:	f200 80ad 	bhi.w	80156bc <_dtoa_r+0x484>
 8015562:	2d00      	cmp	r5, #0
 8015564:	f000 80aa 	beq.w	80156bc <_dtoa_r+0x484>
 8015568:	f1ba 0f00 	cmp.w	sl, #0
 801556c:	dd36      	ble.n	80155dc <_dtoa_r+0x3a4>
 801556e:	4ac3      	ldr	r2, [pc, #780]	; (801587c <_dtoa_r+0x644>)
 8015570:	f00a 030f 	and.w	r3, sl, #15
 8015574:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015578:	ed93 7b00 	vldr	d7, [r3]
 801557c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015580:	ea4f 172a 	mov.w	r7, sl, asr #4
 8015584:	eeb0 8a47 	vmov.f32	s16, s14
 8015588:	eef0 8a67 	vmov.f32	s17, s15
 801558c:	d016      	beq.n	80155bc <_dtoa_r+0x384>
 801558e:	4bbc      	ldr	r3, [pc, #752]	; (8015880 <_dtoa_r+0x648>)
 8015590:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015594:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015598:	f7eb f968 	bl	800086c <__aeabi_ddiv>
 801559c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80155a0:	f007 070f 	and.w	r7, r7, #15
 80155a4:	2503      	movs	r5, #3
 80155a6:	4eb6      	ldr	r6, [pc, #728]	; (8015880 <_dtoa_r+0x648>)
 80155a8:	b957      	cbnz	r7, 80155c0 <_dtoa_r+0x388>
 80155aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80155ae:	ec53 2b18 	vmov	r2, r3, d8
 80155b2:	f7eb f95b 	bl	800086c <__aeabi_ddiv>
 80155b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80155ba:	e029      	b.n	8015610 <_dtoa_r+0x3d8>
 80155bc:	2502      	movs	r5, #2
 80155be:	e7f2      	b.n	80155a6 <_dtoa_r+0x36e>
 80155c0:	07f9      	lsls	r1, r7, #31
 80155c2:	d508      	bpl.n	80155d6 <_dtoa_r+0x39e>
 80155c4:	ec51 0b18 	vmov	r0, r1, d8
 80155c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80155cc:	f7eb f824 	bl	8000618 <__aeabi_dmul>
 80155d0:	ec41 0b18 	vmov	d8, r0, r1
 80155d4:	3501      	adds	r5, #1
 80155d6:	107f      	asrs	r7, r7, #1
 80155d8:	3608      	adds	r6, #8
 80155da:	e7e5      	b.n	80155a8 <_dtoa_r+0x370>
 80155dc:	f000 80a6 	beq.w	801572c <_dtoa_r+0x4f4>
 80155e0:	f1ca 0600 	rsb	r6, sl, #0
 80155e4:	4ba5      	ldr	r3, [pc, #660]	; (801587c <_dtoa_r+0x644>)
 80155e6:	4fa6      	ldr	r7, [pc, #664]	; (8015880 <_dtoa_r+0x648>)
 80155e8:	f006 020f 	and.w	r2, r6, #15
 80155ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80155f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80155f8:	f7eb f80e 	bl	8000618 <__aeabi_dmul>
 80155fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015600:	1136      	asrs	r6, r6, #4
 8015602:	2300      	movs	r3, #0
 8015604:	2502      	movs	r5, #2
 8015606:	2e00      	cmp	r6, #0
 8015608:	f040 8085 	bne.w	8015716 <_dtoa_r+0x4de>
 801560c:	2b00      	cmp	r3, #0
 801560e:	d1d2      	bne.n	80155b6 <_dtoa_r+0x37e>
 8015610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015612:	2b00      	cmp	r3, #0
 8015614:	f000 808c 	beq.w	8015730 <_dtoa_r+0x4f8>
 8015618:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801561c:	4b99      	ldr	r3, [pc, #612]	; (8015884 <_dtoa_r+0x64c>)
 801561e:	2200      	movs	r2, #0
 8015620:	4630      	mov	r0, r6
 8015622:	4639      	mov	r1, r7
 8015624:	f7eb fa6a 	bl	8000afc <__aeabi_dcmplt>
 8015628:	2800      	cmp	r0, #0
 801562a:	f000 8081 	beq.w	8015730 <_dtoa_r+0x4f8>
 801562e:	9b01      	ldr	r3, [sp, #4]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d07d      	beq.n	8015730 <_dtoa_r+0x4f8>
 8015634:	f1b9 0f00 	cmp.w	r9, #0
 8015638:	dd3c      	ble.n	80156b4 <_dtoa_r+0x47c>
 801563a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801563e:	9307      	str	r3, [sp, #28]
 8015640:	2200      	movs	r2, #0
 8015642:	4b91      	ldr	r3, [pc, #580]	; (8015888 <_dtoa_r+0x650>)
 8015644:	4630      	mov	r0, r6
 8015646:	4639      	mov	r1, r7
 8015648:	f7ea ffe6 	bl	8000618 <__aeabi_dmul>
 801564c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015650:	3501      	adds	r5, #1
 8015652:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8015656:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801565a:	4628      	mov	r0, r5
 801565c:	f7ea ff72 	bl	8000544 <__aeabi_i2d>
 8015660:	4632      	mov	r2, r6
 8015662:	463b      	mov	r3, r7
 8015664:	f7ea ffd8 	bl	8000618 <__aeabi_dmul>
 8015668:	4b88      	ldr	r3, [pc, #544]	; (801588c <_dtoa_r+0x654>)
 801566a:	2200      	movs	r2, #0
 801566c:	f7ea fe1e 	bl	80002ac <__adddf3>
 8015670:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015678:	9303      	str	r3, [sp, #12]
 801567a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801567c:	2b00      	cmp	r3, #0
 801567e:	d15c      	bne.n	801573a <_dtoa_r+0x502>
 8015680:	4b83      	ldr	r3, [pc, #524]	; (8015890 <_dtoa_r+0x658>)
 8015682:	2200      	movs	r2, #0
 8015684:	4630      	mov	r0, r6
 8015686:	4639      	mov	r1, r7
 8015688:	f7ea fe0e 	bl	80002a8 <__aeabi_dsub>
 801568c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015690:	4606      	mov	r6, r0
 8015692:	460f      	mov	r7, r1
 8015694:	f7eb fa50 	bl	8000b38 <__aeabi_dcmpgt>
 8015698:	2800      	cmp	r0, #0
 801569a:	f040 8296 	bne.w	8015bca <_dtoa_r+0x992>
 801569e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80156a2:	4630      	mov	r0, r6
 80156a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80156a8:	4639      	mov	r1, r7
 80156aa:	f7eb fa27 	bl	8000afc <__aeabi_dcmplt>
 80156ae:	2800      	cmp	r0, #0
 80156b0:	f040 8288 	bne.w	8015bc4 <_dtoa_r+0x98c>
 80156b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80156b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80156bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80156be:	2b00      	cmp	r3, #0
 80156c0:	f2c0 8158 	blt.w	8015974 <_dtoa_r+0x73c>
 80156c4:	f1ba 0f0e 	cmp.w	sl, #14
 80156c8:	f300 8154 	bgt.w	8015974 <_dtoa_r+0x73c>
 80156cc:	4b6b      	ldr	r3, [pc, #428]	; (801587c <_dtoa_r+0x644>)
 80156ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80156d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80156d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156d8:	2b00      	cmp	r3, #0
 80156da:	f280 80e3 	bge.w	80158a4 <_dtoa_r+0x66c>
 80156de:	9b01      	ldr	r3, [sp, #4]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	f300 80df 	bgt.w	80158a4 <_dtoa_r+0x66c>
 80156e6:	f040 826d 	bne.w	8015bc4 <_dtoa_r+0x98c>
 80156ea:	4b69      	ldr	r3, [pc, #420]	; (8015890 <_dtoa_r+0x658>)
 80156ec:	2200      	movs	r2, #0
 80156ee:	4640      	mov	r0, r8
 80156f0:	4649      	mov	r1, r9
 80156f2:	f7ea ff91 	bl	8000618 <__aeabi_dmul>
 80156f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80156fa:	f7eb fa13 	bl	8000b24 <__aeabi_dcmpge>
 80156fe:	9e01      	ldr	r6, [sp, #4]
 8015700:	4637      	mov	r7, r6
 8015702:	2800      	cmp	r0, #0
 8015704:	f040 8243 	bne.w	8015b8e <_dtoa_r+0x956>
 8015708:	9d00      	ldr	r5, [sp, #0]
 801570a:	2331      	movs	r3, #49	; 0x31
 801570c:	f805 3b01 	strb.w	r3, [r5], #1
 8015710:	f10a 0a01 	add.w	sl, sl, #1
 8015714:	e23f      	b.n	8015b96 <_dtoa_r+0x95e>
 8015716:	07f2      	lsls	r2, r6, #31
 8015718:	d505      	bpl.n	8015726 <_dtoa_r+0x4ee>
 801571a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801571e:	f7ea ff7b 	bl	8000618 <__aeabi_dmul>
 8015722:	3501      	adds	r5, #1
 8015724:	2301      	movs	r3, #1
 8015726:	1076      	asrs	r6, r6, #1
 8015728:	3708      	adds	r7, #8
 801572a:	e76c      	b.n	8015606 <_dtoa_r+0x3ce>
 801572c:	2502      	movs	r5, #2
 801572e:	e76f      	b.n	8015610 <_dtoa_r+0x3d8>
 8015730:	9b01      	ldr	r3, [sp, #4]
 8015732:	f8cd a01c 	str.w	sl, [sp, #28]
 8015736:	930c      	str	r3, [sp, #48]	; 0x30
 8015738:	e78d      	b.n	8015656 <_dtoa_r+0x41e>
 801573a:	9900      	ldr	r1, [sp, #0]
 801573c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801573e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015740:	4b4e      	ldr	r3, [pc, #312]	; (801587c <_dtoa_r+0x644>)
 8015742:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015746:	4401      	add	r1, r0
 8015748:	9102      	str	r1, [sp, #8]
 801574a:	9908      	ldr	r1, [sp, #32]
 801574c:	eeb0 8a47 	vmov.f32	s16, s14
 8015750:	eef0 8a67 	vmov.f32	s17, s15
 8015754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015758:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801575c:	2900      	cmp	r1, #0
 801575e:	d045      	beq.n	80157ec <_dtoa_r+0x5b4>
 8015760:	494c      	ldr	r1, [pc, #304]	; (8015894 <_dtoa_r+0x65c>)
 8015762:	2000      	movs	r0, #0
 8015764:	f7eb f882 	bl	800086c <__aeabi_ddiv>
 8015768:	ec53 2b18 	vmov	r2, r3, d8
 801576c:	f7ea fd9c 	bl	80002a8 <__aeabi_dsub>
 8015770:	9d00      	ldr	r5, [sp, #0]
 8015772:	ec41 0b18 	vmov	d8, r0, r1
 8015776:	4639      	mov	r1, r7
 8015778:	4630      	mov	r0, r6
 801577a:	f7eb f9fd 	bl	8000b78 <__aeabi_d2iz>
 801577e:	900c      	str	r0, [sp, #48]	; 0x30
 8015780:	f7ea fee0 	bl	8000544 <__aeabi_i2d>
 8015784:	4602      	mov	r2, r0
 8015786:	460b      	mov	r3, r1
 8015788:	4630      	mov	r0, r6
 801578a:	4639      	mov	r1, r7
 801578c:	f7ea fd8c 	bl	80002a8 <__aeabi_dsub>
 8015790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015792:	3330      	adds	r3, #48	; 0x30
 8015794:	f805 3b01 	strb.w	r3, [r5], #1
 8015798:	ec53 2b18 	vmov	r2, r3, d8
 801579c:	4606      	mov	r6, r0
 801579e:	460f      	mov	r7, r1
 80157a0:	f7eb f9ac 	bl	8000afc <__aeabi_dcmplt>
 80157a4:	2800      	cmp	r0, #0
 80157a6:	d165      	bne.n	8015874 <_dtoa_r+0x63c>
 80157a8:	4632      	mov	r2, r6
 80157aa:	463b      	mov	r3, r7
 80157ac:	4935      	ldr	r1, [pc, #212]	; (8015884 <_dtoa_r+0x64c>)
 80157ae:	2000      	movs	r0, #0
 80157b0:	f7ea fd7a 	bl	80002a8 <__aeabi_dsub>
 80157b4:	ec53 2b18 	vmov	r2, r3, d8
 80157b8:	f7eb f9a0 	bl	8000afc <__aeabi_dcmplt>
 80157bc:	2800      	cmp	r0, #0
 80157be:	f040 80b9 	bne.w	8015934 <_dtoa_r+0x6fc>
 80157c2:	9b02      	ldr	r3, [sp, #8]
 80157c4:	429d      	cmp	r5, r3
 80157c6:	f43f af75 	beq.w	80156b4 <_dtoa_r+0x47c>
 80157ca:	4b2f      	ldr	r3, [pc, #188]	; (8015888 <_dtoa_r+0x650>)
 80157cc:	ec51 0b18 	vmov	r0, r1, d8
 80157d0:	2200      	movs	r2, #0
 80157d2:	f7ea ff21 	bl	8000618 <__aeabi_dmul>
 80157d6:	4b2c      	ldr	r3, [pc, #176]	; (8015888 <_dtoa_r+0x650>)
 80157d8:	ec41 0b18 	vmov	d8, r0, r1
 80157dc:	2200      	movs	r2, #0
 80157de:	4630      	mov	r0, r6
 80157e0:	4639      	mov	r1, r7
 80157e2:	f7ea ff19 	bl	8000618 <__aeabi_dmul>
 80157e6:	4606      	mov	r6, r0
 80157e8:	460f      	mov	r7, r1
 80157ea:	e7c4      	b.n	8015776 <_dtoa_r+0x53e>
 80157ec:	ec51 0b17 	vmov	r0, r1, d7
 80157f0:	f7ea ff12 	bl	8000618 <__aeabi_dmul>
 80157f4:	9b02      	ldr	r3, [sp, #8]
 80157f6:	9d00      	ldr	r5, [sp, #0]
 80157f8:	930c      	str	r3, [sp, #48]	; 0x30
 80157fa:	ec41 0b18 	vmov	d8, r0, r1
 80157fe:	4639      	mov	r1, r7
 8015800:	4630      	mov	r0, r6
 8015802:	f7eb f9b9 	bl	8000b78 <__aeabi_d2iz>
 8015806:	9011      	str	r0, [sp, #68]	; 0x44
 8015808:	f7ea fe9c 	bl	8000544 <__aeabi_i2d>
 801580c:	4602      	mov	r2, r0
 801580e:	460b      	mov	r3, r1
 8015810:	4630      	mov	r0, r6
 8015812:	4639      	mov	r1, r7
 8015814:	f7ea fd48 	bl	80002a8 <__aeabi_dsub>
 8015818:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801581a:	3330      	adds	r3, #48	; 0x30
 801581c:	f805 3b01 	strb.w	r3, [r5], #1
 8015820:	9b02      	ldr	r3, [sp, #8]
 8015822:	429d      	cmp	r5, r3
 8015824:	4606      	mov	r6, r0
 8015826:	460f      	mov	r7, r1
 8015828:	f04f 0200 	mov.w	r2, #0
 801582c:	d134      	bne.n	8015898 <_dtoa_r+0x660>
 801582e:	4b19      	ldr	r3, [pc, #100]	; (8015894 <_dtoa_r+0x65c>)
 8015830:	ec51 0b18 	vmov	r0, r1, d8
 8015834:	f7ea fd3a 	bl	80002ac <__adddf3>
 8015838:	4602      	mov	r2, r0
 801583a:	460b      	mov	r3, r1
 801583c:	4630      	mov	r0, r6
 801583e:	4639      	mov	r1, r7
 8015840:	f7eb f97a 	bl	8000b38 <__aeabi_dcmpgt>
 8015844:	2800      	cmp	r0, #0
 8015846:	d175      	bne.n	8015934 <_dtoa_r+0x6fc>
 8015848:	ec53 2b18 	vmov	r2, r3, d8
 801584c:	4911      	ldr	r1, [pc, #68]	; (8015894 <_dtoa_r+0x65c>)
 801584e:	2000      	movs	r0, #0
 8015850:	f7ea fd2a 	bl	80002a8 <__aeabi_dsub>
 8015854:	4602      	mov	r2, r0
 8015856:	460b      	mov	r3, r1
 8015858:	4630      	mov	r0, r6
 801585a:	4639      	mov	r1, r7
 801585c:	f7eb f94e 	bl	8000afc <__aeabi_dcmplt>
 8015860:	2800      	cmp	r0, #0
 8015862:	f43f af27 	beq.w	80156b4 <_dtoa_r+0x47c>
 8015866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015868:	1e6b      	subs	r3, r5, #1
 801586a:	930c      	str	r3, [sp, #48]	; 0x30
 801586c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015870:	2b30      	cmp	r3, #48	; 0x30
 8015872:	d0f8      	beq.n	8015866 <_dtoa_r+0x62e>
 8015874:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015878:	e04a      	b.n	8015910 <_dtoa_r+0x6d8>
 801587a:	bf00      	nop
 801587c:	08018a78 	.word	0x08018a78
 8015880:	08018a50 	.word	0x08018a50
 8015884:	3ff00000 	.word	0x3ff00000
 8015888:	40240000 	.word	0x40240000
 801588c:	401c0000 	.word	0x401c0000
 8015890:	40140000 	.word	0x40140000
 8015894:	3fe00000 	.word	0x3fe00000
 8015898:	4baf      	ldr	r3, [pc, #700]	; (8015b58 <_dtoa_r+0x920>)
 801589a:	f7ea febd 	bl	8000618 <__aeabi_dmul>
 801589e:	4606      	mov	r6, r0
 80158a0:	460f      	mov	r7, r1
 80158a2:	e7ac      	b.n	80157fe <_dtoa_r+0x5c6>
 80158a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80158a8:	9d00      	ldr	r5, [sp, #0]
 80158aa:	4642      	mov	r2, r8
 80158ac:	464b      	mov	r3, r9
 80158ae:	4630      	mov	r0, r6
 80158b0:	4639      	mov	r1, r7
 80158b2:	f7ea ffdb 	bl	800086c <__aeabi_ddiv>
 80158b6:	f7eb f95f 	bl	8000b78 <__aeabi_d2iz>
 80158ba:	9002      	str	r0, [sp, #8]
 80158bc:	f7ea fe42 	bl	8000544 <__aeabi_i2d>
 80158c0:	4642      	mov	r2, r8
 80158c2:	464b      	mov	r3, r9
 80158c4:	f7ea fea8 	bl	8000618 <__aeabi_dmul>
 80158c8:	4602      	mov	r2, r0
 80158ca:	460b      	mov	r3, r1
 80158cc:	4630      	mov	r0, r6
 80158ce:	4639      	mov	r1, r7
 80158d0:	f7ea fcea 	bl	80002a8 <__aeabi_dsub>
 80158d4:	9e02      	ldr	r6, [sp, #8]
 80158d6:	9f01      	ldr	r7, [sp, #4]
 80158d8:	3630      	adds	r6, #48	; 0x30
 80158da:	f805 6b01 	strb.w	r6, [r5], #1
 80158de:	9e00      	ldr	r6, [sp, #0]
 80158e0:	1bae      	subs	r6, r5, r6
 80158e2:	42b7      	cmp	r7, r6
 80158e4:	4602      	mov	r2, r0
 80158e6:	460b      	mov	r3, r1
 80158e8:	d137      	bne.n	801595a <_dtoa_r+0x722>
 80158ea:	f7ea fcdf 	bl	80002ac <__adddf3>
 80158ee:	4642      	mov	r2, r8
 80158f0:	464b      	mov	r3, r9
 80158f2:	4606      	mov	r6, r0
 80158f4:	460f      	mov	r7, r1
 80158f6:	f7eb f91f 	bl	8000b38 <__aeabi_dcmpgt>
 80158fa:	b9c8      	cbnz	r0, 8015930 <_dtoa_r+0x6f8>
 80158fc:	4642      	mov	r2, r8
 80158fe:	464b      	mov	r3, r9
 8015900:	4630      	mov	r0, r6
 8015902:	4639      	mov	r1, r7
 8015904:	f7eb f8f0 	bl	8000ae8 <__aeabi_dcmpeq>
 8015908:	b110      	cbz	r0, 8015910 <_dtoa_r+0x6d8>
 801590a:	9b02      	ldr	r3, [sp, #8]
 801590c:	07d9      	lsls	r1, r3, #31
 801590e:	d40f      	bmi.n	8015930 <_dtoa_r+0x6f8>
 8015910:	4620      	mov	r0, r4
 8015912:	4659      	mov	r1, fp
 8015914:	f000 feda 	bl	80166cc <_Bfree>
 8015918:	2300      	movs	r3, #0
 801591a:	702b      	strb	r3, [r5, #0]
 801591c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801591e:	f10a 0001 	add.w	r0, sl, #1
 8015922:	6018      	str	r0, [r3, #0]
 8015924:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015926:	2b00      	cmp	r3, #0
 8015928:	f43f acd8 	beq.w	80152dc <_dtoa_r+0xa4>
 801592c:	601d      	str	r5, [r3, #0]
 801592e:	e4d5      	b.n	80152dc <_dtoa_r+0xa4>
 8015930:	f8cd a01c 	str.w	sl, [sp, #28]
 8015934:	462b      	mov	r3, r5
 8015936:	461d      	mov	r5, r3
 8015938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801593c:	2a39      	cmp	r2, #57	; 0x39
 801593e:	d108      	bne.n	8015952 <_dtoa_r+0x71a>
 8015940:	9a00      	ldr	r2, [sp, #0]
 8015942:	429a      	cmp	r2, r3
 8015944:	d1f7      	bne.n	8015936 <_dtoa_r+0x6fe>
 8015946:	9a07      	ldr	r2, [sp, #28]
 8015948:	9900      	ldr	r1, [sp, #0]
 801594a:	3201      	adds	r2, #1
 801594c:	9207      	str	r2, [sp, #28]
 801594e:	2230      	movs	r2, #48	; 0x30
 8015950:	700a      	strb	r2, [r1, #0]
 8015952:	781a      	ldrb	r2, [r3, #0]
 8015954:	3201      	adds	r2, #1
 8015956:	701a      	strb	r2, [r3, #0]
 8015958:	e78c      	b.n	8015874 <_dtoa_r+0x63c>
 801595a:	4b7f      	ldr	r3, [pc, #508]	; (8015b58 <_dtoa_r+0x920>)
 801595c:	2200      	movs	r2, #0
 801595e:	f7ea fe5b 	bl	8000618 <__aeabi_dmul>
 8015962:	2200      	movs	r2, #0
 8015964:	2300      	movs	r3, #0
 8015966:	4606      	mov	r6, r0
 8015968:	460f      	mov	r7, r1
 801596a:	f7eb f8bd 	bl	8000ae8 <__aeabi_dcmpeq>
 801596e:	2800      	cmp	r0, #0
 8015970:	d09b      	beq.n	80158aa <_dtoa_r+0x672>
 8015972:	e7cd      	b.n	8015910 <_dtoa_r+0x6d8>
 8015974:	9a08      	ldr	r2, [sp, #32]
 8015976:	2a00      	cmp	r2, #0
 8015978:	f000 80c4 	beq.w	8015b04 <_dtoa_r+0x8cc>
 801597c:	9a05      	ldr	r2, [sp, #20]
 801597e:	2a01      	cmp	r2, #1
 8015980:	f300 80a8 	bgt.w	8015ad4 <_dtoa_r+0x89c>
 8015984:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015986:	2a00      	cmp	r2, #0
 8015988:	f000 80a0 	beq.w	8015acc <_dtoa_r+0x894>
 801598c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015990:	9e06      	ldr	r6, [sp, #24]
 8015992:	4645      	mov	r5, r8
 8015994:	9a04      	ldr	r2, [sp, #16]
 8015996:	2101      	movs	r1, #1
 8015998:	441a      	add	r2, r3
 801599a:	4620      	mov	r0, r4
 801599c:	4498      	add	r8, r3
 801599e:	9204      	str	r2, [sp, #16]
 80159a0:	f000 ff9a 	bl	80168d8 <__i2b>
 80159a4:	4607      	mov	r7, r0
 80159a6:	2d00      	cmp	r5, #0
 80159a8:	dd0b      	ble.n	80159c2 <_dtoa_r+0x78a>
 80159aa:	9b04      	ldr	r3, [sp, #16]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	dd08      	ble.n	80159c2 <_dtoa_r+0x78a>
 80159b0:	42ab      	cmp	r3, r5
 80159b2:	9a04      	ldr	r2, [sp, #16]
 80159b4:	bfa8      	it	ge
 80159b6:	462b      	movge	r3, r5
 80159b8:	eba8 0803 	sub.w	r8, r8, r3
 80159bc:	1aed      	subs	r5, r5, r3
 80159be:	1ad3      	subs	r3, r2, r3
 80159c0:	9304      	str	r3, [sp, #16]
 80159c2:	9b06      	ldr	r3, [sp, #24]
 80159c4:	b1fb      	cbz	r3, 8015a06 <_dtoa_r+0x7ce>
 80159c6:	9b08      	ldr	r3, [sp, #32]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	f000 809f 	beq.w	8015b0c <_dtoa_r+0x8d4>
 80159ce:	2e00      	cmp	r6, #0
 80159d0:	dd11      	ble.n	80159f6 <_dtoa_r+0x7be>
 80159d2:	4639      	mov	r1, r7
 80159d4:	4632      	mov	r2, r6
 80159d6:	4620      	mov	r0, r4
 80159d8:	f001 f83a 	bl	8016a50 <__pow5mult>
 80159dc:	465a      	mov	r2, fp
 80159de:	4601      	mov	r1, r0
 80159e0:	4607      	mov	r7, r0
 80159e2:	4620      	mov	r0, r4
 80159e4:	f000 ff8e 	bl	8016904 <__multiply>
 80159e8:	4659      	mov	r1, fp
 80159ea:	9007      	str	r0, [sp, #28]
 80159ec:	4620      	mov	r0, r4
 80159ee:	f000 fe6d 	bl	80166cc <_Bfree>
 80159f2:	9b07      	ldr	r3, [sp, #28]
 80159f4:	469b      	mov	fp, r3
 80159f6:	9b06      	ldr	r3, [sp, #24]
 80159f8:	1b9a      	subs	r2, r3, r6
 80159fa:	d004      	beq.n	8015a06 <_dtoa_r+0x7ce>
 80159fc:	4659      	mov	r1, fp
 80159fe:	4620      	mov	r0, r4
 8015a00:	f001 f826 	bl	8016a50 <__pow5mult>
 8015a04:	4683      	mov	fp, r0
 8015a06:	2101      	movs	r1, #1
 8015a08:	4620      	mov	r0, r4
 8015a0a:	f000 ff65 	bl	80168d8 <__i2b>
 8015a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	4606      	mov	r6, r0
 8015a14:	dd7c      	ble.n	8015b10 <_dtoa_r+0x8d8>
 8015a16:	461a      	mov	r2, r3
 8015a18:	4601      	mov	r1, r0
 8015a1a:	4620      	mov	r0, r4
 8015a1c:	f001 f818 	bl	8016a50 <__pow5mult>
 8015a20:	9b05      	ldr	r3, [sp, #20]
 8015a22:	2b01      	cmp	r3, #1
 8015a24:	4606      	mov	r6, r0
 8015a26:	dd76      	ble.n	8015b16 <_dtoa_r+0x8de>
 8015a28:	2300      	movs	r3, #0
 8015a2a:	9306      	str	r3, [sp, #24]
 8015a2c:	6933      	ldr	r3, [r6, #16]
 8015a2e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015a32:	6918      	ldr	r0, [r3, #16]
 8015a34:	f000 ff00 	bl	8016838 <__hi0bits>
 8015a38:	f1c0 0020 	rsb	r0, r0, #32
 8015a3c:	9b04      	ldr	r3, [sp, #16]
 8015a3e:	4418      	add	r0, r3
 8015a40:	f010 001f 	ands.w	r0, r0, #31
 8015a44:	f000 8086 	beq.w	8015b54 <_dtoa_r+0x91c>
 8015a48:	f1c0 0320 	rsb	r3, r0, #32
 8015a4c:	2b04      	cmp	r3, #4
 8015a4e:	dd7f      	ble.n	8015b50 <_dtoa_r+0x918>
 8015a50:	f1c0 001c 	rsb	r0, r0, #28
 8015a54:	9b04      	ldr	r3, [sp, #16]
 8015a56:	4403      	add	r3, r0
 8015a58:	4480      	add	r8, r0
 8015a5a:	4405      	add	r5, r0
 8015a5c:	9304      	str	r3, [sp, #16]
 8015a5e:	f1b8 0f00 	cmp.w	r8, #0
 8015a62:	dd05      	ble.n	8015a70 <_dtoa_r+0x838>
 8015a64:	4659      	mov	r1, fp
 8015a66:	4642      	mov	r2, r8
 8015a68:	4620      	mov	r0, r4
 8015a6a:	f001 f84b 	bl	8016b04 <__lshift>
 8015a6e:	4683      	mov	fp, r0
 8015a70:	9b04      	ldr	r3, [sp, #16]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	dd05      	ble.n	8015a82 <_dtoa_r+0x84a>
 8015a76:	4631      	mov	r1, r6
 8015a78:	461a      	mov	r2, r3
 8015a7a:	4620      	mov	r0, r4
 8015a7c:	f001 f842 	bl	8016b04 <__lshift>
 8015a80:	4606      	mov	r6, r0
 8015a82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d069      	beq.n	8015b5c <_dtoa_r+0x924>
 8015a88:	4631      	mov	r1, r6
 8015a8a:	4658      	mov	r0, fp
 8015a8c:	f001 f8a6 	bl	8016bdc <__mcmp>
 8015a90:	2800      	cmp	r0, #0
 8015a92:	da63      	bge.n	8015b5c <_dtoa_r+0x924>
 8015a94:	2300      	movs	r3, #0
 8015a96:	4659      	mov	r1, fp
 8015a98:	220a      	movs	r2, #10
 8015a9a:	4620      	mov	r0, r4
 8015a9c:	f000 fe38 	bl	8016710 <__multadd>
 8015aa0:	9b08      	ldr	r3, [sp, #32]
 8015aa2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8015aa6:	4683      	mov	fp, r0
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	f000 818f 	beq.w	8015dcc <_dtoa_r+0xb94>
 8015aae:	4639      	mov	r1, r7
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	220a      	movs	r2, #10
 8015ab4:	4620      	mov	r0, r4
 8015ab6:	f000 fe2b 	bl	8016710 <__multadd>
 8015aba:	f1b9 0f00 	cmp.w	r9, #0
 8015abe:	4607      	mov	r7, r0
 8015ac0:	f300 808e 	bgt.w	8015be0 <_dtoa_r+0x9a8>
 8015ac4:	9b05      	ldr	r3, [sp, #20]
 8015ac6:	2b02      	cmp	r3, #2
 8015ac8:	dc50      	bgt.n	8015b6c <_dtoa_r+0x934>
 8015aca:	e089      	b.n	8015be0 <_dtoa_r+0x9a8>
 8015acc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015ace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015ad2:	e75d      	b.n	8015990 <_dtoa_r+0x758>
 8015ad4:	9b01      	ldr	r3, [sp, #4]
 8015ad6:	1e5e      	subs	r6, r3, #1
 8015ad8:	9b06      	ldr	r3, [sp, #24]
 8015ada:	42b3      	cmp	r3, r6
 8015adc:	bfbf      	itttt	lt
 8015ade:	9b06      	ldrlt	r3, [sp, #24]
 8015ae0:	9606      	strlt	r6, [sp, #24]
 8015ae2:	1af2      	sublt	r2, r6, r3
 8015ae4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8015ae6:	bfb6      	itet	lt
 8015ae8:	189b      	addlt	r3, r3, r2
 8015aea:	1b9e      	subge	r6, r3, r6
 8015aec:	930d      	strlt	r3, [sp, #52]	; 0x34
 8015aee:	9b01      	ldr	r3, [sp, #4]
 8015af0:	bfb8      	it	lt
 8015af2:	2600      	movlt	r6, #0
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	bfb5      	itete	lt
 8015af8:	eba8 0503 	sublt.w	r5, r8, r3
 8015afc:	9b01      	ldrge	r3, [sp, #4]
 8015afe:	2300      	movlt	r3, #0
 8015b00:	4645      	movge	r5, r8
 8015b02:	e747      	b.n	8015994 <_dtoa_r+0x75c>
 8015b04:	9e06      	ldr	r6, [sp, #24]
 8015b06:	9f08      	ldr	r7, [sp, #32]
 8015b08:	4645      	mov	r5, r8
 8015b0a:	e74c      	b.n	80159a6 <_dtoa_r+0x76e>
 8015b0c:	9a06      	ldr	r2, [sp, #24]
 8015b0e:	e775      	b.n	80159fc <_dtoa_r+0x7c4>
 8015b10:	9b05      	ldr	r3, [sp, #20]
 8015b12:	2b01      	cmp	r3, #1
 8015b14:	dc18      	bgt.n	8015b48 <_dtoa_r+0x910>
 8015b16:	9b02      	ldr	r3, [sp, #8]
 8015b18:	b9b3      	cbnz	r3, 8015b48 <_dtoa_r+0x910>
 8015b1a:	9b03      	ldr	r3, [sp, #12]
 8015b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015b20:	b9a3      	cbnz	r3, 8015b4c <_dtoa_r+0x914>
 8015b22:	9b03      	ldr	r3, [sp, #12]
 8015b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b28:	0d1b      	lsrs	r3, r3, #20
 8015b2a:	051b      	lsls	r3, r3, #20
 8015b2c:	b12b      	cbz	r3, 8015b3a <_dtoa_r+0x902>
 8015b2e:	9b04      	ldr	r3, [sp, #16]
 8015b30:	3301      	adds	r3, #1
 8015b32:	9304      	str	r3, [sp, #16]
 8015b34:	f108 0801 	add.w	r8, r8, #1
 8015b38:	2301      	movs	r3, #1
 8015b3a:	9306      	str	r3, [sp, #24]
 8015b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	f47f af74 	bne.w	8015a2c <_dtoa_r+0x7f4>
 8015b44:	2001      	movs	r0, #1
 8015b46:	e779      	b.n	8015a3c <_dtoa_r+0x804>
 8015b48:	2300      	movs	r3, #0
 8015b4a:	e7f6      	b.n	8015b3a <_dtoa_r+0x902>
 8015b4c:	9b02      	ldr	r3, [sp, #8]
 8015b4e:	e7f4      	b.n	8015b3a <_dtoa_r+0x902>
 8015b50:	d085      	beq.n	8015a5e <_dtoa_r+0x826>
 8015b52:	4618      	mov	r0, r3
 8015b54:	301c      	adds	r0, #28
 8015b56:	e77d      	b.n	8015a54 <_dtoa_r+0x81c>
 8015b58:	40240000 	.word	0x40240000
 8015b5c:	9b01      	ldr	r3, [sp, #4]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	dc38      	bgt.n	8015bd4 <_dtoa_r+0x99c>
 8015b62:	9b05      	ldr	r3, [sp, #20]
 8015b64:	2b02      	cmp	r3, #2
 8015b66:	dd35      	ble.n	8015bd4 <_dtoa_r+0x99c>
 8015b68:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015b6c:	f1b9 0f00 	cmp.w	r9, #0
 8015b70:	d10d      	bne.n	8015b8e <_dtoa_r+0x956>
 8015b72:	4631      	mov	r1, r6
 8015b74:	464b      	mov	r3, r9
 8015b76:	2205      	movs	r2, #5
 8015b78:	4620      	mov	r0, r4
 8015b7a:	f000 fdc9 	bl	8016710 <__multadd>
 8015b7e:	4601      	mov	r1, r0
 8015b80:	4606      	mov	r6, r0
 8015b82:	4658      	mov	r0, fp
 8015b84:	f001 f82a 	bl	8016bdc <__mcmp>
 8015b88:	2800      	cmp	r0, #0
 8015b8a:	f73f adbd 	bgt.w	8015708 <_dtoa_r+0x4d0>
 8015b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b90:	9d00      	ldr	r5, [sp, #0]
 8015b92:	ea6f 0a03 	mvn.w	sl, r3
 8015b96:	f04f 0800 	mov.w	r8, #0
 8015b9a:	4631      	mov	r1, r6
 8015b9c:	4620      	mov	r0, r4
 8015b9e:	f000 fd95 	bl	80166cc <_Bfree>
 8015ba2:	2f00      	cmp	r7, #0
 8015ba4:	f43f aeb4 	beq.w	8015910 <_dtoa_r+0x6d8>
 8015ba8:	f1b8 0f00 	cmp.w	r8, #0
 8015bac:	d005      	beq.n	8015bba <_dtoa_r+0x982>
 8015bae:	45b8      	cmp	r8, r7
 8015bb0:	d003      	beq.n	8015bba <_dtoa_r+0x982>
 8015bb2:	4641      	mov	r1, r8
 8015bb4:	4620      	mov	r0, r4
 8015bb6:	f000 fd89 	bl	80166cc <_Bfree>
 8015bba:	4639      	mov	r1, r7
 8015bbc:	4620      	mov	r0, r4
 8015bbe:	f000 fd85 	bl	80166cc <_Bfree>
 8015bc2:	e6a5      	b.n	8015910 <_dtoa_r+0x6d8>
 8015bc4:	2600      	movs	r6, #0
 8015bc6:	4637      	mov	r7, r6
 8015bc8:	e7e1      	b.n	8015b8e <_dtoa_r+0x956>
 8015bca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015bcc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015bd0:	4637      	mov	r7, r6
 8015bd2:	e599      	b.n	8015708 <_dtoa_r+0x4d0>
 8015bd4:	9b08      	ldr	r3, [sp, #32]
 8015bd6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	f000 80fd 	beq.w	8015dda <_dtoa_r+0xba2>
 8015be0:	2d00      	cmp	r5, #0
 8015be2:	dd05      	ble.n	8015bf0 <_dtoa_r+0x9b8>
 8015be4:	4639      	mov	r1, r7
 8015be6:	462a      	mov	r2, r5
 8015be8:	4620      	mov	r0, r4
 8015bea:	f000 ff8b 	bl	8016b04 <__lshift>
 8015bee:	4607      	mov	r7, r0
 8015bf0:	9b06      	ldr	r3, [sp, #24]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d05c      	beq.n	8015cb0 <_dtoa_r+0xa78>
 8015bf6:	6879      	ldr	r1, [r7, #4]
 8015bf8:	4620      	mov	r0, r4
 8015bfa:	f000 fd27 	bl	801664c <_Balloc>
 8015bfe:	4605      	mov	r5, r0
 8015c00:	b928      	cbnz	r0, 8015c0e <_dtoa_r+0x9d6>
 8015c02:	4b80      	ldr	r3, [pc, #512]	; (8015e04 <_dtoa_r+0xbcc>)
 8015c04:	4602      	mov	r2, r0
 8015c06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015c0a:	f7ff bb2e 	b.w	801526a <_dtoa_r+0x32>
 8015c0e:	693a      	ldr	r2, [r7, #16]
 8015c10:	3202      	adds	r2, #2
 8015c12:	0092      	lsls	r2, r2, #2
 8015c14:	f107 010c 	add.w	r1, r7, #12
 8015c18:	300c      	adds	r0, #12
 8015c1a:	f7fc fe3f 	bl	801289c <memcpy>
 8015c1e:	2201      	movs	r2, #1
 8015c20:	4629      	mov	r1, r5
 8015c22:	4620      	mov	r0, r4
 8015c24:	f000 ff6e 	bl	8016b04 <__lshift>
 8015c28:	9b00      	ldr	r3, [sp, #0]
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	9301      	str	r3, [sp, #4]
 8015c2e:	9b00      	ldr	r3, [sp, #0]
 8015c30:	444b      	add	r3, r9
 8015c32:	9307      	str	r3, [sp, #28]
 8015c34:	9b02      	ldr	r3, [sp, #8]
 8015c36:	f003 0301 	and.w	r3, r3, #1
 8015c3a:	46b8      	mov	r8, r7
 8015c3c:	9306      	str	r3, [sp, #24]
 8015c3e:	4607      	mov	r7, r0
 8015c40:	9b01      	ldr	r3, [sp, #4]
 8015c42:	4631      	mov	r1, r6
 8015c44:	3b01      	subs	r3, #1
 8015c46:	4658      	mov	r0, fp
 8015c48:	9302      	str	r3, [sp, #8]
 8015c4a:	f7ff fa69 	bl	8015120 <quorem>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	3330      	adds	r3, #48	; 0x30
 8015c52:	9004      	str	r0, [sp, #16]
 8015c54:	4641      	mov	r1, r8
 8015c56:	4658      	mov	r0, fp
 8015c58:	9308      	str	r3, [sp, #32]
 8015c5a:	f000 ffbf 	bl	8016bdc <__mcmp>
 8015c5e:	463a      	mov	r2, r7
 8015c60:	4681      	mov	r9, r0
 8015c62:	4631      	mov	r1, r6
 8015c64:	4620      	mov	r0, r4
 8015c66:	f000 ffd5 	bl	8016c14 <__mdiff>
 8015c6a:	68c2      	ldr	r2, [r0, #12]
 8015c6c:	9b08      	ldr	r3, [sp, #32]
 8015c6e:	4605      	mov	r5, r0
 8015c70:	bb02      	cbnz	r2, 8015cb4 <_dtoa_r+0xa7c>
 8015c72:	4601      	mov	r1, r0
 8015c74:	4658      	mov	r0, fp
 8015c76:	f000 ffb1 	bl	8016bdc <__mcmp>
 8015c7a:	9b08      	ldr	r3, [sp, #32]
 8015c7c:	4602      	mov	r2, r0
 8015c7e:	4629      	mov	r1, r5
 8015c80:	4620      	mov	r0, r4
 8015c82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8015c86:	f000 fd21 	bl	80166cc <_Bfree>
 8015c8a:	9b05      	ldr	r3, [sp, #20]
 8015c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015c8e:	9d01      	ldr	r5, [sp, #4]
 8015c90:	ea43 0102 	orr.w	r1, r3, r2
 8015c94:	9b06      	ldr	r3, [sp, #24]
 8015c96:	430b      	orrs	r3, r1
 8015c98:	9b08      	ldr	r3, [sp, #32]
 8015c9a:	d10d      	bne.n	8015cb8 <_dtoa_r+0xa80>
 8015c9c:	2b39      	cmp	r3, #57	; 0x39
 8015c9e:	d029      	beq.n	8015cf4 <_dtoa_r+0xabc>
 8015ca0:	f1b9 0f00 	cmp.w	r9, #0
 8015ca4:	dd01      	ble.n	8015caa <_dtoa_r+0xa72>
 8015ca6:	9b04      	ldr	r3, [sp, #16]
 8015ca8:	3331      	adds	r3, #49	; 0x31
 8015caa:	9a02      	ldr	r2, [sp, #8]
 8015cac:	7013      	strb	r3, [r2, #0]
 8015cae:	e774      	b.n	8015b9a <_dtoa_r+0x962>
 8015cb0:	4638      	mov	r0, r7
 8015cb2:	e7b9      	b.n	8015c28 <_dtoa_r+0x9f0>
 8015cb4:	2201      	movs	r2, #1
 8015cb6:	e7e2      	b.n	8015c7e <_dtoa_r+0xa46>
 8015cb8:	f1b9 0f00 	cmp.w	r9, #0
 8015cbc:	db06      	blt.n	8015ccc <_dtoa_r+0xa94>
 8015cbe:	9905      	ldr	r1, [sp, #20]
 8015cc0:	ea41 0909 	orr.w	r9, r1, r9
 8015cc4:	9906      	ldr	r1, [sp, #24]
 8015cc6:	ea59 0101 	orrs.w	r1, r9, r1
 8015cca:	d120      	bne.n	8015d0e <_dtoa_r+0xad6>
 8015ccc:	2a00      	cmp	r2, #0
 8015cce:	ddec      	ble.n	8015caa <_dtoa_r+0xa72>
 8015cd0:	4659      	mov	r1, fp
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	4620      	mov	r0, r4
 8015cd6:	9301      	str	r3, [sp, #4]
 8015cd8:	f000 ff14 	bl	8016b04 <__lshift>
 8015cdc:	4631      	mov	r1, r6
 8015cde:	4683      	mov	fp, r0
 8015ce0:	f000 ff7c 	bl	8016bdc <__mcmp>
 8015ce4:	2800      	cmp	r0, #0
 8015ce6:	9b01      	ldr	r3, [sp, #4]
 8015ce8:	dc02      	bgt.n	8015cf0 <_dtoa_r+0xab8>
 8015cea:	d1de      	bne.n	8015caa <_dtoa_r+0xa72>
 8015cec:	07da      	lsls	r2, r3, #31
 8015cee:	d5dc      	bpl.n	8015caa <_dtoa_r+0xa72>
 8015cf0:	2b39      	cmp	r3, #57	; 0x39
 8015cf2:	d1d8      	bne.n	8015ca6 <_dtoa_r+0xa6e>
 8015cf4:	9a02      	ldr	r2, [sp, #8]
 8015cf6:	2339      	movs	r3, #57	; 0x39
 8015cf8:	7013      	strb	r3, [r2, #0]
 8015cfa:	462b      	mov	r3, r5
 8015cfc:	461d      	mov	r5, r3
 8015cfe:	3b01      	subs	r3, #1
 8015d00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015d04:	2a39      	cmp	r2, #57	; 0x39
 8015d06:	d050      	beq.n	8015daa <_dtoa_r+0xb72>
 8015d08:	3201      	adds	r2, #1
 8015d0a:	701a      	strb	r2, [r3, #0]
 8015d0c:	e745      	b.n	8015b9a <_dtoa_r+0x962>
 8015d0e:	2a00      	cmp	r2, #0
 8015d10:	dd03      	ble.n	8015d1a <_dtoa_r+0xae2>
 8015d12:	2b39      	cmp	r3, #57	; 0x39
 8015d14:	d0ee      	beq.n	8015cf4 <_dtoa_r+0xabc>
 8015d16:	3301      	adds	r3, #1
 8015d18:	e7c7      	b.n	8015caa <_dtoa_r+0xa72>
 8015d1a:	9a01      	ldr	r2, [sp, #4]
 8015d1c:	9907      	ldr	r1, [sp, #28]
 8015d1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015d22:	428a      	cmp	r2, r1
 8015d24:	d02a      	beq.n	8015d7c <_dtoa_r+0xb44>
 8015d26:	4659      	mov	r1, fp
 8015d28:	2300      	movs	r3, #0
 8015d2a:	220a      	movs	r2, #10
 8015d2c:	4620      	mov	r0, r4
 8015d2e:	f000 fcef 	bl	8016710 <__multadd>
 8015d32:	45b8      	cmp	r8, r7
 8015d34:	4683      	mov	fp, r0
 8015d36:	f04f 0300 	mov.w	r3, #0
 8015d3a:	f04f 020a 	mov.w	r2, #10
 8015d3e:	4641      	mov	r1, r8
 8015d40:	4620      	mov	r0, r4
 8015d42:	d107      	bne.n	8015d54 <_dtoa_r+0xb1c>
 8015d44:	f000 fce4 	bl	8016710 <__multadd>
 8015d48:	4680      	mov	r8, r0
 8015d4a:	4607      	mov	r7, r0
 8015d4c:	9b01      	ldr	r3, [sp, #4]
 8015d4e:	3301      	adds	r3, #1
 8015d50:	9301      	str	r3, [sp, #4]
 8015d52:	e775      	b.n	8015c40 <_dtoa_r+0xa08>
 8015d54:	f000 fcdc 	bl	8016710 <__multadd>
 8015d58:	4639      	mov	r1, r7
 8015d5a:	4680      	mov	r8, r0
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	220a      	movs	r2, #10
 8015d60:	4620      	mov	r0, r4
 8015d62:	f000 fcd5 	bl	8016710 <__multadd>
 8015d66:	4607      	mov	r7, r0
 8015d68:	e7f0      	b.n	8015d4c <_dtoa_r+0xb14>
 8015d6a:	f1b9 0f00 	cmp.w	r9, #0
 8015d6e:	9a00      	ldr	r2, [sp, #0]
 8015d70:	bfcc      	ite	gt
 8015d72:	464d      	movgt	r5, r9
 8015d74:	2501      	movle	r5, #1
 8015d76:	4415      	add	r5, r2
 8015d78:	f04f 0800 	mov.w	r8, #0
 8015d7c:	4659      	mov	r1, fp
 8015d7e:	2201      	movs	r2, #1
 8015d80:	4620      	mov	r0, r4
 8015d82:	9301      	str	r3, [sp, #4]
 8015d84:	f000 febe 	bl	8016b04 <__lshift>
 8015d88:	4631      	mov	r1, r6
 8015d8a:	4683      	mov	fp, r0
 8015d8c:	f000 ff26 	bl	8016bdc <__mcmp>
 8015d90:	2800      	cmp	r0, #0
 8015d92:	dcb2      	bgt.n	8015cfa <_dtoa_r+0xac2>
 8015d94:	d102      	bne.n	8015d9c <_dtoa_r+0xb64>
 8015d96:	9b01      	ldr	r3, [sp, #4]
 8015d98:	07db      	lsls	r3, r3, #31
 8015d9a:	d4ae      	bmi.n	8015cfa <_dtoa_r+0xac2>
 8015d9c:	462b      	mov	r3, r5
 8015d9e:	461d      	mov	r5, r3
 8015da0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015da4:	2a30      	cmp	r2, #48	; 0x30
 8015da6:	d0fa      	beq.n	8015d9e <_dtoa_r+0xb66>
 8015da8:	e6f7      	b.n	8015b9a <_dtoa_r+0x962>
 8015daa:	9a00      	ldr	r2, [sp, #0]
 8015dac:	429a      	cmp	r2, r3
 8015dae:	d1a5      	bne.n	8015cfc <_dtoa_r+0xac4>
 8015db0:	f10a 0a01 	add.w	sl, sl, #1
 8015db4:	2331      	movs	r3, #49	; 0x31
 8015db6:	e779      	b.n	8015cac <_dtoa_r+0xa74>
 8015db8:	4b13      	ldr	r3, [pc, #76]	; (8015e08 <_dtoa_r+0xbd0>)
 8015dba:	f7ff baaf 	b.w	801531c <_dtoa_r+0xe4>
 8015dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	f47f aa86 	bne.w	80152d2 <_dtoa_r+0x9a>
 8015dc6:	4b11      	ldr	r3, [pc, #68]	; (8015e0c <_dtoa_r+0xbd4>)
 8015dc8:	f7ff baa8 	b.w	801531c <_dtoa_r+0xe4>
 8015dcc:	f1b9 0f00 	cmp.w	r9, #0
 8015dd0:	dc03      	bgt.n	8015dda <_dtoa_r+0xba2>
 8015dd2:	9b05      	ldr	r3, [sp, #20]
 8015dd4:	2b02      	cmp	r3, #2
 8015dd6:	f73f aec9 	bgt.w	8015b6c <_dtoa_r+0x934>
 8015dda:	9d00      	ldr	r5, [sp, #0]
 8015ddc:	4631      	mov	r1, r6
 8015dde:	4658      	mov	r0, fp
 8015de0:	f7ff f99e 	bl	8015120 <quorem>
 8015de4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015de8:	f805 3b01 	strb.w	r3, [r5], #1
 8015dec:	9a00      	ldr	r2, [sp, #0]
 8015dee:	1aaa      	subs	r2, r5, r2
 8015df0:	4591      	cmp	r9, r2
 8015df2:	ddba      	ble.n	8015d6a <_dtoa_r+0xb32>
 8015df4:	4659      	mov	r1, fp
 8015df6:	2300      	movs	r3, #0
 8015df8:	220a      	movs	r2, #10
 8015dfa:	4620      	mov	r0, r4
 8015dfc:	f000 fc88 	bl	8016710 <__multadd>
 8015e00:	4683      	mov	fp, r0
 8015e02:	e7eb      	b.n	8015ddc <_dtoa_r+0xba4>
 8015e04:	0801895c 	.word	0x0801895c
 8015e08:	08018b50 	.word	0x08018b50
 8015e0c:	080188d9 	.word	0x080188d9

08015e10 <fileno>:
 8015e10:	b570      	push	{r4, r5, r6, lr}
 8015e12:	4e1a      	ldr	r6, [pc, #104]	; (8015e7c <fileno+0x6c>)
 8015e14:	6835      	ldr	r5, [r6, #0]
 8015e16:	4604      	mov	r4, r0
 8015e18:	b125      	cbz	r5, 8015e24 <fileno+0x14>
 8015e1a:	69ab      	ldr	r3, [r5, #24]
 8015e1c:	b913      	cbnz	r3, 8015e24 <fileno+0x14>
 8015e1e:	4628      	mov	r0, r5
 8015e20:	f7fc fbf0 	bl	8012604 <__sinit>
 8015e24:	4b16      	ldr	r3, [pc, #88]	; (8015e80 <fileno+0x70>)
 8015e26:	429c      	cmp	r4, r3
 8015e28:	d118      	bne.n	8015e5c <fileno+0x4c>
 8015e2a:	686c      	ldr	r4, [r5, #4]
 8015e2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015e2e:	07d8      	lsls	r0, r3, #31
 8015e30:	d405      	bmi.n	8015e3e <fileno+0x2e>
 8015e32:	89a3      	ldrh	r3, [r4, #12]
 8015e34:	0599      	lsls	r1, r3, #22
 8015e36:	d402      	bmi.n	8015e3e <fileno+0x2e>
 8015e38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e3a:	f7fc fcb8 	bl	80127ae <__retarget_lock_acquire_recursive>
 8015e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e42:	b1ab      	cbz	r3, 8015e70 <fileno+0x60>
 8015e44:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8015e48:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015e4a:	07d2      	lsls	r2, r2, #31
 8015e4c:	d404      	bmi.n	8015e58 <fileno+0x48>
 8015e4e:	059b      	lsls	r3, r3, #22
 8015e50:	d402      	bmi.n	8015e58 <fileno+0x48>
 8015e52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e54:	f7fc fcac 	bl	80127b0 <__retarget_lock_release_recursive>
 8015e58:	4628      	mov	r0, r5
 8015e5a:	bd70      	pop	{r4, r5, r6, pc}
 8015e5c:	4b09      	ldr	r3, [pc, #36]	; (8015e84 <fileno+0x74>)
 8015e5e:	429c      	cmp	r4, r3
 8015e60:	d101      	bne.n	8015e66 <fileno+0x56>
 8015e62:	68ac      	ldr	r4, [r5, #8]
 8015e64:	e7e2      	b.n	8015e2c <fileno+0x1c>
 8015e66:	4b08      	ldr	r3, [pc, #32]	; (8015e88 <fileno+0x78>)
 8015e68:	429c      	cmp	r4, r3
 8015e6a:	bf08      	it	eq
 8015e6c:	68ec      	ldreq	r4, [r5, #12]
 8015e6e:	e7dd      	b.n	8015e2c <fileno+0x1c>
 8015e70:	6832      	ldr	r2, [r6, #0]
 8015e72:	2109      	movs	r1, #9
 8015e74:	6011      	str	r1, [r2, #0]
 8015e76:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015e7a:	e7e5      	b.n	8015e48 <fileno+0x38>
 8015e7c:	2000006c 	.word	0x2000006c
 8015e80:	08018064 	.word	0x08018064
 8015e84:	08018084 	.word	0x08018084
 8015e88:	08018044 	.word	0x08018044

08015e8c <_fstat_r>:
 8015e8c:	b538      	push	{r3, r4, r5, lr}
 8015e8e:	4d07      	ldr	r5, [pc, #28]	; (8015eac <_fstat_r+0x20>)
 8015e90:	2300      	movs	r3, #0
 8015e92:	4604      	mov	r4, r0
 8015e94:	4608      	mov	r0, r1
 8015e96:	4611      	mov	r1, r2
 8015e98:	602b      	str	r3, [r5, #0]
 8015e9a:	f001 fed9 	bl	8017c50 <_fstat>
 8015e9e:	1c43      	adds	r3, r0, #1
 8015ea0:	d102      	bne.n	8015ea8 <_fstat_r+0x1c>
 8015ea2:	682b      	ldr	r3, [r5, #0]
 8015ea4:	b103      	cbz	r3, 8015ea8 <_fstat_r+0x1c>
 8015ea6:	6023      	str	r3, [r4, #0]
 8015ea8:	bd38      	pop	{r3, r4, r5, pc}
 8015eaa:	bf00      	nop
 8015eac:	200208c0 	.word	0x200208c0

08015eb0 <rshift>:
 8015eb0:	6903      	ldr	r3, [r0, #16]
 8015eb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015eb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015eba:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015ebe:	f100 0414 	add.w	r4, r0, #20
 8015ec2:	dd45      	ble.n	8015f50 <rshift+0xa0>
 8015ec4:	f011 011f 	ands.w	r1, r1, #31
 8015ec8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015ecc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015ed0:	d10c      	bne.n	8015eec <rshift+0x3c>
 8015ed2:	f100 0710 	add.w	r7, r0, #16
 8015ed6:	4629      	mov	r1, r5
 8015ed8:	42b1      	cmp	r1, r6
 8015eda:	d334      	bcc.n	8015f46 <rshift+0x96>
 8015edc:	1a9b      	subs	r3, r3, r2
 8015ede:	009b      	lsls	r3, r3, #2
 8015ee0:	1eea      	subs	r2, r5, #3
 8015ee2:	4296      	cmp	r6, r2
 8015ee4:	bf38      	it	cc
 8015ee6:	2300      	movcc	r3, #0
 8015ee8:	4423      	add	r3, r4
 8015eea:	e015      	b.n	8015f18 <rshift+0x68>
 8015eec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015ef0:	f1c1 0820 	rsb	r8, r1, #32
 8015ef4:	40cf      	lsrs	r7, r1
 8015ef6:	f105 0e04 	add.w	lr, r5, #4
 8015efa:	46a1      	mov	r9, r4
 8015efc:	4576      	cmp	r6, lr
 8015efe:	46f4      	mov	ip, lr
 8015f00:	d815      	bhi.n	8015f2e <rshift+0x7e>
 8015f02:	1a9b      	subs	r3, r3, r2
 8015f04:	009a      	lsls	r2, r3, #2
 8015f06:	3a04      	subs	r2, #4
 8015f08:	3501      	adds	r5, #1
 8015f0a:	42ae      	cmp	r6, r5
 8015f0c:	bf38      	it	cc
 8015f0e:	2200      	movcc	r2, #0
 8015f10:	18a3      	adds	r3, r4, r2
 8015f12:	50a7      	str	r7, [r4, r2]
 8015f14:	b107      	cbz	r7, 8015f18 <rshift+0x68>
 8015f16:	3304      	adds	r3, #4
 8015f18:	1b1a      	subs	r2, r3, r4
 8015f1a:	42a3      	cmp	r3, r4
 8015f1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015f20:	bf08      	it	eq
 8015f22:	2300      	moveq	r3, #0
 8015f24:	6102      	str	r2, [r0, #16]
 8015f26:	bf08      	it	eq
 8015f28:	6143      	streq	r3, [r0, #20]
 8015f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f2e:	f8dc c000 	ldr.w	ip, [ip]
 8015f32:	fa0c fc08 	lsl.w	ip, ip, r8
 8015f36:	ea4c 0707 	orr.w	r7, ip, r7
 8015f3a:	f849 7b04 	str.w	r7, [r9], #4
 8015f3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015f42:	40cf      	lsrs	r7, r1
 8015f44:	e7da      	b.n	8015efc <rshift+0x4c>
 8015f46:	f851 cb04 	ldr.w	ip, [r1], #4
 8015f4a:	f847 cf04 	str.w	ip, [r7, #4]!
 8015f4e:	e7c3      	b.n	8015ed8 <rshift+0x28>
 8015f50:	4623      	mov	r3, r4
 8015f52:	e7e1      	b.n	8015f18 <rshift+0x68>

08015f54 <__hexdig_fun>:
 8015f54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015f58:	2b09      	cmp	r3, #9
 8015f5a:	d802      	bhi.n	8015f62 <__hexdig_fun+0xe>
 8015f5c:	3820      	subs	r0, #32
 8015f5e:	b2c0      	uxtb	r0, r0
 8015f60:	4770      	bx	lr
 8015f62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015f66:	2b05      	cmp	r3, #5
 8015f68:	d801      	bhi.n	8015f6e <__hexdig_fun+0x1a>
 8015f6a:	3847      	subs	r0, #71	; 0x47
 8015f6c:	e7f7      	b.n	8015f5e <__hexdig_fun+0xa>
 8015f6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015f72:	2b05      	cmp	r3, #5
 8015f74:	d801      	bhi.n	8015f7a <__hexdig_fun+0x26>
 8015f76:	3827      	subs	r0, #39	; 0x27
 8015f78:	e7f1      	b.n	8015f5e <__hexdig_fun+0xa>
 8015f7a:	2000      	movs	r0, #0
 8015f7c:	4770      	bx	lr
	...

08015f80 <__gethex>:
 8015f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f84:	ed2d 8b02 	vpush	{d8}
 8015f88:	b089      	sub	sp, #36	; 0x24
 8015f8a:	ee08 0a10 	vmov	s16, r0
 8015f8e:	9304      	str	r3, [sp, #16]
 8015f90:	4bbc      	ldr	r3, [pc, #752]	; (8016284 <__gethex+0x304>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	9301      	str	r3, [sp, #4]
 8015f96:	4618      	mov	r0, r3
 8015f98:	468b      	mov	fp, r1
 8015f9a:	4690      	mov	r8, r2
 8015f9c:	f7ea f978 	bl	8000290 <strlen>
 8015fa0:	9b01      	ldr	r3, [sp, #4]
 8015fa2:	f8db 2000 	ldr.w	r2, [fp]
 8015fa6:	4403      	add	r3, r0
 8015fa8:	4682      	mov	sl, r0
 8015faa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015fae:	9305      	str	r3, [sp, #20]
 8015fb0:	1c93      	adds	r3, r2, #2
 8015fb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015fb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015fba:	32fe      	adds	r2, #254	; 0xfe
 8015fbc:	18d1      	adds	r1, r2, r3
 8015fbe:	461f      	mov	r7, r3
 8015fc0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015fc4:	9100      	str	r1, [sp, #0]
 8015fc6:	2830      	cmp	r0, #48	; 0x30
 8015fc8:	d0f8      	beq.n	8015fbc <__gethex+0x3c>
 8015fca:	f7ff ffc3 	bl	8015f54 <__hexdig_fun>
 8015fce:	4604      	mov	r4, r0
 8015fd0:	2800      	cmp	r0, #0
 8015fd2:	d13a      	bne.n	801604a <__gethex+0xca>
 8015fd4:	9901      	ldr	r1, [sp, #4]
 8015fd6:	4652      	mov	r2, sl
 8015fd8:	4638      	mov	r0, r7
 8015fda:	f001 fce7 	bl	80179ac <strncmp>
 8015fde:	4605      	mov	r5, r0
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	d168      	bne.n	80160b6 <__gethex+0x136>
 8015fe4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015fe8:	eb07 060a 	add.w	r6, r7, sl
 8015fec:	f7ff ffb2 	bl	8015f54 <__hexdig_fun>
 8015ff0:	2800      	cmp	r0, #0
 8015ff2:	d062      	beq.n	80160ba <__gethex+0x13a>
 8015ff4:	4633      	mov	r3, r6
 8015ff6:	7818      	ldrb	r0, [r3, #0]
 8015ff8:	2830      	cmp	r0, #48	; 0x30
 8015ffa:	461f      	mov	r7, r3
 8015ffc:	f103 0301 	add.w	r3, r3, #1
 8016000:	d0f9      	beq.n	8015ff6 <__gethex+0x76>
 8016002:	f7ff ffa7 	bl	8015f54 <__hexdig_fun>
 8016006:	2301      	movs	r3, #1
 8016008:	fab0 f480 	clz	r4, r0
 801600c:	0964      	lsrs	r4, r4, #5
 801600e:	4635      	mov	r5, r6
 8016010:	9300      	str	r3, [sp, #0]
 8016012:	463a      	mov	r2, r7
 8016014:	4616      	mov	r6, r2
 8016016:	3201      	adds	r2, #1
 8016018:	7830      	ldrb	r0, [r6, #0]
 801601a:	f7ff ff9b 	bl	8015f54 <__hexdig_fun>
 801601e:	2800      	cmp	r0, #0
 8016020:	d1f8      	bne.n	8016014 <__gethex+0x94>
 8016022:	9901      	ldr	r1, [sp, #4]
 8016024:	4652      	mov	r2, sl
 8016026:	4630      	mov	r0, r6
 8016028:	f001 fcc0 	bl	80179ac <strncmp>
 801602c:	b980      	cbnz	r0, 8016050 <__gethex+0xd0>
 801602e:	b94d      	cbnz	r5, 8016044 <__gethex+0xc4>
 8016030:	eb06 050a 	add.w	r5, r6, sl
 8016034:	462a      	mov	r2, r5
 8016036:	4616      	mov	r6, r2
 8016038:	3201      	adds	r2, #1
 801603a:	7830      	ldrb	r0, [r6, #0]
 801603c:	f7ff ff8a 	bl	8015f54 <__hexdig_fun>
 8016040:	2800      	cmp	r0, #0
 8016042:	d1f8      	bne.n	8016036 <__gethex+0xb6>
 8016044:	1bad      	subs	r5, r5, r6
 8016046:	00ad      	lsls	r5, r5, #2
 8016048:	e004      	b.n	8016054 <__gethex+0xd4>
 801604a:	2400      	movs	r4, #0
 801604c:	4625      	mov	r5, r4
 801604e:	e7e0      	b.n	8016012 <__gethex+0x92>
 8016050:	2d00      	cmp	r5, #0
 8016052:	d1f7      	bne.n	8016044 <__gethex+0xc4>
 8016054:	7833      	ldrb	r3, [r6, #0]
 8016056:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801605a:	2b50      	cmp	r3, #80	; 0x50
 801605c:	d13b      	bne.n	80160d6 <__gethex+0x156>
 801605e:	7873      	ldrb	r3, [r6, #1]
 8016060:	2b2b      	cmp	r3, #43	; 0x2b
 8016062:	d02c      	beq.n	80160be <__gethex+0x13e>
 8016064:	2b2d      	cmp	r3, #45	; 0x2d
 8016066:	d02e      	beq.n	80160c6 <__gethex+0x146>
 8016068:	1c71      	adds	r1, r6, #1
 801606a:	f04f 0900 	mov.w	r9, #0
 801606e:	7808      	ldrb	r0, [r1, #0]
 8016070:	f7ff ff70 	bl	8015f54 <__hexdig_fun>
 8016074:	1e43      	subs	r3, r0, #1
 8016076:	b2db      	uxtb	r3, r3
 8016078:	2b18      	cmp	r3, #24
 801607a:	d82c      	bhi.n	80160d6 <__gethex+0x156>
 801607c:	f1a0 0210 	sub.w	r2, r0, #16
 8016080:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016084:	f7ff ff66 	bl	8015f54 <__hexdig_fun>
 8016088:	1e43      	subs	r3, r0, #1
 801608a:	b2db      	uxtb	r3, r3
 801608c:	2b18      	cmp	r3, #24
 801608e:	d91d      	bls.n	80160cc <__gethex+0x14c>
 8016090:	f1b9 0f00 	cmp.w	r9, #0
 8016094:	d000      	beq.n	8016098 <__gethex+0x118>
 8016096:	4252      	negs	r2, r2
 8016098:	4415      	add	r5, r2
 801609a:	f8cb 1000 	str.w	r1, [fp]
 801609e:	b1e4      	cbz	r4, 80160da <__gethex+0x15a>
 80160a0:	9b00      	ldr	r3, [sp, #0]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	bf14      	ite	ne
 80160a6:	2700      	movne	r7, #0
 80160a8:	2706      	moveq	r7, #6
 80160aa:	4638      	mov	r0, r7
 80160ac:	b009      	add	sp, #36	; 0x24
 80160ae:	ecbd 8b02 	vpop	{d8}
 80160b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160b6:	463e      	mov	r6, r7
 80160b8:	4625      	mov	r5, r4
 80160ba:	2401      	movs	r4, #1
 80160bc:	e7ca      	b.n	8016054 <__gethex+0xd4>
 80160be:	f04f 0900 	mov.w	r9, #0
 80160c2:	1cb1      	adds	r1, r6, #2
 80160c4:	e7d3      	b.n	801606e <__gethex+0xee>
 80160c6:	f04f 0901 	mov.w	r9, #1
 80160ca:	e7fa      	b.n	80160c2 <__gethex+0x142>
 80160cc:	230a      	movs	r3, #10
 80160ce:	fb03 0202 	mla	r2, r3, r2, r0
 80160d2:	3a10      	subs	r2, #16
 80160d4:	e7d4      	b.n	8016080 <__gethex+0x100>
 80160d6:	4631      	mov	r1, r6
 80160d8:	e7df      	b.n	801609a <__gethex+0x11a>
 80160da:	1bf3      	subs	r3, r6, r7
 80160dc:	3b01      	subs	r3, #1
 80160de:	4621      	mov	r1, r4
 80160e0:	2b07      	cmp	r3, #7
 80160e2:	dc0b      	bgt.n	80160fc <__gethex+0x17c>
 80160e4:	ee18 0a10 	vmov	r0, s16
 80160e8:	f000 fab0 	bl	801664c <_Balloc>
 80160ec:	4604      	mov	r4, r0
 80160ee:	b940      	cbnz	r0, 8016102 <__gethex+0x182>
 80160f0:	4b65      	ldr	r3, [pc, #404]	; (8016288 <__gethex+0x308>)
 80160f2:	4602      	mov	r2, r0
 80160f4:	21de      	movs	r1, #222	; 0xde
 80160f6:	4865      	ldr	r0, [pc, #404]	; (801628c <__gethex+0x30c>)
 80160f8:	f001 fd30 	bl	8017b5c <__assert_func>
 80160fc:	3101      	adds	r1, #1
 80160fe:	105b      	asrs	r3, r3, #1
 8016100:	e7ee      	b.n	80160e0 <__gethex+0x160>
 8016102:	f100 0914 	add.w	r9, r0, #20
 8016106:	f04f 0b00 	mov.w	fp, #0
 801610a:	f1ca 0301 	rsb	r3, sl, #1
 801610e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016112:	f8cd b000 	str.w	fp, [sp]
 8016116:	9306      	str	r3, [sp, #24]
 8016118:	42b7      	cmp	r7, r6
 801611a:	d340      	bcc.n	801619e <__gethex+0x21e>
 801611c:	9802      	ldr	r0, [sp, #8]
 801611e:	9b00      	ldr	r3, [sp, #0]
 8016120:	f840 3b04 	str.w	r3, [r0], #4
 8016124:	eba0 0009 	sub.w	r0, r0, r9
 8016128:	1080      	asrs	r0, r0, #2
 801612a:	0146      	lsls	r6, r0, #5
 801612c:	6120      	str	r0, [r4, #16]
 801612e:	4618      	mov	r0, r3
 8016130:	f000 fb82 	bl	8016838 <__hi0bits>
 8016134:	1a30      	subs	r0, r6, r0
 8016136:	f8d8 6000 	ldr.w	r6, [r8]
 801613a:	42b0      	cmp	r0, r6
 801613c:	dd63      	ble.n	8016206 <__gethex+0x286>
 801613e:	1b87      	subs	r7, r0, r6
 8016140:	4639      	mov	r1, r7
 8016142:	4620      	mov	r0, r4
 8016144:	f000 ff1c 	bl	8016f80 <__any_on>
 8016148:	4682      	mov	sl, r0
 801614a:	b1a8      	cbz	r0, 8016178 <__gethex+0x1f8>
 801614c:	1e7b      	subs	r3, r7, #1
 801614e:	1159      	asrs	r1, r3, #5
 8016150:	f003 021f 	and.w	r2, r3, #31
 8016154:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016158:	f04f 0a01 	mov.w	sl, #1
 801615c:	fa0a f202 	lsl.w	r2, sl, r2
 8016160:	420a      	tst	r2, r1
 8016162:	d009      	beq.n	8016178 <__gethex+0x1f8>
 8016164:	4553      	cmp	r3, sl
 8016166:	dd05      	ble.n	8016174 <__gethex+0x1f4>
 8016168:	1eb9      	subs	r1, r7, #2
 801616a:	4620      	mov	r0, r4
 801616c:	f000 ff08 	bl	8016f80 <__any_on>
 8016170:	2800      	cmp	r0, #0
 8016172:	d145      	bne.n	8016200 <__gethex+0x280>
 8016174:	f04f 0a02 	mov.w	sl, #2
 8016178:	4639      	mov	r1, r7
 801617a:	4620      	mov	r0, r4
 801617c:	f7ff fe98 	bl	8015eb0 <rshift>
 8016180:	443d      	add	r5, r7
 8016182:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016186:	42ab      	cmp	r3, r5
 8016188:	da4c      	bge.n	8016224 <__gethex+0x2a4>
 801618a:	ee18 0a10 	vmov	r0, s16
 801618e:	4621      	mov	r1, r4
 8016190:	f000 fa9c 	bl	80166cc <_Bfree>
 8016194:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016196:	2300      	movs	r3, #0
 8016198:	6013      	str	r3, [r2, #0]
 801619a:	27a3      	movs	r7, #163	; 0xa3
 801619c:	e785      	b.n	80160aa <__gethex+0x12a>
 801619e:	1e73      	subs	r3, r6, #1
 80161a0:	9a05      	ldr	r2, [sp, #20]
 80161a2:	9303      	str	r3, [sp, #12]
 80161a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80161a8:	4293      	cmp	r3, r2
 80161aa:	d019      	beq.n	80161e0 <__gethex+0x260>
 80161ac:	f1bb 0f20 	cmp.w	fp, #32
 80161b0:	d107      	bne.n	80161c2 <__gethex+0x242>
 80161b2:	9b02      	ldr	r3, [sp, #8]
 80161b4:	9a00      	ldr	r2, [sp, #0]
 80161b6:	f843 2b04 	str.w	r2, [r3], #4
 80161ba:	9302      	str	r3, [sp, #8]
 80161bc:	2300      	movs	r3, #0
 80161be:	9300      	str	r3, [sp, #0]
 80161c0:	469b      	mov	fp, r3
 80161c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80161c6:	f7ff fec5 	bl	8015f54 <__hexdig_fun>
 80161ca:	9b00      	ldr	r3, [sp, #0]
 80161cc:	f000 000f 	and.w	r0, r0, #15
 80161d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80161d4:	4303      	orrs	r3, r0
 80161d6:	9300      	str	r3, [sp, #0]
 80161d8:	f10b 0b04 	add.w	fp, fp, #4
 80161dc:	9b03      	ldr	r3, [sp, #12]
 80161de:	e00d      	b.n	80161fc <__gethex+0x27c>
 80161e0:	9b03      	ldr	r3, [sp, #12]
 80161e2:	9a06      	ldr	r2, [sp, #24]
 80161e4:	4413      	add	r3, r2
 80161e6:	42bb      	cmp	r3, r7
 80161e8:	d3e0      	bcc.n	80161ac <__gethex+0x22c>
 80161ea:	4618      	mov	r0, r3
 80161ec:	9901      	ldr	r1, [sp, #4]
 80161ee:	9307      	str	r3, [sp, #28]
 80161f0:	4652      	mov	r2, sl
 80161f2:	f001 fbdb 	bl	80179ac <strncmp>
 80161f6:	9b07      	ldr	r3, [sp, #28]
 80161f8:	2800      	cmp	r0, #0
 80161fa:	d1d7      	bne.n	80161ac <__gethex+0x22c>
 80161fc:	461e      	mov	r6, r3
 80161fe:	e78b      	b.n	8016118 <__gethex+0x198>
 8016200:	f04f 0a03 	mov.w	sl, #3
 8016204:	e7b8      	b.n	8016178 <__gethex+0x1f8>
 8016206:	da0a      	bge.n	801621e <__gethex+0x29e>
 8016208:	1a37      	subs	r7, r6, r0
 801620a:	4621      	mov	r1, r4
 801620c:	ee18 0a10 	vmov	r0, s16
 8016210:	463a      	mov	r2, r7
 8016212:	f000 fc77 	bl	8016b04 <__lshift>
 8016216:	1bed      	subs	r5, r5, r7
 8016218:	4604      	mov	r4, r0
 801621a:	f100 0914 	add.w	r9, r0, #20
 801621e:	f04f 0a00 	mov.w	sl, #0
 8016222:	e7ae      	b.n	8016182 <__gethex+0x202>
 8016224:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016228:	42a8      	cmp	r0, r5
 801622a:	dd72      	ble.n	8016312 <__gethex+0x392>
 801622c:	1b45      	subs	r5, r0, r5
 801622e:	42ae      	cmp	r6, r5
 8016230:	dc36      	bgt.n	80162a0 <__gethex+0x320>
 8016232:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016236:	2b02      	cmp	r3, #2
 8016238:	d02a      	beq.n	8016290 <__gethex+0x310>
 801623a:	2b03      	cmp	r3, #3
 801623c:	d02c      	beq.n	8016298 <__gethex+0x318>
 801623e:	2b01      	cmp	r3, #1
 8016240:	d115      	bne.n	801626e <__gethex+0x2ee>
 8016242:	42ae      	cmp	r6, r5
 8016244:	d113      	bne.n	801626e <__gethex+0x2ee>
 8016246:	2e01      	cmp	r6, #1
 8016248:	d10b      	bne.n	8016262 <__gethex+0x2e2>
 801624a:	9a04      	ldr	r2, [sp, #16]
 801624c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016250:	6013      	str	r3, [r2, #0]
 8016252:	2301      	movs	r3, #1
 8016254:	6123      	str	r3, [r4, #16]
 8016256:	f8c9 3000 	str.w	r3, [r9]
 801625a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801625c:	2762      	movs	r7, #98	; 0x62
 801625e:	601c      	str	r4, [r3, #0]
 8016260:	e723      	b.n	80160aa <__gethex+0x12a>
 8016262:	1e71      	subs	r1, r6, #1
 8016264:	4620      	mov	r0, r4
 8016266:	f000 fe8b 	bl	8016f80 <__any_on>
 801626a:	2800      	cmp	r0, #0
 801626c:	d1ed      	bne.n	801624a <__gethex+0x2ca>
 801626e:	ee18 0a10 	vmov	r0, s16
 8016272:	4621      	mov	r1, r4
 8016274:	f000 fa2a 	bl	80166cc <_Bfree>
 8016278:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801627a:	2300      	movs	r3, #0
 801627c:	6013      	str	r3, [r2, #0]
 801627e:	2750      	movs	r7, #80	; 0x50
 8016280:	e713      	b.n	80160aa <__gethex+0x12a>
 8016282:	bf00      	nop
 8016284:	080189d8 	.word	0x080189d8
 8016288:	0801895c 	.word	0x0801895c
 801628c:	0801896d 	.word	0x0801896d
 8016290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016292:	2b00      	cmp	r3, #0
 8016294:	d1eb      	bne.n	801626e <__gethex+0x2ee>
 8016296:	e7d8      	b.n	801624a <__gethex+0x2ca>
 8016298:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801629a:	2b00      	cmp	r3, #0
 801629c:	d1d5      	bne.n	801624a <__gethex+0x2ca>
 801629e:	e7e6      	b.n	801626e <__gethex+0x2ee>
 80162a0:	1e6f      	subs	r7, r5, #1
 80162a2:	f1ba 0f00 	cmp.w	sl, #0
 80162a6:	d131      	bne.n	801630c <__gethex+0x38c>
 80162a8:	b127      	cbz	r7, 80162b4 <__gethex+0x334>
 80162aa:	4639      	mov	r1, r7
 80162ac:	4620      	mov	r0, r4
 80162ae:	f000 fe67 	bl	8016f80 <__any_on>
 80162b2:	4682      	mov	sl, r0
 80162b4:	117b      	asrs	r3, r7, #5
 80162b6:	2101      	movs	r1, #1
 80162b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80162bc:	f007 071f 	and.w	r7, r7, #31
 80162c0:	fa01 f707 	lsl.w	r7, r1, r7
 80162c4:	421f      	tst	r7, r3
 80162c6:	4629      	mov	r1, r5
 80162c8:	4620      	mov	r0, r4
 80162ca:	bf18      	it	ne
 80162cc:	f04a 0a02 	orrne.w	sl, sl, #2
 80162d0:	1b76      	subs	r6, r6, r5
 80162d2:	f7ff fded 	bl	8015eb0 <rshift>
 80162d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80162da:	2702      	movs	r7, #2
 80162dc:	f1ba 0f00 	cmp.w	sl, #0
 80162e0:	d048      	beq.n	8016374 <__gethex+0x3f4>
 80162e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80162e6:	2b02      	cmp	r3, #2
 80162e8:	d015      	beq.n	8016316 <__gethex+0x396>
 80162ea:	2b03      	cmp	r3, #3
 80162ec:	d017      	beq.n	801631e <__gethex+0x39e>
 80162ee:	2b01      	cmp	r3, #1
 80162f0:	d109      	bne.n	8016306 <__gethex+0x386>
 80162f2:	f01a 0f02 	tst.w	sl, #2
 80162f6:	d006      	beq.n	8016306 <__gethex+0x386>
 80162f8:	f8d9 0000 	ldr.w	r0, [r9]
 80162fc:	ea4a 0a00 	orr.w	sl, sl, r0
 8016300:	f01a 0f01 	tst.w	sl, #1
 8016304:	d10e      	bne.n	8016324 <__gethex+0x3a4>
 8016306:	f047 0710 	orr.w	r7, r7, #16
 801630a:	e033      	b.n	8016374 <__gethex+0x3f4>
 801630c:	f04f 0a01 	mov.w	sl, #1
 8016310:	e7d0      	b.n	80162b4 <__gethex+0x334>
 8016312:	2701      	movs	r7, #1
 8016314:	e7e2      	b.n	80162dc <__gethex+0x35c>
 8016316:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016318:	f1c3 0301 	rsb	r3, r3, #1
 801631c:	9315      	str	r3, [sp, #84]	; 0x54
 801631e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016320:	2b00      	cmp	r3, #0
 8016322:	d0f0      	beq.n	8016306 <__gethex+0x386>
 8016324:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016328:	f104 0314 	add.w	r3, r4, #20
 801632c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016330:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016334:	f04f 0c00 	mov.w	ip, #0
 8016338:	4618      	mov	r0, r3
 801633a:	f853 2b04 	ldr.w	r2, [r3], #4
 801633e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8016342:	d01c      	beq.n	801637e <__gethex+0x3fe>
 8016344:	3201      	adds	r2, #1
 8016346:	6002      	str	r2, [r0, #0]
 8016348:	2f02      	cmp	r7, #2
 801634a:	f104 0314 	add.w	r3, r4, #20
 801634e:	d13f      	bne.n	80163d0 <__gethex+0x450>
 8016350:	f8d8 2000 	ldr.w	r2, [r8]
 8016354:	3a01      	subs	r2, #1
 8016356:	42b2      	cmp	r2, r6
 8016358:	d10a      	bne.n	8016370 <__gethex+0x3f0>
 801635a:	1171      	asrs	r1, r6, #5
 801635c:	2201      	movs	r2, #1
 801635e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016362:	f006 061f 	and.w	r6, r6, #31
 8016366:	fa02 f606 	lsl.w	r6, r2, r6
 801636a:	421e      	tst	r6, r3
 801636c:	bf18      	it	ne
 801636e:	4617      	movne	r7, r2
 8016370:	f047 0720 	orr.w	r7, r7, #32
 8016374:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016376:	601c      	str	r4, [r3, #0]
 8016378:	9b04      	ldr	r3, [sp, #16]
 801637a:	601d      	str	r5, [r3, #0]
 801637c:	e695      	b.n	80160aa <__gethex+0x12a>
 801637e:	4299      	cmp	r1, r3
 8016380:	f843 cc04 	str.w	ip, [r3, #-4]
 8016384:	d8d8      	bhi.n	8016338 <__gethex+0x3b8>
 8016386:	68a3      	ldr	r3, [r4, #8]
 8016388:	459b      	cmp	fp, r3
 801638a:	db19      	blt.n	80163c0 <__gethex+0x440>
 801638c:	6861      	ldr	r1, [r4, #4]
 801638e:	ee18 0a10 	vmov	r0, s16
 8016392:	3101      	adds	r1, #1
 8016394:	f000 f95a 	bl	801664c <_Balloc>
 8016398:	4681      	mov	r9, r0
 801639a:	b918      	cbnz	r0, 80163a4 <__gethex+0x424>
 801639c:	4b1a      	ldr	r3, [pc, #104]	; (8016408 <__gethex+0x488>)
 801639e:	4602      	mov	r2, r0
 80163a0:	2184      	movs	r1, #132	; 0x84
 80163a2:	e6a8      	b.n	80160f6 <__gethex+0x176>
 80163a4:	6922      	ldr	r2, [r4, #16]
 80163a6:	3202      	adds	r2, #2
 80163a8:	f104 010c 	add.w	r1, r4, #12
 80163ac:	0092      	lsls	r2, r2, #2
 80163ae:	300c      	adds	r0, #12
 80163b0:	f7fc fa74 	bl	801289c <memcpy>
 80163b4:	4621      	mov	r1, r4
 80163b6:	ee18 0a10 	vmov	r0, s16
 80163ba:	f000 f987 	bl	80166cc <_Bfree>
 80163be:	464c      	mov	r4, r9
 80163c0:	6923      	ldr	r3, [r4, #16]
 80163c2:	1c5a      	adds	r2, r3, #1
 80163c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80163c8:	6122      	str	r2, [r4, #16]
 80163ca:	2201      	movs	r2, #1
 80163cc:	615a      	str	r2, [r3, #20]
 80163ce:	e7bb      	b.n	8016348 <__gethex+0x3c8>
 80163d0:	6922      	ldr	r2, [r4, #16]
 80163d2:	455a      	cmp	r2, fp
 80163d4:	dd0b      	ble.n	80163ee <__gethex+0x46e>
 80163d6:	2101      	movs	r1, #1
 80163d8:	4620      	mov	r0, r4
 80163da:	f7ff fd69 	bl	8015eb0 <rshift>
 80163de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80163e2:	3501      	adds	r5, #1
 80163e4:	42ab      	cmp	r3, r5
 80163e6:	f6ff aed0 	blt.w	801618a <__gethex+0x20a>
 80163ea:	2701      	movs	r7, #1
 80163ec:	e7c0      	b.n	8016370 <__gethex+0x3f0>
 80163ee:	f016 061f 	ands.w	r6, r6, #31
 80163f2:	d0fa      	beq.n	80163ea <__gethex+0x46a>
 80163f4:	449a      	add	sl, r3
 80163f6:	f1c6 0620 	rsb	r6, r6, #32
 80163fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80163fe:	f000 fa1b 	bl	8016838 <__hi0bits>
 8016402:	42b0      	cmp	r0, r6
 8016404:	dbe7      	blt.n	80163d6 <__gethex+0x456>
 8016406:	e7f0      	b.n	80163ea <__gethex+0x46a>
 8016408:	0801895c 	.word	0x0801895c

0801640c <L_shift>:
 801640c:	f1c2 0208 	rsb	r2, r2, #8
 8016410:	0092      	lsls	r2, r2, #2
 8016412:	b570      	push	{r4, r5, r6, lr}
 8016414:	f1c2 0620 	rsb	r6, r2, #32
 8016418:	6843      	ldr	r3, [r0, #4]
 801641a:	6804      	ldr	r4, [r0, #0]
 801641c:	fa03 f506 	lsl.w	r5, r3, r6
 8016420:	432c      	orrs	r4, r5
 8016422:	40d3      	lsrs	r3, r2
 8016424:	6004      	str	r4, [r0, #0]
 8016426:	f840 3f04 	str.w	r3, [r0, #4]!
 801642a:	4288      	cmp	r0, r1
 801642c:	d3f4      	bcc.n	8016418 <L_shift+0xc>
 801642e:	bd70      	pop	{r4, r5, r6, pc}

08016430 <__match>:
 8016430:	b530      	push	{r4, r5, lr}
 8016432:	6803      	ldr	r3, [r0, #0]
 8016434:	3301      	adds	r3, #1
 8016436:	f811 4b01 	ldrb.w	r4, [r1], #1
 801643a:	b914      	cbnz	r4, 8016442 <__match+0x12>
 801643c:	6003      	str	r3, [r0, #0]
 801643e:	2001      	movs	r0, #1
 8016440:	bd30      	pop	{r4, r5, pc}
 8016442:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016446:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801644a:	2d19      	cmp	r5, #25
 801644c:	bf98      	it	ls
 801644e:	3220      	addls	r2, #32
 8016450:	42a2      	cmp	r2, r4
 8016452:	d0f0      	beq.n	8016436 <__match+0x6>
 8016454:	2000      	movs	r0, #0
 8016456:	e7f3      	b.n	8016440 <__match+0x10>

08016458 <__hexnan>:
 8016458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801645c:	680b      	ldr	r3, [r1, #0]
 801645e:	6801      	ldr	r1, [r0, #0]
 8016460:	115e      	asrs	r6, r3, #5
 8016462:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016466:	f013 031f 	ands.w	r3, r3, #31
 801646a:	b087      	sub	sp, #28
 801646c:	bf18      	it	ne
 801646e:	3604      	addne	r6, #4
 8016470:	2500      	movs	r5, #0
 8016472:	1f37      	subs	r7, r6, #4
 8016474:	4682      	mov	sl, r0
 8016476:	4690      	mov	r8, r2
 8016478:	9301      	str	r3, [sp, #4]
 801647a:	f846 5c04 	str.w	r5, [r6, #-4]
 801647e:	46b9      	mov	r9, r7
 8016480:	463c      	mov	r4, r7
 8016482:	9502      	str	r5, [sp, #8]
 8016484:	46ab      	mov	fp, r5
 8016486:	784a      	ldrb	r2, [r1, #1]
 8016488:	1c4b      	adds	r3, r1, #1
 801648a:	9303      	str	r3, [sp, #12]
 801648c:	b342      	cbz	r2, 80164e0 <__hexnan+0x88>
 801648e:	4610      	mov	r0, r2
 8016490:	9105      	str	r1, [sp, #20]
 8016492:	9204      	str	r2, [sp, #16]
 8016494:	f7ff fd5e 	bl	8015f54 <__hexdig_fun>
 8016498:	2800      	cmp	r0, #0
 801649a:	d14f      	bne.n	801653c <__hexnan+0xe4>
 801649c:	9a04      	ldr	r2, [sp, #16]
 801649e:	9905      	ldr	r1, [sp, #20]
 80164a0:	2a20      	cmp	r2, #32
 80164a2:	d818      	bhi.n	80164d6 <__hexnan+0x7e>
 80164a4:	9b02      	ldr	r3, [sp, #8]
 80164a6:	459b      	cmp	fp, r3
 80164a8:	dd13      	ble.n	80164d2 <__hexnan+0x7a>
 80164aa:	454c      	cmp	r4, r9
 80164ac:	d206      	bcs.n	80164bc <__hexnan+0x64>
 80164ae:	2d07      	cmp	r5, #7
 80164b0:	dc04      	bgt.n	80164bc <__hexnan+0x64>
 80164b2:	462a      	mov	r2, r5
 80164b4:	4649      	mov	r1, r9
 80164b6:	4620      	mov	r0, r4
 80164b8:	f7ff ffa8 	bl	801640c <L_shift>
 80164bc:	4544      	cmp	r4, r8
 80164be:	d950      	bls.n	8016562 <__hexnan+0x10a>
 80164c0:	2300      	movs	r3, #0
 80164c2:	f1a4 0904 	sub.w	r9, r4, #4
 80164c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80164ca:	f8cd b008 	str.w	fp, [sp, #8]
 80164ce:	464c      	mov	r4, r9
 80164d0:	461d      	mov	r5, r3
 80164d2:	9903      	ldr	r1, [sp, #12]
 80164d4:	e7d7      	b.n	8016486 <__hexnan+0x2e>
 80164d6:	2a29      	cmp	r2, #41	; 0x29
 80164d8:	d156      	bne.n	8016588 <__hexnan+0x130>
 80164da:	3102      	adds	r1, #2
 80164dc:	f8ca 1000 	str.w	r1, [sl]
 80164e0:	f1bb 0f00 	cmp.w	fp, #0
 80164e4:	d050      	beq.n	8016588 <__hexnan+0x130>
 80164e6:	454c      	cmp	r4, r9
 80164e8:	d206      	bcs.n	80164f8 <__hexnan+0xa0>
 80164ea:	2d07      	cmp	r5, #7
 80164ec:	dc04      	bgt.n	80164f8 <__hexnan+0xa0>
 80164ee:	462a      	mov	r2, r5
 80164f0:	4649      	mov	r1, r9
 80164f2:	4620      	mov	r0, r4
 80164f4:	f7ff ff8a 	bl	801640c <L_shift>
 80164f8:	4544      	cmp	r4, r8
 80164fa:	d934      	bls.n	8016566 <__hexnan+0x10e>
 80164fc:	f1a8 0204 	sub.w	r2, r8, #4
 8016500:	4623      	mov	r3, r4
 8016502:	f853 1b04 	ldr.w	r1, [r3], #4
 8016506:	f842 1f04 	str.w	r1, [r2, #4]!
 801650a:	429f      	cmp	r7, r3
 801650c:	d2f9      	bcs.n	8016502 <__hexnan+0xaa>
 801650e:	1b3b      	subs	r3, r7, r4
 8016510:	f023 0303 	bic.w	r3, r3, #3
 8016514:	3304      	adds	r3, #4
 8016516:	3401      	adds	r4, #1
 8016518:	3e03      	subs	r6, #3
 801651a:	42b4      	cmp	r4, r6
 801651c:	bf88      	it	hi
 801651e:	2304      	movhi	r3, #4
 8016520:	4443      	add	r3, r8
 8016522:	2200      	movs	r2, #0
 8016524:	f843 2b04 	str.w	r2, [r3], #4
 8016528:	429f      	cmp	r7, r3
 801652a:	d2fb      	bcs.n	8016524 <__hexnan+0xcc>
 801652c:	683b      	ldr	r3, [r7, #0]
 801652e:	b91b      	cbnz	r3, 8016538 <__hexnan+0xe0>
 8016530:	4547      	cmp	r7, r8
 8016532:	d127      	bne.n	8016584 <__hexnan+0x12c>
 8016534:	2301      	movs	r3, #1
 8016536:	603b      	str	r3, [r7, #0]
 8016538:	2005      	movs	r0, #5
 801653a:	e026      	b.n	801658a <__hexnan+0x132>
 801653c:	3501      	adds	r5, #1
 801653e:	2d08      	cmp	r5, #8
 8016540:	f10b 0b01 	add.w	fp, fp, #1
 8016544:	dd06      	ble.n	8016554 <__hexnan+0xfc>
 8016546:	4544      	cmp	r4, r8
 8016548:	d9c3      	bls.n	80164d2 <__hexnan+0x7a>
 801654a:	2300      	movs	r3, #0
 801654c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016550:	2501      	movs	r5, #1
 8016552:	3c04      	subs	r4, #4
 8016554:	6822      	ldr	r2, [r4, #0]
 8016556:	f000 000f 	and.w	r0, r0, #15
 801655a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801655e:	6022      	str	r2, [r4, #0]
 8016560:	e7b7      	b.n	80164d2 <__hexnan+0x7a>
 8016562:	2508      	movs	r5, #8
 8016564:	e7b5      	b.n	80164d2 <__hexnan+0x7a>
 8016566:	9b01      	ldr	r3, [sp, #4]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d0df      	beq.n	801652c <__hexnan+0xd4>
 801656c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016570:	f1c3 0320 	rsb	r3, r3, #32
 8016574:	fa22 f303 	lsr.w	r3, r2, r3
 8016578:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801657c:	401a      	ands	r2, r3
 801657e:	f846 2c04 	str.w	r2, [r6, #-4]
 8016582:	e7d3      	b.n	801652c <__hexnan+0xd4>
 8016584:	3f04      	subs	r7, #4
 8016586:	e7d1      	b.n	801652c <__hexnan+0xd4>
 8016588:	2004      	movs	r0, #4
 801658a:	b007      	add	sp, #28
 801658c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016590 <_isatty_r>:
 8016590:	b538      	push	{r3, r4, r5, lr}
 8016592:	4d06      	ldr	r5, [pc, #24]	; (80165ac <_isatty_r+0x1c>)
 8016594:	2300      	movs	r3, #0
 8016596:	4604      	mov	r4, r0
 8016598:	4608      	mov	r0, r1
 801659a:	602b      	str	r3, [r5, #0]
 801659c:	f001 fb68 	bl	8017c70 <_isatty>
 80165a0:	1c43      	adds	r3, r0, #1
 80165a2:	d102      	bne.n	80165aa <_isatty_r+0x1a>
 80165a4:	682b      	ldr	r3, [r5, #0]
 80165a6:	b103      	cbz	r3, 80165aa <_isatty_r+0x1a>
 80165a8:	6023      	str	r3, [r4, #0]
 80165aa:	bd38      	pop	{r3, r4, r5, pc}
 80165ac:	200208c0 	.word	0x200208c0

080165b0 <_localeconv_r>:
 80165b0:	4800      	ldr	r0, [pc, #0]	; (80165b4 <_localeconv_r+0x4>)
 80165b2:	4770      	bx	lr
 80165b4:	200001c4 	.word	0x200001c4

080165b8 <_lseek_r>:
 80165b8:	b538      	push	{r3, r4, r5, lr}
 80165ba:	4d07      	ldr	r5, [pc, #28]	; (80165d8 <_lseek_r+0x20>)
 80165bc:	4604      	mov	r4, r0
 80165be:	4608      	mov	r0, r1
 80165c0:	4611      	mov	r1, r2
 80165c2:	2200      	movs	r2, #0
 80165c4:	602a      	str	r2, [r5, #0]
 80165c6:	461a      	mov	r2, r3
 80165c8:	f001 fb62 	bl	8017c90 <_lseek>
 80165cc:	1c43      	adds	r3, r0, #1
 80165ce:	d102      	bne.n	80165d6 <_lseek_r+0x1e>
 80165d0:	682b      	ldr	r3, [r5, #0]
 80165d2:	b103      	cbz	r3, 80165d6 <_lseek_r+0x1e>
 80165d4:	6023      	str	r3, [r4, #0]
 80165d6:	bd38      	pop	{r3, r4, r5, pc}
 80165d8:	200208c0 	.word	0x200208c0

080165dc <__ascii_mbtowc>:
 80165dc:	b082      	sub	sp, #8
 80165de:	b901      	cbnz	r1, 80165e2 <__ascii_mbtowc+0x6>
 80165e0:	a901      	add	r1, sp, #4
 80165e2:	b142      	cbz	r2, 80165f6 <__ascii_mbtowc+0x1a>
 80165e4:	b14b      	cbz	r3, 80165fa <__ascii_mbtowc+0x1e>
 80165e6:	7813      	ldrb	r3, [r2, #0]
 80165e8:	600b      	str	r3, [r1, #0]
 80165ea:	7812      	ldrb	r2, [r2, #0]
 80165ec:	1e10      	subs	r0, r2, #0
 80165ee:	bf18      	it	ne
 80165f0:	2001      	movne	r0, #1
 80165f2:	b002      	add	sp, #8
 80165f4:	4770      	bx	lr
 80165f6:	4610      	mov	r0, r2
 80165f8:	e7fb      	b.n	80165f2 <__ascii_mbtowc+0x16>
 80165fa:	f06f 0001 	mvn.w	r0, #1
 80165fe:	e7f8      	b.n	80165f2 <__ascii_mbtowc+0x16>

08016600 <memmove>:
 8016600:	4288      	cmp	r0, r1
 8016602:	b510      	push	{r4, lr}
 8016604:	eb01 0402 	add.w	r4, r1, r2
 8016608:	d902      	bls.n	8016610 <memmove+0x10>
 801660a:	4284      	cmp	r4, r0
 801660c:	4623      	mov	r3, r4
 801660e:	d807      	bhi.n	8016620 <memmove+0x20>
 8016610:	1e43      	subs	r3, r0, #1
 8016612:	42a1      	cmp	r1, r4
 8016614:	d008      	beq.n	8016628 <memmove+0x28>
 8016616:	f811 2b01 	ldrb.w	r2, [r1], #1
 801661a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801661e:	e7f8      	b.n	8016612 <memmove+0x12>
 8016620:	4402      	add	r2, r0
 8016622:	4601      	mov	r1, r0
 8016624:	428a      	cmp	r2, r1
 8016626:	d100      	bne.n	801662a <memmove+0x2a>
 8016628:	bd10      	pop	{r4, pc}
 801662a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801662e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016632:	e7f7      	b.n	8016624 <memmove+0x24>

08016634 <__malloc_lock>:
 8016634:	4801      	ldr	r0, [pc, #4]	; (801663c <__malloc_lock+0x8>)
 8016636:	f7fc b8ba 	b.w	80127ae <__retarget_lock_acquire_recursive>
 801663a:	bf00      	nop
 801663c:	200208b8 	.word	0x200208b8

08016640 <__malloc_unlock>:
 8016640:	4801      	ldr	r0, [pc, #4]	; (8016648 <__malloc_unlock+0x8>)
 8016642:	f7fc b8b5 	b.w	80127b0 <__retarget_lock_release_recursive>
 8016646:	bf00      	nop
 8016648:	200208b8 	.word	0x200208b8

0801664c <_Balloc>:
 801664c:	b570      	push	{r4, r5, r6, lr}
 801664e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016650:	4604      	mov	r4, r0
 8016652:	460d      	mov	r5, r1
 8016654:	b976      	cbnz	r6, 8016674 <_Balloc+0x28>
 8016656:	2010      	movs	r0, #16
 8016658:	f7fc f910 	bl	801287c <malloc>
 801665c:	4602      	mov	r2, r0
 801665e:	6260      	str	r0, [r4, #36]	; 0x24
 8016660:	b920      	cbnz	r0, 801666c <_Balloc+0x20>
 8016662:	4b18      	ldr	r3, [pc, #96]	; (80166c4 <_Balloc+0x78>)
 8016664:	4818      	ldr	r0, [pc, #96]	; (80166c8 <_Balloc+0x7c>)
 8016666:	2166      	movs	r1, #102	; 0x66
 8016668:	f001 fa78 	bl	8017b5c <__assert_func>
 801666c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016670:	6006      	str	r6, [r0, #0]
 8016672:	60c6      	str	r6, [r0, #12]
 8016674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016676:	68f3      	ldr	r3, [r6, #12]
 8016678:	b183      	cbz	r3, 801669c <_Balloc+0x50>
 801667a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801667c:	68db      	ldr	r3, [r3, #12]
 801667e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016682:	b9b8      	cbnz	r0, 80166b4 <_Balloc+0x68>
 8016684:	2101      	movs	r1, #1
 8016686:	fa01 f605 	lsl.w	r6, r1, r5
 801668a:	1d72      	adds	r2, r6, #5
 801668c:	0092      	lsls	r2, r2, #2
 801668e:	4620      	mov	r0, r4
 8016690:	f7fc f91a 	bl	80128c8 <_calloc_r>
 8016694:	b160      	cbz	r0, 80166b0 <_Balloc+0x64>
 8016696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801669a:	e00e      	b.n	80166ba <_Balloc+0x6e>
 801669c:	2221      	movs	r2, #33	; 0x21
 801669e:	2104      	movs	r1, #4
 80166a0:	4620      	mov	r0, r4
 80166a2:	f7fc f911 	bl	80128c8 <_calloc_r>
 80166a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166a8:	60f0      	str	r0, [r6, #12]
 80166aa:	68db      	ldr	r3, [r3, #12]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d1e4      	bne.n	801667a <_Balloc+0x2e>
 80166b0:	2000      	movs	r0, #0
 80166b2:	bd70      	pop	{r4, r5, r6, pc}
 80166b4:	6802      	ldr	r2, [r0, #0]
 80166b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80166ba:	2300      	movs	r3, #0
 80166bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80166c0:	e7f7      	b.n	80166b2 <_Balloc+0x66>
 80166c2:	bf00      	nop
 80166c4:	080188e6 	.word	0x080188e6
 80166c8:	080189ec 	.word	0x080189ec

080166cc <_Bfree>:
 80166cc:	b570      	push	{r4, r5, r6, lr}
 80166ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80166d0:	4605      	mov	r5, r0
 80166d2:	460c      	mov	r4, r1
 80166d4:	b976      	cbnz	r6, 80166f4 <_Bfree+0x28>
 80166d6:	2010      	movs	r0, #16
 80166d8:	f7fc f8d0 	bl	801287c <malloc>
 80166dc:	4602      	mov	r2, r0
 80166de:	6268      	str	r0, [r5, #36]	; 0x24
 80166e0:	b920      	cbnz	r0, 80166ec <_Bfree+0x20>
 80166e2:	4b09      	ldr	r3, [pc, #36]	; (8016708 <_Bfree+0x3c>)
 80166e4:	4809      	ldr	r0, [pc, #36]	; (801670c <_Bfree+0x40>)
 80166e6:	218a      	movs	r1, #138	; 0x8a
 80166e8:	f001 fa38 	bl	8017b5c <__assert_func>
 80166ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80166f0:	6006      	str	r6, [r0, #0]
 80166f2:	60c6      	str	r6, [r0, #12]
 80166f4:	b13c      	cbz	r4, 8016706 <_Bfree+0x3a>
 80166f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80166f8:	6862      	ldr	r2, [r4, #4]
 80166fa:	68db      	ldr	r3, [r3, #12]
 80166fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016700:	6021      	str	r1, [r4, #0]
 8016702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016706:	bd70      	pop	{r4, r5, r6, pc}
 8016708:	080188e6 	.word	0x080188e6
 801670c:	080189ec 	.word	0x080189ec

08016710 <__multadd>:
 8016710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016714:	690e      	ldr	r6, [r1, #16]
 8016716:	4607      	mov	r7, r0
 8016718:	4698      	mov	r8, r3
 801671a:	460c      	mov	r4, r1
 801671c:	f101 0014 	add.w	r0, r1, #20
 8016720:	2300      	movs	r3, #0
 8016722:	6805      	ldr	r5, [r0, #0]
 8016724:	b2a9      	uxth	r1, r5
 8016726:	fb02 8101 	mla	r1, r2, r1, r8
 801672a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801672e:	0c2d      	lsrs	r5, r5, #16
 8016730:	fb02 c505 	mla	r5, r2, r5, ip
 8016734:	b289      	uxth	r1, r1
 8016736:	3301      	adds	r3, #1
 8016738:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801673c:	429e      	cmp	r6, r3
 801673e:	f840 1b04 	str.w	r1, [r0], #4
 8016742:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8016746:	dcec      	bgt.n	8016722 <__multadd+0x12>
 8016748:	f1b8 0f00 	cmp.w	r8, #0
 801674c:	d022      	beq.n	8016794 <__multadd+0x84>
 801674e:	68a3      	ldr	r3, [r4, #8]
 8016750:	42b3      	cmp	r3, r6
 8016752:	dc19      	bgt.n	8016788 <__multadd+0x78>
 8016754:	6861      	ldr	r1, [r4, #4]
 8016756:	4638      	mov	r0, r7
 8016758:	3101      	adds	r1, #1
 801675a:	f7ff ff77 	bl	801664c <_Balloc>
 801675e:	4605      	mov	r5, r0
 8016760:	b928      	cbnz	r0, 801676e <__multadd+0x5e>
 8016762:	4602      	mov	r2, r0
 8016764:	4b0d      	ldr	r3, [pc, #52]	; (801679c <__multadd+0x8c>)
 8016766:	480e      	ldr	r0, [pc, #56]	; (80167a0 <__multadd+0x90>)
 8016768:	21b5      	movs	r1, #181	; 0xb5
 801676a:	f001 f9f7 	bl	8017b5c <__assert_func>
 801676e:	6922      	ldr	r2, [r4, #16]
 8016770:	3202      	adds	r2, #2
 8016772:	f104 010c 	add.w	r1, r4, #12
 8016776:	0092      	lsls	r2, r2, #2
 8016778:	300c      	adds	r0, #12
 801677a:	f7fc f88f 	bl	801289c <memcpy>
 801677e:	4621      	mov	r1, r4
 8016780:	4638      	mov	r0, r7
 8016782:	f7ff ffa3 	bl	80166cc <_Bfree>
 8016786:	462c      	mov	r4, r5
 8016788:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801678c:	3601      	adds	r6, #1
 801678e:	f8c3 8014 	str.w	r8, [r3, #20]
 8016792:	6126      	str	r6, [r4, #16]
 8016794:	4620      	mov	r0, r4
 8016796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801679a:	bf00      	nop
 801679c:	0801895c 	.word	0x0801895c
 80167a0:	080189ec 	.word	0x080189ec

080167a4 <__s2b>:
 80167a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167a8:	460c      	mov	r4, r1
 80167aa:	4615      	mov	r5, r2
 80167ac:	461f      	mov	r7, r3
 80167ae:	2209      	movs	r2, #9
 80167b0:	3308      	adds	r3, #8
 80167b2:	4606      	mov	r6, r0
 80167b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80167b8:	2100      	movs	r1, #0
 80167ba:	2201      	movs	r2, #1
 80167bc:	429a      	cmp	r2, r3
 80167be:	db09      	blt.n	80167d4 <__s2b+0x30>
 80167c0:	4630      	mov	r0, r6
 80167c2:	f7ff ff43 	bl	801664c <_Balloc>
 80167c6:	b940      	cbnz	r0, 80167da <__s2b+0x36>
 80167c8:	4602      	mov	r2, r0
 80167ca:	4b19      	ldr	r3, [pc, #100]	; (8016830 <__s2b+0x8c>)
 80167cc:	4819      	ldr	r0, [pc, #100]	; (8016834 <__s2b+0x90>)
 80167ce:	21ce      	movs	r1, #206	; 0xce
 80167d0:	f001 f9c4 	bl	8017b5c <__assert_func>
 80167d4:	0052      	lsls	r2, r2, #1
 80167d6:	3101      	adds	r1, #1
 80167d8:	e7f0      	b.n	80167bc <__s2b+0x18>
 80167da:	9b08      	ldr	r3, [sp, #32]
 80167dc:	6143      	str	r3, [r0, #20]
 80167de:	2d09      	cmp	r5, #9
 80167e0:	f04f 0301 	mov.w	r3, #1
 80167e4:	6103      	str	r3, [r0, #16]
 80167e6:	dd16      	ble.n	8016816 <__s2b+0x72>
 80167e8:	f104 0909 	add.w	r9, r4, #9
 80167ec:	46c8      	mov	r8, r9
 80167ee:	442c      	add	r4, r5
 80167f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80167f4:	4601      	mov	r1, r0
 80167f6:	3b30      	subs	r3, #48	; 0x30
 80167f8:	220a      	movs	r2, #10
 80167fa:	4630      	mov	r0, r6
 80167fc:	f7ff ff88 	bl	8016710 <__multadd>
 8016800:	45a0      	cmp	r8, r4
 8016802:	d1f5      	bne.n	80167f0 <__s2b+0x4c>
 8016804:	f1a5 0408 	sub.w	r4, r5, #8
 8016808:	444c      	add	r4, r9
 801680a:	1b2d      	subs	r5, r5, r4
 801680c:	1963      	adds	r3, r4, r5
 801680e:	42bb      	cmp	r3, r7
 8016810:	db04      	blt.n	801681c <__s2b+0x78>
 8016812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016816:	340a      	adds	r4, #10
 8016818:	2509      	movs	r5, #9
 801681a:	e7f6      	b.n	801680a <__s2b+0x66>
 801681c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016820:	4601      	mov	r1, r0
 8016822:	3b30      	subs	r3, #48	; 0x30
 8016824:	220a      	movs	r2, #10
 8016826:	4630      	mov	r0, r6
 8016828:	f7ff ff72 	bl	8016710 <__multadd>
 801682c:	e7ee      	b.n	801680c <__s2b+0x68>
 801682e:	bf00      	nop
 8016830:	0801895c 	.word	0x0801895c
 8016834:	080189ec 	.word	0x080189ec

08016838 <__hi0bits>:
 8016838:	0c03      	lsrs	r3, r0, #16
 801683a:	041b      	lsls	r3, r3, #16
 801683c:	b9d3      	cbnz	r3, 8016874 <__hi0bits+0x3c>
 801683e:	0400      	lsls	r0, r0, #16
 8016840:	2310      	movs	r3, #16
 8016842:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016846:	bf04      	itt	eq
 8016848:	0200      	lsleq	r0, r0, #8
 801684a:	3308      	addeq	r3, #8
 801684c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016850:	bf04      	itt	eq
 8016852:	0100      	lsleq	r0, r0, #4
 8016854:	3304      	addeq	r3, #4
 8016856:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801685a:	bf04      	itt	eq
 801685c:	0080      	lsleq	r0, r0, #2
 801685e:	3302      	addeq	r3, #2
 8016860:	2800      	cmp	r0, #0
 8016862:	db05      	blt.n	8016870 <__hi0bits+0x38>
 8016864:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016868:	f103 0301 	add.w	r3, r3, #1
 801686c:	bf08      	it	eq
 801686e:	2320      	moveq	r3, #32
 8016870:	4618      	mov	r0, r3
 8016872:	4770      	bx	lr
 8016874:	2300      	movs	r3, #0
 8016876:	e7e4      	b.n	8016842 <__hi0bits+0xa>

08016878 <__lo0bits>:
 8016878:	6803      	ldr	r3, [r0, #0]
 801687a:	f013 0207 	ands.w	r2, r3, #7
 801687e:	4601      	mov	r1, r0
 8016880:	d00b      	beq.n	801689a <__lo0bits+0x22>
 8016882:	07da      	lsls	r2, r3, #31
 8016884:	d424      	bmi.n	80168d0 <__lo0bits+0x58>
 8016886:	0798      	lsls	r0, r3, #30
 8016888:	bf49      	itett	mi
 801688a:	085b      	lsrmi	r3, r3, #1
 801688c:	089b      	lsrpl	r3, r3, #2
 801688e:	2001      	movmi	r0, #1
 8016890:	600b      	strmi	r3, [r1, #0]
 8016892:	bf5c      	itt	pl
 8016894:	600b      	strpl	r3, [r1, #0]
 8016896:	2002      	movpl	r0, #2
 8016898:	4770      	bx	lr
 801689a:	b298      	uxth	r0, r3
 801689c:	b9b0      	cbnz	r0, 80168cc <__lo0bits+0x54>
 801689e:	0c1b      	lsrs	r3, r3, #16
 80168a0:	2010      	movs	r0, #16
 80168a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80168a6:	bf04      	itt	eq
 80168a8:	0a1b      	lsreq	r3, r3, #8
 80168aa:	3008      	addeq	r0, #8
 80168ac:	071a      	lsls	r2, r3, #28
 80168ae:	bf04      	itt	eq
 80168b0:	091b      	lsreq	r3, r3, #4
 80168b2:	3004      	addeq	r0, #4
 80168b4:	079a      	lsls	r2, r3, #30
 80168b6:	bf04      	itt	eq
 80168b8:	089b      	lsreq	r3, r3, #2
 80168ba:	3002      	addeq	r0, #2
 80168bc:	07da      	lsls	r2, r3, #31
 80168be:	d403      	bmi.n	80168c8 <__lo0bits+0x50>
 80168c0:	085b      	lsrs	r3, r3, #1
 80168c2:	f100 0001 	add.w	r0, r0, #1
 80168c6:	d005      	beq.n	80168d4 <__lo0bits+0x5c>
 80168c8:	600b      	str	r3, [r1, #0]
 80168ca:	4770      	bx	lr
 80168cc:	4610      	mov	r0, r2
 80168ce:	e7e8      	b.n	80168a2 <__lo0bits+0x2a>
 80168d0:	2000      	movs	r0, #0
 80168d2:	4770      	bx	lr
 80168d4:	2020      	movs	r0, #32
 80168d6:	4770      	bx	lr

080168d8 <__i2b>:
 80168d8:	b510      	push	{r4, lr}
 80168da:	460c      	mov	r4, r1
 80168dc:	2101      	movs	r1, #1
 80168de:	f7ff feb5 	bl	801664c <_Balloc>
 80168e2:	4602      	mov	r2, r0
 80168e4:	b928      	cbnz	r0, 80168f2 <__i2b+0x1a>
 80168e6:	4b05      	ldr	r3, [pc, #20]	; (80168fc <__i2b+0x24>)
 80168e8:	4805      	ldr	r0, [pc, #20]	; (8016900 <__i2b+0x28>)
 80168ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80168ee:	f001 f935 	bl	8017b5c <__assert_func>
 80168f2:	2301      	movs	r3, #1
 80168f4:	6144      	str	r4, [r0, #20]
 80168f6:	6103      	str	r3, [r0, #16]
 80168f8:	bd10      	pop	{r4, pc}
 80168fa:	bf00      	nop
 80168fc:	0801895c 	.word	0x0801895c
 8016900:	080189ec 	.word	0x080189ec

08016904 <__multiply>:
 8016904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016908:	4614      	mov	r4, r2
 801690a:	690a      	ldr	r2, [r1, #16]
 801690c:	6923      	ldr	r3, [r4, #16]
 801690e:	429a      	cmp	r2, r3
 8016910:	bfb8      	it	lt
 8016912:	460b      	movlt	r3, r1
 8016914:	460d      	mov	r5, r1
 8016916:	bfbc      	itt	lt
 8016918:	4625      	movlt	r5, r4
 801691a:	461c      	movlt	r4, r3
 801691c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016920:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016924:	68ab      	ldr	r3, [r5, #8]
 8016926:	6869      	ldr	r1, [r5, #4]
 8016928:	eb0a 0709 	add.w	r7, sl, r9
 801692c:	42bb      	cmp	r3, r7
 801692e:	b085      	sub	sp, #20
 8016930:	bfb8      	it	lt
 8016932:	3101      	addlt	r1, #1
 8016934:	f7ff fe8a 	bl	801664c <_Balloc>
 8016938:	b930      	cbnz	r0, 8016948 <__multiply+0x44>
 801693a:	4602      	mov	r2, r0
 801693c:	4b42      	ldr	r3, [pc, #264]	; (8016a48 <__multiply+0x144>)
 801693e:	4843      	ldr	r0, [pc, #268]	; (8016a4c <__multiply+0x148>)
 8016940:	f240 115d 	movw	r1, #349	; 0x15d
 8016944:	f001 f90a 	bl	8017b5c <__assert_func>
 8016948:	f100 0614 	add.w	r6, r0, #20
 801694c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016950:	4633      	mov	r3, r6
 8016952:	2200      	movs	r2, #0
 8016954:	4543      	cmp	r3, r8
 8016956:	d31e      	bcc.n	8016996 <__multiply+0x92>
 8016958:	f105 0c14 	add.w	ip, r5, #20
 801695c:	f104 0314 	add.w	r3, r4, #20
 8016960:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016964:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016968:	9202      	str	r2, [sp, #8]
 801696a:	ebac 0205 	sub.w	r2, ip, r5
 801696e:	3a15      	subs	r2, #21
 8016970:	f022 0203 	bic.w	r2, r2, #3
 8016974:	3204      	adds	r2, #4
 8016976:	f105 0115 	add.w	r1, r5, #21
 801697a:	458c      	cmp	ip, r1
 801697c:	bf38      	it	cc
 801697e:	2204      	movcc	r2, #4
 8016980:	9201      	str	r2, [sp, #4]
 8016982:	9a02      	ldr	r2, [sp, #8]
 8016984:	9303      	str	r3, [sp, #12]
 8016986:	429a      	cmp	r2, r3
 8016988:	d808      	bhi.n	801699c <__multiply+0x98>
 801698a:	2f00      	cmp	r7, #0
 801698c:	dc55      	bgt.n	8016a3a <__multiply+0x136>
 801698e:	6107      	str	r7, [r0, #16]
 8016990:	b005      	add	sp, #20
 8016992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016996:	f843 2b04 	str.w	r2, [r3], #4
 801699a:	e7db      	b.n	8016954 <__multiply+0x50>
 801699c:	f8b3 a000 	ldrh.w	sl, [r3]
 80169a0:	f1ba 0f00 	cmp.w	sl, #0
 80169a4:	d020      	beq.n	80169e8 <__multiply+0xe4>
 80169a6:	f105 0e14 	add.w	lr, r5, #20
 80169aa:	46b1      	mov	r9, r6
 80169ac:	2200      	movs	r2, #0
 80169ae:	f85e 4b04 	ldr.w	r4, [lr], #4
 80169b2:	f8d9 b000 	ldr.w	fp, [r9]
 80169b6:	b2a1      	uxth	r1, r4
 80169b8:	fa1f fb8b 	uxth.w	fp, fp
 80169bc:	fb0a b101 	mla	r1, sl, r1, fp
 80169c0:	4411      	add	r1, r2
 80169c2:	f8d9 2000 	ldr.w	r2, [r9]
 80169c6:	0c24      	lsrs	r4, r4, #16
 80169c8:	0c12      	lsrs	r2, r2, #16
 80169ca:	fb0a 2404 	mla	r4, sl, r4, r2
 80169ce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80169d2:	b289      	uxth	r1, r1
 80169d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80169d8:	45f4      	cmp	ip, lr
 80169da:	f849 1b04 	str.w	r1, [r9], #4
 80169de:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80169e2:	d8e4      	bhi.n	80169ae <__multiply+0xaa>
 80169e4:	9901      	ldr	r1, [sp, #4]
 80169e6:	5072      	str	r2, [r6, r1]
 80169e8:	9a03      	ldr	r2, [sp, #12]
 80169ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80169ee:	3304      	adds	r3, #4
 80169f0:	f1b9 0f00 	cmp.w	r9, #0
 80169f4:	d01f      	beq.n	8016a36 <__multiply+0x132>
 80169f6:	6834      	ldr	r4, [r6, #0]
 80169f8:	f105 0114 	add.w	r1, r5, #20
 80169fc:	46b6      	mov	lr, r6
 80169fe:	f04f 0a00 	mov.w	sl, #0
 8016a02:	880a      	ldrh	r2, [r1, #0]
 8016a04:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016a08:	fb09 b202 	mla	r2, r9, r2, fp
 8016a0c:	4492      	add	sl, r2
 8016a0e:	b2a4      	uxth	r4, r4
 8016a10:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8016a14:	f84e 4b04 	str.w	r4, [lr], #4
 8016a18:	f851 4b04 	ldr.w	r4, [r1], #4
 8016a1c:	f8be 2000 	ldrh.w	r2, [lr]
 8016a20:	0c24      	lsrs	r4, r4, #16
 8016a22:	fb09 2404 	mla	r4, r9, r4, r2
 8016a26:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016a2a:	458c      	cmp	ip, r1
 8016a2c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016a30:	d8e7      	bhi.n	8016a02 <__multiply+0xfe>
 8016a32:	9a01      	ldr	r2, [sp, #4]
 8016a34:	50b4      	str	r4, [r6, r2]
 8016a36:	3604      	adds	r6, #4
 8016a38:	e7a3      	b.n	8016982 <__multiply+0x7e>
 8016a3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d1a5      	bne.n	801698e <__multiply+0x8a>
 8016a42:	3f01      	subs	r7, #1
 8016a44:	e7a1      	b.n	801698a <__multiply+0x86>
 8016a46:	bf00      	nop
 8016a48:	0801895c 	.word	0x0801895c
 8016a4c:	080189ec 	.word	0x080189ec

08016a50 <__pow5mult>:
 8016a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a54:	4615      	mov	r5, r2
 8016a56:	f012 0203 	ands.w	r2, r2, #3
 8016a5a:	4606      	mov	r6, r0
 8016a5c:	460f      	mov	r7, r1
 8016a5e:	d007      	beq.n	8016a70 <__pow5mult+0x20>
 8016a60:	4c25      	ldr	r4, [pc, #148]	; (8016af8 <__pow5mult+0xa8>)
 8016a62:	3a01      	subs	r2, #1
 8016a64:	2300      	movs	r3, #0
 8016a66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016a6a:	f7ff fe51 	bl	8016710 <__multadd>
 8016a6e:	4607      	mov	r7, r0
 8016a70:	10ad      	asrs	r5, r5, #2
 8016a72:	d03d      	beq.n	8016af0 <__pow5mult+0xa0>
 8016a74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016a76:	b97c      	cbnz	r4, 8016a98 <__pow5mult+0x48>
 8016a78:	2010      	movs	r0, #16
 8016a7a:	f7fb feff 	bl	801287c <malloc>
 8016a7e:	4602      	mov	r2, r0
 8016a80:	6270      	str	r0, [r6, #36]	; 0x24
 8016a82:	b928      	cbnz	r0, 8016a90 <__pow5mult+0x40>
 8016a84:	4b1d      	ldr	r3, [pc, #116]	; (8016afc <__pow5mult+0xac>)
 8016a86:	481e      	ldr	r0, [pc, #120]	; (8016b00 <__pow5mult+0xb0>)
 8016a88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016a8c:	f001 f866 	bl	8017b5c <__assert_func>
 8016a90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016a94:	6004      	str	r4, [r0, #0]
 8016a96:	60c4      	str	r4, [r0, #12]
 8016a98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016a9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016aa0:	b94c      	cbnz	r4, 8016ab6 <__pow5mult+0x66>
 8016aa2:	f240 2171 	movw	r1, #625	; 0x271
 8016aa6:	4630      	mov	r0, r6
 8016aa8:	f7ff ff16 	bl	80168d8 <__i2b>
 8016aac:	2300      	movs	r3, #0
 8016aae:	f8c8 0008 	str.w	r0, [r8, #8]
 8016ab2:	4604      	mov	r4, r0
 8016ab4:	6003      	str	r3, [r0, #0]
 8016ab6:	f04f 0900 	mov.w	r9, #0
 8016aba:	07eb      	lsls	r3, r5, #31
 8016abc:	d50a      	bpl.n	8016ad4 <__pow5mult+0x84>
 8016abe:	4639      	mov	r1, r7
 8016ac0:	4622      	mov	r2, r4
 8016ac2:	4630      	mov	r0, r6
 8016ac4:	f7ff ff1e 	bl	8016904 <__multiply>
 8016ac8:	4639      	mov	r1, r7
 8016aca:	4680      	mov	r8, r0
 8016acc:	4630      	mov	r0, r6
 8016ace:	f7ff fdfd 	bl	80166cc <_Bfree>
 8016ad2:	4647      	mov	r7, r8
 8016ad4:	106d      	asrs	r5, r5, #1
 8016ad6:	d00b      	beq.n	8016af0 <__pow5mult+0xa0>
 8016ad8:	6820      	ldr	r0, [r4, #0]
 8016ada:	b938      	cbnz	r0, 8016aec <__pow5mult+0x9c>
 8016adc:	4622      	mov	r2, r4
 8016ade:	4621      	mov	r1, r4
 8016ae0:	4630      	mov	r0, r6
 8016ae2:	f7ff ff0f 	bl	8016904 <__multiply>
 8016ae6:	6020      	str	r0, [r4, #0]
 8016ae8:	f8c0 9000 	str.w	r9, [r0]
 8016aec:	4604      	mov	r4, r0
 8016aee:	e7e4      	b.n	8016aba <__pow5mult+0x6a>
 8016af0:	4638      	mov	r0, r7
 8016af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016af6:	bf00      	nop
 8016af8:	08018b40 	.word	0x08018b40
 8016afc:	080188e6 	.word	0x080188e6
 8016b00:	080189ec 	.word	0x080189ec

08016b04 <__lshift>:
 8016b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b08:	460c      	mov	r4, r1
 8016b0a:	6849      	ldr	r1, [r1, #4]
 8016b0c:	6923      	ldr	r3, [r4, #16]
 8016b0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016b12:	68a3      	ldr	r3, [r4, #8]
 8016b14:	4607      	mov	r7, r0
 8016b16:	4691      	mov	r9, r2
 8016b18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016b1c:	f108 0601 	add.w	r6, r8, #1
 8016b20:	42b3      	cmp	r3, r6
 8016b22:	db0b      	blt.n	8016b3c <__lshift+0x38>
 8016b24:	4638      	mov	r0, r7
 8016b26:	f7ff fd91 	bl	801664c <_Balloc>
 8016b2a:	4605      	mov	r5, r0
 8016b2c:	b948      	cbnz	r0, 8016b42 <__lshift+0x3e>
 8016b2e:	4602      	mov	r2, r0
 8016b30:	4b28      	ldr	r3, [pc, #160]	; (8016bd4 <__lshift+0xd0>)
 8016b32:	4829      	ldr	r0, [pc, #164]	; (8016bd8 <__lshift+0xd4>)
 8016b34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016b38:	f001 f810 	bl	8017b5c <__assert_func>
 8016b3c:	3101      	adds	r1, #1
 8016b3e:	005b      	lsls	r3, r3, #1
 8016b40:	e7ee      	b.n	8016b20 <__lshift+0x1c>
 8016b42:	2300      	movs	r3, #0
 8016b44:	f100 0114 	add.w	r1, r0, #20
 8016b48:	f100 0210 	add.w	r2, r0, #16
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	4553      	cmp	r3, sl
 8016b50:	db33      	blt.n	8016bba <__lshift+0xb6>
 8016b52:	6920      	ldr	r0, [r4, #16]
 8016b54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016b58:	f104 0314 	add.w	r3, r4, #20
 8016b5c:	f019 091f 	ands.w	r9, r9, #31
 8016b60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016b64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016b68:	d02b      	beq.n	8016bc2 <__lshift+0xbe>
 8016b6a:	f1c9 0e20 	rsb	lr, r9, #32
 8016b6e:	468a      	mov	sl, r1
 8016b70:	2200      	movs	r2, #0
 8016b72:	6818      	ldr	r0, [r3, #0]
 8016b74:	fa00 f009 	lsl.w	r0, r0, r9
 8016b78:	4302      	orrs	r2, r0
 8016b7a:	f84a 2b04 	str.w	r2, [sl], #4
 8016b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b82:	459c      	cmp	ip, r3
 8016b84:	fa22 f20e 	lsr.w	r2, r2, lr
 8016b88:	d8f3      	bhi.n	8016b72 <__lshift+0x6e>
 8016b8a:	ebac 0304 	sub.w	r3, ip, r4
 8016b8e:	3b15      	subs	r3, #21
 8016b90:	f023 0303 	bic.w	r3, r3, #3
 8016b94:	3304      	adds	r3, #4
 8016b96:	f104 0015 	add.w	r0, r4, #21
 8016b9a:	4584      	cmp	ip, r0
 8016b9c:	bf38      	it	cc
 8016b9e:	2304      	movcc	r3, #4
 8016ba0:	50ca      	str	r2, [r1, r3]
 8016ba2:	b10a      	cbz	r2, 8016ba8 <__lshift+0xa4>
 8016ba4:	f108 0602 	add.w	r6, r8, #2
 8016ba8:	3e01      	subs	r6, #1
 8016baa:	4638      	mov	r0, r7
 8016bac:	612e      	str	r6, [r5, #16]
 8016bae:	4621      	mov	r1, r4
 8016bb0:	f7ff fd8c 	bl	80166cc <_Bfree>
 8016bb4:	4628      	mov	r0, r5
 8016bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bba:	f842 0f04 	str.w	r0, [r2, #4]!
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	e7c5      	b.n	8016b4e <__lshift+0x4a>
 8016bc2:	3904      	subs	r1, #4
 8016bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8016bcc:	459c      	cmp	ip, r3
 8016bce:	d8f9      	bhi.n	8016bc4 <__lshift+0xc0>
 8016bd0:	e7ea      	b.n	8016ba8 <__lshift+0xa4>
 8016bd2:	bf00      	nop
 8016bd4:	0801895c 	.word	0x0801895c
 8016bd8:	080189ec 	.word	0x080189ec

08016bdc <__mcmp>:
 8016bdc:	b530      	push	{r4, r5, lr}
 8016bde:	6902      	ldr	r2, [r0, #16]
 8016be0:	690c      	ldr	r4, [r1, #16]
 8016be2:	1b12      	subs	r2, r2, r4
 8016be4:	d10e      	bne.n	8016c04 <__mcmp+0x28>
 8016be6:	f100 0314 	add.w	r3, r0, #20
 8016bea:	3114      	adds	r1, #20
 8016bec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016bf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016bf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016bf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016bfc:	42a5      	cmp	r5, r4
 8016bfe:	d003      	beq.n	8016c08 <__mcmp+0x2c>
 8016c00:	d305      	bcc.n	8016c0e <__mcmp+0x32>
 8016c02:	2201      	movs	r2, #1
 8016c04:	4610      	mov	r0, r2
 8016c06:	bd30      	pop	{r4, r5, pc}
 8016c08:	4283      	cmp	r3, r0
 8016c0a:	d3f3      	bcc.n	8016bf4 <__mcmp+0x18>
 8016c0c:	e7fa      	b.n	8016c04 <__mcmp+0x28>
 8016c0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c12:	e7f7      	b.n	8016c04 <__mcmp+0x28>

08016c14 <__mdiff>:
 8016c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c18:	460c      	mov	r4, r1
 8016c1a:	4606      	mov	r6, r0
 8016c1c:	4611      	mov	r1, r2
 8016c1e:	4620      	mov	r0, r4
 8016c20:	4617      	mov	r7, r2
 8016c22:	f7ff ffdb 	bl	8016bdc <__mcmp>
 8016c26:	1e05      	subs	r5, r0, #0
 8016c28:	d110      	bne.n	8016c4c <__mdiff+0x38>
 8016c2a:	4629      	mov	r1, r5
 8016c2c:	4630      	mov	r0, r6
 8016c2e:	f7ff fd0d 	bl	801664c <_Balloc>
 8016c32:	b930      	cbnz	r0, 8016c42 <__mdiff+0x2e>
 8016c34:	4b39      	ldr	r3, [pc, #228]	; (8016d1c <__mdiff+0x108>)
 8016c36:	4602      	mov	r2, r0
 8016c38:	f240 2132 	movw	r1, #562	; 0x232
 8016c3c:	4838      	ldr	r0, [pc, #224]	; (8016d20 <__mdiff+0x10c>)
 8016c3e:	f000 ff8d 	bl	8017b5c <__assert_func>
 8016c42:	2301      	movs	r3, #1
 8016c44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016c48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c4c:	bfa4      	itt	ge
 8016c4e:	463b      	movge	r3, r7
 8016c50:	4627      	movge	r7, r4
 8016c52:	4630      	mov	r0, r6
 8016c54:	6879      	ldr	r1, [r7, #4]
 8016c56:	bfa6      	itte	ge
 8016c58:	461c      	movge	r4, r3
 8016c5a:	2500      	movge	r5, #0
 8016c5c:	2501      	movlt	r5, #1
 8016c5e:	f7ff fcf5 	bl	801664c <_Balloc>
 8016c62:	b920      	cbnz	r0, 8016c6e <__mdiff+0x5a>
 8016c64:	4b2d      	ldr	r3, [pc, #180]	; (8016d1c <__mdiff+0x108>)
 8016c66:	4602      	mov	r2, r0
 8016c68:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016c6c:	e7e6      	b.n	8016c3c <__mdiff+0x28>
 8016c6e:	693e      	ldr	r6, [r7, #16]
 8016c70:	60c5      	str	r5, [r0, #12]
 8016c72:	6925      	ldr	r5, [r4, #16]
 8016c74:	f107 0114 	add.w	r1, r7, #20
 8016c78:	f104 0914 	add.w	r9, r4, #20
 8016c7c:	f100 0e14 	add.w	lr, r0, #20
 8016c80:	f107 0210 	add.w	r2, r7, #16
 8016c84:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016c88:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016c8c:	46f2      	mov	sl, lr
 8016c8e:	2700      	movs	r7, #0
 8016c90:	f859 3b04 	ldr.w	r3, [r9], #4
 8016c94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016c98:	fa1f f883 	uxth.w	r8, r3
 8016c9c:	fa17 f78b 	uxtah	r7, r7, fp
 8016ca0:	0c1b      	lsrs	r3, r3, #16
 8016ca2:	eba7 0808 	sub.w	r8, r7, r8
 8016ca6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016caa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016cae:	fa1f f888 	uxth.w	r8, r8
 8016cb2:	141f      	asrs	r7, r3, #16
 8016cb4:	454d      	cmp	r5, r9
 8016cb6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016cba:	f84a 3b04 	str.w	r3, [sl], #4
 8016cbe:	d8e7      	bhi.n	8016c90 <__mdiff+0x7c>
 8016cc0:	1b2b      	subs	r3, r5, r4
 8016cc2:	3b15      	subs	r3, #21
 8016cc4:	f023 0303 	bic.w	r3, r3, #3
 8016cc8:	3304      	adds	r3, #4
 8016cca:	3415      	adds	r4, #21
 8016ccc:	42a5      	cmp	r5, r4
 8016cce:	bf38      	it	cc
 8016cd0:	2304      	movcc	r3, #4
 8016cd2:	4419      	add	r1, r3
 8016cd4:	4473      	add	r3, lr
 8016cd6:	469e      	mov	lr, r3
 8016cd8:	460d      	mov	r5, r1
 8016cda:	4565      	cmp	r5, ip
 8016cdc:	d30e      	bcc.n	8016cfc <__mdiff+0xe8>
 8016cde:	f10c 0203 	add.w	r2, ip, #3
 8016ce2:	1a52      	subs	r2, r2, r1
 8016ce4:	f022 0203 	bic.w	r2, r2, #3
 8016ce8:	3903      	subs	r1, #3
 8016cea:	458c      	cmp	ip, r1
 8016cec:	bf38      	it	cc
 8016cee:	2200      	movcc	r2, #0
 8016cf0:	441a      	add	r2, r3
 8016cf2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016cf6:	b17b      	cbz	r3, 8016d18 <__mdiff+0x104>
 8016cf8:	6106      	str	r6, [r0, #16]
 8016cfa:	e7a5      	b.n	8016c48 <__mdiff+0x34>
 8016cfc:	f855 8b04 	ldr.w	r8, [r5], #4
 8016d00:	fa17 f488 	uxtah	r4, r7, r8
 8016d04:	1422      	asrs	r2, r4, #16
 8016d06:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8016d0a:	b2a4      	uxth	r4, r4
 8016d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016d10:	f84e 4b04 	str.w	r4, [lr], #4
 8016d14:	1417      	asrs	r7, r2, #16
 8016d16:	e7e0      	b.n	8016cda <__mdiff+0xc6>
 8016d18:	3e01      	subs	r6, #1
 8016d1a:	e7ea      	b.n	8016cf2 <__mdiff+0xde>
 8016d1c:	0801895c 	.word	0x0801895c
 8016d20:	080189ec 	.word	0x080189ec

08016d24 <__ulp>:
 8016d24:	b082      	sub	sp, #8
 8016d26:	ed8d 0b00 	vstr	d0, [sp]
 8016d2a:	9b01      	ldr	r3, [sp, #4]
 8016d2c:	4912      	ldr	r1, [pc, #72]	; (8016d78 <__ulp+0x54>)
 8016d2e:	4019      	ands	r1, r3
 8016d30:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016d34:	2900      	cmp	r1, #0
 8016d36:	dd05      	ble.n	8016d44 <__ulp+0x20>
 8016d38:	2200      	movs	r2, #0
 8016d3a:	460b      	mov	r3, r1
 8016d3c:	ec43 2b10 	vmov	d0, r2, r3
 8016d40:	b002      	add	sp, #8
 8016d42:	4770      	bx	lr
 8016d44:	4249      	negs	r1, r1
 8016d46:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016d4a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016d4e:	f04f 0200 	mov.w	r2, #0
 8016d52:	f04f 0300 	mov.w	r3, #0
 8016d56:	da04      	bge.n	8016d62 <__ulp+0x3e>
 8016d58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016d5c:	fa41 f300 	asr.w	r3, r1, r0
 8016d60:	e7ec      	b.n	8016d3c <__ulp+0x18>
 8016d62:	f1a0 0114 	sub.w	r1, r0, #20
 8016d66:	291e      	cmp	r1, #30
 8016d68:	bfda      	itte	le
 8016d6a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016d6e:	fa20 f101 	lsrle.w	r1, r0, r1
 8016d72:	2101      	movgt	r1, #1
 8016d74:	460a      	mov	r2, r1
 8016d76:	e7e1      	b.n	8016d3c <__ulp+0x18>
 8016d78:	7ff00000 	.word	0x7ff00000

08016d7c <__b2d>:
 8016d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d7e:	6905      	ldr	r5, [r0, #16]
 8016d80:	f100 0714 	add.w	r7, r0, #20
 8016d84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016d88:	1f2e      	subs	r6, r5, #4
 8016d8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016d8e:	4620      	mov	r0, r4
 8016d90:	f7ff fd52 	bl	8016838 <__hi0bits>
 8016d94:	f1c0 0320 	rsb	r3, r0, #32
 8016d98:	280a      	cmp	r0, #10
 8016d9a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016e18 <__b2d+0x9c>
 8016d9e:	600b      	str	r3, [r1, #0]
 8016da0:	dc14      	bgt.n	8016dcc <__b2d+0x50>
 8016da2:	f1c0 0e0b 	rsb	lr, r0, #11
 8016da6:	fa24 f10e 	lsr.w	r1, r4, lr
 8016daa:	42b7      	cmp	r7, r6
 8016dac:	ea41 030c 	orr.w	r3, r1, ip
 8016db0:	bf34      	ite	cc
 8016db2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016db6:	2100      	movcs	r1, #0
 8016db8:	3015      	adds	r0, #21
 8016dba:	fa04 f000 	lsl.w	r0, r4, r0
 8016dbe:	fa21 f10e 	lsr.w	r1, r1, lr
 8016dc2:	ea40 0201 	orr.w	r2, r0, r1
 8016dc6:	ec43 2b10 	vmov	d0, r2, r3
 8016dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dcc:	42b7      	cmp	r7, r6
 8016dce:	bf3a      	itte	cc
 8016dd0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016dd4:	f1a5 0608 	subcc.w	r6, r5, #8
 8016dd8:	2100      	movcs	r1, #0
 8016dda:	380b      	subs	r0, #11
 8016ddc:	d017      	beq.n	8016e0e <__b2d+0x92>
 8016dde:	f1c0 0c20 	rsb	ip, r0, #32
 8016de2:	fa04 f500 	lsl.w	r5, r4, r0
 8016de6:	42be      	cmp	r6, r7
 8016de8:	fa21 f40c 	lsr.w	r4, r1, ip
 8016dec:	ea45 0504 	orr.w	r5, r5, r4
 8016df0:	bf8c      	ite	hi
 8016df2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016df6:	2400      	movls	r4, #0
 8016df8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016dfc:	fa01 f000 	lsl.w	r0, r1, r0
 8016e00:	fa24 f40c 	lsr.w	r4, r4, ip
 8016e04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016e08:	ea40 0204 	orr.w	r2, r0, r4
 8016e0c:	e7db      	b.n	8016dc6 <__b2d+0x4a>
 8016e0e:	ea44 030c 	orr.w	r3, r4, ip
 8016e12:	460a      	mov	r2, r1
 8016e14:	e7d7      	b.n	8016dc6 <__b2d+0x4a>
 8016e16:	bf00      	nop
 8016e18:	3ff00000 	.word	0x3ff00000

08016e1c <__d2b>:
 8016e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016e20:	4689      	mov	r9, r1
 8016e22:	2101      	movs	r1, #1
 8016e24:	ec57 6b10 	vmov	r6, r7, d0
 8016e28:	4690      	mov	r8, r2
 8016e2a:	f7ff fc0f 	bl	801664c <_Balloc>
 8016e2e:	4604      	mov	r4, r0
 8016e30:	b930      	cbnz	r0, 8016e40 <__d2b+0x24>
 8016e32:	4602      	mov	r2, r0
 8016e34:	4b25      	ldr	r3, [pc, #148]	; (8016ecc <__d2b+0xb0>)
 8016e36:	4826      	ldr	r0, [pc, #152]	; (8016ed0 <__d2b+0xb4>)
 8016e38:	f240 310a 	movw	r1, #778	; 0x30a
 8016e3c:	f000 fe8e 	bl	8017b5c <__assert_func>
 8016e40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016e44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016e48:	bb35      	cbnz	r5, 8016e98 <__d2b+0x7c>
 8016e4a:	2e00      	cmp	r6, #0
 8016e4c:	9301      	str	r3, [sp, #4]
 8016e4e:	d028      	beq.n	8016ea2 <__d2b+0x86>
 8016e50:	4668      	mov	r0, sp
 8016e52:	9600      	str	r6, [sp, #0]
 8016e54:	f7ff fd10 	bl	8016878 <__lo0bits>
 8016e58:	9900      	ldr	r1, [sp, #0]
 8016e5a:	b300      	cbz	r0, 8016e9e <__d2b+0x82>
 8016e5c:	9a01      	ldr	r2, [sp, #4]
 8016e5e:	f1c0 0320 	rsb	r3, r0, #32
 8016e62:	fa02 f303 	lsl.w	r3, r2, r3
 8016e66:	430b      	orrs	r3, r1
 8016e68:	40c2      	lsrs	r2, r0
 8016e6a:	6163      	str	r3, [r4, #20]
 8016e6c:	9201      	str	r2, [sp, #4]
 8016e6e:	9b01      	ldr	r3, [sp, #4]
 8016e70:	61a3      	str	r3, [r4, #24]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	bf14      	ite	ne
 8016e76:	2202      	movne	r2, #2
 8016e78:	2201      	moveq	r2, #1
 8016e7a:	6122      	str	r2, [r4, #16]
 8016e7c:	b1d5      	cbz	r5, 8016eb4 <__d2b+0x98>
 8016e7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016e82:	4405      	add	r5, r0
 8016e84:	f8c9 5000 	str.w	r5, [r9]
 8016e88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016e8c:	f8c8 0000 	str.w	r0, [r8]
 8016e90:	4620      	mov	r0, r4
 8016e92:	b003      	add	sp, #12
 8016e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016e9c:	e7d5      	b.n	8016e4a <__d2b+0x2e>
 8016e9e:	6161      	str	r1, [r4, #20]
 8016ea0:	e7e5      	b.n	8016e6e <__d2b+0x52>
 8016ea2:	a801      	add	r0, sp, #4
 8016ea4:	f7ff fce8 	bl	8016878 <__lo0bits>
 8016ea8:	9b01      	ldr	r3, [sp, #4]
 8016eaa:	6163      	str	r3, [r4, #20]
 8016eac:	2201      	movs	r2, #1
 8016eae:	6122      	str	r2, [r4, #16]
 8016eb0:	3020      	adds	r0, #32
 8016eb2:	e7e3      	b.n	8016e7c <__d2b+0x60>
 8016eb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016eb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016ebc:	f8c9 0000 	str.w	r0, [r9]
 8016ec0:	6918      	ldr	r0, [r3, #16]
 8016ec2:	f7ff fcb9 	bl	8016838 <__hi0bits>
 8016ec6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016eca:	e7df      	b.n	8016e8c <__d2b+0x70>
 8016ecc:	0801895c 	.word	0x0801895c
 8016ed0:	080189ec 	.word	0x080189ec

08016ed4 <__ratio>:
 8016ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed8:	4688      	mov	r8, r1
 8016eda:	4669      	mov	r1, sp
 8016edc:	4681      	mov	r9, r0
 8016ede:	f7ff ff4d 	bl	8016d7c <__b2d>
 8016ee2:	a901      	add	r1, sp, #4
 8016ee4:	4640      	mov	r0, r8
 8016ee6:	ec55 4b10 	vmov	r4, r5, d0
 8016eea:	f7ff ff47 	bl	8016d7c <__b2d>
 8016eee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ef2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016ef6:	eba3 0c02 	sub.w	ip, r3, r2
 8016efa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016efe:	1a9b      	subs	r3, r3, r2
 8016f00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016f04:	ec51 0b10 	vmov	r0, r1, d0
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	bfd6      	itet	le
 8016f0c:	460a      	movle	r2, r1
 8016f0e:	462a      	movgt	r2, r5
 8016f10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016f14:	468b      	mov	fp, r1
 8016f16:	462f      	mov	r7, r5
 8016f18:	bfd4      	ite	le
 8016f1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016f1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016f22:	4620      	mov	r0, r4
 8016f24:	ee10 2a10 	vmov	r2, s0
 8016f28:	465b      	mov	r3, fp
 8016f2a:	4639      	mov	r1, r7
 8016f2c:	f7e9 fc9e 	bl	800086c <__aeabi_ddiv>
 8016f30:	ec41 0b10 	vmov	d0, r0, r1
 8016f34:	b003      	add	sp, #12
 8016f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f3a <__copybits>:
 8016f3a:	3901      	subs	r1, #1
 8016f3c:	b570      	push	{r4, r5, r6, lr}
 8016f3e:	1149      	asrs	r1, r1, #5
 8016f40:	6914      	ldr	r4, [r2, #16]
 8016f42:	3101      	adds	r1, #1
 8016f44:	f102 0314 	add.w	r3, r2, #20
 8016f48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016f4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016f50:	1f05      	subs	r5, r0, #4
 8016f52:	42a3      	cmp	r3, r4
 8016f54:	d30c      	bcc.n	8016f70 <__copybits+0x36>
 8016f56:	1aa3      	subs	r3, r4, r2
 8016f58:	3b11      	subs	r3, #17
 8016f5a:	f023 0303 	bic.w	r3, r3, #3
 8016f5e:	3211      	adds	r2, #17
 8016f60:	42a2      	cmp	r2, r4
 8016f62:	bf88      	it	hi
 8016f64:	2300      	movhi	r3, #0
 8016f66:	4418      	add	r0, r3
 8016f68:	2300      	movs	r3, #0
 8016f6a:	4288      	cmp	r0, r1
 8016f6c:	d305      	bcc.n	8016f7a <__copybits+0x40>
 8016f6e:	bd70      	pop	{r4, r5, r6, pc}
 8016f70:	f853 6b04 	ldr.w	r6, [r3], #4
 8016f74:	f845 6f04 	str.w	r6, [r5, #4]!
 8016f78:	e7eb      	b.n	8016f52 <__copybits+0x18>
 8016f7a:	f840 3b04 	str.w	r3, [r0], #4
 8016f7e:	e7f4      	b.n	8016f6a <__copybits+0x30>

08016f80 <__any_on>:
 8016f80:	f100 0214 	add.w	r2, r0, #20
 8016f84:	6900      	ldr	r0, [r0, #16]
 8016f86:	114b      	asrs	r3, r1, #5
 8016f88:	4298      	cmp	r0, r3
 8016f8a:	b510      	push	{r4, lr}
 8016f8c:	db11      	blt.n	8016fb2 <__any_on+0x32>
 8016f8e:	dd0a      	ble.n	8016fa6 <__any_on+0x26>
 8016f90:	f011 011f 	ands.w	r1, r1, #31
 8016f94:	d007      	beq.n	8016fa6 <__any_on+0x26>
 8016f96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016f9a:	fa24 f001 	lsr.w	r0, r4, r1
 8016f9e:	fa00 f101 	lsl.w	r1, r0, r1
 8016fa2:	428c      	cmp	r4, r1
 8016fa4:	d10b      	bne.n	8016fbe <__any_on+0x3e>
 8016fa6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016faa:	4293      	cmp	r3, r2
 8016fac:	d803      	bhi.n	8016fb6 <__any_on+0x36>
 8016fae:	2000      	movs	r0, #0
 8016fb0:	bd10      	pop	{r4, pc}
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	e7f7      	b.n	8016fa6 <__any_on+0x26>
 8016fb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016fba:	2900      	cmp	r1, #0
 8016fbc:	d0f5      	beq.n	8016faa <__any_on+0x2a>
 8016fbe:	2001      	movs	r0, #1
 8016fc0:	e7f6      	b.n	8016fb0 <__any_on+0x30>

08016fc2 <_realloc_r>:
 8016fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fc4:	4607      	mov	r7, r0
 8016fc6:	4614      	mov	r4, r2
 8016fc8:	460e      	mov	r6, r1
 8016fca:	b921      	cbnz	r1, 8016fd6 <_realloc_r+0x14>
 8016fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016fd0:	4611      	mov	r1, r2
 8016fd2:	f7fb bcd9 	b.w	8012988 <_malloc_r>
 8016fd6:	b922      	cbnz	r2, 8016fe2 <_realloc_r+0x20>
 8016fd8:	f7fb fc86 	bl	80128e8 <_free_r>
 8016fdc:	4625      	mov	r5, r4
 8016fde:	4628      	mov	r0, r5
 8016fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fe2:	f000 fdd9 	bl	8017b98 <_malloc_usable_size_r>
 8016fe6:	42a0      	cmp	r0, r4
 8016fe8:	d20f      	bcs.n	801700a <_realloc_r+0x48>
 8016fea:	4621      	mov	r1, r4
 8016fec:	4638      	mov	r0, r7
 8016fee:	f7fb fccb 	bl	8012988 <_malloc_r>
 8016ff2:	4605      	mov	r5, r0
 8016ff4:	2800      	cmp	r0, #0
 8016ff6:	d0f2      	beq.n	8016fde <_realloc_r+0x1c>
 8016ff8:	4631      	mov	r1, r6
 8016ffa:	4622      	mov	r2, r4
 8016ffc:	f7fb fc4e 	bl	801289c <memcpy>
 8017000:	4631      	mov	r1, r6
 8017002:	4638      	mov	r0, r7
 8017004:	f7fb fc70 	bl	80128e8 <_free_r>
 8017008:	e7e9      	b.n	8016fde <_realloc_r+0x1c>
 801700a:	4635      	mov	r5, r6
 801700c:	e7e7      	b.n	8016fde <_realloc_r+0x1c>

0801700e <__ssputs_r>:
 801700e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017012:	688e      	ldr	r6, [r1, #8]
 8017014:	429e      	cmp	r6, r3
 8017016:	4682      	mov	sl, r0
 8017018:	460c      	mov	r4, r1
 801701a:	4690      	mov	r8, r2
 801701c:	461f      	mov	r7, r3
 801701e:	d838      	bhi.n	8017092 <__ssputs_r+0x84>
 8017020:	898a      	ldrh	r2, [r1, #12]
 8017022:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017026:	d032      	beq.n	801708e <__ssputs_r+0x80>
 8017028:	6825      	ldr	r5, [r4, #0]
 801702a:	6909      	ldr	r1, [r1, #16]
 801702c:	eba5 0901 	sub.w	r9, r5, r1
 8017030:	6965      	ldr	r5, [r4, #20]
 8017032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017036:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801703a:	3301      	adds	r3, #1
 801703c:	444b      	add	r3, r9
 801703e:	106d      	asrs	r5, r5, #1
 8017040:	429d      	cmp	r5, r3
 8017042:	bf38      	it	cc
 8017044:	461d      	movcc	r5, r3
 8017046:	0553      	lsls	r3, r2, #21
 8017048:	d531      	bpl.n	80170ae <__ssputs_r+0xa0>
 801704a:	4629      	mov	r1, r5
 801704c:	f7fb fc9c 	bl	8012988 <_malloc_r>
 8017050:	4606      	mov	r6, r0
 8017052:	b950      	cbnz	r0, 801706a <__ssputs_r+0x5c>
 8017054:	230c      	movs	r3, #12
 8017056:	f8ca 3000 	str.w	r3, [sl]
 801705a:	89a3      	ldrh	r3, [r4, #12]
 801705c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017060:	81a3      	strh	r3, [r4, #12]
 8017062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801706a:	6921      	ldr	r1, [r4, #16]
 801706c:	464a      	mov	r2, r9
 801706e:	f7fb fc15 	bl	801289c <memcpy>
 8017072:	89a3      	ldrh	r3, [r4, #12]
 8017074:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801707c:	81a3      	strh	r3, [r4, #12]
 801707e:	6126      	str	r6, [r4, #16]
 8017080:	6165      	str	r5, [r4, #20]
 8017082:	444e      	add	r6, r9
 8017084:	eba5 0509 	sub.w	r5, r5, r9
 8017088:	6026      	str	r6, [r4, #0]
 801708a:	60a5      	str	r5, [r4, #8]
 801708c:	463e      	mov	r6, r7
 801708e:	42be      	cmp	r6, r7
 8017090:	d900      	bls.n	8017094 <__ssputs_r+0x86>
 8017092:	463e      	mov	r6, r7
 8017094:	4632      	mov	r2, r6
 8017096:	6820      	ldr	r0, [r4, #0]
 8017098:	4641      	mov	r1, r8
 801709a:	f7ff fab1 	bl	8016600 <memmove>
 801709e:	68a3      	ldr	r3, [r4, #8]
 80170a0:	6822      	ldr	r2, [r4, #0]
 80170a2:	1b9b      	subs	r3, r3, r6
 80170a4:	4432      	add	r2, r6
 80170a6:	60a3      	str	r3, [r4, #8]
 80170a8:	6022      	str	r2, [r4, #0]
 80170aa:	2000      	movs	r0, #0
 80170ac:	e7db      	b.n	8017066 <__ssputs_r+0x58>
 80170ae:	462a      	mov	r2, r5
 80170b0:	f7ff ff87 	bl	8016fc2 <_realloc_r>
 80170b4:	4606      	mov	r6, r0
 80170b6:	2800      	cmp	r0, #0
 80170b8:	d1e1      	bne.n	801707e <__ssputs_r+0x70>
 80170ba:	6921      	ldr	r1, [r4, #16]
 80170bc:	4650      	mov	r0, sl
 80170be:	f7fb fc13 	bl	80128e8 <_free_r>
 80170c2:	e7c7      	b.n	8017054 <__ssputs_r+0x46>

080170c4 <_svfiprintf_r>:
 80170c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170c8:	4698      	mov	r8, r3
 80170ca:	898b      	ldrh	r3, [r1, #12]
 80170cc:	061b      	lsls	r3, r3, #24
 80170ce:	b09d      	sub	sp, #116	; 0x74
 80170d0:	4607      	mov	r7, r0
 80170d2:	460d      	mov	r5, r1
 80170d4:	4614      	mov	r4, r2
 80170d6:	d50e      	bpl.n	80170f6 <_svfiprintf_r+0x32>
 80170d8:	690b      	ldr	r3, [r1, #16]
 80170da:	b963      	cbnz	r3, 80170f6 <_svfiprintf_r+0x32>
 80170dc:	2140      	movs	r1, #64	; 0x40
 80170de:	f7fb fc53 	bl	8012988 <_malloc_r>
 80170e2:	6028      	str	r0, [r5, #0]
 80170e4:	6128      	str	r0, [r5, #16]
 80170e6:	b920      	cbnz	r0, 80170f2 <_svfiprintf_r+0x2e>
 80170e8:	230c      	movs	r3, #12
 80170ea:	603b      	str	r3, [r7, #0]
 80170ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170f0:	e0d1      	b.n	8017296 <_svfiprintf_r+0x1d2>
 80170f2:	2340      	movs	r3, #64	; 0x40
 80170f4:	616b      	str	r3, [r5, #20]
 80170f6:	2300      	movs	r3, #0
 80170f8:	9309      	str	r3, [sp, #36]	; 0x24
 80170fa:	2320      	movs	r3, #32
 80170fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017100:	f8cd 800c 	str.w	r8, [sp, #12]
 8017104:	2330      	movs	r3, #48	; 0x30
 8017106:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80172b0 <_svfiprintf_r+0x1ec>
 801710a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801710e:	f04f 0901 	mov.w	r9, #1
 8017112:	4623      	mov	r3, r4
 8017114:	469a      	mov	sl, r3
 8017116:	f813 2b01 	ldrb.w	r2, [r3], #1
 801711a:	b10a      	cbz	r2, 8017120 <_svfiprintf_r+0x5c>
 801711c:	2a25      	cmp	r2, #37	; 0x25
 801711e:	d1f9      	bne.n	8017114 <_svfiprintf_r+0x50>
 8017120:	ebba 0b04 	subs.w	fp, sl, r4
 8017124:	d00b      	beq.n	801713e <_svfiprintf_r+0x7a>
 8017126:	465b      	mov	r3, fp
 8017128:	4622      	mov	r2, r4
 801712a:	4629      	mov	r1, r5
 801712c:	4638      	mov	r0, r7
 801712e:	f7ff ff6e 	bl	801700e <__ssputs_r>
 8017132:	3001      	adds	r0, #1
 8017134:	f000 80aa 	beq.w	801728c <_svfiprintf_r+0x1c8>
 8017138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801713a:	445a      	add	r2, fp
 801713c:	9209      	str	r2, [sp, #36]	; 0x24
 801713e:	f89a 3000 	ldrb.w	r3, [sl]
 8017142:	2b00      	cmp	r3, #0
 8017144:	f000 80a2 	beq.w	801728c <_svfiprintf_r+0x1c8>
 8017148:	2300      	movs	r3, #0
 801714a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801714e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017152:	f10a 0a01 	add.w	sl, sl, #1
 8017156:	9304      	str	r3, [sp, #16]
 8017158:	9307      	str	r3, [sp, #28]
 801715a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801715e:	931a      	str	r3, [sp, #104]	; 0x68
 8017160:	4654      	mov	r4, sl
 8017162:	2205      	movs	r2, #5
 8017164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017168:	4851      	ldr	r0, [pc, #324]	; (80172b0 <_svfiprintf_r+0x1ec>)
 801716a:	f7e9 f841 	bl	80001f0 <memchr>
 801716e:	9a04      	ldr	r2, [sp, #16]
 8017170:	b9d8      	cbnz	r0, 80171aa <_svfiprintf_r+0xe6>
 8017172:	06d0      	lsls	r0, r2, #27
 8017174:	bf44      	itt	mi
 8017176:	2320      	movmi	r3, #32
 8017178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801717c:	0711      	lsls	r1, r2, #28
 801717e:	bf44      	itt	mi
 8017180:	232b      	movmi	r3, #43	; 0x2b
 8017182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017186:	f89a 3000 	ldrb.w	r3, [sl]
 801718a:	2b2a      	cmp	r3, #42	; 0x2a
 801718c:	d015      	beq.n	80171ba <_svfiprintf_r+0xf6>
 801718e:	9a07      	ldr	r2, [sp, #28]
 8017190:	4654      	mov	r4, sl
 8017192:	2000      	movs	r0, #0
 8017194:	f04f 0c0a 	mov.w	ip, #10
 8017198:	4621      	mov	r1, r4
 801719a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801719e:	3b30      	subs	r3, #48	; 0x30
 80171a0:	2b09      	cmp	r3, #9
 80171a2:	d94e      	bls.n	8017242 <_svfiprintf_r+0x17e>
 80171a4:	b1b0      	cbz	r0, 80171d4 <_svfiprintf_r+0x110>
 80171a6:	9207      	str	r2, [sp, #28]
 80171a8:	e014      	b.n	80171d4 <_svfiprintf_r+0x110>
 80171aa:	eba0 0308 	sub.w	r3, r0, r8
 80171ae:	fa09 f303 	lsl.w	r3, r9, r3
 80171b2:	4313      	orrs	r3, r2
 80171b4:	9304      	str	r3, [sp, #16]
 80171b6:	46a2      	mov	sl, r4
 80171b8:	e7d2      	b.n	8017160 <_svfiprintf_r+0x9c>
 80171ba:	9b03      	ldr	r3, [sp, #12]
 80171bc:	1d19      	adds	r1, r3, #4
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	9103      	str	r1, [sp, #12]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	bfbb      	ittet	lt
 80171c6:	425b      	neglt	r3, r3
 80171c8:	f042 0202 	orrlt.w	r2, r2, #2
 80171cc:	9307      	strge	r3, [sp, #28]
 80171ce:	9307      	strlt	r3, [sp, #28]
 80171d0:	bfb8      	it	lt
 80171d2:	9204      	strlt	r2, [sp, #16]
 80171d4:	7823      	ldrb	r3, [r4, #0]
 80171d6:	2b2e      	cmp	r3, #46	; 0x2e
 80171d8:	d10c      	bne.n	80171f4 <_svfiprintf_r+0x130>
 80171da:	7863      	ldrb	r3, [r4, #1]
 80171dc:	2b2a      	cmp	r3, #42	; 0x2a
 80171de:	d135      	bne.n	801724c <_svfiprintf_r+0x188>
 80171e0:	9b03      	ldr	r3, [sp, #12]
 80171e2:	1d1a      	adds	r2, r3, #4
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	9203      	str	r2, [sp, #12]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	bfb8      	it	lt
 80171ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80171f0:	3402      	adds	r4, #2
 80171f2:	9305      	str	r3, [sp, #20]
 80171f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80172c0 <_svfiprintf_r+0x1fc>
 80171f8:	7821      	ldrb	r1, [r4, #0]
 80171fa:	2203      	movs	r2, #3
 80171fc:	4650      	mov	r0, sl
 80171fe:	f7e8 fff7 	bl	80001f0 <memchr>
 8017202:	b140      	cbz	r0, 8017216 <_svfiprintf_r+0x152>
 8017204:	2340      	movs	r3, #64	; 0x40
 8017206:	eba0 000a 	sub.w	r0, r0, sl
 801720a:	fa03 f000 	lsl.w	r0, r3, r0
 801720e:	9b04      	ldr	r3, [sp, #16]
 8017210:	4303      	orrs	r3, r0
 8017212:	3401      	adds	r4, #1
 8017214:	9304      	str	r3, [sp, #16]
 8017216:	f814 1b01 	ldrb.w	r1, [r4], #1
 801721a:	4826      	ldr	r0, [pc, #152]	; (80172b4 <_svfiprintf_r+0x1f0>)
 801721c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017220:	2206      	movs	r2, #6
 8017222:	f7e8 ffe5 	bl	80001f0 <memchr>
 8017226:	2800      	cmp	r0, #0
 8017228:	d038      	beq.n	801729c <_svfiprintf_r+0x1d8>
 801722a:	4b23      	ldr	r3, [pc, #140]	; (80172b8 <_svfiprintf_r+0x1f4>)
 801722c:	bb1b      	cbnz	r3, 8017276 <_svfiprintf_r+0x1b2>
 801722e:	9b03      	ldr	r3, [sp, #12]
 8017230:	3307      	adds	r3, #7
 8017232:	f023 0307 	bic.w	r3, r3, #7
 8017236:	3308      	adds	r3, #8
 8017238:	9303      	str	r3, [sp, #12]
 801723a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801723c:	4433      	add	r3, r6
 801723e:	9309      	str	r3, [sp, #36]	; 0x24
 8017240:	e767      	b.n	8017112 <_svfiprintf_r+0x4e>
 8017242:	fb0c 3202 	mla	r2, ip, r2, r3
 8017246:	460c      	mov	r4, r1
 8017248:	2001      	movs	r0, #1
 801724a:	e7a5      	b.n	8017198 <_svfiprintf_r+0xd4>
 801724c:	2300      	movs	r3, #0
 801724e:	3401      	adds	r4, #1
 8017250:	9305      	str	r3, [sp, #20]
 8017252:	4619      	mov	r1, r3
 8017254:	f04f 0c0a 	mov.w	ip, #10
 8017258:	4620      	mov	r0, r4
 801725a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801725e:	3a30      	subs	r2, #48	; 0x30
 8017260:	2a09      	cmp	r2, #9
 8017262:	d903      	bls.n	801726c <_svfiprintf_r+0x1a8>
 8017264:	2b00      	cmp	r3, #0
 8017266:	d0c5      	beq.n	80171f4 <_svfiprintf_r+0x130>
 8017268:	9105      	str	r1, [sp, #20]
 801726a:	e7c3      	b.n	80171f4 <_svfiprintf_r+0x130>
 801726c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017270:	4604      	mov	r4, r0
 8017272:	2301      	movs	r3, #1
 8017274:	e7f0      	b.n	8017258 <_svfiprintf_r+0x194>
 8017276:	ab03      	add	r3, sp, #12
 8017278:	9300      	str	r3, [sp, #0]
 801727a:	462a      	mov	r2, r5
 801727c:	4b0f      	ldr	r3, [pc, #60]	; (80172bc <_svfiprintf_r+0x1f8>)
 801727e:	a904      	add	r1, sp, #16
 8017280:	4638      	mov	r0, r7
 8017282:	f7fb fdd5 	bl	8012e30 <_printf_float>
 8017286:	1c42      	adds	r2, r0, #1
 8017288:	4606      	mov	r6, r0
 801728a:	d1d6      	bne.n	801723a <_svfiprintf_r+0x176>
 801728c:	89ab      	ldrh	r3, [r5, #12]
 801728e:	065b      	lsls	r3, r3, #25
 8017290:	f53f af2c 	bmi.w	80170ec <_svfiprintf_r+0x28>
 8017294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017296:	b01d      	add	sp, #116	; 0x74
 8017298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801729c:	ab03      	add	r3, sp, #12
 801729e:	9300      	str	r3, [sp, #0]
 80172a0:	462a      	mov	r2, r5
 80172a2:	4b06      	ldr	r3, [pc, #24]	; (80172bc <_svfiprintf_r+0x1f8>)
 80172a4:	a904      	add	r1, sp, #16
 80172a6:	4638      	mov	r0, r7
 80172a8:	f7fc f866 	bl	8013378 <_printf_i>
 80172ac:	e7eb      	b.n	8017286 <_svfiprintf_r+0x1c2>
 80172ae:	bf00      	nop
 80172b0:	080180a8 	.word	0x080180a8
 80172b4:	080180b2 	.word	0x080180b2
 80172b8:	08012e31 	.word	0x08012e31
 80172bc:	0801700f 	.word	0x0801700f
 80172c0:	080180ae 	.word	0x080180ae

080172c4 <_sungetc_r>:
 80172c4:	b538      	push	{r3, r4, r5, lr}
 80172c6:	1c4b      	adds	r3, r1, #1
 80172c8:	4614      	mov	r4, r2
 80172ca:	d103      	bne.n	80172d4 <_sungetc_r+0x10>
 80172cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80172d0:	4628      	mov	r0, r5
 80172d2:	bd38      	pop	{r3, r4, r5, pc}
 80172d4:	8993      	ldrh	r3, [r2, #12]
 80172d6:	f023 0320 	bic.w	r3, r3, #32
 80172da:	8193      	strh	r3, [r2, #12]
 80172dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172de:	6852      	ldr	r2, [r2, #4]
 80172e0:	b2cd      	uxtb	r5, r1
 80172e2:	b18b      	cbz	r3, 8017308 <_sungetc_r+0x44>
 80172e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80172e6:	4293      	cmp	r3, r2
 80172e8:	dd08      	ble.n	80172fc <_sungetc_r+0x38>
 80172ea:	6823      	ldr	r3, [r4, #0]
 80172ec:	1e5a      	subs	r2, r3, #1
 80172ee:	6022      	str	r2, [r4, #0]
 80172f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80172f4:	6863      	ldr	r3, [r4, #4]
 80172f6:	3301      	adds	r3, #1
 80172f8:	6063      	str	r3, [r4, #4]
 80172fa:	e7e9      	b.n	80172d0 <_sungetc_r+0xc>
 80172fc:	4621      	mov	r1, r4
 80172fe:	f000 fbe5 	bl	8017acc <__submore>
 8017302:	2800      	cmp	r0, #0
 8017304:	d0f1      	beq.n	80172ea <_sungetc_r+0x26>
 8017306:	e7e1      	b.n	80172cc <_sungetc_r+0x8>
 8017308:	6921      	ldr	r1, [r4, #16]
 801730a:	6823      	ldr	r3, [r4, #0]
 801730c:	b151      	cbz	r1, 8017324 <_sungetc_r+0x60>
 801730e:	4299      	cmp	r1, r3
 8017310:	d208      	bcs.n	8017324 <_sungetc_r+0x60>
 8017312:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017316:	42a9      	cmp	r1, r5
 8017318:	d104      	bne.n	8017324 <_sungetc_r+0x60>
 801731a:	3b01      	subs	r3, #1
 801731c:	3201      	adds	r2, #1
 801731e:	6023      	str	r3, [r4, #0]
 8017320:	6062      	str	r2, [r4, #4]
 8017322:	e7d5      	b.n	80172d0 <_sungetc_r+0xc>
 8017324:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801732c:	6363      	str	r3, [r4, #52]	; 0x34
 801732e:	2303      	movs	r3, #3
 8017330:	63a3      	str	r3, [r4, #56]	; 0x38
 8017332:	4623      	mov	r3, r4
 8017334:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017338:	6023      	str	r3, [r4, #0]
 801733a:	2301      	movs	r3, #1
 801733c:	e7dc      	b.n	80172f8 <_sungetc_r+0x34>

0801733e <__ssrefill_r>:
 801733e:	b510      	push	{r4, lr}
 8017340:	460c      	mov	r4, r1
 8017342:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017344:	b169      	cbz	r1, 8017362 <__ssrefill_r+0x24>
 8017346:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801734a:	4299      	cmp	r1, r3
 801734c:	d001      	beq.n	8017352 <__ssrefill_r+0x14>
 801734e:	f7fb facb 	bl	80128e8 <_free_r>
 8017352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017354:	6063      	str	r3, [r4, #4]
 8017356:	2000      	movs	r0, #0
 8017358:	6360      	str	r0, [r4, #52]	; 0x34
 801735a:	b113      	cbz	r3, 8017362 <__ssrefill_r+0x24>
 801735c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801735e:	6023      	str	r3, [r4, #0]
 8017360:	bd10      	pop	{r4, pc}
 8017362:	6923      	ldr	r3, [r4, #16]
 8017364:	6023      	str	r3, [r4, #0]
 8017366:	2300      	movs	r3, #0
 8017368:	6063      	str	r3, [r4, #4]
 801736a:	89a3      	ldrh	r3, [r4, #12]
 801736c:	f043 0320 	orr.w	r3, r3, #32
 8017370:	81a3      	strh	r3, [r4, #12]
 8017372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017376:	e7f3      	b.n	8017360 <__ssrefill_r+0x22>

08017378 <__ssvfiscanf_r>:
 8017378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801737c:	460c      	mov	r4, r1
 801737e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017382:	2100      	movs	r1, #0
 8017384:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017388:	49b2      	ldr	r1, [pc, #712]	; (8017654 <__ssvfiscanf_r+0x2dc>)
 801738a:	91a0      	str	r1, [sp, #640]	; 0x280
 801738c:	f10d 0804 	add.w	r8, sp, #4
 8017390:	49b1      	ldr	r1, [pc, #708]	; (8017658 <__ssvfiscanf_r+0x2e0>)
 8017392:	4fb2      	ldr	r7, [pc, #712]	; (801765c <__ssvfiscanf_r+0x2e4>)
 8017394:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8017660 <__ssvfiscanf_r+0x2e8>
 8017398:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801739c:	4606      	mov	r6, r0
 801739e:	91a1      	str	r1, [sp, #644]	; 0x284
 80173a0:	9300      	str	r3, [sp, #0]
 80173a2:	f892 a000 	ldrb.w	sl, [r2]
 80173a6:	f1ba 0f00 	cmp.w	sl, #0
 80173aa:	f000 8151 	beq.w	8017650 <__ssvfiscanf_r+0x2d8>
 80173ae:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80173b2:	f013 0308 	ands.w	r3, r3, #8
 80173b6:	f102 0501 	add.w	r5, r2, #1
 80173ba:	d019      	beq.n	80173f0 <__ssvfiscanf_r+0x78>
 80173bc:	6863      	ldr	r3, [r4, #4]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	dd0f      	ble.n	80173e2 <__ssvfiscanf_r+0x6a>
 80173c2:	6823      	ldr	r3, [r4, #0]
 80173c4:	781a      	ldrb	r2, [r3, #0]
 80173c6:	5cba      	ldrb	r2, [r7, r2]
 80173c8:	0712      	lsls	r2, r2, #28
 80173ca:	d401      	bmi.n	80173d0 <__ssvfiscanf_r+0x58>
 80173cc:	462a      	mov	r2, r5
 80173ce:	e7e8      	b.n	80173a2 <__ssvfiscanf_r+0x2a>
 80173d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80173d2:	3201      	adds	r2, #1
 80173d4:	9245      	str	r2, [sp, #276]	; 0x114
 80173d6:	6862      	ldr	r2, [r4, #4]
 80173d8:	3301      	adds	r3, #1
 80173da:	3a01      	subs	r2, #1
 80173dc:	6062      	str	r2, [r4, #4]
 80173de:	6023      	str	r3, [r4, #0]
 80173e0:	e7ec      	b.n	80173bc <__ssvfiscanf_r+0x44>
 80173e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80173e4:	4621      	mov	r1, r4
 80173e6:	4630      	mov	r0, r6
 80173e8:	4798      	blx	r3
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d0e9      	beq.n	80173c2 <__ssvfiscanf_r+0x4a>
 80173ee:	e7ed      	b.n	80173cc <__ssvfiscanf_r+0x54>
 80173f0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80173f4:	f040 8083 	bne.w	80174fe <__ssvfiscanf_r+0x186>
 80173f8:	9341      	str	r3, [sp, #260]	; 0x104
 80173fa:	9343      	str	r3, [sp, #268]	; 0x10c
 80173fc:	7853      	ldrb	r3, [r2, #1]
 80173fe:	2b2a      	cmp	r3, #42	; 0x2a
 8017400:	bf02      	ittt	eq
 8017402:	2310      	moveq	r3, #16
 8017404:	1c95      	addeq	r5, r2, #2
 8017406:	9341      	streq	r3, [sp, #260]	; 0x104
 8017408:	220a      	movs	r2, #10
 801740a:	46ab      	mov	fp, r5
 801740c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8017410:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017414:	2b09      	cmp	r3, #9
 8017416:	d91d      	bls.n	8017454 <__ssvfiscanf_r+0xdc>
 8017418:	4891      	ldr	r0, [pc, #580]	; (8017660 <__ssvfiscanf_r+0x2e8>)
 801741a:	2203      	movs	r2, #3
 801741c:	f7e8 fee8 	bl	80001f0 <memchr>
 8017420:	b140      	cbz	r0, 8017434 <__ssvfiscanf_r+0xbc>
 8017422:	2301      	movs	r3, #1
 8017424:	eba0 0009 	sub.w	r0, r0, r9
 8017428:	fa03 f000 	lsl.w	r0, r3, r0
 801742c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801742e:	4318      	orrs	r0, r3
 8017430:	9041      	str	r0, [sp, #260]	; 0x104
 8017432:	465d      	mov	r5, fp
 8017434:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017438:	2b78      	cmp	r3, #120	; 0x78
 801743a:	d806      	bhi.n	801744a <__ssvfiscanf_r+0xd2>
 801743c:	2b57      	cmp	r3, #87	; 0x57
 801743e:	d810      	bhi.n	8017462 <__ssvfiscanf_r+0xea>
 8017440:	2b25      	cmp	r3, #37	; 0x25
 8017442:	d05c      	beq.n	80174fe <__ssvfiscanf_r+0x186>
 8017444:	d856      	bhi.n	80174f4 <__ssvfiscanf_r+0x17c>
 8017446:	2b00      	cmp	r3, #0
 8017448:	d074      	beq.n	8017534 <__ssvfiscanf_r+0x1bc>
 801744a:	2303      	movs	r3, #3
 801744c:	9347      	str	r3, [sp, #284]	; 0x11c
 801744e:	230a      	movs	r3, #10
 8017450:	9342      	str	r3, [sp, #264]	; 0x108
 8017452:	e081      	b.n	8017558 <__ssvfiscanf_r+0x1e0>
 8017454:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017456:	fb02 1303 	mla	r3, r2, r3, r1
 801745a:	3b30      	subs	r3, #48	; 0x30
 801745c:	9343      	str	r3, [sp, #268]	; 0x10c
 801745e:	465d      	mov	r5, fp
 8017460:	e7d3      	b.n	801740a <__ssvfiscanf_r+0x92>
 8017462:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017466:	2a20      	cmp	r2, #32
 8017468:	d8ef      	bhi.n	801744a <__ssvfiscanf_r+0xd2>
 801746a:	a101      	add	r1, pc, #4	; (adr r1, 8017470 <__ssvfiscanf_r+0xf8>)
 801746c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017470:	08017543 	.word	0x08017543
 8017474:	0801744b 	.word	0x0801744b
 8017478:	0801744b 	.word	0x0801744b
 801747c:	080175a1 	.word	0x080175a1
 8017480:	0801744b 	.word	0x0801744b
 8017484:	0801744b 	.word	0x0801744b
 8017488:	0801744b 	.word	0x0801744b
 801748c:	0801744b 	.word	0x0801744b
 8017490:	0801744b 	.word	0x0801744b
 8017494:	0801744b 	.word	0x0801744b
 8017498:	0801744b 	.word	0x0801744b
 801749c:	080175b7 	.word	0x080175b7
 80174a0:	0801758d 	.word	0x0801758d
 80174a4:	080174fb 	.word	0x080174fb
 80174a8:	080174fb 	.word	0x080174fb
 80174ac:	080174fb 	.word	0x080174fb
 80174b0:	0801744b 	.word	0x0801744b
 80174b4:	08017591 	.word	0x08017591
 80174b8:	0801744b 	.word	0x0801744b
 80174bc:	0801744b 	.word	0x0801744b
 80174c0:	0801744b 	.word	0x0801744b
 80174c4:	0801744b 	.word	0x0801744b
 80174c8:	080175c7 	.word	0x080175c7
 80174cc:	08017599 	.word	0x08017599
 80174d0:	0801753b 	.word	0x0801753b
 80174d4:	0801744b 	.word	0x0801744b
 80174d8:	0801744b 	.word	0x0801744b
 80174dc:	080175c3 	.word	0x080175c3
 80174e0:	0801744b 	.word	0x0801744b
 80174e4:	0801758d 	.word	0x0801758d
 80174e8:	0801744b 	.word	0x0801744b
 80174ec:	0801744b 	.word	0x0801744b
 80174f0:	08017543 	.word	0x08017543
 80174f4:	3b45      	subs	r3, #69	; 0x45
 80174f6:	2b02      	cmp	r3, #2
 80174f8:	d8a7      	bhi.n	801744a <__ssvfiscanf_r+0xd2>
 80174fa:	2305      	movs	r3, #5
 80174fc:	e02b      	b.n	8017556 <__ssvfiscanf_r+0x1de>
 80174fe:	6863      	ldr	r3, [r4, #4]
 8017500:	2b00      	cmp	r3, #0
 8017502:	dd0d      	ble.n	8017520 <__ssvfiscanf_r+0x1a8>
 8017504:	6823      	ldr	r3, [r4, #0]
 8017506:	781a      	ldrb	r2, [r3, #0]
 8017508:	4552      	cmp	r2, sl
 801750a:	f040 80a1 	bne.w	8017650 <__ssvfiscanf_r+0x2d8>
 801750e:	3301      	adds	r3, #1
 8017510:	6862      	ldr	r2, [r4, #4]
 8017512:	6023      	str	r3, [r4, #0]
 8017514:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017516:	3a01      	subs	r2, #1
 8017518:	3301      	adds	r3, #1
 801751a:	6062      	str	r2, [r4, #4]
 801751c:	9345      	str	r3, [sp, #276]	; 0x114
 801751e:	e755      	b.n	80173cc <__ssvfiscanf_r+0x54>
 8017520:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017522:	4621      	mov	r1, r4
 8017524:	4630      	mov	r0, r6
 8017526:	4798      	blx	r3
 8017528:	2800      	cmp	r0, #0
 801752a:	d0eb      	beq.n	8017504 <__ssvfiscanf_r+0x18c>
 801752c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801752e:	2800      	cmp	r0, #0
 8017530:	f040 8084 	bne.w	801763c <__ssvfiscanf_r+0x2c4>
 8017534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017538:	e086      	b.n	8017648 <__ssvfiscanf_r+0x2d0>
 801753a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801753c:	f042 0220 	orr.w	r2, r2, #32
 8017540:	9241      	str	r2, [sp, #260]	; 0x104
 8017542:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017548:	9241      	str	r2, [sp, #260]	; 0x104
 801754a:	2210      	movs	r2, #16
 801754c:	2b6f      	cmp	r3, #111	; 0x6f
 801754e:	9242      	str	r2, [sp, #264]	; 0x108
 8017550:	bf34      	ite	cc
 8017552:	2303      	movcc	r3, #3
 8017554:	2304      	movcs	r3, #4
 8017556:	9347      	str	r3, [sp, #284]	; 0x11c
 8017558:	6863      	ldr	r3, [r4, #4]
 801755a:	2b00      	cmp	r3, #0
 801755c:	dd41      	ble.n	80175e2 <__ssvfiscanf_r+0x26a>
 801755e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017560:	0659      	lsls	r1, r3, #25
 8017562:	d404      	bmi.n	801756e <__ssvfiscanf_r+0x1f6>
 8017564:	6823      	ldr	r3, [r4, #0]
 8017566:	781a      	ldrb	r2, [r3, #0]
 8017568:	5cba      	ldrb	r2, [r7, r2]
 801756a:	0712      	lsls	r2, r2, #28
 801756c:	d440      	bmi.n	80175f0 <__ssvfiscanf_r+0x278>
 801756e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017570:	2b02      	cmp	r3, #2
 8017572:	dc4f      	bgt.n	8017614 <__ssvfiscanf_r+0x29c>
 8017574:	466b      	mov	r3, sp
 8017576:	4622      	mov	r2, r4
 8017578:	a941      	add	r1, sp, #260	; 0x104
 801757a:	4630      	mov	r0, r6
 801757c:	f000 f874 	bl	8017668 <_scanf_chars>
 8017580:	2801      	cmp	r0, #1
 8017582:	d065      	beq.n	8017650 <__ssvfiscanf_r+0x2d8>
 8017584:	2802      	cmp	r0, #2
 8017586:	f47f af21 	bne.w	80173cc <__ssvfiscanf_r+0x54>
 801758a:	e7cf      	b.n	801752c <__ssvfiscanf_r+0x1b4>
 801758c:	220a      	movs	r2, #10
 801758e:	e7dd      	b.n	801754c <__ssvfiscanf_r+0x1d4>
 8017590:	2300      	movs	r3, #0
 8017592:	9342      	str	r3, [sp, #264]	; 0x108
 8017594:	2303      	movs	r3, #3
 8017596:	e7de      	b.n	8017556 <__ssvfiscanf_r+0x1de>
 8017598:	2308      	movs	r3, #8
 801759a:	9342      	str	r3, [sp, #264]	; 0x108
 801759c:	2304      	movs	r3, #4
 801759e:	e7da      	b.n	8017556 <__ssvfiscanf_r+0x1de>
 80175a0:	4629      	mov	r1, r5
 80175a2:	4640      	mov	r0, r8
 80175a4:	f000 f9c8 	bl	8017938 <__sccl>
 80175a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80175aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175ae:	9341      	str	r3, [sp, #260]	; 0x104
 80175b0:	4605      	mov	r5, r0
 80175b2:	2301      	movs	r3, #1
 80175b4:	e7cf      	b.n	8017556 <__ssvfiscanf_r+0x1de>
 80175b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80175b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175bc:	9341      	str	r3, [sp, #260]	; 0x104
 80175be:	2300      	movs	r3, #0
 80175c0:	e7c9      	b.n	8017556 <__ssvfiscanf_r+0x1de>
 80175c2:	2302      	movs	r3, #2
 80175c4:	e7c7      	b.n	8017556 <__ssvfiscanf_r+0x1de>
 80175c6:	9841      	ldr	r0, [sp, #260]	; 0x104
 80175c8:	06c3      	lsls	r3, r0, #27
 80175ca:	f53f aeff 	bmi.w	80173cc <__ssvfiscanf_r+0x54>
 80175ce:	9b00      	ldr	r3, [sp, #0]
 80175d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80175d2:	1d19      	adds	r1, r3, #4
 80175d4:	9100      	str	r1, [sp, #0]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	07c0      	lsls	r0, r0, #31
 80175da:	bf4c      	ite	mi
 80175dc:	801a      	strhmi	r2, [r3, #0]
 80175de:	601a      	strpl	r2, [r3, #0]
 80175e0:	e6f4      	b.n	80173cc <__ssvfiscanf_r+0x54>
 80175e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80175e4:	4621      	mov	r1, r4
 80175e6:	4630      	mov	r0, r6
 80175e8:	4798      	blx	r3
 80175ea:	2800      	cmp	r0, #0
 80175ec:	d0b7      	beq.n	801755e <__ssvfiscanf_r+0x1e6>
 80175ee:	e79d      	b.n	801752c <__ssvfiscanf_r+0x1b4>
 80175f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80175f2:	3201      	adds	r2, #1
 80175f4:	9245      	str	r2, [sp, #276]	; 0x114
 80175f6:	6862      	ldr	r2, [r4, #4]
 80175f8:	3a01      	subs	r2, #1
 80175fa:	2a00      	cmp	r2, #0
 80175fc:	6062      	str	r2, [r4, #4]
 80175fe:	dd02      	ble.n	8017606 <__ssvfiscanf_r+0x28e>
 8017600:	3301      	adds	r3, #1
 8017602:	6023      	str	r3, [r4, #0]
 8017604:	e7ae      	b.n	8017564 <__ssvfiscanf_r+0x1ec>
 8017606:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017608:	4621      	mov	r1, r4
 801760a:	4630      	mov	r0, r6
 801760c:	4798      	blx	r3
 801760e:	2800      	cmp	r0, #0
 8017610:	d0a8      	beq.n	8017564 <__ssvfiscanf_r+0x1ec>
 8017612:	e78b      	b.n	801752c <__ssvfiscanf_r+0x1b4>
 8017614:	2b04      	cmp	r3, #4
 8017616:	dc06      	bgt.n	8017626 <__ssvfiscanf_r+0x2ae>
 8017618:	466b      	mov	r3, sp
 801761a:	4622      	mov	r2, r4
 801761c:	a941      	add	r1, sp, #260	; 0x104
 801761e:	4630      	mov	r0, r6
 8017620:	f000 f87a 	bl	8017718 <_scanf_i>
 8017624:	e7ac      	b.n	8017580 <__ssvfiscanf_r+0x208>
 8017626:	4b0f      	ldr	r3, [pc, #60]	; (8017664 <__ssvfiscanf_r+0x2ec>)
 8017628:	2b00      	cmp	r3, #0
 801762a:	f43f aecf 	beq.w	80173cc <__ssvfiscanf_r+0x54>
 801762e:	466b      	mov	r3, sp
 8017630:	4622      	mov	r2, r4
 8017632:	a941      	add	r1, sp, #260	; 0x104
 8017634:	4630      	mov	r0, r6
 8017636:	f7fb ffc5 	bl	80135c4 <_scanf_float>
 801763a:	e7a1      	b.n	8017580 <__ssvfiscanf_r+0x208>
 801763c:	89a3      	ldrh	r3, [r4, #12]
 801763e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017642:	bf18      	it	ne
 8017644:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8017648:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801764c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017650:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017652:	e7f9      	b.n	8017648 <__ssvfiscanf_r+0x2d0>
 8017654:	080172c5 	.word	0x080172c5
 8017658:	0801733f 	.word	0x0801733f
 801765c:	080187d9 	.word	0x080187d9
 8017660:	080180ae 	.word	0x080180ae
 8017664:	080135c5 	.word	0x080135c5

08017668 <_scanf_chars>:
 8017668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801766c:	4615      	mov	r5, r2
 801766e:	688a      	ldr	r2, [r1, #8]
 8017670:	4680      	mov	r8, r0
 8017672:	460c      	mov	r4, r1
 8017674:	b932      	cbnz	r2, 8017684 <_scanf_chars+0x1c>
 8017676:	698a      	ldr	r2, [r1, #24]
 8017678:	2a00      	cmp	r2, #0
 801767a:	bf0c      	ite	eq
 801767c:	2201      	moveq	r2, #1
 801767e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8017682:	608a      	str	r2, [r1, #8]
 8017684:	6822      	ldr	r2, [r4, #0]
 8017686:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8017714 <_scanf_chars+0xac>
 801768a:	06d1      	lsls	r1, r2, #27
 801768c:	bf5f      	itttt	pl
 801768e:	681a      	ldrpl	r2, [r3, #0]
 8017690:	1d11      	addpl	r1, r2, #4
 8017692:	6019      	strpl	r1, [r3, #0]
 8017694:	6816      	ldrpl	r6, [r2, #0]
 8017696:	2700      	movs	r7, #0
 8017698:	69a0      	ldr	r0, [r4, #24]
 801769a:	b188      	cbz	r0, 80176c0 <_scanf_chars+0x58>
 801769c:	2801      	cmp	r0, #1
 801769e:	d107      	bne.n	80176b0 <_scanf_chars+0x48>
 80176a0:	682b      	ldr	r3, [r5, #0]
 80176a2:	781a      	ldrb	r2, [r3, #0]
 80176a4:	6963      	ldr	r3, [r4, #20]
 80176a6:	5c9b      	ldrb	r3, [r3, r2]
 80176a8:	b953      	cbnz	r3, 80176c0 <_scanf_chars+0x58>
 80176aa:	bb27      	cbnz	r7, 80176f6 <_scanf_chars+0x8e>
 80176ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176b0:	2802      	cmp	r0, #2
 80176b2:	d120      	bne.n	80176f6 <_scanf_chars+0x8e>
 80176b4:	682b      	ldr	r3, [r5, #0]
 80176b6:	781b      	ldrb	r3, [r3, #0]
 80176b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80176bc:	071b      	lsls	r3, r3, #28
 80176be:	d41a      	bmi.n	80176f6 <_scanf_chars+0x8e>
 80176c0:	6823      	ldr	r3, [r4, #0]
 80176c2:	06da      	lsls	r2, r3, #27
 80176c4:	bf5e      	ittt	pl
 80176c6:	682b      	ldrpl	r3, [r5, #0]
 80176c8:	781b      	ldrbpl	r3, [r3, #0]
 80176ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 80176ce:	682a      	ldr	r2, [r5, #0]
 80176d0:	686b      	ldr	r3, [r5, #4]
 80176d2:	3201      	adds	r2, #1
 80176d4:	602a      	str	r2, [r5, #0]
 80176d6:	68a2      	ldr	r2, [r4, #8]
 80176d8:	3b01      	subs	r3, #1
 80176da:	3a01      	subs	r2, #1
 80176dc:	606b      	str	r3, [r5, #4]
 80176de:	3701      	adds	r7, #1
 80176e0:	60a2      	str	r2, [r4, #8]
 80176e2:	b142      	cbz	r2, 80176f6 <_scanf_chars+0x8e>
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	dcd7      	bgt.n	8017698 <_scanf_chars+0x30>
 80176e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80176ec:	4629      	mov	r1, r5
 80176ee:	4640      	mov	r0, r8
 80176f0:	4798      	blx	r3
 80176f2:	2800      	cmp	r0, #0
 80176f4:	d0d0      	beq.n	8017698 <_scanf_chars+0x30>
 80176f6:	6823      	ldr	r3, [r4, #0]
 80176f8:	f013 0310 	ands.w	r3, r3, #16
 80176fc:	d105      	bne.n	801770a <_scanf_chars+0xa2>
 80176fe:	68e2      	ldr	r2, [r4, #12]
 8017700:	3201      	adds	r2, #1
 8017702:	60e2      	str	r2, [r4, #12]
 8017704:	69a2      	ldr	r2, [r4, #24]
 8017706:	b102      	cbz	r2, 801770a <_scanf_chars+0xa2>
 8017708:	7033      	strb	r3, [r6, #0]
 801770a:	6923      	ldr	r3, [r4, #16]
 801770c:	441f      	add	r7, r3
 801770e:	6127      	str	r7, [r4, #16]
 8017710:	2000      	movs	r0, #0
 8017712:	e7cb      	b.n	80176ac <_scanf_chars+0x44>
 8017714:	080187d9 	.word	0x080187d9

08017718 <_scanf_i>:
 8017718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801771c:	4698      	mov	r8, r3
 801771e:	4b74      	ldr	r3, [pc, #464]	; (80178f0 <_scanf_i+0x1d8>)
 8017720:	460c      	mov	r4, r1
 8017722:	4682      	mov	sl, r0
 8017724:	4616      	mov	r6, r2
 8017726:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801772a:	b087      	sub	sp, #28
 801772c:	ab03      	add	r3, sp, #12
 801772e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017732:	4b70      	ldr	r3, [pc, #448]	; (80178f4 <_scanf_i+0x1dc>)
 8017734:	69a1      	ldr	r1, [r4, #24]
 8017736:	4a70      	ldr	r2, [pc, #448]	; (80178f8 <_scanf_i+0x1e0>)
 8017738:	2903      	cmp	r1, #3
 801773a:	bf18      	it	ne
 801773c:	461a      	movne	r2, r3
 801773e:	68a3      	ldr	r3, [r4, #8]
 8017740:	9201      	str	r2, [sp, #4]
 8017742:	1e5a      	subs	r2, r3, #1
 8017744:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017748:	bf88      	it	hi
 801774a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801774e:	4627      	mov	r7, r4
 8017750:	bf82      	ittt	hi
 8017752:	eb03 0905 	addhi.w	r9, r3, r5
 8017756:	f240 135d 	movwhi	r3, #349	; 0x15d
 801775a:	60a3      	strhi	r3, [r4, #8]
 801775c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017760:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017764:	bf98      	it	ls
 8017766:	f04f 0900 	movls.w	r9, #0
 801776a:	6023      	str	r3, [r4, #0]
 801776c:	463d      	mov	r5, r7
 801776e:	f04f 0b00 	mov.w	fp, #0
 8017772:	6831      	ldr	r1, [r6, #0]
 8017774:	ab03      	add	r3, sp, #12
 8017776:	7809      	ldrb	r1, [r1, #0]
 8017778:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801777c:	2202      	movs	r2, #2
 801777e:	f7e8 fd37 	bl	80001f0 <memchr>
 8017782:	b328      	cbz	r0, 80177d0 <_scanf_i+0xb8>
 8017784:	f1bb 0f01 	cmp.w	fp, #1
 8017788:	d159      	bne.n	801783e <_scanf_i+0x126>
 801778a:	6862      	ldr	r2, [r4, #4]
 801778c:	b92a      	cbnz	r2, 801779a <_scanf_i+0x82>
 801778e:	6822      	ldr	r2, [r4, #0]
 8017790:	2308      	movs	r3, #8
 8017792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017796:	6063      	str	r3, [r4, #4]
 8017798:	6022      	str	r2, [r4, #0]
 801779a:	6822      	ldr	r2, [r4, #0]
 801779c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80177a0:	6022      	str	r2, [r4, #0]
 80177a2:	68a2      	ldr	r2, [r4, #8]
 80177a4:	1e51      	subs	r1, r2, #1
 80177a6:	60a1      	str	r1, [r4, #8]
 80177a8:	b192      	cbz	r2, 80177d0 <_scanf_i+0xb8>
 80177aa:	6832      	ldr	r2, [r6, #0]
 80177ac:	1c51      	adds	r1, r2, #1
 80177ae:	6031      	str	r1, [r6, #0]
 80177b0:	7812      	ldrb	r2, [r2, #0]
 80177b2:	f805 2b01 	strb.w	r2, [r5], #1
 80177b6:	6872      	ldr	r2, [r6, #4]
 80177b8:	3a01      	subs	r2, #1
 80177ba:	2a00      	cmp	r2, #0
 80177bc:	6072      	str	r2, [r6, #4]
 80177be:	dc07      	bgt.n	80177d0 <_scanf_i+0xb8>
 80177c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80177c4:	4631      	mov	r1, r6
 80177c6:	4650      	mov	r0, sl
 80177c8:	4790      	blx	r2
 80177ca:	2800      	cmp	r0, #0
 80177cc:	f040 8085 	bne.w	80178da <_scanf_i+0x1c2>
 80177d0:	f10b 0b01 	add.w	fp, fp, #1
 80177d4:	f1bb 0f03 	cmp.w	fp, #3
 80177d8:	d1cb      	bne.n	8017772 <_scanf_i+0x5a>
 80177da:	6863      	ldr	r3, [r4, #4]
 80177dc:	b90b      	cbnz	r3, 80177e2 <_scanf_i+0xca>
 80177de:	230a      	movs	r3, #10
 80177e0:	6063      	str	r3, [r4, #4]
 80177e2:	6863      	ldr	r3, [r4, #4]
 80177e4:	4945      	ldr	r1, [pc, #276]	; (80178fc <_scanf_i+0x1e4>)
 80177e6:	6960      	ldr	r0, [r4, #20]
 80177e8:	1ac9      	subs	r1, r1, r3
 80177ea:	f000 f8a5 	bl	8017938 <__sccl>
 80177ee:	f04f 0b00 	mov.w	fp, #0
 80177f2:	68a3      	ldr	r3, [r4, #8]
 80177f4:	6822      	ldr	r2, [r4, #0]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d03d      	beq.n	8017876 <_scanf_i+0x15e>
 80177fa:	6831      	ldr	r1, [r6, #0]
 80177fc:	6960      	ldr	r0, [r4, #20]
 80177fe:	f891 c000 	ldrb.w	ip, [r1]
 8017802:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017806:	2800      	cmp	r0, #0
 8017808:	d035      	beq.n	8017876 <_scanf_i+0x15e>
 801780a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801780e:	d124      	bne.n	801785a <_scanf_i+0x142>
 8017810:	0510      	lsls	r0, r2, #20
 8017812:	d522      	bpl.n	801785a <_scanf_i+0x142>
 8017814:	f10b 0b01 	add.w	fp, fp, #1
 8017818:	f1b9 0f00 	cmp.w	r9, #0
 801781c:	d003      	beq.n	8017826 <_scanf_i+0x10e>
 801781e:	3301      	adds	r3, #1
 8017820:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8017824:	60a3      	str	r3, [r4, #8]
 8017826:	6873      	ldr	r3, [r6, #4]
 8017828:	3b01      	subs	r3, #1
 801782a:	2b00      	cmp	r3, #0
 801782c:	6073      	str	r3, [r6, #4]
 801782e:	dd1b      	ble.n	8017868 <_scanf_i+0x150>
 8017830:	6833      	ldr	r3, [r6, #0]
 8017832:	3301      	adds	r3, #1
 8017834:	6033      	str	r3, [r6, #0]
 8017836:	68a3      	ldr	r3, [r4, #8]
 8017838:	3b01      	subs	r3, #1
 801783a:	60a3      	str	r3, [r4, #8]
 801783c:	e7d9      	b.n	80177f2 <_scanf_i+0xda>
 801783e:	f1bb 0f02 	cmp.w	fp, #2
 8017842:	d1ae      	bne.n	80177a2 <_scanf_i+0x8a>
 8017844:	6822      	ldr	r2, [r4, #0]
 8017846:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801784a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801784e:	d1bf      	bne.n	80177d0 <_scanf_i+0xb8>
 8017850:	2310      	movs	r3, #16
 8017852:	6063      	str	r3, [r4, #4]
 8017854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017858:	e7a2      	b.n	80177a0 <_scanf_i+0x88>
 801785a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801785e:	6022      	str	r2, [r4, #0]
 8017860:	780b      	ldrb	r3, [r1, #0]
 8017862:	f805 3b01 	strb.w	r3, [r5], #1
 8017866:	e7de      	b.n	8017826 <_scanf_i+0x10e>
 8017868:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801786c:	4631      	mov	r1, r6
 801786e:	4650      	mov	r0, sl
 8017870:	4798      	blx	r3
 8017872:	2800      	cmp	r0, #0
 8017874:	d0df      	beq.n	8017836 <_scanf_i+0x11e>
 8017876:	6823      	ldr	r3, [r4, #0]
 8017878:	05d9      	lsls	r1, r3, #23
 801787a:	d50d      	bpl.n	8017898 <_scanf_i+0x180>
 801787c:	42bd      	cmp	r5, r7
 801787e:	d909      	bls.n	8017894 <_scanf_i+0x17c>
 8017880:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017888:	4632      	mov	r2, r6
 801788a:	4650      	mov	r0, sl
 801788c:	4798      	blx	r3
 801788e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8017892:	464d      	mov	r5, r9
 8017894:	42bd      	cmp	r5, r7
 8017896:	d028      	beq.n	80178ea <_scanf_i+0x1d2>
 8017898:	6822      	ldr	r2, [r4, #0]
 801789a:	f012 0210 	ands.w	r2, r2, #16
 801789e:	d113      	bne.n	80178c8 <_scanf_i+0x1b0>
 80178a0:	702a      	strb	r2, [r5, #0]
 80178a2:	6863      	ldr	r3, [r4, #4]
 80178a4:	9e01      	ldr	r6, [sp, #4]
 80178a6:	4639      	mov	r1, r7
 80178a8:	4650      	mov	r0, sl
 80178aa:	47b0      	blx	r6
 80178ac:	f8d8 3000 	ldr.w	r3, [r8]
 80178b0:	6821      	ldr	r1, [r4, #0]
 80178b2:	1d1a      	adds	r2, r3, #4
 80178b4:	f8c8 2000 	str.w	r2, [r8]
 80178b8:	f011 0f20 	tst.w	r1, #32
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	d00f      	beq.n	80178e0 <_scanf_i+0x1c8>
 80178c0:	6018      	str	r0, [r3, #0]
 80178c2:	68e3      	ldr	r3, [r4, #12]
 80178c4:	3301      	adds	r3, #1
 80178c6:	60e3      	str	r3, [r4, #12]
 80178c8:	1bed      	subs	r5, r5, r7
 80178ca:	44ab      	add	fp, r5
 80178cc:	6925      	ldr	r5, [r4, #16]
 80178ce:	445d      	add	r5, fp
 80178d0:	6125      	str	r5, [r4, #16]
 80178d2:	2000      	movs	r0, #0
 80178d4:	b007      	add	sp, #28
 80178d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178da:	f04f 0b00 	mov.w	fp, #0
 80178de:	e7ca      	b.n	8017876 <_scanf_i+0x15e>
 80178e0:	07ca      	lsls	r2, r1, #31
 80178e2:	bf4c      	ite	mi
 80178e4:	8018      	strhmi	r0, [r3, #0]
 80178e6:	6018      	strpl	r0, [r3, #0]
 80178e8:	e7eb      	b.n	80178c2 <_scanf_i+0x1aa>
 80178ea:	2001      	movs	r0, #1
 80178ec:	e7f2      	b.n	80178d4 <_scanf_i+0x1bc>
 80178ee:	bf00      	nop
 80178f0:	08018038 	.word	0x08018038
 80178f4:	08017ac9 	.word	0x08017ac9
 80178f8:	08014ee1 	.word	0x08014ee1
 80178fc:	08018b65 	.word	0x08018b65

08017900 <_read_r>:
 8017900:	b538      	push	{r3, r4, r5, lr}
 8017902:	4d07      	ldr	r5, [pc, #28]	; (8017920 <_read_r+0x20>)
 8017904:	4604      	mov	r4, r0
 8017906:	4608      	mov	r0, r1
 8017908:	4611      	mov	r1, r2
 801790a:	2200      	movs	r2, #0
 801790c:	602a      	str	r2, [r5, #0]
 801790e:	461a      	mov	r2, r3
 8017910:	f000 f9c6 	bl	8017ca0 <_read>
 8017914:	1c43      	adds	r3, r0, #1
 8017916:	d102      	bne.n	801791e <_read_r+0x1e>
 8017918:	682b      	ldr	r3, [r5, #0]
 801791a:	b103      	cbz	r3, 801791e <_read_r+0x1e>
 801791c:	6023      	str	r3, [r4, #0]
 801791e:	bd38      	pop	{r3, r4, r5, pc}
 8017920:	200208c0 	.word	0x200208c0
 8017924:	00000000 	.word	0x00000000

08017928 <nan>:
 8017928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017930 <nan+0x8>
 801792c:	4770      	bx	lr
 801792e:	bf00      	nop
 8017930:	00000000 	.word	0x00000000
 8017934:	7ff80000 	.word	0x7ff80000

08017938 <__sccl>:
 8017938:	b570      	push	{r4, r5, r6, lr}
 801793a:	780b      	ldrb	r3, [r1, #0]
 801793c:	4604      	mov	r4, r0
 801793e:	2b5e      	cmp	r3, #94	; 0x5e
 8017940:	bf0b      	itete	eq
 8017942:	784b      	ldrbeq	r3, [r1, #1]
 8017944:	1c48      	addne	r0, r1, #1
 8017946:	1c88      	addeq	r0, r1, #2
 8017948:	2200      	movne	r2, #0
 801794a:	bf08      	it	eq
 801794c:	2201      	moveq	r2, #1
 801794e:	1e61      	subs	r1, r4, #1
 8017950:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017954:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017958:	42a9      	cmp	r1, r5
 801795a:	d1fb      	bne.n	8017954 <__sccl+0x1c>
 801795c:	b90b      	cbnz	r3, 8017962 <__sccl+0x2a>
 801795e:	3801      	subs	r0, #1
 8017960:	bd70      	pop	{r4, r5, r6, pc}
 8017962:	f082 0101 	eor.w	r1, r2, #1
 8017966:	54e1      	strb	r1, [r4, r3]
 8017968:	1c42      	adds	r2, r0, #1
 801796a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801796e:	2d2d      	cmp	r5, #45	; 0x2d
 8017970:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8017974:	4610      	mov	r0, r2
 8017976:	d006      	beq.n	8017986 <__sccl+0x4e>
 8017978:	2d5d      	cmp	r5, #93	; 0x5d
 801797a:	d0f1      	beq.n	8017960 <__sccl+0x28>
 801797c:	b90d      	cbnz	r5, 8017982 <__sccl+0x4a>
 801797e:	4630      	mov	r0, r6
 8017980:	e7ee      	b.n	8017960 <__sccl+0x28>
 8017982:	462b      	mov	r3, r5
 8017984:	e7ef      	b.n	8017966 <__sccl+0x2e>
 8017986:	7816      	ldrb	r6, [r2, #0]
 8017988:	2e5d      	cmp	r6, #93	; 0x5d
 801798a:	d0fa      	beq.n	8017982 <__sccl+0x4a>
 801798c:	42b3      	cmp	r3, r6
 801798e:	dcf8      	bgt.n	8017982 <__sccl+0x4a>
 8017990:	4618      	mov	r0, r3
 8017992:	3001      	adds	r0, #1
 8017994:	4286      	cmp	r6, r0
 8017996:	5421      	strb	r1, [r4, r0]
 8017998:	dcfb      	bgt.n	8017992 <__sccl+0x5a>
 801799a:	43d8      	mvns	r0, r3
 801799c:	4430      	add	r0, r6
 801799e:	1c5d      	adds	r5, r3, #1
 80179a0:	42b3      	cmp	r3, r6
 80179a2:	bfa8      	it	ge
 80179a4:	2000      	movge	r0, #0
 80179a6:	182b      	adds	r3, r5, r0
 80179a8:	3202      	adds	r2, #2
 80179aa:	e7de      	b.n	801796a <__sccl+0x32>

080179ac <strncmp>:
 80179ac:	b510      	push	{r4, lr}
 80179ae:	b16a      	cbz	r2, 80179cc <strncmp+0x20>
 80179b0:	3901      	subs	r1, #1
 80179b2:	1884      	adds	r4, r0, r2
 80179b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80179b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80179bc:	4293      	cmp	r3, r2
 80179be:	d103      	bne.n	80179c8 <strncmp+0x1c>
 80179c0:	42a0      	cmp	r0, r4
 80179c2:	d001      	beq.n	80179c8 <strncmp+0x1c>
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d1f5      	bne.n	80179b4 <strncmp+0x8>
 80179c8:	1a98      	subs	r0, r3, r2
 80179ca:	bd10      	pop	{r4, pc}
 80179cc:	4610      	mov	r0, r2
 80179ce:	e7fc      	b.n	80179ca <strncmp+0x1e>

080179d0 <_strtoul_l.isra.0>:
 80179d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179d4:	4e3b      	ldr	r6, [pc, #236]	; (8017ac4 <_strtoul_l.isra.0+0xf4>)
 80179d6:	4686      	mov	lr, r0
 80179d8:	468c      	mov	ip, r1
 80179da:	4660      	mov	r0, ip
 80179dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80179e0:	5da5      	ldrb	r5, [r4, r6]
 80179e2:	f015 0508 	ands.w	r5, r5, #8
 80179e6:	d1f8      	bne.n	80179da <_strtoul_l.isra.0+0xa>
 80179e8:	2c2d      	cmp	r4, #45	; 0x2d
 80179ea:	d134      	bne.n	8017a56 <_strtoul_l.isra.0+0x86>
 80179ec:	f89c 4000 	ldrb.w	r4, [ip]
 80179f0:	f04f 0801 	mov.w	r8, #1
 80179f4:	f100 0c02 	add.w	ip, r0, #2
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d05e      	beq.n	8017aba <_strtoul_l.isra.0+0xea>
 80179fc:	2b10      	cmp	r3, #16
 80179fe:	d10c      	bne.n	8017a1a <_strtoul_l.isra.0+0x4a>
 8017a00:	2c30      	cmp	r4, #48	; 0x30
 8017a02:	d10a      	bne.n	8017a1a <_strtoul_l.isra.0+0x4a>
 8017a04:	f89c 0000 	ldrb.w	r0, [ip]
 8017a08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017a0c:	2858      	cmp	r0, #88	; 0x58
 8017a0e:	d14f      	bne.n	8017ab0 <_strtoul_l.isra.0+0xe0>
 8017a10:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8017a14:	2310      	movs	r3, #16
 8017a16:	f10c 0c02 	add.w	ip, ip, #2
 8017a1a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017a1e:	2500      	movs	r5, #0
 8017a20:	fbb7 f7f3 	udiv	r7, r7, r3
 8017a24:	fb03 f907 	mul.w	r9, r3, r7
 8017a28:	ea6f 0909 	mvn.w	r9, r9
 8017a2c:	4628      	mov	r0, r5
 8017a2e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8017a32:	2e09      	cmp	r6, #9
 8017a34:	d818      	bhi.n	8017a68 <_strtoul_l.isra.0+0x98>
 8017a36:	4634      	mov	r4, r6
 8017a38:	42a3      	cmp	r3, r4
 8017a3a:	dd24      	ble.n	8017a86 <_strtoul_l.isra.0+0xb6>
 8017a3c:	2d00      	cmp	r5, #0
 8017a3e:	db1f      	blt.n	8017a80 <_strtoul_l.isra.0+0xb0>
 8017a40:	4287      	cmp	r7, r0
 8017a42:	d31d      	bcc.n	8017a80 <_strtoul_l.isra.0+0xb0>
 8017a44:	d101      	bne.n	8017a4a <_strtoul_l.isra.0+0x7a>
 8017a46:	45a1      	cmp	r9, r4
 8017a48:	db1a      	blt.n	8017a80 <_strtoul_l.isra.0+0xb0>
 8017a4a:	fb00 4003 	mla	r0, r0, r3, r4
 8017a4e:	2501      	movs	r5, #1
 8017a50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017a54:	e7eb      	b.n	8017a2e <_strtoul_l.isra.0+0x5e>
 8017a56:	2c2b      	cmp	r4, #43	; 0x2b
 8017a58:	bf08      	it	eq
 8017a5a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8017a5e:	46a8      	mov	r8, r5
 8017a60:	bf08      	it	eq
 8017a62:	f100 0c02 	addeq.w	ip, r0, #2
 8017a66:	e7c7      	b.n	80179f8 <_strtoul_l.isra.0+0x28>
 8017a68:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8017a6c:	2e19      	cmp	r6, #25
 8017a6e:	d801      	bhi.n	8017a74 <_strtoul_l.isra.0+0xa4>
 8017a70:	3c37      	subs	r4, #55	; 0x37
 8017a72:	e7e1      	b.n	8017a38 <_strtoul_l.isra.0+0x68>
 8017a74:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8017a78:	2e19      	cmp	r6, #25
 8017a7a:	d804      	bhi.n	8017a86 <_strtoul_l.isra.0+0xb6>
 8017a7c:	3c57      	subs	r4, #87	; 0x57
 8017a7e:	e7db      	b.n	8017a38 <_strtoul_l.isra.0+0x68>
 8017a80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017a84:	e7e4      	b.n	8017a50 <_strtoul_l.isra.0+0x80>
 8017a86:	2d00      	cmp	r5, #0
 8017a88:	da07      	bge.n	8017a9a <_strtoul_l.isra.0+0xca>
 8017a8a:	2322      	movs	r3, #34	; 0x22
 8017a8c:	f8ce 3000 	str.w	r3, [lr]
 8017a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a94:	b942      	cbnz	r2, 8017aa8 <_strtoul_l.isra.0+0xd8>
 8017a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a9a:	f1b8 0f00 	cmp.w	r8, #0
 8017a9e:	d000      	beq.n	8017aa2 <_strtoul_l.isra.0+0xd2>
 8017aa0:	4240      	negs	r0, r0
 8017aa2:	2a00      	cmp	r2, #0
 8017aa4:	d0f7      	beq.n	8017a96 <_strtoul_l.isra.0+0xc6>
 8017aa6:	b10d      	cbz	r5, 8017aac <_strtoul_l.isra.0+0xdc>
 8017aa8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8017aac:	6011      	str	r1, [r2, #0]
 8017aae:	e7f2      	b.n	8017a96 <_strtoul_l.isra.0+0xc6>
 8017ab0:	2430      	movs	r4, #48	; 0x30
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d1b1      	bne.n	8017a1a <_strtoul_l.isra.0+0x4a>
 8017ab6:	2308      	movs	r3, #8
 8017ab8:	e7af      	b.n	8017a1a <_strtoul_l.isra.0+0x4a>
 8017aba:	2c30      	cmp	r4, #48	; 0x30
 8017abc:	d0a2      	beq.n	8017a04 <_strtoul_l.isra.0+0x34>
 8017abe:	230a      	movs	r3, #10
 8017ac0:	e7ab      	b.n	8017a1a <_strtoul_l.isra.0+0x4a>
 8017ac2:	bf00      	nop
 8017ac4:	080187d9 	.word	0x080187d9

08017ac8 <_strtoul_r>:
 8017ac8:	f7ff bf82 	b.w	80179d0 <_strtoul_l.isra.0>

08017acc <__submore>:
 8017acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ad0:	460c      	mov	r4, r1
 8017ad2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ad8:	4299      	cmp	r1, r3
 8017ada:	d11d      	bne.n	8017b18 <__submore+0x4c>
 8017adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017ae0:	f7fa ff52 	bl	8012988 <_malloc_r>
 8017ae4:	b918      	cbnz	r0, 8017aee <__submore+0x22>
 8017ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017af2:	63a3      	str	r3, [r4, #56]	; 0x38
 8017af4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017af8:	6360      	str	r0, [r4, #52]	; 0x34
 8017afa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017afe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017b02:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017b06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017b0a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017b0e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017b12:	6020      	str	r0, [r4, #0]
 8017b14:	2000      	movs	r0, #0
 8017b16:	e7e8      	b.n	8017aea <__submore+0x1e>
 8017b18:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017b1a:	0077      	lsls	r7, r6, #1
 8017b1c:	463a      	mov	r2, r7
 8017b1e:	f7ff fa50 	bl	8016fc2 <_realloc_r>
 8017b22:	4605      	mov	r5, r0
 8017b24:	2800      	cmp	r0, #0
 8017b26:	d0de      	beq.n	8017ae6 <__submore+0x1a>
 8017b28:	eb00 0806 	add.w	r8, r0, r6
 8017b2c:	4601      	mov	r1, r0
 8017b2e:	4632      	mov	r2, r6
 8017b30:	4640      	mov	r0, r8
 8017b32:	f7fa feb3 	bl	801289c <memcpy>
 8017b36:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017b3a:	f8c4 8000 	str.w	r8, [r4]
 8017b3e:	e7e9      	b.n	8017b14 <__submore+0x48>

08017b40 <__ascii_wctomb>:
 8017b40:	b149      	cbz	r1, 8017b56 <__ascii_wctomb+0x16>
 8017b42:	2aff      	cmp	r2, #255	; 0xff
 8017b44:	bf85      	ittet	hi
 8017b46:	238a      	movhi	r3, #138	; 0x8a
 8017b48:	6003      	strhi	r3, [r0, #0]
 8017b4a:	700a      	strbls	r2, [r1, #0]
 8017b4c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017b50:	bf98      	it	ls
 8017b52:	2001      	movls	r0, #1
 8017b54:	4770      	bx	lr
 8017b56:	4608      	mov	r0, r1
 8017b58:	4770      	bx	lr
	...

08017b5c <__assert_func>:
 8017b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b5e:	4614      	mov	r4, r2
 8017b60:	461a      	mov	r2, r3
 8017b62:	4b09      	ldr	r3, [pc, #36]	; (8017b88 <__assert_func+0x2c>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	4605      	mov	r5, r0
 8017b68:	68d8      	ldr	r0, [r3, #12]
 8017b6a:	b14c      	cbz	r4, 8017b80 <__assert_func+0x24>
 8017b6c:	4b07      	ldr	r3, [pc, #28]	; (8017b8c <__assert_func+0x30>)
 8017b6e:	9100      	str	r1, [sp, #0]
 8017b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017b74:	4906      	ldr	r1, [pc, #24]	; (8017b90 <__assert_func+0x34>)
 8017b76:	462b      	mov	r3, r5
 8017b78:	f7fa fdc2 	bl	8012700 <fiprintf>
 8017b7c:	f000 f814 	bl	8017ba8 <abort>
 8017b80:	4b04      	ldr	r3, [pc, #16]	; (8017b94 <__assert_func+0x38>)
 8017b82:	461c      	mov	r4, r3
 8017b84:	e7f3      	b.n	8017b6e <__assert_func+0x12>
 8017b86:	bf00      	nop
 8017b88:	2000006c 	.word	0x2000006c
 8017b8c:	08018b67 	.word	0x08018b67
 8017b90:	08018b74 	.word	0x08018b74
 8017b94:	08018ba2 	.word	0x08018ba2

08017b98 <_malloc_usable_size_r>:
 8017b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b9c:	1f18      	subs	r0, r3, #4
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	bfbc      	itt	lt
 8017ba2:	580b      	ldrlt	r3, [r1, r0]
 8017ba4:	18c0      	addlt	r0, r0, r3
 8017ba6:	4770      	bx	lr

08017ba8 <abort>:
 8017ba8:	b508      	push	{r3, lr}
 8017baa:	2006      	movs	r0, #6
 8017bac:	f000 f82c 	bl	8017c08 <raise>
 8017bb0:	2001      	movs	r0, #1
 8017bb2:	f000 f88b 	bl	8017ccc <_exit>

08017bb6 <_raise_r>:
 8017bb6:	291f      	cmp	r1, #31
 8017bb8:	b538      	push	{r3, r4, r5, lr}
 8017bba:	4604      	mov	r4, r0
 8017bbc:	460d      	mov	r5, r1
 8017bbe:	d904      	bls.n	8017bca <_raise_r+0x14>
 8017bc0:	2316      	movs	r3, #22
 8017bc2:	6003      	str	r3, [r0, #0]
 8017bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017bc8:	bd38      	pop	{r3, r4, r5, pc}
 8017bca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017bcc:	b112      	cbz	r2, 8017bd4 <_raise_r+0x1e>
 8017bce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017bd2:	b94b      	cbnz	r3, 8017be8 <_raise_r+0x32>
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	f000 f831 	bl	8017c3c <_getpid_r>
 8017bda:	462a      	mov	r2, r5
 8017bdc:	4601      	mov	r1, r0
 8017bde:	4620      	mov	r0, r4
 8017be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017be4:	f000 b818 	b.w	8017c18 <_kill_r>
 8017be8:	2b01      	cmp	r3, #1
 8017bea:	d00a      	beq.n	8017c02 <_raise_r+0x4c>
 8017bec:	1c59      	adds	r1, r3, #1
 8017bee:	d103      	bne.n	8017bf8 <_raise_r+0x42>
 8017bf0:	2316      	movs	r3, #22
 8017bf2:	6003      	str	r3, [r0, #0]
 8017bf4:	2001      	movs	r0, #1
 8017bf6:	e7e7      	b.n	8017bc8 <_raise_r+0x12>
 8017bf8:	2400      	movs	r4, #0
 8017bfa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017bfe:	4628      	mov	r0, r5
 8017c00:	4798      	blx	r3
 8017c02:	2000      	movs	r0, #0
 8017c04:	e7e0      	b.n	8017bc8 <_raise_r+0x12>
	...

08017c08 <raise>:
 8017c08:	4b02      	ldr	r3, [pc, #8]	; (8017c14 <raise+0xc>)
 8017c0a:	4601      	mov	r1, r0
 8017c0c:	6818      	ldr	r0, [r3, #0]
 8017c0e:	f7ff bfd2 	b.w	8017bb6 <_raise_r>
 8017c12:	bf00      	nop
 8017c14:	2000006c 	.word	0x2000006c

08017c18 <_kill_r>:
 8017c18:	b538      	push	{r3, r4, r5, lr}
 8017c1a:	4d07      	ldr	r5, [pc, #28]	; (8017c38 <_kill_r+0x20>)
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	4604      	mov	r4, r0
 8017c20:	4608      	mov	r0, r1
 8017c22:	4611      	mov	r1, r2
 8017c24:	602b      	str	r3, [r5, #0]
 8017c26:	f000 f82b 	bl	8017c80 <_kill>
 8017c2a:	1c43      	adds	r3, r0, #1
 8017c2c:	d102      	bne.n	8017c34 <_kill_r+0x1c>
 8017c2e:	682b      	ldr	r3, [r5, #0]
 8017c30:	b103      	cbz	r3, 8017c34 <_kill_r+0x1c>
 8017c32:	6023      	str	r3, [r4, #0]
 8017c34:	bd38      	pop	{r3, r4, r5, pc}
 8017c36:	bf00      	nop
 8017c38:	200208c0 	.word	0x200208c0

08017c3c <_getpid_r>:
 8017c3c:	f000 b810 	b.w	8017c60 <_getpid>

08017c40 <_close>:
 8017c40:	4b02      	ldr	r3, [pc, #8]	; (8017c4c <_close+0xc>)
 8017c42:	2258      	movs	r2, #88	; 0x58
 8017c44:	601a      	str	r2, [r3, #0]
 8017c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c4a:	4770      	bx	lr
 8017c4c:	200208c0 	.word	0x200208c0

08017c50 <_fstat>:
 8017c50:	4b02      	ldr	r3, [pc, #8]	; (8017c5c <_fstat+0xc>)
 8017c52:	2258      	movs	r2, #88	; 0x58
 8017c54:	601a      	str	r2, [r3, #0]
 8017c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c5a:	4770      	bx	lr
 8017c5c:	200208c0 	.word	0x200208c0

08017c60 <_getpid>:
 8017c60:	4b02      	ldr	r3, [pc, #8]	; (8017c6c <_getpid+0xc>)
 8017c62:	2258      	movs	r2, #88	; 0x58
 8017c64:	601a      	str	r2, [r3, #0]
 8017c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c6a:	4770      	bx	lr
 8017c6c:	200208c0 	.word	0x200208c0

08017c70 <_isatty>:
 8017c70:	4b02      	ldr	r3, [pc, #8]	; (8017c7c <_isatty+0xc>)
 8017c72:	2258      	movs	r2, #88	; 0x58
 8017c74:	601a      	str	r2, [r3, #0]
 8017c76:	2000      	movs	r0, #0
 8017c78:	4770      	bx	lr
 8017c7a:	bf00      	nop
 8017c7c:	200208c0 	.word	0x200208c0

08017c80 <_kill>:
 8017c80:	4b02      	ldr	r3, [pc, #8]	; (8017c8c <_kill+0xc>)
 8017c82:	2258      	movs	r2, #88	; 0x58
 8017c84:	601a      	str	r2, [r3, #0]
 8017c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c8a:	4770      	bx	lr
 8017c8c:	200208c0 	.word	0x200208c0

08017c90 <_lseek>:
 8017c90:	4b02      	ldr	r3, [pc, #8]	; (8017c9c <_lseek+0xc>)
 8017c92:	2258      	movs	r2, #88	; 0x58
 8017c94:	601a      	str	r2, [r3, #0]
 8017c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c9a:	4770      	bx	lr
 8017c9c:	200208c0 	.word	0x200208c0

08017ca0 <_read>:
 8017ca0:	4b02      	ldr	r3, [pc, #8]	; (8017cac <_read+0xc>)
 8017ca2:	2258      	movs	r2, #88	; 0x58
 8017ca4:	601a      	str	r2, [r3, #0]
 8017ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017caa:	4770      	bx	lr
 8017cac:	200208c0 	.word	0x200208c0

08017cb0 <_sbrk>:
 8017cb0:	4b04      	ldr	r3, [pc, #16]	; (8017cc4 <_sbrk+0x14>)
 8017cb2:	6819      	ldr	r1, [r3, #0]
 8017cb4:	4602      	mov	r2, r0
 8017cb6:	b909      	cbnz	r1, 8017cbc <_sbrk+0xc>
 8017cb8:	4903      	ldr	r1, [pc, #12]	; (8017cc8 <_sbrk+0x18>)
 8017cba:	6019      	str	r1, [r3, #0]
 8017cbc:	6818      	ldr	r0, [r3, #0]
 8017cbe:	4402      	add	r2, r0
 8017cc0:	601a      	str	r2, [r3, #0]
 8017cc2:	4770      	bx	lr
 8017cc4:	20007c70 	.word	0x20007c70
 8017cc8:	200208c8 	.word	0x200208c8

08017ccc <_exit>:
 8017ccc:	e7fe      	b.n	8017ccc <_exit>
	...

08017cd0 <_init>:
 8017cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cd2:	bf00      	nop
 8017cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cd6:	bc08      	pop	{r3}
 8017cd8:	469e      	mov	lr, r3
 8017cda:	4770      	bx	lr

08017cdc <_fini>:
 8017cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cde:	bf00      	nop
 8017ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ce2:	bc08      	pop	{r3}
 8017ce4:	469e      	mov	lr, r3
 8017ce6:	4770      	bx	lr
